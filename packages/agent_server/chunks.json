[
    {
      "id": "function_declaration@26-28",
      "type": "function_declaration",
      "name": "wait",
      "text": "async function wait(delay: number) {\n  await new Promise((resolve) => setTimeout(resolve, delay))\n}",
      "startLine": 26,
      "endLine": 28,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/config/hearthClient.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@42-44",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n  mongoose.disconnect()\n}",
      "startLine": 42,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/config/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-48",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n  return connect()\n}",
      "startLine": 46,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/config/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-101",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  const server = new Hapi.Server({\n    host: HOST,\n    port: PORT,\n    routes: {\n      cors: { origin: ['*'] },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n\n  await server.register(getPlugins())\n\n  server.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:metrics-user'\n    },\n    validate: () => ({\n      isValid: true\n    })\n  })\n\n  server.auth.default('jwt')\n\n  const routes = getRoutes()\n  server.route(routes)\n\n  server.ext({\n    type: 'onRequest',\n    method(request: Hapi.Request & { sentryScope?: any }, h) {\n      if (request.payload) {\n        request.sentryScope?.setExtra('payload', request.payload)\n      }\n      return h.continue\n    }\n  })\n\n  async function start() {\n    return influx\n      .getDatabaseNames()\n      .then((names: any) => {\n        if (!names.includes(INFLUX_DB)) {\n          return influx.createDatabase(INFLUX_DB)\n        }\n      })\n      .then(async () => {\n        server.log('info', `InfluxDB started on ${INFLUX_HOST}:${INFLUX_PORT}`)\n        await server.start()\n        await database.start()\n        await mongoDirect.start()\n        server.log('info', `Metrics server started on ${HOST}:${PORT}`)\n      })\n      .catch((err: Error) => {\n        server.log('info', `Error creating Influx database! ${err.stack}`)\n        throw err\n      })\n  }\n\n  async function stop() {\n    await server.stop()\n    await database.stop()\n    await mongoDirect.stop()\n    server.log('info', 'Metrics server stopped')\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 33,
      "endLine": 101,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@64-69",
      "type": "method_definition",
      "name": "method",
      "text": "method(request: Hapi.Request & { sentryScope?: any }, h) {\n      if (request.payload) {\n        request.sentryScope?.setExtra('payload', request.payload)\n      }\n      return h.continue\n    }",
      "startLine": 64,
      "endLine": 69,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@72-91",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    return influx\n      .getDatabaseNames()\n      .then((names: any) => {\n        if (!names.includes(INFLUX_DB)) {\n          return influx.createDatabase(INFLUX_DB)\n        }\n      })\n      .then(async () => {\n        server.log('info', `InfluxDB started on ${INFLUX_HOST}:${INFLUX_PORT}`)\n        await server.start()\n        await database.start()\n        await mongoDirect.start()\n        server.log('info', `Metrics server started on ${HOST}:${PORT}`)\n      })\n      .catch((err: Error) => {\n        server.log('info', `Error creating Influx database! ${err.stack}`)\n        throw err\n      })\n  }",
      "startLine": 72,
      "endLine": 91,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@93-98",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    await database.stop()\n    await mongoDirect.stop()\n    server.log('info', 'Metrics server stopped')\n  }",
      "startLine": 93,
      "endLine": 98,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-37",
      "type": "function_declaration",
      "name": "totalCertificationsHandler",
      "text": "async function totalCertificationsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = request.query[LOCATION_ID]\n    ? (`Location/${request.query[LOCATION_ID]}` as const)\n    : undefined\n\n  if (locationId) {\n    return getTotalCertificationsByLocation(timeStart, timeEnd, locationId)\n  } else {\n    return getTotalCertifications(timeStart, timeEnd)\n  }\n}",
      "startLine": 22,
      "endLine": 37,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/certifications/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-39",
      "type": "function_declaration",
      "name": "totalPaymentsHandler",
      "text": "async function totalPaymentsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = request.query[LOCATION_ID]\n    ? (`Location/${request.query[LOCATION_ID]}` as const)\n    : undefined\n  const event = request.query[EVENT]\n\n  if (locationId) {\n    return getTotalPaymentsByLocation(timeStart, timeEnd, locationId, event)\n  } else {\n    return getTotalPayments(timeStart, timeEnd, event)\n  }\n}",
      "startLine": 23,
      "endLine": 39,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/payments/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-26",
      "type": "function_declaration",
      "name": "getTotalPayments",
      "text": "async function getTotalPayments(\n  timeFrom: string,\n  timeTo: string,\n  eventType: EVENT_TYPE\n) {\n  const totalMetrics = await query<\n    Array<{ total: number; paymentType: string }",
      "startLine": 20,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/payments/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-84",
      "type": "function_declaration",
      "name": "getTotalPaymentsByLocation",
      "text": "async function getTotalPaymentsByLocation(\n  timeFrom: string,\n  timeTo: string,\n  locationId: ResourceIdentifier<Location>,\n  eventType: EVENT_TYPE\n) {\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n\n  const batchQuery = async (locationIds: string[]) => {\n    const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n      locationIds,\n      'officeLocation'\n    )\n\n    try {\n      return await query<Array<{ total: number; paymentType: string }>>(\n        `SELECT SUM(total) AS total\n          FROM payment\n        WHERE eventType = $eventType\n          AND time > $timeFrom\n          AND time <= $timeTo\n          AND (${officeLocationInChildren})\n        GROUP BY paymentType`,\n        {\n          placeholders: {\n            timeFrom,\n            timeTo,\n            eventType,\n            ...locationPlaceholders\n          }\n        }\n      )\n    } catch (error) {\n      logger.error(\n        `Error fetching total payments by location: ${error.message}`\n      )\n      throw error\n    }\n  }",
      "startLine": 46,
      "endLine": 84,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/payments/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-37",
      "type": "function_declaration",
      "name": "getAdvancedSearchByClient",
      "text": "async function getAdvancedSearchByClient(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const clientId = getClientIdFromToken(request.headers.authorization)\n    const totalSearchResult = await fetchTotalSearchRequestByClientId(clientId)\n    const total = totalSearchResult.length > 0 ? totalSearchResult[0].count : 0\n    return h.response({ total }).code(200)\n  } catch (err) {\n    return internal(err)\n  }\n}",
      "startLine": 25,
      "endLine": 37,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/searchMetrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@39-57",
      "type": "function_declaration",
      "name": "postAdvancedSearchByClient",
      "text": "async function postAdvancedSearchByClient(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const clientId = getClientIdFromToken(request.headers.authorization)\n    const ipAddress = request.headers['x-real-ip'] || request.info.remoteAddress\n    const point: IPoints = {\n      fields: { clientId },\n      measurement: 'search_requests',\n      tags: { ipAddress },\n      timestamp: undefined\n    }\n    await writePoints([point])\n    return h.response({}).code(200)\n  } catch (err) {\n    return internal(err)\n  }\n}",
      "startLine": 39,
      "endLine": 57,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/searchMetrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-33",
      "type": "function_declaration",
      "name": "locationStatisticsHandler",
      "text": "async function locationStatisticsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const locationId = request.query[LOCATION_ID]\n    ? 'Location/' + request.query[LOCATION_ID]\n    : undefined\n  const populationYear = request.query[POPULATION_YEAR]\n  const authHeader: IAuthHeader = {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  }\n\n  return getLocationStatistics(locationId, populationYear, authHeader)\n}",
      "startLine": 19,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/locationStatistics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-18",
      "type": "function_declaration",
      "name": "getClientIdFromToken",
      "text": "function getClientIdFromToken(token: string) {\n  const payload = getTokenPayload(token)\n  return payload.sub\n}",
      "startLine": 15,
      "endLine": 18,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/searchMetrics/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-31",
      "type": "function_declaration",
      "name": "fetchTotalSearchRequestByClientId",
      "text": "async function fetchTotalSearchRequestByClientId(clientId: string) {\n  const currentDate = format(new Date(), 'yyyy-MM-dd')\n  return await query(\n    `SELECT COUNT(clientId) FROM search_requests WHERE clientId = $clientId AND time >= $currentDate`,\n    {\n      placeholders: {\n        clientId,\n        currentDate\n      }\n    }\n  )\n}",
      "startLine": 20,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/searchMetrics/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-25",
      "type": "function_declaration",
      "name": "getMeasurementNames",
      "text": "async function getMeasurementNames() {\n  const points = await query<Array<{ key: string }>>('SHOW SERIES')\n  return points.map(({ key }) => key.split(',')[0])\n}",
      "startLine": 22,
      "endLine": 25,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/export/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-40",
      "type": "function_declaration",
      "name": "exportHandler",
      "text": "async function exportHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const measurements = await getMeasurementNames()\n\n  const csvStreams = []\n  for (const measurement of measurements) {\n    csvStreams.push([measurement, await getCSV(measurement)])\n  }\n\n  // Getting CSV contents as zip\n  return archiveStreams(csvStreams)\n}",
      "startLine": 27,
      "endLine": 40,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/export/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@42-173",
      "type": "function_declaration",
      "name": "monthlyExportHandler",
      "text": "async function monthlyExportHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const event =\n    request.query[EVENT].toUpperCase() === 'BIRTH' ? 'Birth' : 'Death'\n  const auth = request.auth as Hapi.RequestAuth & {\n    token: string\n  }\n\n  const monthlyMetrics = await metricsHandler(request, h)\n\n  const EXPECTED_BIRTH_REGISTRATION_IN_DAYS = await getRegistrationTargetDays(\n    event,\n    auth.token\n  )\n\n  const csvStreams = []\n  // populating csv for gender based registration data\n  if (monthlyMetrics.genderBasisMetrics) {\n    const stream = []\n    for (const genderBaseData of monthlyMetrics.genderBasisMetrics) {\n      const loc = await fetchLocation(genderBaseData.location, {\n        Authorization: `Bearer ${auth.token}`\n      })\n      stream.push({\n        Location: loc.name,\n        'Male Under 18': `${genderBaseData.maleUnder18} (${getPercentage(\n          genderBaseData.maleUnder18,\n          genderBaseData.total\n        )}%)`,\n        'Female Under 18': `${genderBaseData.femaleUnder18} (${getPercentage(\n          genderBaseData.femaleUnder18,\n          genderBaseData.total\n        )}%)`,\n        'Male Over 18': `${genderBaseData.maleOver18} (${getPercentage(\n          genderBaseData.maleOver18,\n          genderBaseData.total\n        )}%)`,\n        'Female Over 18': `${genderBaseData.femaleOver18} (${getPercentage(\n          genderBaseData.femaleOver18,\n          genderBaseData.total\n        )}%)`,\n        Total: genderBaseData.total\n      })\n    }\n    csvStreams.push([\n      `${event} Registered`,\n      stringify(stream, { header: true })\n    ])\n  }\n  // populating csv for time frame based registration data\n  if (monthlyMetrics.timeFrames) {\n    const stream = []\n    for (const timeFrameData of monthlyMetrics.timeFrames) {\n      const loc = await fetchLocation(timeFrameData.locationId, {\n        Authorization: `Bearer ${auth.token}`\n      })\n      stream.push({\n        Location: loc.name,\n        [`Within ${EXPECTED_BIRTH_REGISTRATION_IN_DAYS} days`]: `${\n          timeFrameData.regWithinTargetd\n        } (${getPercentage(\n          timeFrameData.regWithinTargetd,\n          timeFrameData.total\n        )}%)`,\n        [`${EXPECTED_BIRTH_REGISTRATION_IN_DAYS} days - 1 year`]: `${\n          timeFrameData.regWithinTargetdTo1yr\n        } (${getPercentage(\n          timeFrameData.regWithinTargetdTo1yr,\n          timeFrameData.total\n        )}%)`,\n        '1 year to 5 years': `${\n          timeFrameData.regWithin1yrTo5yr\n        } (${getPercentage(\n          timeFrameData.regWithin1yrTo5yr,\n          timeFrameData.total\n        )}%)`,\n        'Over 5 years': `${timeFrameData.regOver5yr} (${getPercentage(\n          timeFrameData.regOver5yr,\n          timeFrameData.total\n        )}%)`,\n        Total: timeFrameData.total\n      })\n    }\n    csvStreams.push([\n      `${event} registered by time period`,\n      stringify(stream, { header: true })\n    ])\n  }\n  // populating csv for 45 days based estimated data\n  if (monthlyMetrics.estimatedTargetDayMetrics) {\n    const stream = []\n    for (const estimatedTargetDayData of monthlyMetrics.estimatedTargetDayMetrics) {\n      const loc = await fetchLocation(estimatedTargetDayData.locationId, {\n        Authorization: `Bearer ${auth.token}`\n      })\n      stream.push({\n        Location: loc.name,\n        'Estimated no. of registrations':\n          estimatedTargetDayData.estimatedRegistration,\n        [`Total registered in ${EXPECTED_BIRTH_REGISTRATION_IN_DAYS} days`]:\n          estimatedTargetDayData.registrationInTargetDay,\n        'Percentage of estimate': `${estimatedTargetDayData.estimationPercentage}%`\n      })\n    }\n    csvStreams.push([\n      `Estimated vs total registered in ${EXPECTED_BIRTH_REGISTRATION_IN_DAYS} days`,\n      stringify(stream, { header: true })\n    ])\n  }\n  // populating csv for registration payment data\n  if (monthlyMetrics.payments) {\n    const stream = []\n    for (const paymentData of monthlyMetrics.payments) {\n      const loc = await fetchLocation(paymentData.locationId, {\n        Authorization: `Bearer ${auth.token}`\n      })\n      stream.push({\n        Location: loc.name,\n        Total: paymentData.total\n      })\n    }\n    csvStreams.push([\n      `Payment collected for ${event.toLowerCase()} certificates`,\n      stringify(stream, { header: true })\n    ])\n  }\n\n  // Getting CSV contents as zip\n  return archiveStreams(csvStreams)\n}",
      "startLine": 42,
      "endLine": 173,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/export/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@175-186",
      "type": "function_declaration",
      "name": "archiveStreams",
      "text": "function archiveStreams(csvStreams: any[]) {\n  const archive = archiver('zip', {\n    // Sets the compression level.\n    zlib: { level: 9 }\n  })\n  csvStreams.forEach(([name, stream]) => {\n    archive.append(stream as any, { name: `${name}.csv` })\n  })\n  archive.finalize()\n\n  return archive\n}",
      "startLine": 175,
      "endLine": 186,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/export/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@188-190",
      "type": "function_declaration",
      "name": "getPercentage",
      "text": "function getPercentage(value: number, total: number) {\n  return value === 0 || total === 0 ? 0 : Math.round((value / total) * 100)\n}",
      "startLine": 188,
      "endLine": 190,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/export/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@429-532",
      "type": "function_declaration",
      "name": "fetchKeyFigures",
      "text": "async function fetchKeyFigures(\n  timeStart: string,\n  timeEnd: string,\n  location: Location,\n  authHeader: IAuthHeader\n) {\n  const estimatedFigureForTargetDays = await fetchEstimateByLocation(\n    location,\n    EVENT_TYPE.BIRTH,\n    authHeader,\n    timeStart,\n    timeEnd\n  )\n\n  const keyFigures: IBirthKeyFigures[] = []\n  const queryLocationId =\n    `Location/${estimatedFigureForTargetDays.locationId}` as `Location/${UUID}`\n  const locationIds = await fetchLocationChildrenIds(\n    queryLocationId,\n    'CRVS_OFFICE'\n  )\n  const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n    locationIds,\n    'officeLocation'\n  )\n\n  const EXPECTED_BIRTH_REGISTRATION_IN_DAYS = await getRegistrationTargetDays(\n    EVENT_TYPE.BIRTH,\n    authHeader.Authorization\n  )\n\n  /* Populating < 45D data */\n  const withinTargetDaysData: IGroupedByGender[] = await query(\n    `SELECT COUNT(ageInDays) AS total\n      FROM birth_registration\n    WHERE time >= ${timeStart}\n      AND time <= ${timeEnd}\n      AND (${officeLocationInChildren})\n      AND ageInDays <= ${EXPECTED_BIRTH_REGISTRATION_IN_DAYS}\n    GROUP BY gender`,\n    {\n      placeholders: {\n        ...locationPlaceholders\n      }\n    }\n  )\n  const WITHIN_TARGET_DAYS = `DAYS_0_TO_${EXPECTED_BIRTH_REGISTRATION_IN_DAYS}`\n  const WITHIN_TARGET_DAYS_TO_1_YEAR = `DAYS_${\n    EXPECTED_BIRTH_REGISTRATION_IN_DAYS + 1\n  }_TO_365`\n  keyFigures.push(\n    populateBirthKeyFigurePoint(\n      WITHIN_TARGET_DAYS,\n      withinTargetDaysData,\n      estimatedFigureForTargetDays.totalEstimation\n    )\n  )\n  /* Populating > 45D and < 365D data */\n  const estimatedFigureFor1Year = await fetchEstimateByLocation(\n    location,\n    EVENT_TYPE.BIRTH,\n    authHeader,\n    timeStart,\n    timeEnd\n  )\n  const within1YearData: IGroupedByGender[] = await query(\n    `SELECT COUNT(ageInDays) AS total\n      FROM birth_registration\n    WHERE time >= ${timeStart}\n      AND time <= ${timeEnd}\n      AND (${officeLocationInChildren})\n      AND ageInDays > ${EXPECTED_BIRTH_REGISTRATION_IN_DAYS}\n      AND ageInDays <= 365\n    GROUP BY gender`,\n    {\n      placeholders: {\n        ...locationPlaceholders\n      }\n    }\n  )\n  keyFigures.push(\n    populateBirthKeyFigurePoint(\n      WITHIN_TARGET_DAYS_TO_1_YEAR,\n      within1YearData,\n      estimatedFigureFor1Year.totalEstimation\n    )\n  )\n  /* Populating < 365D data */\n  let fullData: IGroupedByGender[] = []\n  if (withinTargetDaysData) {\n    fullData = fullData.concat(withinTargetDaysData)\n  }\n  if (within1YearData) {\n    fullData = fullData.concat(within1YearData)\n  }\n  keyFigures.push(\n    populateBirthKeyFigurePoint(\n      WITHIN_1_YEAR,\n      fullData,\n      estimatedFigureFor1Year.totalEstimation\n    )\n  )\n  return keyFigures\n}",
      "startLine": 429,
      "endLine": 532,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@654-710",
      "type": "function_declaration",
      "name": "fetchGenderBasisMetrics",
      "text": "async function fetchGenderBasisMetrics(\n  timeFrom: string,\n  timeTo: string,\n  currLocation: string,\n  currLocationLevel: string,\n  locationLevel: string,\n  event: EVENT_TYPE,\n  childLocationIds: Array<string>\n) {\n  let queryString = ''\n  if (event === EVENT_TYPE.BIRTH) {\n    queryString = birthGenderBasisMetricsQuery(\n      timeFrom,\n      timeTo,\n      currLocation,\n      currLocationLevel,\n      locationLevel\n    )\n  } else if (event === EVENT_TYPE.DEATH) {\n    queryString = deathGenderBasisMetricsQuery(\n      timeFrom,\n      timeTo,\n      currLocation,\n      currLocationLevel,\n      locationLevel\n    )\n  }\n\n  const points = await query(queryString, {\n    placeholders: {\n      timeFrom,\n      timeTo,\n      currLocation\n    }\n  })\n\n  const dataFromInflux = populateGenderBasisMetrics(points, locationLevel)\n  const placeholder = {\n    total: 0,\n    maleOver18: 0,\n    maleUnder18: 0,\n    femaleOver18: 0,\n    femaleUnder18: 0\n  }\n\n  const emptyData = childLocationIds.map((id) => ({\n    location: id,\n    ...placeholder\n  }))\n\n  const genderBasisData = fillEmptyDataArrayByKey(\n    dataFromInflux,\n    emptyData,\n    'location'\n  )\n  return genderBasisData\n}",
      "startLine": 654,
      "endLine": 710,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@712-799",
      "type": "function_declaration",
      "name": "fetchEstimatedTargetDayMetrics",
      "text": "async function fetchEstimatedTargetDayMetrics(\n  timeFrom: string,\n  timeTo: string,\n  currLocation: string,\n  currLocationLevel: string,\n  locationLevel: string,\n  event: EVENT_TYPE,\n  childLocationIds: Array<string>,\n  authHeader: IAuthHeader,\n  registrationTargetInDays: number\n) {\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n  const EXPECTED_BIRTH_REGISTRATION_IN_DAYS = registrationTargetInDays\n\n  const points = await query(\n    `SELECT\n                              COUNT(${column}) AS withInTargetDay\n                              FROM ${measurement}\n                              WHERE ${column} <= ${EXPECTED_BIRTH_REGISTRATION_IN_DAYS}\n                              AND time > $timeFrom\n                              AND time <= $timeTo\n                              AND ${currLocationLevel}=$currLocation\n                              GROUP BY ${locationLevel}`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo,\n        currLocation\n      }\n    }\n  )\n  const dataFromInflux: IRegistrationInTargetDayEstimation[] = []\n  for (const point of points) {\n    const estimationOfTargetDay: IEstimation =\n      await fetchEstimateForTargetDaysByLocationId(\n        point[locationLevel],\n        event,\n        authHeader,\n        timeFrom,\n        timeTo\n      )\n    dataFromInflux.push({\n      locationId: point[locationLevel],\n      registrationInTargetDay: point.withInTargetDay,\n      estimatedRegistration: estimationOfTargetDay.totalEstimation,\n      estimationLocationLevel: estimationOfTargetDay.locationLevel,\n      estimationPercentage:\n        point.withInTargetDay === 0 ||\n        estimationOfTargetDay.totalEstimation === 0\n          ? 0\n          : Number(\n              (\n                (point.withInTargetDay /\n                  estimationOfTargetDay.totalEstimation) *\n                100\n              ).toFixed(2)\n            )\n    })\n  }\n\n  const emptyEstimationData: IRegistrationInTargetDayEstimation[] = []\n  for (const id of childLocationIds) {\n    const estimationOfTargetDay: IEstimation =\n      await fetchEstimateForTargetDaysByLocationId(\n        id,\n        event,\n        authHeader,\n        timeFrom,\n        timeTo\n      )\n    emptyEstimationData.push({\n      locationId: id,\n      registrationInTargetDay: 0,\n      estimatedRegistration: estimationOfTargetDay.totalEstimation,\n      estimationLocationLevel: estimationOfTargetDay.locationLevel,\n      estimationPercentage: 0\n    })\n  }\n\n  const estimatedTargetDayData = fillEmptyDataArrayByKey(\n    dataFromInflux,\n    emptyEstimationData,\n    'locationId'\n  )\n  return estimatedTargetDayData\n}",
      "startLine": 712,
      "endLine": 799,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@805-833",
      "type": "function_declaration",
      "name": "getTotalNumberOfRegistrations",
      "text": "async function getTotalNumberOfRegistrations(\n  timeFrom: string,\n  timeTo: string,\n  locationId: ResourceIdentifier<FhirLocation>,\n  event: EVENT_TYPE\n) {\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n  const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n    locationIds,\n    'officeLocation'\n  )\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const totalRegistrationPoint: Registration[] = await query(\n    `SELECT COUNT(DISTINCT(compositionId)) AS total\n      FROM ${measurement}\n    WHERE time > $timeFrom\n      AND time <= $timeTo\n      AND (${officeLocationInChildren})`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo,\n        ...locationPlaceholders\n      }\n    }\n  )\n  return totalRegistrationPoint?.[0]?.total ?? 0\n}",
      "startLine": 805,
      "endLine": 833,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@835-928",
      "type": "function_declaration",
      "name": "fetchLocationWiseEventEstimations",
      "text": "async function fetchLocationWiseEventEstimations(\n  timeFrom: string,\n  timeTo: string,\n  locationId: ResourceIdentifier<FhirLocation>,\n  event: EVENT_TYPE,\n  authHeader: IAuthHeader\n) {\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n  const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n    locationIds,\n    'officeLocation'\n  )\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n  const EXPECTED_BIRTH_REGISTRATION_IN_DAYS = await getRegistrationTargetDays(\n    event,\n    authHeader.Authorization\n  )\n  const registrationsInTargetDaysPoints: IGroupedByGender[] = await query(\n    `SELECT COUNT(${column}) AS total\n      FROM ${measurement}\n    WHERE time > $timeFrom\n      AND time <= $timeTo\n      AND (${officeLocationInChildren})\n      AND ${column} <= ${EXPECTED_BIRTH_REGISTRATION_IN_DAYS}\n    GROUP BY gender`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo,\n        ...locationPlaceholders\n      }\n    }\n  )\n\n  let totalRegistrationInTargetDay = 0\n  let totalMaleRegistrationInTargetDay = 0\n  let totalFemaleRegistrationInTargetDay = 0\n  registrationsInTargetDaysPoints.forEach((point) => {\n    totalRegistrationInTargetDay += point.total\n    if (point.gender === 'male') {\n      totalMaleRegistrationInTargetDay += point.total\n    } else if (point.gender === 'female') {\n      totalFemaleRegistrationInTargetDay += point.total\n    }\n  })\n  const estimationOfTargetDay: IEstimation =\n    await fetchEstimateForTargetDaysByLocationId(\n      locationId,\n      event,\n      authHeader,\n      timeFrom,\n      timeTo\n    )\n\n  return {\n    actualRegistration: totalRegistrationInTargetDay,\n    estimatedRegistration: estimationOfTargetDay.totalEstimation,\n    estimatedPercentage:\n      totalRegistrationInTargetDay === 0 ||\n      estimationOfTargetDay.totalEstimation === 0\n        ? 0\n        : Number(\n            (\n              (totalRegistrationInTargetDay /\n                estimationOfTargetDay.totalEstimation) *\n              100\n            ).toFixed(2)\n          ),\n    malePercentage:\n      totalMaleRegistrationInTargetDay === 0 ||\n      estimationOfTargetDay.maleEstimation === 0\n        ? 0\n        : Number(\n            (\n              (totalMaleRegistrationInTargetDay /\n                estimationOfTargetDay.maleEstimation) *\n              100\n            ).toFixed(2)\n          ),\n    femalePercentage:\n      totalFemaleRegistrationInTargetDay === 0 ||\n      estimationOfTargetDay.femaleEstimation === 0\n        ? 0\n        : Number(\n            (\n              (totalFemaleRegistrationInTargetDay /\n                estimationOfTargetDay.femaleEstimation) *\n              100\n            ).toFixed(2)\n          )\n  }\n}",
      "startLine": 835,
      "endLine": 928,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@930-969",
      "type": "function_declaration",
      "name": "fetchLocaitonWiseEventEstimationsGroupByTimeLabel",
      "text": "async function fetchLocaitonWiseEventEstimationsGroupByTimeLabel(\n  timeFrom: string,\n  timeTo: string,\n  locationId: string,\n  event: EVENT_TYPE,\n  authHeader: IAuthHeader\n) {\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n\n  const registrations: IGroupByTimeLabel[] = await query(\n    `SELECT COUNT(${column}) AS total\n      FROM ${measurement}\n    WHERE time > $timeFrom\n      AND time <= $timeTo\n      AND officeLocation = $locationId\n    GROUP BY timeLabel`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo,\n        locationId\n      }\n    }\n  )\n  const estimationOfTimeRange: IEstimation =\n    await fetchEstimateForTargetDaysByLocationId(\n      locationId,\n      event,\n      authHeader,\n      timeFrom,\n      timeTo\n    )\n\n  return {\n    estimated: estimationOfTimeRange,\n    results: registrations\n  }\n}",
      "startLine": 930,
      "endLine": 969,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@971-1017",
      "type": "function_declaration",
      "name": "fetchEventsGroupByMonthDatesByLocation",
      "text": "async function fetchEventsGroupByMonthDatesByLocation(\n  timeFrom: string,\n  timeTo: string,\n  locationId: ResourceIdentifier<FhirLocation>,\n  event: EVENT_TYPE\n) {\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n\n  const batchquery = async (locationIds: string[]) => {\n    const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n      locationIds,\n      'officeLocation'\n    )\n    try {\n      const registrationsInTargetDaysPoints: IGroupByEventDate[] = await query(\n        `SELECT COUNT(${column}) AS total\n          FROM ${measurement}\n        WHERE time > $timeFrom\n          AND time <= $timeTo\n          AND (${officeLocationInChildren})\n        GROUP BY dateLabel, timeLabel`,\n        {\n          placeholders: {\n            timeFrom,\n            timeTo,\n            ...locationPlaceholders\n          }\n        }\n      )\n\n      return registrationsInTargetDaysPoints\n    } catch (error) {\n      logger.error(\n        `Error fetching events group by month dates by location: ${error.message}`\n      )\n      throw error\n    }\n  }\n\n  const locationBatches = createChunks(locationIds, 1000)\n  return await Promise.all(locationBatches.map(batchquery)).then((res) =>\n    res.flat()\n  )\n}",
      "startLine": 971,
      "endLine": 1017,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@1019-1045",
      "type": "function_declaration",
      "name": "fetchEventsGroupByMonthDates",
      "text": "async function fetchEventsGroupByMonthDates(\n  timeFrom: string,\n  timeTo: string,\n  locationId: string | undefined,\n  event: EVENT_TYPE\n) {\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n\n  const registrationsInTargetDaysPoints: IGroupByEventDate[] = await query(\n    `SELECT COUNT(${column}) AS total\n      FROM ${measurement}\n    WHERE time > $timeFrom\n      AND time <= $timeTo\n    GROUP BY dateLabel, timeLabel`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo,\n        locationId\n      }\n    }\n  )\n\n  return registrationsInTargetDaysPoints\n}",
      "startLine": 1019,
      "endLine": 1045,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@1047-1104",
      "type": "function_declaration",
      "name": "getTotalMetricsByLocation",
      "text": "async function getTotalMetricsByLocation(\n  timeFrom: string,\n  timeTo: string,\n  locationId: ResourceIdentifier<FhirLocation>,\n  event: EVENT_TYPE,\n  authHeader: IAuthHeader\n) {\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n  const batchquery = async (locationIds: string[]) => {\n    const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n      locationIds,\n      'officeLocation'\n    )\n    try {\n      return await query(\n        `SELECT COUNT(${column}) AS total\n          FROM ${measurement}\n        WHERE time > $timeFrom\n          AND time <= $timeTo\n          AND (${officeLocationInChildren})\n        GROUP BY gender, timeLabel, eventLocationType, practitionerRole, registrarPractitionerId`,\n        {\n          placeholders: {\n            timeFrom,\n            timeTo,\n            ...locationPlaceholders\n          }\n        }\n      )\n    } catch (error) {\n      logger.error(`Error fetching total metrics by location: ${error.message}`)\n      throw error\n    }\n  }\n\n  const locationBatches = createChunks(locationIds, 1000)\n\n  const totalMetrics: IMetricsTotalGroup[] = await Promise.all(\n    locationBatches.map(batchquery)\n  ).then((res) => res.flat())\n\n  const estimationOfTimeRange: IEstimation =\n    await fetchEstimateForTargetDaysByLocationId(\n      locationId,\n      event,\n      authHeader,\n      timeFrom,\n      timeTo\n    )\n\n  return {\n    estimated: estimationOfTimeRange,\n    results: totalMetrics || []\n  }\n}",
      "startLine": 1047,
      "endLine": 1104,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@1106-1143",
      "type": "function_declaration",
      "name": "getTotalMetrics",
      "text": "async function getTotalMetrics(\n  timeFrom: string,\n  timeTo: string,\n  event: EVENT_TYPE,\n  authHeader: IAuthHeader\n) {\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n\n  const totalMetrics: IMetricsTotalGroup[] = await query(\n    `SELECT COUNT(${column}) AS total\n      FROM ${measurement}\n    WHERE time > $timeFrom\n      AND time <= $timeTo\n    GROUP BY gender, timeLabel, eventLocationType, practitionerRole, registrarPractitionerId`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo\n      }\n    }\n  )\n\n  const estimationOfTimeRange: IEstimation =\n    await fetchEstimateForTargetDaysByLocationId(\n      undefined,\n      event,\n      authHeader,\n      timeFrom,\n      timeTo\n    )\n\n  return {\n    estimated: estimationOfTimeRange,\n    results: totalMetrics || []\n  }\n}",
      "startLine": 1106,
      "endLine": 1143,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@1145-1182",
      "type": "function_declaration",
      "name": "fetchRegistrationsGroupByOfficeLocationByLocation",
      "text": "async function fetchRegistrationsGroupByOfficeLocationByLocation(\n  timeFrom: string,\n  timeTo: string,\n  event: EVENT_TYPE,\n  locationId: ResourceIdentifier<FhirLocation>\n) {\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n\n  const batchquery = async (locationIds: string[]) => {\n    const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n      locationIds,\n      'officeLocation'\n    )\n\n    try {\n      return await query(\n        `SELECT COUNT(${column}) AS total\n      FROM ${measurement}\n    WHERE time > '${timeFrom}'\n      AND time <= '${timeTo}'\n      AND (${officeLocationInChildren})\n    GROUP BY officeLocation, eventLocationType, timeLabel`,\n        { placeholders: { ...locationPlaceholders } }\n      )\n    } catch (error) {\n      logger.error(`Error fetching total metrics by location: ${error.message}`)\n      throw error\n    }\n  }\n\n  const locationBatches = createChunks(locationIds, 1000)\n  return await Promise.all(locationBatches.map(batchquery)).then((res) =>\n    res.flat()\n  )\n}",
      "startLine": 1145,
      "endLine": 1182,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@1184-1202",
      "type": "function_declaration",
      "name": "fetchRegistrationsGroupByOfficeLocation",
      "text": "async function fetchRegistrationsGroupByOfficeLocation(\n  timeFrom: string,\n  timeTo: string,\n  event: EVENT_TYPE\n) {\n  const measurement =\n    event === EVENT_TYPE.BIRTH ? 'birth_registration' : 'death_registration'\n  const column = event === EVENT_TYPE.BIRTH ? 'ageInDays' : 'deathDays'\n\n  const result: IMetricsTotalGroupByLocation[] = await query(\n    `SELECT COUNT(${column}) AS total\n      FROM ${measurement}\n    WHERE time > '${timeFrom}'\n      AND time <= '${timeTo}'\n    GROUP BY officeLocation, eventLocationType, timeLabel`\n  )\n\n  return result\n}",
      "startLine": 1184,
      "endLine": 1202,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/metricsGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-88",
      "type": "function_declaration",
      "name": "locationWiseEventEstimationsHandler",
      "text": "async function locationWiseEventEstimationsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = request.query[LOCATION_ID]\n    ? 'Location/' + request.query[LOCATION_ID]\n    : undefined\n  const event = request.query[EVENT]\n  const authHeader: IAuthHeader = {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  }\n  const childLocations = await fetchChildLocationsByParentId(\n    locationId || 'Location/0',\n    authHeader\n  )\n\n  const estimations: ILocationWiseEstimation[] = []\n  for (const childLocation of childLocations) {\n    if (!childLocation || !childLocation.id) {\n      continue\n    }\n\n    const { results, estimated } =\n      await fetchLocaitonWiseEventEstimationsGroupByTimeLabel(\n        timeStart,\n        timeEnd,\n        `Location/${childLocation.id}`,\n        event,\n        authHeader\n      )\n\n    estimations.push({\n      total: results.reduce((t, p) => t + p.total, 0),\n      withinTarget: results\n        .filter((p) => p.timeLabel === 'withinTarget')\n        .reduce((t, p) => t + p.total, 0),\n      within1Year: results\n        .filter(\n          (p) =>\n            p.timeLabel === 'withinTarget' ||\n            p.timeLabel === 'withinLate' ||\n            p.timeLabel === 'within1Year'\n        )\n        .reduce((t, p) => t + p.total, 0),\n      within5Years: results\n        .filter((p) => p.timeLabel !== 'after5Years')\n        .reduce((t, p) => t + p.total, 0),\n      estimated: estimated.totalEstimation,\n      locationName: childLocation.name || '',\n      locationId: childLocation.id\n    })\n  }\n  return estimations\n}",
      "startLine": 32,
      "endLine": 88,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/locationWiseEventEstimations/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-44",
      "type": "function_declaration",
      "name": "performanceDataRefreshHandler",
      "text": "async function performanceDataRefreshHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  refresh().catch((error) => {\n    logger.error(`Error on performance data refresh triggered: ${error}`)\n  })\n  return h.response({\n    message: 'Successfully triggered performance data refresh',\n    statusCode: 200\n  })\n}",
      "startLine": 33,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/performance/viewRefresher.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-66",
      "type": "function_declaration",
      "name": "refresh",
      "text": "async function refresh() {\n  if (updateInProgress) {\n    logger.info('Performance materialised views already being refreshed')\n    nextUpdateRequested = true\n    return\n  }\n  logger.info('Refreshing performance materialised views')\n  try {\n    updateInProgress = true\n    await refreshPerformanceMaterialisedViews(client)\n    logger.info('Performance materialised views refreshed')\n  } catch (error) {\n    logger.error(`Error refreshing performances materialised views ${error}`)\n  } finally {\n    updateInProgress = false\n    if (nextUpdateRequested) {\n      nextUpdateRequested = false\n      refresh()\n    }\n  }\n}",
      "startLine": 46,
      "endLine": 66,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/performance/viewRefresher.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@68-78",
      "type": "function_declaration",
      "name": "refreshPerformanceMaterialisedViews",
      "text": "async function refreshPerformanceMaterialisedViews(client: MongoClient) {\n  const db = client.db()\n  const queries = await getDashboardQueries()\n\n  for (const { collection, aggregate } of queries) {\n    await db\n      .collection(collection)\n      .aggregate(aggregate, { allowDiskUse: true })\n      .toArray()\n  }\n}",
      "startLine": 68,
      "endLine": 78,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/performance/viewRefresher.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@39-44",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n    OFFICE_COUNT_CACHE[currentLocation.id] &&\n    OFFICE_COUNT_CACHE[currentLocation.id] !== -1\n  ) {\n    return OFFICE_COUNT_CACHE[currentLocation.id] as number\n  }",
      "startLine": 39,
      "endLine": 44,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/locationStatistics/service.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@107-113",
      "type": "method_definition",
      "name": "if",
      "text": "if (isOffice(location)) {\n    return {\n      population: 0,\n      offices: 1,\n      registrars\n    }\n  }",
      "startLine": 107,
      "endLine": 113,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/locationStatistics/service.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@114-116",
      "type": "method_definition",
      "name": "if",
      "text": "if (!OFFICE_COUNT_CACHE[location.id]) {\n    await cacheOfficeCount(authHeader)\n  }",
      "startLine": 114,
      "endLine": 116,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/locationStatistics/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-33",
      "type": "function_declaration",
      "name": "getEventDurationHandler",
      "text": "async function getEventDurationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const compositionId = request.query[COMPOSITION_ID]\n  const eventDurationData = await query(\n    `SELECT previousStatus as status, durationInSeconds\n          FROM declaration_event_duration\n        WHERE compositionId = $compositionId`,\n    {\n      placeholders: {\n        compositionId\n      }\n    }\n  )\n  return eventDurationData && eventDurationData.length > 0\n    ? eventDurationData\n    : []\n}",
      "startLine": 15,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/getEventDuration/handler.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@194-198",
      "type": "method_definition",
      "name": "return",
      "text": "return influx.query(q, options)\n  } catch (err) {\n    logger.error(`Error reading data from InfluxDB! ${err.stack}`)\n    throw err\n  }",
      "startLine": 194,
      "endLine": 198,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/influxdb/client.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@186-200",
      "type": "function_declaration",
      "name": "getCompositionCursor",
      "text": "async function getCompositionCursor(startDate: string, endDate: string) {\n  const db = client.db()\n  return db\n    .collection(COLLECTION_NAMES.COMPOSITION)\n    .find({\n      date: {\n        $gte: startDate,\n        $lte: endDate\n      },\n      'type.coding.code': {\n        $in: ['birth-declaration', 'death-declaration']\n      }\n    })\n    .project({ id: 1, title: 1, section: 1, date: 1, _id: 0 })\n}",
      "startLine": 186,
      "endLine": 200,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@202-214",
      "type": "function_declaration",
      "name": "getCollectionDocuments",
      "text": "async function getCollectionDocuments(collectionName: string, ids: string[]) {\n  const db = client.db()\n  if (ids.length > 0) {\n    return db\n      .collection(collectionName)\n      .find({\n        id: { $in: ids }\n      })\n      .toArray()\n  } else {\n    return db.collection(collectionName).find().toArray()\n  }\n}",
      "startLine": 202,
      "endLine": 214,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@216-224",
      "type": "function_declaration",
      "name": "getObservationDocByEncounterId",
      "text": "async function getObservationDocByEncounterId(encounterId: string) {\n  const db = client.db()\n  return db\n    .collection(COLLECTION_NAMES.OBSERVATION)\n    .find({\n      'context.reference': encounterId\n    })\n    .toArray()\n}",
      "startLine": 216,
      "endLine": 224,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@226-234",
      "type": "function_declaration",
      "name": "getTaskDocByCompositionId",
      "text": "async function getTaskDocByCompositionId(compositionId: string) {\n  const db = client.db()\n  return db\n    .collection(COLLECTION_NAMES.TASK)\n    .find({\n      'focus.reference': compositionId\n    })\n    .toArray()\n}",
      "startLine": 226,
      "endLine": 234,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@236-238",
      "type": "function_declaration",
      "name": "findCodeInObservation",
      "text": "function findCodeInObservation(observation: fhir.Observation, code: string) {\n  return observation.code.coding?.[0].code === code ? observation : undefined\n}",
      "startLine": 236,
      "endLine": 238,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@240-246",
      "type": "function_declaration",
      "name": "getValueFromExt",
      "text": "function getValueFromExt(doc: fhir.Patient, extURL: string) {\n  if (!doc.extension) {\n    return ''\n  }\n  const docExt = doc.extension.find((obj) => obj.url === extURL)\n  return docExt ? docExt.valueString : ''\n}",
      "startLine": 240,
      "endLine": 246,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@248-256",
      "type": "function_declaration",
      "name": "getNationalityByExt",
      "text": "function getNationalityByExt(doc: fhir.Patient, extURL: string) {\n  if (!doc.extension) {\n    return ''\n  }\n  const docExt = doc.extension.find((obj) => obj.url === extURL)\n  return docExt\n    ? docExt.extension?.[0].valueCodeableConcept?.coding?.[0].code\n    : ''\n}",
      "startLine": 248,
      "endLine": 256,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@258-273",
      "type": "function_declaration",
      "name": "makePatientObject",
      "text": "function makePatientObject(patient: fhir.Patient) {\n  return {\n    gender: patient.gender ?? '',\n    birthDate: patient.birthDate ?? '',\n    deceasedDate: patient.deceasedDateTime ?? '',\n    maritalStatus: patient.maritalStatus?.text ?? '',\n    multipleBirth: patient.multipleBirthInteger ?? 0,\n    occupation: getValueFromExt(patient, patientOccupationExtURL) ?? '',\n    nationality: getNationalityByExt(patient, patientNationalityExtURL) ?? '',\n    educational_attainment:\n      getValueFromExt(patient, patientEduAttainmentExtURL) ?? '',\n    city: patient.address?.[0].city ?? '',\n    district: patient.address?.[0].district ?? '',\n    state: patient.address?.[0].state ?? ''\n  }\n}",
      "startLine": 258,
      "endLine": 273,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@275-295",
      "type": "function_declaration",
      "name": "setPatientsAddress",
      "text": "async function setPatientsAddress(\n  patients: fhir.Patient[],\n  locations: Location[]\n) {\n  patients.forEach((patient) => {\n    if (patient.address) {\n      if (patient.address[0].district) {\n        const districtAddress = locations.find(\n          ({ id }) => id === patient.address?.[0].district\n        )\n        patient.address[0].district = districtAddress?.name ?? ''\n      }\n      if (patient.address[0].state) {\n        const stateAddress = locations.find(\n          ({ id }) => id === patient.address?.[0].state\n        )\n        patient.address[0].state = stateAddress?.name ?? ''\n      }\n    }\n  })\n}",
      "startLine": 275,
      "endLine": 295,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@297-326",
      "type": "function_declaration",
      "name": "setPatientsDetailsInComposition",
      "text": "async function setPatientsDetailsInComposition(\n  composition: fhir.Composition,\n  fullComposition: Partial<IFullComposition>,\n  locations: Location[]\n) {\n  const patientList = composition.section?.filter((section) =>\n    section.entry?.[0].reference?.startsWith('Patient/')\n  )\n  const patientIds = patientList?.map((patient) =>\n    patient.entry?.[0].reference?.replace('Patient/', '')\n  ) as string[]\n  const patients = (await getCollectionDocuments(\n    COLLECTION_NAMES.PATIENT,\n    patientIds\n  )) as unknown as fhir.Patient[]\n  await setPatientsAddress(patients, locations)\n\n  composition.section?.forEach((section) => {\n    if (\n      typeof section.entry?.[0].reference === 'string' &&\n      section.entry[0].reference.startsWith('Patient/')\n    ) {\n      const patientId = section.entry[0].reference.replace('Patient/', '')\n      const patient = patients.find(({ id }) => id === patientId)\n      if (patient && section.title) {\n        fullComposition[TITLE_MAP[section.title]] = makePatientObject(patient)\n      }\n    }\n  })\n}",
      "startLine": 297,
      "endLine": 326,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@328-386",
      "type": "function_declaration",
      "name": "setLocationInComposition",
      "text": "async function setLocationInComposition(\n  composition: fhir.Composition,\n  fullComposition: Partial<IFullComposition>,\n  locations: Location[],\n  task: fhir.Task\n) {\n  const encounter = composition.section?.find(\n    (section) =>\n      typeof section.entry?.[0].reference === 'string' &&\n      section.entry[0].reference.startsWith('Encounter/')\n  )\n  const encounterId =\n    encounter?.entry?.[0].reference?.replace('Encounter/', '') ?? ''\n  const encounterDoc = await getCollectionDocuments(\n    COLLECTION_NAMES.ENCOUNTER,\n    [encounterId]\n  )\n  const locationId = encounterDoc[0].location?.[0].location.reference?.replace(\n    'Location/',\n    ''\n  )\n  const locationDoc = locations.find(({ id }) => id === locationId)\n\n  const isLocationHealthFacility = locationDoc && isHealthFacility(locationDoc)\n\n  if (isLocationHealthFacility) {\n    const districtLocationId = resourceIdentifierToUUID(\n      locationDoc.partOf.reference\n    )\n    const districtLocationDoc = locations.find(\n      ({ id }) => id === districtLocationId\n    )\n    const stateLocationId =\n      districtLocationDoc?.partOf?.reference &&\n      resourceIdentifierToUUID(districtLocationDoc.partOf.reference)\n    const stateLocationDoc = locations.find(({ id }) => id === stateLocationId)\n    fullComposition['healthCenter'] = locationDoc.name ?? ''\n    fullComposition['eventDistrict'] = districtLocationDoc?.name ?? ''\n    fullComposition['eventState'] = stateLocationDoc?.name ?? ''\n  } else {\n    const districtLocation = locations.find(\n      ({ id }) => id === locationDoc?.address?.district\n    )\n    const stateLocation = locations.find(\n      ({ id }) => id === locationDoc?.address?.state\n    )\n    fullComposition['eventDistrict'] = districtLocation?.name ?? ''\n    fullComposition['eventState'] = stateLocation?.name ?? ''\n  }\n\n  fullComposition['eventCity'] = locationDoc?.address?.city ?? ''\n\n  const officeLocationId = task.extension\n    ?.find((obj) => obj.url === officeLocationExtURL)\n    ?.valueReference?.reference?.replace('Location/', '')\n\n  const officeLocation = locations.find(({ id }) => id === officeLocationId)\n  fullComposition['officeLocation'] = officeLocation?.name ?? ''\n}",
      "startLine": 328,
      "endLine": 386,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@388-470",
      "type": "function_declaration",
      "name": "setObservationDetailsInComposition",
      "text": "async function setObservationDetailsInComposition(\n  composition: fhir.Composition,\n  fullComposition: Partial<IFullComposition>\n) {\n  const encounter = composition.section?.find(\n    (section) =>\n      typeof section.entry?.[0].reference === 'string' &&\n      section.entry[0].reference.startsWith('Encounter/')\n  )\n  const observations = (await getObservationDocByEncounterId(\n    String(encounter?.entry?.[0].reference)\n  )) as unknown as fhir.Observation[]\n  const observationObj: IObservation = {\n    causeOfDeathMethod: '',\n    birthPluralityOfPregnancy: '',\n    bodyWeightMeasured: '',\n    birthAttendantTitle: '',\n    uncertifiedMannerOfDeath: '',\n    verbalAutopsyDescription: '',\n    causeOfDeathEstablished: ''\n  }\n\n  observations.forEach((observation) => {\n    const causeOfDeathMethod = findCodeInObservation(\n      observation,\n      OBSERVATION_CODE.CAUSE_OF_DEATH_METHOD\n    )\n    const birthPluralityOfPregnancy = findCodeInObservation(\n      observation,\n      OBSERVATION_CODE.BIRTH_PLURALITY_OF_PREGNANCY\n    )\n    const bodyWeightMeasured = findCodeInObservation(\n      observation,\n      OBSERVATION_CODE.BODY_WEIGHT_MEASURED\n    )\n    const birthAttendantTitle = findCodeInObservation(\n      observation,\n      OBSERVATION_CODE.BIRTH_ATTENDANT_TITLE\n    )\n    const uncertifiedMannerOfDeath = findCodeInObservation(\n      observation,\n      OBSERVATION_CODE.UNCERTIFIED_MANNER_OF_DEATH\n    )\n    const verbalAutopsyDescription = findCodeInObservation(\n      observation,\n      OBSERVATION_CODE.VERBAL_AUTOPSY_DESCRIPTION\n    )\n    const causeOfDeathEstablished = findCodeInObservation(\n      observation,\n      OBSERVATION_CODE.CAUSE_OF_DEATH_ESTABLISHED\n    )\n\n    if (causeOfDeathMethod) {\n      observationObj['causeOfDeathMethod'] =\n        causeOfDeathMethod.valueCodeableConcept?.coding?.[0].code ?? ''\n    }\n    if (birthPluralityOfPregnancy) {\n      observationObj['birthPluralityOfPregnancy'] =\n        birthPluralityOfPregnancy.valueQuantity?.value?.toString() ?? ''\n    }\n    if (bodyWeightMeasured) {\n      observationObj['bodyWeightMeasured'] =\n        `${bodyWeightMeasured.valueQuantity?.value} ${bodyWeightMeasured.valueQuantity?.unit}`\n    }\n    if (birthAttendantTitle) {\n      observationObj['birthAttendantTitle'] =\n        birthAttendantTitle.valueString ?? ''\n    }\n    if (uncertifiedMannerOfDeath) {\n      observationObj['uncertifiedMannerOfDeath'] =\n        uncertifiedMannerOfDeath.valueCodeableConcept?.coding?.[0].code ?? ''\n    }\n    if (verbalAutopsyDescription) {\n      observationObj['verbalAutopsyDescription'] =\n        verbalAutopsyDescription.valueString ?? ''\n    }\n    if (causeOfDeathEstablished) {\n      observationObj['causeOfDeathEstablished'] =\n        causeOfDeathEstablished.valueCodeableConcept?.coding?.[0].code ?? ''\n    }\n  })\n  fullComposition.observations = observationObj\n}",
      "startLine": 388,
      "endLine": 470,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@472-505",
      "type": "function_declaration",
      "name": "setInformantDetailsInComposition",
      "text": "async function setInformantDetailsInComposition(\n  composition: fhir.Composition,\n  fullComposition: Partial<IFullComposition>,\n  locations: Location[]\n) {\n  const informant = composition.section?.find(\n    (section) =>\n      typeof section.entry?.[0].reference === 'string' &&\n      section.entry[0].reference.startsWith('RelatedPerson/')\n  )\n  const informantId =\n    informant?.entry?.[0].reference?.replace('RelatedPerson/', '') ?? ''\n  const relatedPerson = (await getCollectionDocuments(\n    COLLECTION_NAMES.RELATEDPERSON,\n    [informantId]\n  )) as unknown as fhir.RelatedPerson[]\n\n  if (relatedPerson?.[0].patient) {\n    const patientId = relatedPerson?.[0].patient.reference?.replace(\n      'Patient/',\n      ''\n    )\n    const patient = (await getCollectionDocuments(COLLECTION_NAMES.PATIENT, [\n      String(patientId)\n    ])) as unknown as fhir.Patient[]\n\n    await setPatientsAddress(patient, locations)\n\n    fullComposition.informant = {\n      relationship: relatedPerson[0].relationship?.coding?.[0].code ?? '',\n      ...makePatientObject(patient[0])\n    }\n  }\n}",
      "startLine": 472,
      "endLine": 505,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@507-586",
      "type": "function_declaration",
      "name": "createBirthDeclarationCSVWriter",
      "text": "async function createBirthDeclarationCSVWriter() {\n  const birthCSV = createCSV({\n    path: BIRTH_REPORT_PATH,\n    append: true,\n    header: [\n      'officeLocation',\n      'childGen',\n      'childDOB',\n      'childOrd',\n      'birthCity',\n      'birthState',\n      'birthDistrict',\n      'healthCenter',\n      'birthPluralityOfPregnancy',\n      'bodyWeightMeasured',\n      'birthAttendantTitle',\n      'motherNationality',\n      'motherDOB',\n      'motherMaritalStatus',\n      'motherOccupation',\n      'motherEducationalAttainment',\n      'motherCity',\n      'motherDistrict',\n      'motherState',\n      'fatherNationality',\n      'fatherDOB',\n      'fatherMaritalStatus',\n      'fatherOccupation',\n      'fatherEducationalAttainment',\n      'fatherCity',\n      'fatherDistrict',\n      'fatherState',\n      'informantNationality',\n      'informantDOB',\n      'informantCity',\n      'informantDistrict',\n      'informantState'\n    ]\n  })\n  const birthCSVHeader = [\n    {\n      officeLocation: 'OFFICE LOCATION',\n      childGen: 'CHILD GENDER',\n      childDOB: 'CHILD DOB',\n      childOrd: 'CHILD ORDER',\n      birthCity: 'BIRTH CITY',\n      birthState: 'BIRTH STATE',\n      birthDistrict: 'BIRTH DISTRICT',\n      healthCenter: 'HEALTH CENTER',\n      birthPluralityOfPregnancy: 'TYPE OF BIRTH',\n      bodyWeightMeasured: 'WEIGHT AT BIRTH',\n      birthAttendantTitle: 'ATTENDANT AT BIRTH',\n      motherNationality: 'MOTHER NATIONALITY',\n      motherDOB: 'MOTHER DOB',\n      motherMaritalStatus: 'MOTHER MARITAL STATUS',\n      motherOccupation: 'MOTHER OCCUPATION',\n      motherEducationalAttainment: 'MOTHER EDUCATION',\n      motherCity: 'MOTHER CITY',\n      motherDistrict: 'MOTHER DISTRICT',\n      motherState: 'MOTHER STATE',\n      fatherNationality: 'FATHER NATIONALITY',\n      fatherDOB: 'FATHER DOB',\n      fatherMaritalStatus: 'FATHER MARITAL STATUS',\n      fatherOccupation: 'FATHER OCCUPATION',\n      fatherEducationalAttainment: 'FATHER EDUCATION',\n      fatherCity: 'FATHER CITY',\n      fatherDistrict: 'FATHER DISTRICT',\n      fatherState: 'FATHER STATE',\n      informantNationality: 'INFORMANT NATIONALITY',\n      informantDOB: 'INFORMANT DOB',\n      informantCity: 'INFORMANT CITY',\n      informantDistrict: 'INFORMANT DISTRICT',\n      informantState: 'INFORMANT STATE'\n    }\n  ]\n  if (!fs.existsSync(BIRTH_REPORT_PATH)) {\n    await birthCSV.writeRecords(birthCSVHeader)\n  }\n  return birthCSV\n}",
      "startLine": 507,
      "endLine": 586,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@588-641",
      "type": "function_declaration",
      "name": "createDeathDeclarationCSVWriter",
      "text": "async function createDeathDeclarationCSVWriter() {\n  const deathCSV = createCSV({\n    path: DEATH_REPORT_PATH,\n    append: true,\n    header: [\n      'officeLocation',\n      'deceasedNationality',\n      'deceasedGen',\n      'deceasedDOB',\n      'deceasedMaritalStatus',\n      'deceasedDate',\n      'deathCity',\n      'deathState',\n      'deathDistrict',\n      'healthCenter',\n      'uncertifiedMannerOfDeath',\n      'causeOfDeathEstablished',\n      'causeOfDeathMethod',\n      'verbalAutopsyDescription',\n      'informantNationality',\n      'informantDOB',\n      'informantCity',\n      'informantDistrict',\n      'informantState'\n    ]\n  })\n  const deathCSVHeader = [\n    {\n      officeLocation: 'OFFICE LOCATION',\n      deceasedNationality: 'DECEASED NATIONALITY',\n      deceasedGen: 'DECEASED GENDER',\n      deceasedDOB: 'DECEASED DOB',\n      deceasedMaritalStatus: 'DECEASED MARITAL STATUS',\n      deceasedDate: 'DECEASED DATE',\n      deathCity: 'DEATH CITY',\n      deathState: 'DEATH STATE',\n      deathDistrict: 'DEATH DISTRICT',\n      healthCenter: 'HEALTH CENTER',\n      uncertifiedMannerOfDeath: 'MANNER OF DEATH',\n      causeOfDeathEstablished: 'CAUSE OF DEATH ESTABLISHED',\n      causeOfDeathMethod: 'SOURCE OF CAUSE OF DEATH',\n      verbalAutopsyDescription: 'VERBAL AUTOPSY DESCRIPTION',\n      informantNationality: 'INFORMANT NATIONALITY',\n      informantDOB: 'INFORMANT DOB',\n      informantCity: 'INFORMANT CITY',\n      informantDistrict: 'INFORMANT DISTRICT',\n      informantState: 'INFORMANT STATE'\n    }\n  ]\n  if (!fs.existsSync(DEATH_REPORT_PATH)) {\n    await deathCSV.writeRecords(deathCSVHeader)\n  }\n  return deathCSV\n}",
      "startLine": 588,
      "endLine": 641,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/scripts/VSExportGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-49",
      "type": "function_declaration",
      "name": "declarationsStartedHandler",
      "text": "async function declarationsStartedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = `Location/${request.query[LOCATION_ID]}` as const\n  let declarationsStartedMetrics\n  try {\n    declarationsStartedMetrics = await fetchLocationWiseDeclarationsStarted(\n      timeStart,\n      timeEnd,\n      locationId\n    )\n  } catch (error) {\n    declarationsStartedMetrics = {\n      fieldAgentDeclarations: 0,\n      hospitalDeclarations: 0,\n      officeDeclarations: 0\n    }\n  }\n\n  return declarationsStartedMetrics\n}",
      "startLine": 26,
      "endLine": 49,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/declarationsStarted/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-53",
      "type": "function_declaration",
      "name": "getTotalCertificationsByLocation",
      "text": "async function getTotalCertificationsByLocation(\n  timeFrom: string,\n  timeTo: string,\n  locationId: ResourceIdentifier<Location>\n) {\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n\n  const batchQuery = async (locationIds: string[]) => {\n    const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n      locationIds,\n      'officeLocation'\n    )\n    try {\n      return await query<Array<{ total: number; eventType: string }>>(\n        `SELECT COUNT(DISTINCT(compositionId)) AS total\n          FROM certification\n        WHERE time > $timeFrom\n          AND time <= $timeTo\n          AND (${officeLocationInChildren})\n        GROUP BY eventType`,\n        {\n          placeholders: {\n            timeFrom,\n            timeTo,\n            ...locationPlaceholders\n          }\n        }\n      )\n    } catch (error) {\n      logger.error(\n        `Error fetching total certifications by location: ${error.message}`\n      )\n      throw error\n    }\n  }",
      "startLine": 19,
      "endLine": 53,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/certifications/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@61-62",
      "type": "function_declaration",
      "name": "getTotalCertifications",
      "text": "async function getTotalCertifications(timeFrom: string, timeTo: string) {\n  const totalMetrics = await query<Array<{ total: number; eventType: string }",
      "startLine": 61,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/certifications/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-127",
      "type": "function_declaration",
      "name": "metricsHandler",
      "text": "async function metricsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = `Location/${request.query[LOCATION_ID]}` as const\n  const event = request.query[EVENT].toUpperCase() as EVENT_TYPE\n  let currentLocationLevel\n  let lowerLocationLevel\n\n  try {\n    const levels = await getCurrentAndLowerLocationLevels(\n      timeStart,\n      timeEnd,\n      locationId,\n      event\n    )\n    currentLocationLevel = levels.currentLocationLevel\n    lowerLocationLevel = levels.lowerLocationLevel\n  } catch (err) {\n    return {\n      timeFrames: [],\n      payments: [],\n      genderBasisMetrics: [],\n      estimatedTargetDayMetrics: []\n    }\n  }\n\n  const authHeader: IAuthHeader = {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  }\n\n  const childLocationIds = await fetchChildLocationIdsByParentId(\n    request.query[LOCATION_ID],\n    currentLocationLevel,\n    lowerLocationLevel,\n    authHeader\n  )\n\n  const registrationTargetInDays = await getRegistrationTargetDays(\n    event,\n    authHeader.Authorization\n  )\n\n  const timeFrames = await fetchRegWithinTimeFrames(\n    timeStart,\n    timeEnd,\n    locationId,\n    currentLocationLevel,\n    lowerLocationLevel,\n    event,\n    childLocationIds,\n    registrationTargetInDays\n  )\n\n  const payments = await fetchCertificationPayments(\n    timeStart,\n    timeEnd,\n    locationId,\n    currentLocationLevel,\n    lowerLocationLevel,\n    event,\n    childLocationIds\n  )\n\n  const genderBasisMetrics = await fetchGenderBasisMetrics(\n    timeStart,\n    timeEnd,\n    locationId,\n    currentLocationLevel,\n    lowerLocationLevel,\n    event,\n    childLocationIds\n  )\n\n  const estimatedTargetDayMetrics = await fetchEstimatedTargetDayMetrics(\n    timeStart,\n    timeEnd,\n    locationId,\n    currentLocationLevel,\n    lowerLocationLevel,\n    event,\n    childLocationIds,\n    authHeader,\n    registrationTargetInDays\n  )\n\n  return { timeFrames, payments, genderBasisMetrics, estimatedTargetDayMetrics }\n}",
      "startLine": 37,
      "endLine": 127,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@129-139",
      "type": "function_declaration",
      "name": "metricsDeleteMeasurementHandler",
      "text": "async function metricsDeleteMeasurementHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const res = await deleteMeasurements()\n    return h.response(res).code(200)\n  } catch (err) {\n    throw new Error(`Could not delete influx database ${INFLUX_DB}`)\n  }\n}",
      "startLine": 129,
      "endLine": 139,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@141-161",
      "type": "function_declaration",
      "name": "deletePerformanceHandler",
      "text": "async function deletePerformanceHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const client = new MongoClient(DASHBOARD_MONGO_URL)\n  try {\n    const connectedClient = await client.connect()\n    const db = connectedClient.db()\n    await Promise.all([\n      db.collection('registrations').drop(),\n      db.collection('corrections').drop(),\n      db.collection('populationEstimatesPerDay').drop()\n    ])\n    const res = {\n      status: `Successfully deleted all the collections from performance database`\n    }\n    return h.response(res).code(200)\n  } catch (err) {\n    throw new Error(`Could not delete performance database`)\n  }\n}",
      "startLine": 141,
      "endLine": 161,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-87",
      "type": "function_declaration",
      "name": "fetchLocationWiseDeclarationsStarted",
      "text": "async function fetchLocationWiseDeclarationsStarted(\n  timeFrom: string,\n  timeTo: string,\n  locationId: ResourceIdentifier<Location>\n) {\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n  const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n    locationIds,\n    'officeLocation'\n  )\n  const fieldAgent = await query(\n    `SELECT COUNT(role)\n          FROM declarations_started\n        WHERE time > $timeFrom\n          AND time <= $timeTo\n          AND (${officeLocationInChildren})\n          AND role = 'FIELD_AGENT'`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo,\n        ...locationPlaceholders\n      }\n    }\n  )\n\n  const office = await query(\n    `SELECT COUNT(role)\n          FROM declarations_started\n        WHERE time > $timeFrom\n          AND time <= $timeTo\n          AND (${officeLocationInChildren})\n          AND ( role = 'REGISTRAR' OR role = 'REGISTRATION_AGENT' )`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo,\n        ...locationPlaceholders\n      }\n    }\n  )\n\n  const hospital = await query(\n    `SELECT COUNT(role)\n          FROM declarations_started\n        WHERE time > $timeFrom\n          AND time <= $timeTo\n          AND (${officeLocationInChildren})\n          AND ( role = 'NOTIFICATION_API_USER' OR role = 'API_USER' )`,\n    {\n      placeholders: {\n        timeFrom,\n        timeTo,\n        locationId\n      }\n    }\n  )\n\n  return {\n    fieldAgentDeclarations:\n      (fieldAgent && fieldAgent.length > 0 && fieldAgent[0].count) || 0,\n    hospitalDeclarations:\n      (hospital && hospital.length > 0 && hospital[0].count) || 0,\n    officeDeclarations: (office && office.length > 0 && office[0].count) || 0\n  }\n}",
      "startLine": 22,
      "endLine": 87,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/declarationsStarted/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@66-88",
      "type": "function_declaration",
      "name": "getApplicationConfig",
      "text": "async function getApplicationConfig(\n  authorization: string\n): Promise<IApplicationConfig> {\n  const token = authorization.replace('Bearer ', '')\n  return fetch(`${CONFIG_API_URL}/config`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  })\n    .then((response) => {\n      return response.json()\n    })\n    .then((response) => {\n      return response.config\n    })\n    .catch((error) => {\n      return Promise.reject(\n        new Error(`Application config request failed: ${error.message}`)\n      )\n    })\n}",
      "startLine": 66,
      "endLine": 88,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/configApi.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-64",
      "type": "function_declaration",
      "name": "getTimeLoggedHandler",
      "text": "async function getTimeLoggedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const practitionerId = request.query[PRACTITIONER_ID]\n  const compositionId = request.query[COMPOSITION_ID]\n  const status = request.query[STATUS]\n\n  if (practitionerId) {\n    const timeStart = request.query[TIME_FROM]\n    const timeEnd = request.query[TIME_TO]\n    const locationId = request.query[LOCATION_ID]\n    const count = request.query[COUNT]\n\n    return {\n      results: await getTimeLoggedForPractitioner(\n        timeStart,\n        timeEnd,\n        practitionerId,\n        `Location/${locationId}`,\n        count\n      ),\n      totalItems: await countTimeLoggedForPractitioner(\n        timeStart,\n        timeEnd,\n        practitionerId,\n        `Location/${locationId}`\n      )\n    }\n  } else if (status) {\n    return await getTimeLoggedByStatus(compositionId, status.toUpperCase())\n  } else {\n    return await getTimeLogged(compositionId)\n  }\n}",
      "startLine": 30,
      "endLine": 64,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/getTimeLogged/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-60",
      "type": "function_declaration",
      "name": "vsExportHandler",
      "text": "async function vsExportHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const startDate = String(request.query.startDate) //yyyy-mm-dd\n  const endDate = String(request.query.endDate) //yyyy-mm-dd\n  const isScheduler = request.query['isScheduler'] === 'true' ? true : false //boolean\n  if (!isValidDate(startDate) || !isValidDate(endDate)) {\n    return h\n      .response({\n        message: 'Invalid date for generating vital statistics report.',\n        statusCode: 422\n      })\n      .code(422)\n  }\n\n  const childArgv = [startDate, endDate]\n  const script = fork(VS_EXPORT_SCRIPT_PATH, childArgv)\n\n  script.on('close', async (code) => {\n    // eslint-disable-next-line no-console\n    console.log(`child process exited with code ${code}`)\n\n    if (isScheduler && isFirstDayOfMonth(new Date())) {\n      await uploadVSExportFile(startDate, endDate)\n    } else if (!isScheduler) {\n      await uploadVSExportFile(startDate, endDate)\n    }\n  })\n  return h\n    .response({\n      message: 'Generating vital statistics report.',\n      statusCode: 202\n    })\n    .code(202)\n}",
      "startLine": 25,
      "endLine": 60,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/vsExport/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@62-105",
      "type": "function_declaration",
      "name": "uploadVSExportFile",
      "text": "async function uploadVSExportFile(startDate: string, endDate: string) {\n  try {\n    if (fs.existsSync(BIRTH_REPORT_PATH) && fs.existsSync(DEATH_REPORT_PATH)) {\n      //get files stats\n      const fileStats = {\n        [Event.BIRTH]: fs.statSync(BIRTH_REPORT_PATH),\n        [Event.DEATH]: fs.statSync(DEATH_REPORT_PATH)\n      }\n\n      //convert csv files to base64\n      const fileContents = {\n        [Event.BIRTH]: fs.readFileSync(BIRTH_REPORT_PATH),\n        [Event.DEATH]: fs.readFileSync(DEATH_REPORT_PATH)\n      }\n\n      //upload files to minio\n      const uploadResponse = {\n        [Event.BIRTH]: await uploadFileToMinio(fileContents.birth),\n        [Event.DEATH]: await uploadFileToMinio(fileContents.death)\n      }\n\n      try {\n        await VS_Export.create(\n          [Event.BIRTH, Event.DEATH].map((event) => ({\n            event,\n            startDate: format(new Date(startDate), 'yyyy-MM-01'),\n            endDate,\n            fileSize: formatBytes(fileStats[event].size),\n            url: uploadResponse[event],\n            createdOn: Date.now()\n          }))\n        )\n        //delete csv files\n        fs.unlinkSync(BIRTH_REPORT_PATH)\n        fs.unlinkSync(DEATH_REPORT_PATH)\n      } catch (error) {\n        throw internal(error)\n      }\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err)\n  }\n}",
      "startLine": 62,
      "endLine": 105,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/vsExport/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@107-118",
      "type": "function_declaration",
      "name": "isValidDate",
      "text": "function isValidDate(date: string) {\n  const regEx = /^\\d{4}-\\d{2}-\\d{2}$/\n  if (!date.match(regEx)) {\n    return false // Invalid format\n  }\n  const d = new Date(date)\n  const dNum = d.getTime()\n  if (!dNum && dNum !== 0) {\n    return false // NaN value, Invalid date\n  }\n  return d.toISOString().slice(0, 10) === date\n}",
      "startLine": 107,
      "endLine": 118,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/vsExport/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@120-127",
      "type": "function_declaration",
      "name": "formatBytes",
      "text": "function formatBytes(bytes: number, decimals = 2) {\n  if (bytes === 0) return '0 Bytes'\n  const k = 1024\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\n}",
      "startLine": 120,
      "endLine": 127,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/vsExport/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@129-141",
      "type": "function_declaration",
      "name": "getAllVSExport",
      "text": "async function getAllVSExport(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  let vsexports: IVSExport[]\n\n  try {\n    vsexports = await VS_Export.find()\n  } catch (error) {\n    throw internal(error.message)\n  }\n  return vsexports\n}",
      "startLine": 129,
      "endLine": 141,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/vsExport/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@39-118",
      "type": "function_declaration",
      "name": "monthWiseEventEstimationsHandler",
      "text": "async function monthWiseEventEstimationsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = request.query[LOCATION_ID]\n    ? (`Location/${request.query[LOCATION_ID]}` as const)\n    : undefined\n  const event = request.query[EVENT]\n  const authHeader: IAuthHeader = {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  }\n  const monthFilters: IMonthRangeFilter[] = getMonthRangeFilterListFromTimeRage(\n    timeStart,\n    timeEnd\n  )\n  const registrationsGroupByMonthDates = locationId\n    ? await fetchEventsGroupByMonthDatesByLocation(\n        timeStart,\n        timeEnd,\n        locationId,\n        event\n      )\n    : await fetchEventsGroupByMonthDates(timeStart, timeEnd, locationId, event)\n  const estimations: IMonthWiseEstimation[] = []\n  for (const monthFilter of monthFilters) {\n    const estimatedTargetDayMetrics =\n      await fetchEstimateForTargetDaysByLocationId(\n        locationId,\n        event,\n        authHeader,\n        monthFilter.startOfMonthTime,\n        monthFilter.endOfMonthTime\n      )\n\n    const totalRegistrationWithinMonth = registrationsGroupByMonthDates\n      .filter(\n        (p) => p.dateLabel === `${monthFilter.year}-${monthFilter.monthIndex}`\n      )\n      .reduce((t, p) => t + p.total, 0)\n\n    const totalWithinTargetInMonth = registrationsGroupByMonthDates\n      .filter(\n        (p) =>\n          p.dateLabel === `${monthFilter.year}-${monthFilter.monthIndex}` &&\n          p.timeLabel === 'withinTarget'\n      )\n      .reduce((t, p) => t + p.total, 0)\n\n    const totalWithin1YearInMonth = registrationsGroupByMonthDates\n      .filter(\n        (p) =>\n          p.dateLabel === `${monthFilter.year}-${monthFilter.monthIndex}` &&\n          (p.timeLabel === 'withinTarget' ||\n            p.timeLabel === 'withinLate' ||\n            p.timeLabel === 'within1Year')\n      )\n      .reduce((t, p) => t + p.total, 0)\n    const totalWithin5YearsInMonth = registrationsGroupByMonthDates\n      .filter(\n        (p) =>\n          p.dateLabel === `${monthFilter.year}-${monthFilter.monthIndex}` &&\n          p.timeLabel !== 'after5Years'\n      )\n      .reduce((t, p) => t + p.total, 0)\n\n    estimations.push({\n      total: totalRegistrationWithinMonth,\n      withinTarget: totalWithinTargetInMonth,\n      within1Year: totalWithin1YearInMonth,\n      within5Years: totalWithin5YearsInMonth,\n      estimated: estimatedTargetDayMetrics.totalEstimation,\n      month: monthFilter.monthIndex,\n      year: monthFilter.year\n    })\n  }\n  return estimations\n}",
      "startLine": 39,
      "endLine": 118,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/monthWiseEventEstimations/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-44",
      "type": "function_declaration",
      "name": "getTimeLoggedByStatus",
      "text": "async function getTimeLoggedByStatus(\n  compositionId: string,\n  status: string\n): Promise<ITimeLoggedData> {\n  const timeLoggedData: ITimeLoggedData[] = await query(\n    `SELECT timeSpentEditing\n          FROM declaration_time_logged\n        WHERE compositionId = $compositionId\n        AND currentStatus = $status`,\n    {\n      placeholders: {\n        compositionId,\n        status\n      }\n    }\n  )\n  return timeLoggedData && timeLoggedData.length > 0\n    ? timeLoggedData[0]\n    : // Send 0 if no logged data found for given status\n      { timeSpentEditing: 0 }\n}",
      "startLine": 24,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/getTimeLogged/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-60",
      "type": "function_declaration",
      "name": "getTimeLogged",
      "text": "async function getTimeLogged(\n  compositionId: string\n): Promise<ITimeLoggedData[]> {\n  const timeLoggedData: ITimeLoggedData[] = await query(\n    `SELECT currentStatus as status, timeSpentEditing\n          FROM declaration_time_logged\n        WHERE compositionId = $compositionId`,\n    {\n      placeholders: {\n        compositionId\n      }\n    }\n  )\n  return timeLoggedData && timeLoggedData.length > 0 ? timeLoggedData : []\n}",
      "startLine": 46,
      "endLine": 60,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/getTimeLogged/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-63",
      "type": "function_declaration",
      "name": "totalMetricsHandler",
      "text": "async function totalMetricsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = request.query[LOCATION_ID]\n    ? (`Location/${request.query[LOCATION_ID]}` as const)\n    : undefined\n  const event = request.query[EVENT]\n  const authHeader: IAuthHeader = {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  }\n\n  if (locationId) {\n    return await getTotalMetricsByLocation(\n      timeStart,\n      timeEnd,\n      locationId,\n      event,\n      authHeader\n    )\n  } else {\n    return await getTotalMetrics(timeStart, timeEnd, event, authHeader)\n  }\n}",
      "startLine": 37,
      "endLine": 63,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/totalMetrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@65-132",
      "type": "function_declaration",
      "name": "totalMetricsByRegistrar",
      "text": "async function totalMetricsByRegistrar(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = request.query[LOCATION_ID]\n    ? (`Location/${request.query[LOCATION_ID]}` as const)\n    : undefined\n  const event = request.query[EVENT]\n  const skip = request.query[SKIP]\n  const size = request.query[SIZE]\n\n  const authHeader: IAuthHeader = {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  }\n\n  const totalRegistrations = locationId\n    ? await getTotalMetricsByLocation(\n        timeStart,\n        timeEnd,\n        locationId,\n        event,\n        authHeader\n      )\n    : await getTotalMetrics(timeStart, timeEnd, event, authHeader)\n\n  const registrarIDs = uniqBy(\n    totalRegistrations.results,\n    'registrarPractitionerId'\n  ).map((item) => item.registrarPractitionerId)\n\n  const results: any[] = []\n\n  registrarIDs.forEach((registrarId) => {\n    const registrarResults = totalRegistrations.results.filter(\n      (result) => result.registrarPractitionerId === registrarId\n    )\n    const lateRegistrations = registrarResults.filter(\n      (result) => result.timeLabel === 'withinLate'\n    )\n    const delayedRegistrations = registrarResults.filter(\n      (result) => !['withinLate', 'withinTarget'].includes(result.timeLabel)\n    )\n\n    results.push({\n      registrarPractitioner: registrarId,\n      total: registrarResults.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      late: lateRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      delayed: delayedRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      )\n    })\n  })\n\n  return {\n    total: results.length,\n    results: results.splice(skip, size)\n  }\n}",
      "startLine": 65,
      "endLine": 132,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/totalMetrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@134-215",
      "type": "function_declaration",
      "name": "totalMetricsByLocation",
      "text": "async function totalMetricsByLocation(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const event = request.query[EVENT]\n  const locationId = request.query[LOCATION_ID]\n    ? (`Location/${request.query[LOCATION_ID]}` as const)\n    : undefined\n  const skip = request.query[SKIP]\n  const size = request.query[SIZE]\n\n  const results = locationId\n    ? await fetchRegistrationsGroupByOfficeLocationByLocation(\n        timeStart,\n        timeEnd,\n        event,\n        locationId\n      )\n    : await fetchRegistrationsGroupByOfficeLocation(timeStart, timeEnd, event)\n\n  const locationIDs = uniqBy(results, 'officeLocation').map(\n    (item) => item.officeLocation\n  )\n\n  const response: any[] = []\n\n  locationIDs.forEach((locationID) => {\n    const registrations = results.filter(\n      (result) => result.officeLocation === locationID\n    )\n\n    const lateRegistrations = registrations.filter(\n      (result) => result.timeLabel === 'withinLate'\n    )\n    const delayedRegistrations = registrations.filter(\n      (result) => !['withinLate', 'withinTarget'].includes(result.timeLabel)\n    )\n\n    const healthFacilityRegistrations = registrations.filter(\n      (result) =>\n        result.eventLocationType === EVENT_LOCATION_TYPE.HEALTH_FACILITY\n    )\n\n    const homeRegistrations = registrations.filter((result) =>\n      event === 'BIRTH'\n        ? result.eventLocationType === EVENT_LOCATION_TYPE.PRIVATE_HOME\n        : result.eventLocationType ===\n          EVENT_LOCATION_TYPE.DECEASED_USUAL_RESIDENCE\n    )\n\n    response.push({\n      location: locationID,\n      total: registrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      late: lateRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      delayed: delayedRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      home: homeRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      healthFacility: healthFacilityRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      )\n    })\n  })\n\n  return {\n    total: response.length,\n    results: response.splice(skip, size)\n  }\n}",
      "startLine": 134,
      "endLine": 215,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/totalMetrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@217-301",
      "type": "function_declaration",
      "name": "totalMetricsByTime",
      "text": "async function totalMetricsByTime(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = request.query[LOCATION_ID]\n    ? (`Location/${request.query[LOCATION_ID]}` as const)\n    : undefined\n  const event = request.query[EVENT]\n  const skip = request.query[SKIP]\n  const size = request.query[SIZE]\n\n  const registrationsByGroup = await fetchRegistrationsGroupByTime(\n    timeStart,\n    timeEnd,\n    event,\n    locationId\n  )\n\n  const registrations = registrationsByGroup\n\n  registrations.forEach((registration) => {\n    registration.month = format(new Date(registration.time), 'yyyy-MM-dd')\n  })\n\n  const months = uniqBy(registrations, 'month').map((item) => item.month)\n\n  const results: any[] = []\n\n  months.forEach((month) => {\n    const filteredRegistrations = registrations.filter(\n      (registration) => registration.month === month\n    )\n\n    const lateRegistrations = filteredRegistrations.filter(\n      (result) => result.timeLabel === 'withinLate'\n    )\n    const delayedRegistrations = filteredRegistrations.filter(\n      (result) => !['withinLate', 'withinTarget'].includes(result.timeLabel)\n    )\n\n    const healthFacilityRegistrations = filteredRegistrations.filter(\n      (result) =>\n        result.eventLocationType === EVENT_LOCATION_TYPE.HEALTH_FACILITY\n    )\n\n    const homeRegistrations = filteredRegistrations.filter((result) =>\n      event === 'BIRTH'\n        ? result.eventLocationType === EVENT_LOCATION_TYPE.PRIVATE_HOME\n        : result.eventLocationType ===\n          EVENT_LOCATION_TYPE.DECEASED_USUAL_RESIDENCE\n    )\n\n    results.push({\n      total: filteredRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      late: lateRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      delayed: delayedRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      home: homeRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      healthFacility: healthFacilityRegistrations.reduce(\n        (total, currentValue) => total + currentValue.total,\n        0\n      ),\n      month,\n      time: new Date(month).getTime()\n    })\n  })\n\n  return {\n    total: results.length,\n    results: results.splice(skip, size)\n  }\n}",
      "startLine": 217,
      "endLine": 301,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/totalMetrics/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@131-136",
      "type": "function_declaration",
      "name": "toInfluxTimestamp",
      "text": "function toInfluxTimestamp(date?: Date | string) {\n  if (!date) {\n    return undefined\n  }\n  return new Date(date).valueOf() * 1000000\n}",
      "startLine": 131,
      "endLine": 136,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/pointGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@315-349",
      "type": "function_declaration",
      "name": "generateCorrectionReasonPoint",
      "text": "async function generateCorrectionReasonPoint(\n  payload: fhir.Bundle,\n  authHeader: IAuthHeader\n): Promise<ICorrectionPoint> {\n  const composition = getComposition(payload)\n  const task = getTask(payload)\n  if (!task) {\n    throw new Error('Task not found')\n  }\n  if (!composition) {\n    throw new Error('Composition not found')\n  }\n  if (!task.reason) {\n    throw new Error(\"Tasks didn't include a reason field\")\n  }\n\n  const reason = task.reason.text\n\n  const fields = {\n    compositionId: composition.id!\n  }\n\n  const tags = {\n    eventType: getDeclarationType(task),\n    officeLocation: getRegLastOffice(payload),\n    reason: reason || 'UNKNOWN'\n  }\n\n  return {\n    measurement: 'correction',\n    tags,\n    fields,\n    timestamp: toInfluxTimestamp(task.lastModified)\n  }\n}",
      "startLine": 315,
      "endLine": 349,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/pointGenerator.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@465-468",
      "type": "method_definition",
      "name": "if",
      "text": "if (currentTask && currentTask.focus && currentTask.focus.reference) {\n      compositionId = currentTask.focus.reference.split('/')[1]\n      timestamp = currentTask.meta?.lastUpdated\n    }",
      "startLine": 465,
      "endLine": 468,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/pointGenerator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-58",
      "type": "function_declaration",
      "name": "newAuditHandler",
      "text": "async function newAuditHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const points = []\n  try {\n    const remoteAddress =\n      request.headers['x-real-ip'] || request.info.remoteAddress\n    const userAgent =\n      request.headers['x-real-user-agent'] || request.headers['user-agent']\n    const payload = request.payload as IUserAuditBody\n    let practitionerId\n    if (payload.practitionerId) {\n      practitionerId = payload.practitionerId!\n    } else {\n      const userId = getClientIdFromToken(request.headers.authorization)\n      const user = await getUser(userId, {\n        Authorization: request.headers.authorization\n      })\n      practitionerId = user.practitionerId\n    }\n\n    points.push(\n      generateAuditPoint(\n        practitionerId,\n        payload.action,\n        remoteAddress,\n        userAgent,\n        payload.additionalData\n      )\n    )\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n  return h.response().code(201)\n}",
      "startLine": 22,
      "endLine": 58,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/audit/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-82",
      "type": "function_declaration",
      "name": "getUser",
      "text": "async function getUser(\n  userId: string,\n  authHeader: { Authorization: string }\n): Promise<IUserModelData> {\n  const res = await fetch(`${USER_MANAGEMENT_URL}/getUser`, {\n    method: 'POST',\n    body: JSON.stringify({ userId }),\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader\n    }\n  })\n\n  if (!res.ok) {\n    throw new Error(\n      `Unable to retrieve user mobile number. Error: ${\n        res.status\n      } status received. ${await res.text()}`\n    )\n  }\n\n  return await res.json()\n}",
      "startLine": 60,
      "endLine": 82,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/audit/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@84-103",
      "type": "function_declaration",
      "name": "getUserAuditsHandler",
      "text": "async function getUserAuditsHandler(request: Hapi.Request) {\n  const practitionerId = request.query[PRACTITIONER_ID]\n  const skip = request.query['skip'] || 0\n  const size = request.query['count']\n  const timeStart = request.query['timeStart']\n  const timeEnd = request.query['timeEnd']\n\n  const results = await getUserAuditEvents(\n    practitionerId,\n    size,\n    skip,\n    timeStart,\n    timeEnd\n  )\n  const total = await countUserAuditEvents(practitionerId, timeStart, timeEnd)\n  return {\n    results,\n    total\n  }\n}",
      "startLine": 84,
      "endLine": 103,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/audit/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@42-44",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n  mongoose.disconnect()\n}",
      "startLine": 42,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/config/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-48",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n  return connect()\n}",
      "startLine": 46,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/config/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@96-117",
      "type": "function_declaration",
      "name": "createUserAuditPointFromFHIR",
      "text": "async function createUserAuditPointFromFHIR(\n  action: UserAuditAction,\n  request: Hapi.Request\n) {\n  const ipAddress = request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  const bundle = request.payload as fhir.Bundle\n  return writePoints([\n    generateAuditPoint(\n      getPractitionerIdFromBundle(bundle)!,\n      action,\n      ipAddress,\n      userAgent,\n      {\n        compositionId: getCompositionIdFromCompositionOrTask(bundle),\n        trackingId: getTrackingId(getTask(bundle)!)\n      }\n    )\n  ])\n}",
      "startLine": 96,
      "endLine": 117,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/audit/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@119-153",
      "type": "function_declaration",
      "name": "getUserAuditEvents",
      "text": "async function getUserAuditEvents(\n  practitionerId: string,\n  size: number,\n  skip: number,\n  timeStart: string,\n  timeEnd: string\n): Promise<Array<UserAuditDataPoint>> {\n  let startDate\n  let endDate\n  let startDateCondition = ''\n  let endDateCondition = ''\n\n  if (timeStart) {\n    startDate = toInfluxTimestamp(timeStart)\n    startDateCondition = ` and time >= ${startDate}`\n  }\n  if (timeEnd) {\n    endDate = toInfluxTimestamp(timeEnd)\n    endDateCondition = ` and time <= ${endDate}`\n  }\n\n  const results = await query<Array<RawUserAuditDataPoint>>(\n    `SELECT * from user_audit_event where practitionerId = $practitionerId ${startDateCondition} ${endDateCondition} order by time desc limit ${size} offset ${skip}`,\n    {\n      placeholders: {\n        practitionerId: practitionerId\n      }\n    }\n  )\n\n  return results.map((row) => ({\n    ...row,\n    data: row.data ? JSON.parse(row.data) : {}\n  }))\n}",
      "startLine": 119,
      "endLine": 153,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/audit/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@155-183",
      "type": "function_declaration",
      "name": "countUserAuditEvents",
      "text": "async function countUserAuditEvents(\n  practitionerId: string,\n  timeStart: string,\n  timeEnd: string\n): Promise<number> {\n  let startDate\n  let endDate\n  let startDateCondition = ''\n  let endDateCondition = ''\n\n  if (timeStart) {\n    startDate = toInfluxTimestamp(timeStart)\n    startDateCondition = ` and time >= ${startDate}`\n  }\n  if (timeEnd) {\n    endDate = toInfluxTimestamp(timeEnd)\n    endDateCondition = ` and time <= ${endDate}`\n  }\n  const result = await query(\n    `SELECT COUNT(ipAddress)\n     from user_audit_event\n     where practitionerId = $practitionerId ${startDateCondition} ${endDateCondition}`,\n    { placeholders: { practitionerId: practitionerId } }\n  )\n  if (result.length === 0) {\n    return 0\n  }\n  return result[0].count\n}",
      "startLine": 155,
      "endLine": 183,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/audit/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-28",
      "type": "function_declaration",
      "name": "wait",
      "text": "async function wait(delay: number) {\n  await new Promise((resolve) => setTimeout(resolve, delay))\n}",
      "startLine": 26,
      "endLine": 28,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/config/hearthClient.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-39",
      "type": "function_declaration",
      "name": "totalCorrectionsHandler",
      "text": "async function totalCorrectionsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const timeStart = request.query[TIME_FROM]\n  const timeEnd = request.query[TIME_TO]\n  const locationId = request.query[LOCATION_ID]\n    ? (`Location/${request.query[LOCATION_ID]}` as const)\n    : undefined\n  const event = request.query[EVENT]\n\n  if (locationId) {\n    return getTotalCorrectionsByLocation(timeStart, timeEnd, locationId, event)\n  } else {\n    return getTotalCorrections(timeStart, timeEnd, event)\n  }\n}",
      "startLine": 23,
      "endLine": 39,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/corrections/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@112-119",
      "type": "function_declaration",
      "name": "createEstimatesArray",
      "text": "function createEstimatesArray(\n  years: number[],\n  extension: fhir.Extension\n) {\n  const output: number[] = []\n  const locationExtensions = JSON.parse(extension.valueString as string) as {\n    [key: string]: number\n  }",
      "startLine": 112,
      "endLine": 119,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@376-398",
      "type": "function_declaration",
      "name": "fetchChildLocationIdsByParentId",
      "text": "async function fetchChildLocationIdsByParentId(\n  parentLocationId: string,\n  currentLocationLevel: string,\n  lowerLocationLevel: string,\n  authHeader: IAuthHeader\n) {\n  if (currentLocationLevel !== lowerLocationLevel) {\n    const bundle = await fetchFHIR(\n      `Location?partof=${parentLocationId}`,\n      authHeader\n    )\n\n    return (\n      (bundle &&\n        bundle.entry.map(\n          (entry: { resource: { id: string } }) =>\n            `Location/${entry.resource.id}`\n        )) ||\n      []\n    )\n  }\n  return [`Location/${parentLocationId}`]\n}",
      "startLine": 376,
      "endLine": 398,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@400-436",
      "type": "function_declaration",
      "name": "getMonthRangeFilterListFromTimeRage",
      "text": "function getMonthRangeFilterListFromTimeRage(\n  timeStart: string,\n  timeEnd: string\n): IMonthRangeFilter[] {\n  const startDateMonth = new Date(timeStart).getMonth()\n  const startDateYear = new Date(timeStart).getFullYear()\n  const endDateMonth = new Date(timeEnd).getMonth()\n  const endDateYear = new Date(timeEnd).getFullYear()\n\n  const monthFilterList: IMonthRangeFilter[] = []\n  const monthDiffs =\n    (endDateYear - startDateYear) * 12 + (endDateMonth - startDateMonth)\n  const rangeOfMonths = eachMonthOfInterval({\n    start: new Date(timeStart),\n    end: new Date(timeEnd)\n  })\n  for (let index = 0; index <= monthDiffs; index += 1) {\n    const filterDate = rangeOfMonths[index]\n    monthFilterList.push({\n      monthIndex: filterDate.getMonth(),\n      month: filterDate.toLocaleString('en-us', { month: 'long' }),\n      year: filterDate.getFullYear(),\n      startOfMonthTime: new Date(\n        filterDate.getFullYear(),\n        filterDate.getMonth(),\n        1\n      ).toISOString(),\n      endOfMonthTime: new Date(\n        filterDate.getFullYear(),\n        filterDate.getMonth() + 1,\n        1\n      ).toISOString()\n    })\n  }\n\n  return monthFilterList\n}",
      "startLine": 400,
      "endLine": 436,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@438-450",
      "type": "function_declaration",
      "name": "getRegistrationTargetDays",
      "text": "async function getRegistrationTargetDays(\n  event: string,\n  authorization: string\n) {\n  const applicationConfig = await getApplicationConfig(authorization)\n  const targetDays =\n    event === EVENT_TYPE.BIRTH\n      ? applicationConfig.BIRTH?.REGISTRATION_TARGET\n      : event === EVENT_TYPE.DEATH\n        ? applicationConfig.DEATH?.REGISTRATION_TARGET\n        : applicationConfig.MARRIAGE?.REGISTRATION_TARGET\n  return targetDays\n}",
      "startLine": 438,
      "endLine": 450,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@500-511",
      "type": "function_declaration",
      "name": "getDaysPerYear",
      "text": "function getDaysPerYear(fromDate: Date, toDate: Date) {\n  const daysPerYear: number[] = []\n  eachYearOfInterval({ start: fromDate, end: toDate }).forEach((date) => {\n    const year = date.getFullYear()\n    let rangeStart = startOfYear(new Date(year, 0, 1))\n    let rangeEnd = endOfYear(new Date(year, 11, 31))\n    if (rangeStart < fromDate) rangeStart = fromDate\n    if (rangeEnd > toDate) rangeEnd = toDate\n    daysPerYear.push(differenceInDays(rangeEnd, rangeStart) + 1)\n  })\n  return daysPerYear\n}",
      "startLine": 500,
      "endLine": 511,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/metrics/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-45",
      "type": "function_declaration",
      "name": "getTotalCorrections",
      "text": "async function getTotalCorrections(\n  timeFrom: string,\n  timeTo: string,\n  event: EVENT_TYPE\n) {\n  const q = `SELECT COUNT(compositionId) AS total\n      FROM correction\n    WHERE time > $timeFrom\n      AND time <= $timeTo\n      AND eventType = $event\n    GROUP BY reason`\n\n  const totalCorrections: ICorrectionTotalGroup[] = await query(q, {\n    placeholders: {\n      timeFrom,\n      timeTo,\n      event\n    }\n  })\n\n  return totalCorrections\n}",
      "startLine": 24,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/corrections/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@47-91",
      "type": "function_declaration",
      "name": "getTotalCorrectionsByLocation",
      "text": "async function getTotalCorrectionsByLocation(\n  timeFrom: string,\n  timeTo: string,\n  locationId: ResourceIdentifier<Location>,\n  event: EVENT_TYPE\n) {\n  const locationIds = await fetchLocationChildrenIds(locationId, 'CRVS_OFFICE')\n\n  const batchQuery = async (locationIds: string[]) => {\n    const [officeLocationInChildren, locationPlaceholders] = helpers.in(\n      locationIds,\n      'officeLocation'\n    )\n\n    const q = `SELECT COUNT(compositionId) AS total\n                FROM correction\n              WHERE time > $timeFrom\n                AND time <= $timeTo\n                AND eventType = $event\n                AND (${officeLocationInChildren})\n              GROUP BY reason`\n\n    try {\n      const totalCorrections: ICorrectionTotalGroup[] = await query(q, {\n        placeholders: {\n          timeFrom,\n          timeTo,\n          event,\n          ...locationPlaceholders\n        }\n      })\n      return totalCorrections\n    } catch (error) {\n      logger.error(\n        `Error fetching total corrections by location: ${error.message}`\n      )\n      throw error\n    }\n  }\n\n  const locationBatches = createChunks(locationIds, 1000)\n  return await Promise.all(locationBatches.map(batchQuery)).then((res) =>\n    res.flat()\n  )\n}",
      "startLine": 47,
      "endLine": 91,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/corrections/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-84",
      "type": "function_declaration",
      "name": "getForm",
      "text": "async function getForm(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const token = request.headers.authorization\n  const url = new URL('forms', env.COUNTRY_CONFIG_URL)\n  const response = await fetch(url, {\n    headers: {\n      Authorization: token\n    }\n  })\n\n  if (response.status !== 200) {\n    logger.error(\n      `Core failed to fetch form definition from ${url.href}. Check country config logs for more details`\n    )\n\n    return h.response().code(500)\n  }\n\n  const forms: IFormsPayload = await response.json()\n\n  if (process.env.NODE_ENV === 'development') {\n    const result = registrationForms.safeParse(forms)\n\n    if (!result.success) {\n      throw badData(\n        fromZodError(result.error, {\n          prefix: 'Form validation error',\n          maxIssuesInMessage: 5\n        }).message\n      )\n    }\n  }\n\n  const formVersion: IFormVersionModel | null = await FormVersions.findOne({\n    version: forms.version\n  })\n  if (!formVersion) {\n    try {\n      await FormVersions.create({\n        birthForm: JSON.stringify(forms.birth),\n        deathForm: JSON.stringify(forms.death),\n        marriageForm: JSON.stringify(forms.marriage),\n        version: forms.version,\n        status: Status.ACTIVE\n      })\n    } catch (err) {\n      logger.error(err)\n      // return 400 if there is a validation error when saving to mongo\n      return h.response().code(400)\n    }\n  }\n  return h.response(forms).code(200)\n}",
      "startLine": 30,
      "endLine": 84,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/forms/formsHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-54",
      "type": "function_declaration",
      "name": "configHandler",
      "text": "async function configHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const [certificates, config, systems] = await Promise.all([\n      getCertificatesConfig(request, h),\n      getApplicationConfig(request, h),\n      getSystems(request, h)\n    ])\n    return {\n      config,\n      certificates,\n      systems\n    }\n  } catch (ex) {\n    logger.error(ex)\n    if (process.env.NODE_ENV === 'development') {\n      throw ex\n    }\n    return {}\n  }\n}",
      "startLine": 32,
      "endLine": 54,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/application/applicationConfigHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@56-82",
      "type": "function_declaration",
      "name": "getCertificatesConfig",
      "text": "async function getCertificatesConfig(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const authToken = getToken(request)\n  const decodedOrError = pipe(authToken, verifyToken)\n  if (decodedOrError._tag === 'Left') {\n    return []\n  }\n  const { scope } = decodedOrError.right\n\n  if (scope.includes(SCOPES.RECORD_PRINT_ISSUE_CERTIFIED_COPIES)) {\n    const url = new URL(`/certificates`, env.COUNTRY_CONFIG_URL).toString()\n\n    const res = await fetch(url, {\n      headers: { Authorization: `Bearer ${authToken}` }\n    })\n\n    if (!res.ok) {\n      throw new Error(\n        `Failed to fetch certificates configuration: ${res.statusText} ${url}`\n      )\n    }\n    return res.json()\n  }\n  return []\n}",
      "startLine": 56,
      "endLine": 82,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/application/applicationConfigHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@84-92",
      "type": "function_declaration",
      "name": "getConfigFromCountry",
      "text": "async function getConfigFromCountry(authToken?: string) {\n  const url = new URL('application-config', env.COUNTRY_CONFIG_URL).toString()\n\n  const res = await fetch(url)\n  if (!res.ok) {\n    throw new Error(`Expected to get the application config from ${url}`)\n  }\n  return res.json()\n}",
      "startLine": 84,
      "endLine": 92,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/application/applicationConfigHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-32",
      "type": "function_declaration",
      "name": "getAgeInDays",
      "text": "function getAgeInDays(dateOfBirth: YYYY_MM_DD, fromDate: Date) {\n  return getDurationInDays(dateOfBirth, fromDate.toISOString())\n}",
      "startLine": 30,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-36",
      "type": "function_declaration",
      "name": "getdaysAfterEvent",
      "text": "function getdaysAfterEvent(marriageDate: YYYY_MM_DD, fromDate: Date) {\n  return getDurationInDays(marriageDate, fromDate.toISOString())\n}",
      "startLine": 34,
      "endLine": 36,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-40",
      "type": "function_declaration",
      "name": "getAgeInYears",
      "text": "function getAgeInYears(dateOfBirth: YYYY_MM_DD, fromDate: Date) {\n  return getDurationInYears(dateOfBirth, fromDate.toISOString())\n}",
      "startLine": 38,
      "endLine": 40,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@42-46",
      "type": "function_declaration",
      "name": "getDurationInDays",
      "text": "function getDurationInDays(from: ISO_DATE, to: ISO_DATE) {\n  const toDate = new Date(to)\n  const fromDate = new Date(from)\n  return differenceInDays(toDate, fromDate)\n}",
      "startLine": 42,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@48-52",
      "type": "function_declaration",
      "name": "getDurationInSeconds",
      "text": "function getDurationInSeconds(from: ISO_DATE, to: ISO_DATE) {\n  const toDate = new Date(to)\n  const fromDate = new Date(from)\n  return differenceInSeconds(toDate, fromDate)\n}",
      "startLine": 48,
      "endLine": 52,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-58",
      "type": "function_declaration",
      "name": "getDurationInYears",
      "text": "function getDurationInYears(from: ISO_DATE, to: ISO_DATE) {\n  const toDate = new Date(to)\n  const fromDate = new Date(from)\n  return differenceInYears(toDate, fromDate)\n}",
      "startLine": 54,
      "endLine": 58,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@71-142",
      "type": "function_declaration",
      "name": "populateBundleFromPayload",
      "text": "async function populateBundleFromPayload(\n  payload: fhir.Bundle | fhir.Task,\n  authHeader: string\n) {\n  let bundle: fhir.Bundle | null = null\n  if (payload.resourceType === 'Bundle') {\n    bundle = payload as fhir.Bundle\n\n    const composition = getComposition(bundle)\n    const hasBundleBeenPopulated = composition !== undefined\n    if (hasBundleBeenPopulated) {\n      // Assume that if the bundle already has a fhir.Composition, it has already been populated\n      return bundle\n    }\n  }\n\n  if (payload.resourceType === 'Task') {\n    bundle = {\n      resourceType: 'Bundle',\n      type: 'document',\n      entry: [{ resource: payload }]\n    }\n  }\n\n  if (!bundle || !bundle.entry) {\n    throw new Error('Bundle not properly formed')\n  }\n\n  const task = getTask(bundle)\n\n  if (!task) {\n    throw new Error('No task resource available')\n  }\n\n  let composition = getComposition(bundle)\n  if (!composition) {\n    if (!task.focus || !task.focus.reference) {\n      throw new Error(\n        \"Could not fetch composition as the task didn't have a focus reference\"\n      )\n    }\n    composition = await fetchFHIR(task.focus.reference, {\n      Authorization: authHeader\n    })\n\n    if (!composition) {\n      throw new Error(\n        `Composition ${task.focus.reference} not found on FHIR store`\n      )\n    }\n\n    bundle.entry.unshift({\n      fullUrl: task.focus.reference,\n      resource: composition\n    }) // we expect the composition to be in position 0\n  }\n\n  for (const section of composition.section || []) {\n    if (section.entry && section.entry[0] && section.entry[0].reference) {\n      const referencedResource = await fetchFHIR(section.entry[0].reference, {\n        Authorization: authHeader\n      })\n\n      bundle.entry.push({\n        fullUrl: section.entry[0].reference,\n        resource: referencedResource\n      })\n    }\n  }\n\n  return bundle\n}",
      "startLine": 71,
      "endLine": 142,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@144-165",
      "type": "function_declaration",
      "name": "getTimeLabel",
      "text": "async function getTimeLabel(\n  timeInDays: number,\n  event: EVENT_TYPE,\n  authorization: string\n): Promise<string> {\n  const regTargetDays = await getRegistrationTargetDays(event, authorization)\n  const regLateTargetDays = await getRegistrationLateTargetDays(\n    event,\n    authorization\n  )\n  if (timeInDays <= regTargetDays) {\n    return 'withinTarget'\n  } else if (regLateTargetDays && timeInDays <= regLateTargetDays) {\n    return 'withinLate'\n  } else if (timeInDays <= 365) {\n    return 'within1Year'\n  } else if (timeInDays <= 1825) {\n    return 'within5Years'\n  } else {\n    return 'after5Years'\n  }\n}",
      "startLine": 144,
      "endLine": 165,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@167-173",
      "type": "function_declaration",
      "name": "getAgeLabel",
      "text": "function getAgeLabel(ageInDays: number) {\n  if (ageInDays < 6574) {\n    return 'under18'\n  } else {\n    return 'over18'\n  }\n}",
      "startLine": 167,
      "endLine": 173,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-69",
      "type": "function_declaration",
      "name": "waitingExternalValidationHandler",
      "text": "async function waitingExternalValidationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const points = []\n  try {\n    points.push(\n      await generateTimeLoggedPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    )\n    points.push(\n      await generateEventDurationPoint(\n        request.payload as fhir.Bundle,\n        ['IN_PROGRESS', 'DECLARED', 'VALIDATED'],\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        }\n      )\n    )\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 40,
      "endLine": 69,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@71-77",
      "type": "function_declaration",
      "name": "markedAsDuplicate",
      "text": "async function markedAsDuplicate(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('MARKED_AS_DUPLICATE', request)\n  return h.response().code(200)\n}",
      "startLine": 71,
      "endLine": 77,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@79-85",
      "type": "function_declaration",
      "name": "markedAsNotDuplicate",
      "text": "async function markedAsNotDuplicate(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('MARKED_AS_NOT_DUPLICATE', request)\n  return h.response().code(200)\n}",
      "startLine": 79,
      "endLine": 85,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@87-114",
      "type": "function_declaration",
      "name": "sentForApprovalHandler",
      "text": "async function sentForApprovalHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('VALIDATED', request)\n  try {\n    const points = await Promise.all([\n      generateEventDurationPoint(\n        request.payload as fhir.Bundle,\n        ['IN_PROGRESS', 'DECLARED'],\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        }\n      ),\n      generateTimeLoggedPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    ])\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 87,
      "endLine": 114,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@116-144",
      "type": "function_declaration",
      "name": "sentNotificationForReviewHandler",
      "text": "async function sentNotificationForReviewHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const points = []\n\n  await createUserAuditPointFromFHIR('DECLARED', request)\n\n  try {\n    points.push(\n      await generateTimeLoggedPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    )\n    points.push(\n      await generateDeclarationStartedPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    )\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 116,
      "endLine": 144,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@146-178",
      "type": "function_declaration",
      "name": "sentNotificationHandler",
      "text": "async function sentNotificationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('IN_PROGRESS', request)\n  try {\n    const points = await generateInCompleteFieldPoints(\n      request.payload as fhir.Bundle,\n      {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      }\n    )\n    points.push(\n      await generateTimeLoggedPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    )\n    points.push(\n      await generateDeclarationStartedPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    )\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 146,
      "endLine": 178,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@180-221",
      "type": "function_declaration",
      "name": "sentForUpdatesHandler",
      "text": "async function sentForUpdatesHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('REJECTED', request)\n  try {\n    const points: IPoints[] = []\n    points.push(\n      await generateRejectedPoints(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    )\n    points.push(\n      await generateTimeLoggedPoint(\n        request.payload as fhir.Bundle,\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        },\n        true\n      )\n    )\n\n    points.push(\n      await generateEventDurationPoint(\n        request.payload as fhir.Bundle,\n        ['IN_PROGRESS', 'DECLARED', 'VALIDATED', 'WAITING_VALIDATION'],\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        },\n        true\n      )\n    )\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 180,
      "endLine": 221,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@223-236",
      "type": "function_declaration",
      "name": "markEventRegisteredHandler",
      "text": "async function markEventRegisteredHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const event = request.params.event as EventType\n  if (event === EventType.BIRTH) {\n    return markBirthRegisteredHandler(request, h)\n  } else if (event === EventType.DEATH) {\n    return markDeathRegisteredHandler(request, h)\n  } else if (event === EventType.MARRIAGE) {\n    return markMarriageRegisteredHandler(request, h)\n  }\n  return h.response().code(200)\n}",
      "startLine": 223,
      "endLine": 236,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@238-274",
      "type": "function_declaration",
      "name": "markBirthRegisteredHandler",
      "text": "async function markBirthRegisteredHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('REGISTERED', request)\n  try {\n    const bundle = await populateBundleFromPayload(\n      request.payload as fhir.Bundle | fhir.Task,\n      request.headers.authorization\n    )\n\n    const points = await Promise.all([\n      generateEventDurationPoint(\n        bundle,\n        ['IN_PROGRESS', 'DECLARED', 'VALIDATED', 'WAITING_VALIDATION'],\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        }\n      ),\n      generateBirthRegPoint(bundle, 'mark-existing-declaration-registered', {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      }),\n      generateTimeLoggedPoint(bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    ])\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 238,
      "endLine": 274,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@276-313",
      "type": "function_declaration",
      "name": "markDeathRegisteredHandler",
      "text": "async function markDeathRegisteredHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('REGISTERED', request)\n\n  try {\n    const bundle = await populateBundleFromPayload(\n      request.payload as fhir.Bundle | fhir.Task,\n      request.headers.authorization\n    )\n\n    const points = await Promise.all([\n      generateEventDurationPoint(\n        bundle,\n        ['IN_PROGRESS', 'DECLARED', 'VALIDATED', 'WAITING_VALIDATION'],\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        }\n      ),\n      generateDeathRegPoint(bundle, 'mark-existing-declaration-registered', {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      }),\n      generateTimeLoggedPoint(bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    ])\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 276,
      "endLine": 313,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@315-336",
      "type": "function_declaration",
      "name": "markCertifiedHandler",
      "text": "async function markCertifiedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('CERTIFIED', request)\n  try {\n    const points = await generateEventDurationPoint(\n      request.payload as fhir.Bundle,\n      ['REGISTERED', 'ISSUED'],\n      {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      }\n    )\n\n    await writePoints([points])\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 315,
      "endLine": 336,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@338-372",
      "type": "function_declaration",
      "name": "markIssuedHandler",
      "text": "async function markIssuedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('ISSUED', request)\n  try {\n    const points = await Promise.all([\n      generatePaymentPoint(\n        request.payload as fhir.Bundle,\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        },\n        'certification'\n      ),\n      generateCertificationPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      }),\n      generateEventDurationPoint(\n        request.payload as fhir.Bundle,\n        ['CERTIFIED'],\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        }\n      )\n    ])\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 338,
      "endLine": 372,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@378-421",
      "type": "function_declaration",
      "name": "correctionEventHandler",
      "text": "async function correctionEventHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const task = getTask(request.payload as fhir.Bundle)\n\n  if (!task) {\n    return badRequest('No task found in received bundle')\n  }\n\n  const history = await fetchTaskHistory(task.id!, {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  })\n\n  const latestCorrectionTask: TaskBundleEntry | undefined = history.entry?.find(\n    (entry: TaskBundleEntry): entry is TaskBundleEntry =>\n      entry.resource.businessStatus?.coding?.[0].code ===\n        'CORRECTION_REQUESTED' ||\n      Boolean(\n        findExtension(MAKE_CORRECTION_EXTENSION_URL, entry.resource.extension!)\n      )\n  )\n\n  if (!latestCorrectionTask) {\n    return badRequest('No correction task found in received bundle')\n  }\n\n  if (latestCorrectionTask.resource.status === 'ready') {\n    return correctionHandler(request, h)\n  }\n  if (latestCorrectionTask.resource.status === 'accepted') {\n    return approveCorrectionHandler(request, h)\n  }\n  if (latestCorrectionTask.resource.status === 'rejected') {\n    return rejectCorrectionHandler(request, h)\n  }\n\n  if (latestCorrectionTask.resource.status === 'requested') {\n    return requestCorrectionHandler(request, h)\n  }\n\n  return badRequest('Task is in an unknown state')\n}",
      "startLine": 378,
      "endLine": 421,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@423-459",
      "type": "function_declaration",
      "name": "correctionHandler",
      "text": "async function correctionHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('CORRECTED', request)\n  const payload = request.payload as fhir.Bundle\n  const payment = getPaymentReconciliation(payload)\n  try {\n    const points = await Promise.all([\n      ...(payment\n        ? [\n            generatePaymentPoint(\n              payload,\n              {\n                Authorization: request.headers.authorization\n              },\n              'correction'\n            )\n          ]\n        : []),\n      generateCorrectionReasonPoint(payload, {\n        Authorization: request.headers.authorization\n      }),\n      generateEventDurationPoint(payload, ['REGISTERED', 'CERTIFIED'], {\n        Authorization: request.headers.authorization\n      }),\n      generateTimeLoggedPoint(payload, {\n        Authorization: request.headers.authorization\n      })\n    ])\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n  return h.response().code(200)\n}",
      "startLine": 423,
      "endLine": 459,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@461-498",
      "type": "function_declaration",
      "name": "approveCorrectionHandler",
      "text": "async function approveCorrectionHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('APPROVED_CORRECTION', request)\n  const payload = request.payload as fhir.Bundle\n  const payment = getPaymentReconciliation(payload)\n\n  try {\n    const points = await Promise.all([\n      ...(payment\n        ? [\n            generatePaymentPoint(\n              payload,\n              {\n                Authorization: request.headers.authorization\n              },\n              'correction'\n            )\n          ]\n        : []),\n      generateCorrectionReasonPoint(payload, {\n        Authorization: request.headers.authorization\n      }),\n      generateEventDurationPoint(payload, ['CORRECTION_REQUESTED'], {\n        Authorization: request.headers.authorization\n      }),\n      generateTimeLoggedPoint(payload, {\n        Authorization: request.headers.authorization\n      })\n    ])\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n  return h.response().code(200)\n}",
      "startLine": 461,
      "endLine": 498,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@499-523",
      "type": "function_declaration",
      "name": "rejectCorrectionHandler",
      "text": "async function rejectCorrectionHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('REJECTED_CORRECTION', request)\n  try {\n    const points = await Promise.all([\n      generateEventDurationPoint(\n        request.payload as fhir.Bundle,\n        ['REGISTERED', 'CERTIFIED'],\n        {\n          Authorization: request.headers.authorization\n        }\n      ),\n      generateTimeLoggedPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization\n      })\n    ])\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n  return h.response().code(200)\n}",
      "startLine": 499,
      "endLine": 523,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@525-552",
      "type": "function_declaration",
      "name": "requestCorrectionHandler",
      "text": "async function requestCorrectionHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('REQUESTED_CORRECTION', request)\n  try {\n    const points = await Promise.all([\n      generateCorrectionReasonPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization\n      }),\n      generateEventDurationPoint(\n        request.payload as fhir.Bundle,\n        ['REGISTERED', 'CERTIFIED'],\n        {\n          Authorization: request.headers.authorization\n        }\n      ),\n      generateTimeLoggedPoint(request.payload as fhir.Bundle, {\n        Authorization: request.headers.authorization\n      })\n    ])\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n  return h.response().code(200)\n}",
      "startLine": 525,
      "endLine": 552,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@554-560",
      "type": "function_declaration",
      "name": "declarationAssignedHandler",
      "text": "async function declarationAssignedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('ASSIGNED', request)\n  return h.response().code(200)\n}",
      "startLine": 554,
      "endLine": 560,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@562-568",
      "type": "function_declaration",
      "name": "declarationUnassignedHandler",
      "text": "async function declarationUnassignedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('UNASSIGNED', request)\n  return h.response().code(200)\n}",
      "startLine": 562,
      "endLine": 568,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@570-576",
      "type": "function_declaration",
      "name": "declarationDownloadedHandler",
      "text": "async function declarationDownloadedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('RETRIEVED', request)\n  return h.response().code(200)\n}",
      "startLine": 570,
      "endLine": 576,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@578-584",
      "type": "function_declaration",
      "name": "declarationViewedHandler",
      "text": "async function declarationViewedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('VIEWED', request)\n  return h.response().code(200)\n}",
      "startLine": 578,
      "endLine": 584,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@586-592",
      "type": "function_declaration",
      "name": "declarationArchivedHandler",
      "text": "async function declarationArchivedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('ARCHIVED', request)\n  return h.response().code(200)\n}",
      "startLine": 586,
      "endLine": 592,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@594-611",
      "type": "function_declaration",
      "name": "declarationReinstatedHandler",
      "text": "async function declarationReinstatedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const bundle = request.payload as fhir.Bundle\n  const task = getTask(bundle)\n  const previousAction = getActionFromTask(task!)\n  if (previousAction === 'IN_PROGRESS') {\n    await createUserAuditPointFromFHIR('REINSTATED_IN_PROGRESS', request)\n  }\n  if (previousAction === 'DECLARED') {\n    await createUserAuditPointFromFHIR('REINSTATED_DECLARED', request)\n  }\n  if (previousAction === 'REJECTED') {\n    await createUserAuditPointFromFHIR('REINSTATED_REJECTED', request)\n  }\n  return h.response().code(200)\n}",
      "startLine": 594,
      "endLine": 611,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@613-619",
      "type": "function_declaration",
      "name": "declarationUpdatedHandler",
      "text": "async function declarationUpdatedHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('DECLARATION_UPDATED', request)\n  return h.response().code(200)\n}",
      "startLine": 613,
      "endLine": 619,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@621-662",
      "type": "function_declaration",
      "name": "markMarriageRegisteredHandler",
      "text": "async function markMarriageRegisteredHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  await createUserAuditPointFromFHIR('REGISTERED', request)\n\n  try {\n    const bundle = await populateBundleFromPayload(\n      request.payload as fhir.Bundle | fhir.Task,\n      request.headers.authorization\n    )\n\n    const points = await Promise.all([\n      generateEventDurationPoint(\n        bundle,\n        ['IN_PROGRESS', 'DECLARED', 'VALIDATED', 'WAITING_VALIDATION'],\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        }\n      ),\n      generateMarriageRegPoint(\n        bundle,\n        {\n          Authorization: request.headers.authorization,\n          'x-correlation-id': request.headers['x-correlation-id']\n        },\n        'mark-existing-declaration-registered'\n      ),\n      generateTimeLoggedPoint(bundle, {\n        Authorization: request.headers.authorization,\n        'x-correlation-id': request.headers['x-correlation-id']\n      })\n    ])\n\n    await writePoints(points)\n  } catch (err) {\n    return internal(err)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 621,
      "endLine": 662,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-80",
      "type": "function_declaration",
      "name": "verifyUserHandler",
      "text": "async function verifyUserHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n): Promise<IVerifyUserResponse> {\n  const payload = request.payload as IVerifyUserPayload\n  let result\n  try {\n    result = await verifyUser(payload.mobile, payload.email)\n  } catch (err) {\n    throw unauthorized()\n  }\n  const nonce = generateNonce()\n  const isUserNameRetrievalFlow =\n    payload.retrieveFlow.toLowerCase() === RETRIEVAL_FLOW_USER_NAME\n\n  await storeRetrievalStepInformation(\n    nonce,\n    isUserNameRetrievalFlow\n      ? RetrievalSteps.NUMBER_VERIFIED\n      : RetrievalSteps.WAITING_FOR_VERIFICATION,\n    result\n  )\n\n  if (!isUserNameRetrievalFlow) {\n    const notificationEvent = NotificationEvent.PASSWORD_RESET\n\n    await generateAndSendVerificationCode(\n      nonce,\n      result.scope,\n      notificationEvent,\n      result.userFullName,\n      result.mobile,\n      result.email\n    )\n  }\n\n  const response: IVerifyUserResponse = {\n    nonce\n  }\n  if (isUserNameRetrievalFlow) {\n    response.securityQuestionKey = result.securityQuestionKey\n  }\n  return response\n}",
      "startLine": 37,
      "endLine": 80,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/retrievalSteps/verifyUser/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-59",
      "type": "function_declaration",
      "name": "getSectionBySectionCode",
      "text": "function getSectionBySectionCode(\n  bundle: fhir.Bundle,\n  sectionCode: string\n): fhir.Patient {\n  const composition: fhir.Composition = getResourceByType(\n    bundle,\n    FHIR_RESOURCE_TYPE.COMPOSITION\n  ) as fhir.Composition\n  const personSection =\n    composition &&\n    composition.section &&\n    composition.section.find((section: fhir.CompositionSection) => {\n      if (!section.code || !section.code.coding || !section.code.coding.some) {\n        return false\n      }\n      return section.code.coding.some((coding) => coding.code === sectionCode)\n    })\n\n  if (!personSection || !personSection.entry) {\n    throw new Error(`No section found for given code: ${sectionCode}`)\n  }\n  const sectionRef = personSection.entry[0].reference\n  const personEntry =\n    bundle.entry &&\n    bundle.entry.find((entry: any) => entry.fullUrl?.includes(sectionRef))\n\n  if (!personEntry) {\n    throw new Error(\n      'Patient referenced from composition section not found in FHIR bundle'\n    )\n  }\n  return personEntry.resource as fhir.Patient\n}",
      "startLine": 27,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-62",
      "type": "function_declaration",
      "name": "isTaskResource",
      "text": "function isTaskResource(resource: fhir.Resource): resource is fhir.Task {\n  return resource.resourceType === 'Task'\n}",
      "startLine": 60,
      "endLine": 62,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@110-131",
      "type": "function_declaration",
      "name": "findPreviousTask",
      "text": "function findPreviousTask(\n  historyResponseBundle: fhir.Bundle,\n  allowedPreviousStates: DECLARATION_STATUS[]\n) {\n  const allTasks = findAllPreviousTasks(historyResponseBundle)\n\n  const task =\n    allTasks &&\n    allTasks.find((resource) => {\n      if (!resource.businessStatus || !resource.businessStatus.coding) {\n        return false\n      }\n      return resource.businessStatus.coding.some((coding) =>\n        allowedPreviousStates.includes(coding.code as DECLARATION_STATUS)\n      )\n    })\n\n  if (!task) {\n    return null\n  }\n  return task as fhir.Task\n}",
      "startLine": 110,
      "endLine": 131,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@133-146",
      "type": "function_declaration",
      "name": "findAllPreviousTasks",
      "text": "function findAllPreviousTasks(historyResponseBundle: fhir.Bundle) {\n  const task =\n    historyResponseBundle.entry &&\n    historyResponseBundle.entry\n      .map((entry) => entry.resource)\n      .filter((resource): resource is fhir.Task =>\n        Boolean(resource && isTaskResource(resource))\n      )\n\n  if (!task) {\n    return null\n  }\n  return task as fhir.Task[]\n}",
      "startLine": 133,
      "endLine": 146,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@148-245",
      "type": "function_declaration",
      "name": "getPaymentReconciliation",
      "text": "function getPaymentReconciliation(\n  bundle: fhir.Bundle,\n  task?: fhir.Task\n) {\n  if (task) {\n    const paymentDetailsReference = task.extension?.find((x) =>\n      x.url.includes('paymentDetails')\n    )?.valueReference?.reference\n\n    const paymentReconciliation = bundle.entry?.find(\n      (x) =>\n        x.fullUrl &&\n        (isURLReference(x.fullUrl)\n          ? urlReferenceToResourceIdentifier(x.fullUrl as URLReference)\n          : x.fullUrl) === paymentDetailsReference\n    )?.resource\n\n    if (paymentReconciliation)\n      return paymentReconciliation as fhir.PaymentReconciliation\n  }\n\n  return getResourceByType<fhir.PaymentReconciliation>(\n    bundle,\n    FHIR_RESOURCE_TYPE.PAYMENT_RECONCILIATION\n  )\n}\n\nexport function getTask(bundle: fhir.Bundle) {\n  return getResourceByType<fhir.Task>(bundle, FHIR_RESOURCE_TYPE.TASK)\n}\nexport function getDownloadedExtensionStatus(task: fhir.Task) {\n  const extension =\n    task.extension && findExtension(DOWNLOADED_EXTENSION_URL, task.extension)\n  return extension?.valueString\n}\n\nexport function findExtension(\n  url: string,\n  extensions: fhir.Extension[]\n): fhir.Extension | undefined {\n  const extension =\n    extensions &&\n    extensions.find((obj: fhir.Extension) => {\n      return obj.url === url\n    })\n  return extension\n}\n\nexport function getComposition(bundle: fhir.Bundle) {\n  return getResourceByType<fhir.Composition>(\n    bundle,\n    FHIR_RESOURCE_TYPE.COMPOSITION\n  )\n}\n\nexport function getCompositionIdFromCompositionOrTask(bundle: fhir.Bundle) {\n  const composition = getComposition(bundle)\n\n  if (composition) {\n    return composition.id\n  }\n\n  const task = getTask(bundle)\n  return task?.focus?.reference?.split('/')[1]\n}\n\nexport function hasRequestCorrectionExtension(task: fhir.Task) {\n  const extension =\n    task.extension &&\n    findExtension(MAKE_CORRECTION_EXTENSION_URL, task.extension)\n  return extension\n}\n\nexport async function getPreviousTask(\n  task: fhir.Task,\n  allowedPreviousStates: DECLARATION_STATUS[],\n  authHeader: IAuthHeader\n) {\n  const taskHistory = await fetchTaskHistory(task.id!, authHeader)\n  return findPreviousTask(taskHistory, allowedPreviousStates)\n}\n\nexport function getPractitionerIdFromBundle(bundle: fhir.Bundle) {\n  const task = getTask(bundle)\n  if (!task) {\n    throw new Error('Task not found in bundle')\n  }\n  return getPractionerIdFromTask(task)\n}\n\nexport function getActionFromTask(task: fhir.Task) {\n  const businessStatus = getStatusFromTask(task)\n  const extensionStatusWhileDownloaded = getDownloadedExtensionStatus(task)\n  if (businessStatus === extensionStatusWhileDownloaded) {\n    return GQLRegStatus.DOWNLOADED\n  } else if (hasRequestCorrectionExtension(task)) {\n    return GQLRegStatus.REQUESTED_CORRECTION\n  }",
      "startLine": 148,
      "endLine": 245,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@152-167",
      "type": "method_definition",
      "name": "if",
      "text": "if (task) {\n    const paymentDetailsReference = task.extension?.find((x) =>\n      x.url.includes('paymentDetails')\n    )?.valueReference?.reference\n\n    const paymentReconciliation = bundle.entry?.find(\n      (x) =>\n        x.fullUrl &&\n        (isURLReference(x.fullUrl)\n          ? urlReferenceToResourceIdentifier(x.fullUrl as URLReference)\n          : x.fullUrl) === paymentDetailsReference\n    )?.resource\n\n    if (paymentReconciliation)\n      return paymentReconciliation as fhir.PaymentReconciliation\n  }",
      "startLine": 152,
      "endLine": 167,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@249-255",
      "type": "function_declaration",
      "name": "getStatusFromTask",
      "text": "function getStatusFromTask(task: fhir.Task) {\n  const statusType = task.businessStatus?.coding?.find(\n    (coding: fhir.Coding) =>\n      coding.system === `${OPENCRVS_SPECIFICATION_URL}reg-status`\n  )\n  return statusType && statusType.code\n}",
      "startLine": 249,
      "endLine": 255,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@257-263",
      "type": "function_declaration",
      "name": "getPractionerIdFromTask",
      "text": "function getPractionerIdFromTask(task: fhir.Task) {\n  return task?.extension\n    ?.find(\n      (ext) => ext.url === 'http://opencrvs.org/specs/extension/regLastUser'\n    )\n    ?.valueReference?.reference?.split('/')?.[1]\n}",
      "startLine": 257,
      "endLine": 263,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@265-279",
      "type": "function_declaration",
      "name": "getDeclarationStatus",
      "text": "function getDeclarationStatus(\n  task: fhir.Task\n): DECLARATION_STATUS | null {\n  if (!task.businessStatus || !task.businessStatus.coding) {\n    return null\n  }\n\n  const coding = task.businessStatus.coding.find(\n    ({ system }) => system === 'http://opencrvs.org/specs/reg-status'\n  )\n  if (!coding) {\n    return null\n  }\n  return coding.code as DECLARATION_STATUS\n}",
      "startLine": 265,
      "endLine": 279,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@281-293",
      "type": "function_declaration",
      "name": "getTrackingId",
      "text": "function getTrackingId(task: fhir.Task) {\n  const trackingIdentifier = task?.identifier?.find((identifier) => {\n    return (\n      identifier.system === `http://opencrvs.org/specs/id/birth-tracking-id` ||\n      identifier.system === `http://opencrvs.org/specs/id/death-tracking-id` ||\n      identifier.system === `http://opencrvs.org/specs/id/marriage-tracking-id`\n    )\n  })\n  if (!trackingIdentifier || !trackingIdentifier.value) {\n    throw new Error(\"Didn't find any identifier for tracking id\")\n  }\n  return trackingIdentifier.value\n}",
      "startLine": 281,
      "endLine": 293,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@295-303",
      "type": "function_declaration",
      "name": "getDeclarationType",
      "text": "function getDeclarationType(task: fhir.Task): DECLARATION_TYPE {\n  const coding = task.code?.coding?.find(\n    ({ system }) => system === 'http://opencrvs.org/specs/types'\n  )\n  if (!coding) {\n    throw new Error('No declaration type found in task')\n  }\n  return coding.code as DECLARATION_TYPE\n}",
      "startLine": 295,
      "endLine": 303,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@305-356",
      "type": "function_declaration",
      "name": "getRecordInitiator",
      "text": "function getRecordInitiator(taskHistory: fhir.Bundle): string {\n  const allowedPreviousStates = [\n    'DECLARED',\n    'VALIDATED',\n    'IN_PROGRESS',\n    'WAITING_VALIDATION'\n  ]\n  const previousTasks = findAllPreviousTasks(taskHistory)\n\n  const task =\n    previousTasks &&\n    previousTasks\n      .sort((a, b) => {\n        if (!a.meta?.lastUpdated || !b.meta?.lastUpdated) {\n          return -1\n        }\n        if (a.meta.lastUpdated > b.meta.lastUpdated) {\n          return 1\n        }\n        if (a.meta.lastUpdated < b.meta.lastUpdated) {\n          return -1\n        }\n        return 0\n      })\n      .find((resource) => {\n        if (!resource.businessStatus || !resource.businessStatus.coding) {\n          return false\n        }\n        return resource.businessStatus.coding.some((coding) =>\n          allowedPreviousStates.includes(coding.code as DECLARATION_STATUS)\n        )\n      })\n\n  if (!task) {\n    throw new Error('Task not found!')\n  }\n\n  const regLastUserExtension =\n    task &&\n    task.extension &&\n    task.extension.find(\n      (extension) =>\n        extension.url === 'http://opencrvs.org/specs/extension/regLastUser'\n    )\n\n  const regLastUser =\n    regLastUserExtension &&\n    regLastUserExtension.valueReference &&\n    (regLastUserExtension.valueReference.reference as string)\n\n  return regLastUser?.split('/')?.[1] || ''\n}",
      "startLine": 305,
      "endLine": 356,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@358-378",
      "type": "function_declaration",
      "name": "getRegLastOffice",
      "text": "function getRegLastOffice(bundle: fhir.Bundle) {\n  const task: fhir.Task = getResourceByType(\n    bundle,\n    FHIR_RESOURCE_TYPE.TASK\n  ) as fhir.Task\n  if (!task) {\n    throw new Error('Task not found!')\n  }\n  const regLastOffice =\n    task.extension &&\n    task.extension.find(\n      (extension) =>\n        extension.url === 'http://opencrvs.org/specs/extension/regLastOffice'\n    )\n\n  return (\n    regLastOffice &&\n    regLastOffice.valueReference &&\n    regLastOffice.valueReference.reference\n  )\n}",
      "startLine": 358,
      "endLine": 378,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@379-411",
      "type": "function_declaration",
      "name": "getEncounterLocationType",
      "text": "async function getEncounterLocationType(\n  bundle: fhir.Bundle,\n  authHeader: IAuthHeader\n) {\n  const encounter = getResourceByType<fhir.Encounter>(\n    bundle,\n    FHIR_RESOURCE_TYPE.ENCOUNTER\n  )\n\n  if (!encounter) {\n    throw new Error('Encounter not found!')\n  }\n\n  const locationId = encounter.location?.[0].location.reference\n  if (!locationId) {\n    throw new Error('Encounter location not found!')\n  }\n\n  const location = await fetchLocation(locationId, authHeader)\n  if (!location || !location.type) {\n    throw new Error(\n      `Encounter location not found from Hearth with id ${locationId}!`\n    )\n  }\n  const type = location.type.coding?.[0]?.code\n\n  if (!type) {\n    throw new Error(\n      `Encounter location was found from Hearth with id ${locationId}, but the location did not have a proper type code`\n    )\n  }\n  return type\n}",
      "startLine": 379,
      "endLine": 411,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@437-453",
      "type": "function_declaration",
      "name": "getTimeLoggedFromTask",
      "text": "function getTimeLoggedFromTask(task: fhir.Task) {\n  if (!task.extension) {\n    throw new Error(`Task has no extensions defined, task ID: ${task.id}`)\n  }\n\n  const timeLoggedExt = task.extension.find(\n    (ext) => ext.url === 'http://opencrvs.org/specs/extension/timeLoggedMS'\n  )\n\n  if (!timeLoggedExt || timeLoggedExt.valueInteger === undefined) {\n    throw new Error(\n      `No time logged extension found in task, task ID: ${task.id}`\n    )\n  }\n\n  return timeLoggedExt.valueInteger\n}",
      "startLine": 437,
      "endLine": 453,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@455-470",
      "type": "function_declaration",
      "name": "isNotification",
      "text": "function isNotification(composition: fhir.Composition): boolean {\n  const compositionTypeCode =\n    composition.type.coding &&\n    composition.type.coding.find(\n      (code) => code.system === 'http://opencrvs.org/doc-types'\n    )\n  if (!compositionTypeCode) {\n    throw new Error('Composition has no type codings defined')\n  }\n\n  return (\n    (compositionTypeCode.code &&\n      NOTIFICATION_TYPES.includes(compositionTypeCode.code)) ||\n    false\n  )\n}",
      "startLine": 455,
      "endLine": 470,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@472-509",
      "type": "function_declaration",
      "name": "getObservationValueByCode",
      "text": "function getObservationValueByCode(\n  bundle: fhir.Bundle,\n  observationCode: string\n): string {\n  const observationBundle =\n    bundle.entry &&\n    bundle.entry.filter((item) => {\n      return (\n        item && item.resource && item.resource.resourceType === 'Observation'\n      )\n    })\n  if (!Array.isArray(observationBundle) || !observationBundle.length) {\n    return 'UNKNOWN'\n  }\n  const selectedObservationEntry = observationBundle.find((entry) => {\n    const observationEntry = entry.resource as fhir.Observation\n    return (\n      (observationEntry.code &&\n        observationEntry.code.coding &&\n        observationEntry.code.coding[0] &&\n        observationEntry.code.coding[0].code === observationCode) ||\n      null\n    )\n  })\n  if (!selectedObservationEntry) {\n    return 'UNKNOWN'\n  }\n  const observationResource =\n    selectedObservationEntry.resource as fhir.Observation\n  const value =\n    (observationResource.valueCodeableConcept &&\n      observationResource.valueCodeableConcept.coding &&\n      observationResource.valueCodeableConcept.coding[0] &&\n      observationResource.valueCodeableConcept.coding[0].code) ||\n    'UNKNOWN'\n\n  return value\n}",
      "startLine": 472,
      "endLine": 509,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@511-539",
      "type": "function_declaration",
      "name": "fetchDeclarationsBeginnerRole",
      "text": "async function fetchDeclarationsBeginnerRole(\n  fhirBundle: fhir.Bundle,\n  authHeader: IAuthHeader\n) {\n  let startedByRole = ''\n  const currentTask = getTask(fhirBundle)\n\n  if (currentTask) {\n    const bundle = await fetchTaskHistory(currentTask.id!, authHeader)\n    const length = bundle.entry ? bundle.entry.length : 0\n    const task =\n      bundle.entry &&\n      bundle.entry\n        .map((entry) => entry.resource)\n        .filter((resource): resource is fhir.Task =>\n          Boolean(resource && isTaskResource(resource))\n        )\n\n    if (task && length > 0) {\n      const startedTask = task[length - 1] //the last task in the entries of history bundle\n      const practitionerId = getPractionerIdFromTask(startedTask)\n      if (!practitionerId) {\n        throw new Error('Practitioner id not found')\n      }\n      startedByRole = await fetchPractitionerRole(practitionerId, authHeader)\n    }\n  }\n  return startedByRole\n}",
      "startLine": 511,
      "endLine": 539,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/metrics/src/features/registration/fhirUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-56",
      "type": "function_declaration",
      "name": "changePasswordHandler",
      "text": "async function changePasswordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IPayload\n  const retrievalStepInformation = await getRetrievalStepInformation(\n    payload.nonce\n  ).catch(() => {\n    throw unauthorized()\n  })\n\n  if (retrievalStepInformation.status !== RetrievalSteps.SECURITY_Q_VERIFIED) {\n    return h.response().code(401)\n  }\n\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  await changePassword(\n    retrievalStepInformation.userId,\n    payload.newPassword,\n    remoteAddress,\n    userAgent\n  )\n  await deleteRetrievalStepInformation(payload.nonce)\n  return h.response().code(200)\n}",
      "startLine": 28,
      "endLine": 56,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/retrievalSteps/changePassword/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-36",
      "type": "function_declaration",
      "name": "changePassword",
      "text": "async function changePassword(\n  userId: string,\n  password: string,\n  remoteAddress: string,\n  userAgent: string\n) {\n  const url = resolve(env.USER_MANAGEMENT_URL, '/changePassword')\n\n  const res = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({ userId, password }),\n    headers: {\n      'Content-Type': 'application/json',\n      'x-real-ip': remoteAddress,\n      'x-real-user-agent': userAgent\n    }\n  })\n\n  if (res.status !== 200) {\n    throw Error(res.statusText)\n  }\n}",
      "startLine": 15,
      "endLine": 36,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/retrievalSteps/changePassword/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-70",
      "type": "function_declaration",
      "name": "authenticateHandler",
      "text": "async function authenticateHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { code, nonce } = request.payload as IVerifyPayload\n  try {\n    await checkVerificationCode(nonce, code)\n  } catch (err) {\n    logger.error(err)\n    return unauthorized()\n  }\n  const { userId, scope } = await getStoredUserInformation(nonce)\n  const token = await createToken(\n    userId,\n    scope,\n    WEB_USER_JWT_AUDIENCES,\n    JWT_ISSUER\n  )\n  await deleteUsedVerificationCode(nonce)\n  const response: IVerifyResponse = { token }\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  try {\n    await postUserActionToMetrics(\n      'LOGGED_IN',\n      response.token,\n      remoteAddress,\n      userAgent\n    )\n  } catch (err) {\n    logger.error(err)\n  }\n\n  return response\n}",
      "startLine": 33,
      "endLine": 70,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/verifyCode/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-81",
      "type": "function_declaration",
      "name": "sendUserNameHandler",
      "text": "async function sendUserNameHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IPayload\n  const retrievalStepInformation = await getRetrievalStepInformation(\n    payload.nonce\n  ).catch(() => {\n    throw unauthorized()\n  })\n\n  if (retrievalStepInformation.status !== RetrievalSteps.SECURITY_Q_VERIFIED) {\n    return h.response().code(401)\n  }\n\n  const isDemoUser = retrievalStepInformation.scope.indexOf('demo') > -1\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n  if (!env.isProd || isDemoUser) {\n    logger.info(\n      `Sending a verification SMS,\n        ${JSON.stringify({\n          mobile: retrievalStepInformation.mobile,\n          username: retrievalStepInformation.username\n        })}`\n    )\n  } else {\n    await sendUserName(\n      retrievalStepInformation.username,\n      retrievalStepInformation.userFullName,\n      retrievalStepInformation.mobile,\n      retrievalStepInformation.email\n    )\n  }\n\n  try {\n    await postUserActionToMetrics(\n      'USERNAME_REMINDER',\n      request.headers.authorization,\n      remoteAddress,\n      userAgent,\n      retrievalStepInformation.practitionerId\n    )\n  } catch (err) {\n    logger.error(err.message)\n  }\n\n  await deleteRetrievalStepInformation(payload.nonce)\n  return h.response().code(200)\n}",
      "startLine": 30,
      "endLine": 81,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/retrievalSteps/sendUserName/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-70",
      "type": "function_declaration",
      "name": "verifyNumberHandler",
      "text": "async function verifyNumberHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n): Promise<IVerifyNumberResponse> {\n  const payload = request.payload as IVerifyNumberPayload\n\n  // Looks for step1 data. Throws exception if not found\n  const retrievalStepInfo = await getRetrievalStepInformation(\n    payload.nonce\n  ).catch(() => {\n    throw unauthorized()\n  })\n  // Throws exception if not ready for step2\n  if (\n    retrievalStepInfo.status !==\n    RetrievalSteps.WAITING_FOR_VERIFICATION.toString()\n  ) {\n    throw unauthorized()\n  }\n  try {\n    // Matchs verification code. Throws exception if doesn't\n    await checkVerificationCode(payload.nonce, payload.code)\n  } catch (err) {\n    logger.error(err)\n    throw unauthorized()\n  }\n  // Update retrievalstep info with new status NUMBER_VERIFIED\n  await storeRetrievalStepInformation(\n    payload.nonce,\n    RetrievalSteps.NUMBER_VERIFIED,\n    retrievalStepInfo\n  )\n  // Returns the securityQuestionKey with nonce\n  const response: IVerifyNumberResponse = {\n    securityQuestionKey: retrievalStepInfo.securityQuestionKey,\n    nonce: payload.nonce\n  }\n  return response\n}",
      "startLine": 32,
      "endLine": 70,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/retrievalSteps/verifyNumber/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-34",
      "type": "function_declaration",
      "name": "refreshHandler",
      "text": "async function refreshHandler(request: Hapi.Request) {\n  const { token } = request.payload as IRefreshPayload\n\n  const decodedOrError = verifyToken(token)\n  if (decodedOrError._tag === 'Left') {\n    return unauthorized()\n  }\n\n  const decoded = decodedOrError.right\n\n  const newToken = await refreshToken(decoded)\n  return { token: newToken }\n}",
      "startLine": 22,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/refresh/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@31-38",
      "type": "function_declaration",
      "name": "storeVerificationCode",
      "text": "async function storeVerificationCode(nonce: string, code: string) {\n  const codeDetails = {\n    code,\n    createdAt: Date.now()\n  }\n\n  await redis.set(`verification_${nonce}`, JSON.stringify(codeDetails))\n}",
      "startLine": 31,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/verifyCode/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-46",
      "type": "function_declaration",
      "name": "generateVerificationCode",
      "text": "async function generateVerificationCode(\n  nonce: string\n): Promise<SixDigitVerificationCode> {\n  const code = crypto.randomInt(100000, 999999).toString()\n  await storeVerificationCode(nonce, code)\n  return code\n}",
      "startLine": 40,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/verifyCode/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@48-58",
      "type": "function_declaration",
      "name": "getVerificationCodeDetails",
      "text": "async function getVerificationCodeDetails(\n  nonce: string\n): Promise<ICodeDetails> {\n  const codeDetails = await redis.get(`verification_${nonce}`)\n\n  if (!codeDetails) {\n    throw new Error('Auth code not found')\n  }\n\n  return JSON.parse(codeDetails) as ICodeDetails\n}",
      "startLine": 48,
      "endLine": 58,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/verifyCode/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-62",
      "type": "function_declaration",
      "name": "generateNonce",
      "text": "function generateNonce() {\n  return crypto.randomBytes(16).toString('base64').toString()\n}",
      "startLine": 60,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/verifyCode/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-61",
      "type": "function_declaration",
      "name": "authenticateSuperUserHandler",
      "text": "async function authenticateSuperUserHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IAuthPayload\n  let result: IAuthentication\n  const { username, password } = payload\n  try {\n    result = await authenticate(username.trim(), password)\n  } catch (err) {\n    throw unauthorized()\n  }\n\n  if (result.status === 'deactivated') {\n    logger.info('Login attempt with a deactivated super user account detected')\n    throw unauthorized()\n  }\n\n  const SUPER_ADMIN_SCOPES = [\n    SCOPES.BYPASSRATELIMIT,\n    SCOPES.USER_DATA_SEEDING\n  ] satisfies Scope[]\n\n  const token = await createToken(\n    result.userId,\n    SUPER_ADMIN_SCOPES,\n    WEB_USER_JWT_AUDIENCES,\n    JWT_ISSUER\n  )\n\n  return h.response({\n    token\n  })\n}",
      "startLine": 28,
      "endLine": 61,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/authenticateSuperUser/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-55",
      "type": "function_declaration",
      "name": "resendNotificationHandler",
      "text": "async function resendNotificationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { nonce, retrievalFlow, notificationEvent } =\n    request.payload as IResendNotificationPayload\n\n  let userInformation\n  try {\n    userInformation = retrievalFlow\n      ? await getRetrievalStepInformation(nonce)\n      : await getStoredUserInformation(nonce)\n  } catch (err) {\n    return unauthorized()\n  }\n\n  const { scope, userFullName, mobile, email } = userInformation\n\n  await generateAndSendVerificationCode(\n    nonce,\n    scope,\n    notificationEvent,\n    userFullName,\n    mobile,\n    email\n  )\n\n  return { nonce }\n}",
      "startLine": 27,
      "endLine": 55,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/resend/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-84",
      "type": "function_declaration",
      "name": "verifySecurityQuestionHandler",
      "text": "async function verifySecurityQuestionHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IPayload\n\n  const retrievalStepInformation = await getRetrievalStepInformation(\n    payload.nonce\n  ).catch(() => {\n    throw unauthorized()\n  })\n\n  if (\n    retrievalStepInformation.status !==\n    RetrievalSteps.NUMBER_VERIFIED.toString()\n  ) {\n    return unauthorized()\n  }\n  let verificationResult: IVerifySecurityAnswerResponse\n  try {\n    verificationResult = await verifySecurityAnswer(\n      retrievalStepInformation.userId,\n      retrievalStepInformation.securityQuestionKey,\n      payload.answer\n    )\n  } catch (err) {\n    return unauthorized()\n  }\n\n  // Updates nonce status\n  await storeRetrievalStepInformation(\n    payload.nonce,\n    verificationResult.matched\n      ? RetrievalSteps.SECURITY_Q_VERIFIED\n      : RetrievalSteps.NUMBER_VERIFIED,\n    {\n      ...retrievalStepInformation,\n      // in case of miss-match, updating the new key otherwise same key\n      securityQuestionKey: verificationResult.questionKey\n    }\n  )\n\n  const response: IResponse = {\n    matched: verificationResult.matched,\n    nonce: payload.nonce\n  }\n  if (!verificationResult.matched) {\n    response.securityQuestionKey = verificationResult.questionKey\n  }\n  return response\n}",
      "startLine": 34,
      "endLine": 84,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/retrievalSteps/verifySecurityAnswer/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@103-105",
      "type": "function_declaration",
      "name": "instanceOfJurisdiction",
      "text": "function instanceOfJurisdiction(object: any): object is Location {\n  return 'statistics' in object\n}",
      "startLine": 103,
      "endLine": 105,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@162-186",
      "type": "function_declaration",
      "name": "fetchLocationsHandler",
      "text": "async function fetchLocationsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const searchParam = request.url.search\n  const response = await fetchFromHearth<Saved<Bundle>>(\n    `Location${searchParam}`\n  )\n\n  response.link = response.link?.map((link) => ({\n    ...link,\n    url: link.url\n      .replace(link.url.split('/Location')[0], `${request.url.origin}`)\n      .replace('Location', 'location')\n  }))\n\n  response.entry = response.entry?.map((entry) => ({\n    ...entry,\n    fullUrl: entry.fullUrl\n      ?.replace(entry.fullUrl.split('/Location')[0], `${request.url.origin}`)\n      .replace('Location', 'location') as URLReference\n  }))\n\n  return response\n}",
      "startLine": 162,
      "endLine": 186,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@266-322",
      "type": "function_declaration",
      "name": "createLocationHandler",
      "text": "async function createLocationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  if (Array.isArray(request.payload)) {\n    return batchLocationsHandler(request.payload as Location[])\n  }\n  const payload = request.payload as Location | Facility\n  const newLocation = composeFhirLocation(payload)\n  const partOfLocation = payload.partOf.split('/')[1]\n\n  const locations = [\n    ...(await Promise.all([\n      getLocationsByIdentifier(\n        `${Code.ADMIN_STRUCTURE}_${String(payload.statisticalID)}`\n      ),\n      getLocationsByIdentifier(\n        `${Code.CRVS_OFFICE}_${String(payload.statisticalID)}`\n      ),\n      getLocationsByIdentifier(\n        `${Code.HEALTH_FACILITY}_${String(payload.statisticalID)}`\n      )\n    ]).then((results) => results.flat()))\n  ]\n\n  if (locations.length !== 0) {\n    throw conflict(`statisticalID ${payload.statisticalID} already exists`)\n  }\n\n  if (partOfLocation !== '0' && Boolean(partOfLocation)) {\n    const response = await fetchFromHearth(`Location?_id=${partOfLocation}`)\n\n    if (response.total === 0) {\n      throw badRequest(\n        `${partOfLocation} is not a valid location for partOfLocation`\n      )\n    }\n  }\n\n  if (instanceOfJurisdiction(payload) && payload.statistics) {\n    const statisticalExtensions = generateStatisticalExtensions(\n      payload.statistics\n    )\n    newLocation.extension = statisticalExtensions\n  }\n\n  const response = await sendToFhir(\n    JSON.stringify(newLocation),\n    '/Location',\n    'POST',\n    request.headers.authorization\n  ).catch((err) => {\n    throw Error('Cannot create location to FHIR')\n  })\n\n  return h.response(response.statusText)\n}",
      "startLine": 266,
      "endLine": 322,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@324-364",
      "type": "function_declaration",
      "name": "updateLocationHandler",
      "text": "async function updateLocationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const locationId = request.params.locationId\n  const location = request.payload as UpdateLocation\n  const existingLocation = await fetchFromHearth(`Location?_id=${locationId}`)\n  const newLocation = existingLocation.entry[0].resource\n\n  if (existingLocation.total === 0) {\n    throw badRequest(`${locationId} is not a valid location`)\n  }\n\n  if (location.name) {\n    newLocation.name = location.name\n  }\n  if (location.alias) {\n    newLocation.alias = [location.alias]\n  }\n  if (location.status) {\n    newLocation.status = location.status\n  }\n  if (location.statistics) {\n    const statisticalExtensions = updateStatisticalExtensions(\n      location.statistics,\n      newLocation.extension\n    )\n    newLocation.extension = statisticalExtensions\n  }\n\n  const response = await sendToFhir(\n    JSON.stringify(newLocation),\n    `/Location/${locationId}`,\n    'PUT',\n    request.headers.authorization\n  ).catch((err) => {\n    throw Error('Cannot update location to FHIR')\n  })\n\n  return h.response(response.statusText)\n}",
      "startLine": 324,
      "endLine": 364,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-41",
      "type": "function_declaration",
      "name": "verifySecurityAnswer",
      "text": "async function verifySecurityAnswer(\n  userId: string,\n  questionKey: string,\n  answer: string\n): Promise<IVerifySecurityAnswerResponse> {\n  const url = resolve(env.USER_MANAGEMENT_URL, '/verifySecurityAnswer')\n\n  const res = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({ userId, questionKey, answer }),\n    headers: { 'Content-Type': 'application/json' }\n  })\n\n  if (res.status !== 200) {\n    throw Error(res.statusText)\n  }\n  const body = await res.json()\n  return {\n    matched: body.matched,\n    questionKey: body.questionKey\n  }\n}",
      "startLine": 20,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/retrievalSteps/verifySecurityAnswer/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@41-103",
      "type": "function_declaration",
      "name": "authenticateHandler",
      "text": "async function authenticateHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n): Promise<IAuthResponse> {\n  const payload = request.payload as IAuthPayload\n  let result: IAuthentication\n\n  const { username, password } = payload\n  try {\n    result = await authenticate(username.trim(), password)\n  } catch (err) {\n    throw unauthorized()\n  }\n  if (result.status === 'deactivated') {\n    throw forbidden()\n  }\n\n  const nonce = generateNonce()\n  const response: IAuthResponse = {\n    mobile: result.mobile,\n    email: result.email,\n    status: result.status,\n    nonce\n  }\n\n  const isPendingUser = response.status && response.status === 'pending'\n\n  const roleScopeMappings = await getUserRoleScopeMapping()\n\n  const role = result.role as keyof typeof roleScopeMappings\n  const scopes = roleScopeMappings[role]\n\n  if (isPendingUser) {\n    response.token = await createToken(\n      result.userId,\n      scopes,\n      WEB_USER_JWT_AUDIENCES,\n      JWT_ISSUER\n    )\n  } else {\n    await storeUserInformation(\n      nonce,\n      result.name,\n      result.userId,\n      scopes,\n      result.mobile,\n      result.email\n    )\n\n    const notificationEvent = NotificationEvent.TWO_FACTOR_AUTHENTICATION\n\n    await generateAndSendVerificationCode(\n      nonce,\n      scopes,\n      notificationEvent,\n      result.name,\n      result.mobile,\n      result.email\n    )\n  }\n\n  return response\n}",
      "startLine": 41,
      "endLine": 103,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/authenticate/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-60",
      "type": "function_declaration",
      "name": "clientCredentialsHandler",
      "text": "async function clientCredentialsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const clientId = request.query.client_id\n  const clientSecret = request.query.client_secret\n\n  if (!clientId || !clientSecret) {\n    return oauthResponse.invalidRequest(h)\n  }\n\n  let result\n  try {\n    result = await authenticateSystem(clientId, clientSecret)\n  } catch (err) {\n    return oauthResponse.invalidClient(h)\n  }\n\n  if (result.status !== 'active') {\n    return oauthResponse.invalidClient(h)\n  }\n\n  const isNotificationAPIUser = result.scope.includes(SCOPES.NOTIFICATION_API)\n\n  const token = await createToken(\n    result.systemId,\n    result.scope,\n    isNotificationAPIUser\n      ? WEB_USER_JWT_AUDIENCES.concat([NOTIFICATION_API_USER_AUDIENCE])\n      : WEB_USER_JWT_AUDIENCES,\n    JWT_ISSUER,\n    true\n  )\n\n  return oauthResponse.success(h, token)\n}",
      "startLine": 25,
      "endLine": 60,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/oauthToken/client-credentials.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-61",
      "type": "function_declaration",
      "name": "tokenExchangeHandler",
      "text": "async function tokenExchangeHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const subjectToken = request.query.subject_token\n  const subjectTokenType = request.query.subject_token_type\n  const requestedTokenType = request.query.requested_token_type\n  const recordId = request.query.record_id\n\n  if (\n    !recordId ||\n    !subjectToken ||\n    subjectTokenType !== SUBJECT_TOKEN_TYPE ||\n    requestedTokenType !== RECORD_TOKEN_TYPE\n  ) {\n    return oauthResponse.invalidRequest(h)\n  }\n\n  const decodedOrError = pipe(subjectToken, verifyToken)\n  if (decodedOrError._tag === 'Left') {\n    return oauthResponse.invalidSubjectToken(h)\n  }\n  const { sub } = decodedOrError.right\n\n  // @TODO: If in the future we have a fine grained access control for records, check here that the subject actually has access to the record requested\n  const recordToken = await createTokenForRecordValidation(\n    sub as UUID,\n    recordId\n  )\n\n  return oauthResponse.success(h, recordToken)\n}",
      "startLine": 30,
      "endLine": 61,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/oauthToken/token-exchange.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-19",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n  redis.quit()\n}",
      "startLine": 17,
      "endLine": 19,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-32",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n  logger.info(`REDIS_HOST, ${JSON.stringify(env.REDIS_HOST)}`)\n  logger.info(`REDIS_USERNAME, ${JSON.stringify(env.REDIS_USERNAME)}`)\n\n  redis = await createClient({\n    username: env.REDIS_USERNAME,\n    password: env.REDIS_PASSWORD,\n    socket: {\n      host: env.REDIS_HOST\n    }\n  }).connect()\n}",
      "startLine": 21,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-31",
      "type": "function_declaration",
      "name": "tokenHandler",
      "text": "async function tokenHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const grantType = request.query.grant_type\n\n  if (grantType === 'client_credentials') {\n    return clientCredentialsHandler(request, h)\n  }\n\n  if (grantType === 'urn:opencrvs:oauth:grant-type:token-exchange') {\n    return tokenExchangeHandler(request, h)\n  }\n\n  return oauthResponse.invalidGrantType(h)\n}",
      "startLine": 16,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/oauthToken/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-21",
      "type": "function_declaration",
      "name": "invalidateToken",
      "text": "async function invalidateToken(token: string) {\n  return redis.setEx(\n    `${INVALID_TOKEN_NAMESPACE}:${token}`,\n    env.CONFIG_TOKEN_EXPIRY_SECONDS,\n    'INVALID'\n  )\n}",
      "startLine": 15,
      "endLine": 21,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/invalidateToken/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-47",
      "type": "function_declaration",
      "name": "getUserRoleScopeMapping",
      "text": "async function getUserRoleScopeMapping() {\n  const roles = await fetchJSON<Roles>(\n    joinURL(env.COUNTRY_CONFIG_URL_INTERNAL, '/roles')\n  )\n\n  logger.info(\n    'Country config implements the new /roles response format. Custom scopes apply'\n  )\n\n  const defaultRoleMappings = DEFAULT_ROLES_DEFINITION.reduce<\n    Record<string, Scope[]>\n  >((acc, { id, scopes }) => {\n    acc[id] = scopes\n    return acc\n  }, {})\n\n  const userRoleMappings = roles.reduce<Record<string, Scope[]>>(\n    (acc, { id, scopes }) => {\n      acc[id] = scopes\n      return acc\n    },\n    {}\n  )\n\n  return {\n    ...defaultRoleMappings,\n    ...userRoleMappings\n  }\n}",
      "startLine": 19,
      "endLine": 47,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/scopes/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@76-427",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  let whitelist: string[] = [env.DOMAIN]\n  if (env.DOMAIN[0] !== '*') {\n    whitelist = [env.COUNTRY_CONFIG_URL, env.LOGIN_URL, env.CLIENT_APP_URL]\n  }\n  logger.info(`Whitelist: ${JSON.stringify(whitelist)}`)\n  const server = new Hapi.Server({\n    host: env.AUTH_HOST,\n    port: env.AUTH_PORT,\n    routes: {\n      cors: { origin: whitelist },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT },\n      response: {\n        failAction: async (req, _2, err: Boom) => {\n          if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`Response validationError: ${err.message}`)\n            throw badRequest(`Invalid response payload returned from handler`)\n          } else {\n            // During development, log and respond with the full error.\n            logger.error(\n              `${req.path} response has a validation error: ${err.message}`\n            )\n            throw err\n          }\n        }\n      }\n    }\n  })\n\n  /* add ping route by default for health check */\n  server.route({\n    method: 'GET',\n    path: '/ping',\n    handler: () =>\n      // Perform any health checks and return true or false for success prop\n      ({\n        success: true\n      }),\n    options: {\n      auth: false,\n      tags: ['api'],\n      description: 'Health check endpoint'\n    }\n  })\n  server.route({\n    method: 'GET',\n    path: '/.well-known',\n    handler: getPublicKey,\n    options: {\n      tags: ['api']\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' http://localhost:4040/anonymous-token\n  server.route({\n    method: 'GET',\n    path: '/anonymous-token',\n    handler: anonymousTokenHandler,\n    options: {\n      tags: ['api'],\n      description: 'Authenticate an anonymous user',\n      notes:\n        'Returns a token to be used for endpoints that allow unauthorized access such as certificate verification endpoints',\n      response: {\n        schema: responseSchema\n      }\n    }\n  })\n  // curl -H 'Content-Type: application/json' -d '{\"username\": \"test.user\", \"password\": \"test\"}' http://localhost:4040/authenticate\n  server.route({\n    method: 'POST',\n    path: '/authenticate',\n    handler: authenticateHandler,\n    options: {\n      tags: ['api'],\n      description: 'Authenticate with username and password',\n      notes:\n        'Authenticates user and returns nonce to use for collating the login for 2 factor authentication.' +\n        'Sends an SMS to the user mobile with verification code',\n      validate: {\n        payload: reqAuthSchema\n      },\n      response: {\n        schema: resAuthSchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{\"username\": \"test.user\", \"password\": \"test\"}' http://localhost:4040/authenticate-super-user\n  server.route({\n    method: 'POST',\n    path: '/authenticate-super-user',\n    handler: authenticateSuperUserHandler,\n    options: {\n      tags: ['api'],\n      description: 'Authenticate with username and password',\n      notes:\n        'Authenticates user and returns nonce to use for collating the login for 2 factor authentication.' +\n        'Sends an SMS to the user mobile with verification code',\n      validate: {\n        payload: reqAuthSupSchema\n      },\n      response: {\n        schema: resAuthSupSchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{\"nonce\": \"\"}' http://localhost:4040/resendAuthenticationCode\n  server.route({\n    method: 'POST',\n    path: '/resendAuthenticationCode',\n    handler: resendNotificationHandler,\n    options: {\n      tags: ['api'],\n      description: 'Resend another authentication code',\n      notes:\n        'Sends a new authentication code to the user based on the phone number or email associated with the nonce',\n      validate: {\n        payload: reqResendAuthenticationCodeSchema\n      },\n      response: {\n        schema: resResendAuthenticationCodeSchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{\"code\": \"123456\"}' http://localhost:4040/verifyCode\n  server.route({\n    method: 'POST',\n    path: '/verifyCode',\n    handler: verifyCodeHandler,\n    options: {\n      tags: ['api'],\n      description: 'Verify the 2 factor auth code',\n      notes:\n        'Verifies the 2 factor auth code and returns the JWT API token for future requests',\n      validate: {\n        payload: reqVerifySchema\n      },\n      response: {\n        schema: resVerifySchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{\"nonce\": \"\", \"token\": \"\"}' http://localhost:4040/refreshToken\n  server.route({\n    method: 'POST',\n    path: '/refreshToken',\n    handler: refreshTokenHandler,\n    options: {\n      tags: ['api'],\n      description: 'Refresh an expiring token',\n      notes:\n        'Verifies the expired client token as true and returns a refreshed JWT API token for future requests',\n      validate: {\n        payload: reqRefreshSchema\n      },\n      response: {\n        schema: resRefreshSchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{ \"token\": \"\" }' http://localhost:4040/verifyToken\n  server.route({\n    method: 'POST',\n    path: '/verifyToken',\n    handler: verifyTokenHandler,\n    options: {\n      tags: ['api'],\n      description: 'Check if a token is marked as invalid or not',\n      notes:\n        'Check if this token is part of the invalid token list that is stored in redis',\n      validate: {\n        payload: reqVerifyTokenSchema\n      },\n      response: {\n        schema: resVerifyTokenSchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{ \"token\": \"\" }' http://localhost:4040/invalidateToken\n  server.route({\n    method: 'POST',\n    path: '/invalidateToken',\n    handler: invalidateTokenHandler,\n    options: {\n      tags: ['api'],\n      description: 'Marks token as invalid until it expires',\n      notes:\n        'Adds a token to the invalid tokens stored in Redis, ' +\n        'these are stored as individual key value pairs to that we can set their expiry TTL individually',\n      validate: {\n        payload: reqInvalidateTokenSchema\n      },\n      response: {\n        schema: false\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{ \"mobile\": \"\" }' http://localhost:4040/verifyUser\n  server.route({\n    method: 'POST',\n    path: '/verifyUser',\n    handler: verifyUserHandler,\n    options: {\n      tags: ['api'],\n      description:\n        'First step of password or username retrieval steps.' +\n        'Check if user exists for given mobile number or not.',\n      notes:\n        'Verifies user and returns nonce to use for next step of password reset flow.' +\n        'Sends an SMS to the user mobile with verification code',\n      validate: {\n        payload: reqVerifyUserSchema\n      },\n      response: {\n        schema: resVerifyUserSchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{ \"mobile\": \"\" }' http://localhost:4040/verifyUser\n\n  server.route({\n    method: 'POST',\n    path: '/verifyNumber',\n    handler: verifyNumberHandler,\n    options: {\n      tags: ['api'],\n      description:\n        'Second step of password or username retrieval steps.' +\n        'Check if provided verification code is valid or not.',\n      notes:\n        'Verifies code for given nonce and returns a random security question for that user.',\n      validate: {\n        payload: reqVerifyNumberSchema\n      },\n      response: {\n        schema: resVerifyNumberSchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{ \"questionKey\": \"\", \"answer\": \"\", \"nonce\": \"\" }' http://localhost:4040/verifyUser\n  server.route({\n    method: 'POST',\n    path: '/verifySecurityAnswer',\n    handler: verifySecurityQuestionHandler,\n    options: {\n      tags: ['api'],\n      description:\n        'Third step of password or username retrieval steps.' +\n        'Checks if the submitted security question answer is right',\n      notes:\n        'Verifies security answer and updates the nonce information so that it can be used for changing the password' +\n        'In-case of a wrong answer, it will return an another question key.',\n      validate: {\n        payload: verifySecurityQuestionSchema\n      },\n      response: {\n        schema: verifySecurityQuestionResSchema\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{ \"newPassword\": \"\", \"nonce\": \"\" }' http://localhost:4040/changePassword\n  server.route({\n    method: 'POST',\n    path: '/changePassword',\n    handler: changePasswordHandler,\n    options: {\n      tags: ['api'],\n      description:\n        'Final step of password retrieval flow.' + 'Changes the user password',\n      notes:\n        'Expects the nonce parameter to be coming from the reset password journey',\n      validate: {\n        payload: reqChangePasswordSchema\n      },\n      response: {\n        schema: false\n      }\n    }\n  })\n\n  // curl -H 'Content-Type: application/json' -d '{ \"nonce\": \"\" }' http://localhost:4040/sendUserName\n  server.route({\n    method: 'POST',\n    path: '/sendUserName',\n    handler: sendUserNameHandler,\n    options: {\n      tags: ['api'],\n      description:\n        'Final step of username retrieval flow.' +\n        'Sends the username to user mobile number',\n      notes:\n        'Expects the nonce parameter to be coming from the retrieve username journey',\n      validate: {\n        payload: reqSendUserNameSchema\n      },\n      response: {\n        schema: false\n      }\n    }\n  })\n\n  server.route({\n    method: 'POST',\n    path: '/token',\n    handler: tokenHandler,\n    options: {\n      tags: ['api'],\n      description: 'Authenticate system with client_id and client_secret'\n    }\n  })\n\n  await server.register(getPlugins())\n  server.ext({\n    type: 'onRequest',\n    method(\n      request: Hapi.Request & {\n        sentryScope?: {\n          setExtra: (key: string, value: unknown) => void\n        }\n      },\n      h\n    ) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }\n  })\n\n  async function stop() {\n    await server.stop()\n    await database.stop()\n    server.log('info', 'server stopped')\n  }\n\n  async function start() {\n    await server.start()\n    await database.start()\n    server.log('info', `server started on ${env.AUTH_HOST}:${env.AUTH_PORT}`)\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 76,
      "endLine": 427,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@90-94",
      "type": "method_definition",
      "name": "if",
      "text": "if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`Response validationError: ${err.message}`)\n            throw badRequest(`Invalid response payload returned from handler`)\n          }",
      "startLine": 90,
      "endLine": 94,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 17,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@401-411",
      "type": "method_definition",
      "name": "method",
      "text": "method(\n      request: Hapi.Request & {\n        sentryScope?: {\n          setExtra: (key: string, value: unknown) => void\n        }\n      },\n      h\n    ) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }",
      "startLine": 401,
      "endLine": 411,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@414-418",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    await database.stop()\n    server.log('info', 'server stopped')\n  }",
      "startLine": 414,
      "endLine": 418,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@420-424",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    await server.start()\n    await database.start()\n    server.log('info', `server started on ${env.AUTH_HOST}:${env.AUTH_PORT}`)\n  }",
      "startLine": 420,
      "endLine": 424,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-45",
      "type": "function_declaration",
      "name": "invalidateTokenHandler",
      "text": "async function invalidateTokenHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { token } = request.payload as IInvalidateTokenPayload\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  try {\n    await postUserActionToMetrics('LOGGED_OUT', token, remoteAddress, userAgent)\n  } catch (err) {\n    logger.error(err.message)\n  }\n\n  try {\n    await invalidateToken(token)\n  } catch (err) {\n    throw internal('Failed to invalidate token', err)\n  }\n\n  return {}\n}",
      "startLine": 22,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/invalidateToken/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-17",
      "type": "function_declaration",
      "name": "verifyToken",
      "text": "async function verifyToken(token: string) {\n  const record = await redis.get(`${INVALID_TOKEN_NAMESPACE}:${token}`)\n  return record === null\n}",
      "startLine": 14,
      "endLine": 17,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/verifyToken/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-187",
      "type": "function_declaration",
      "name": "getRoutes",
      "text": "function getRoutes(): ServerRoute[] {\n  return [\n    // add ping route by default for health check\n    {\n      method: 'GET',\n      path: '/ping',\n      handler: (request, h) => {\n        // Perform any health checks and return true or false for success prop\n        return {\n          success: true\n        }\n      },\n      options: {\n        auth: false,\n        tags: ['api'],\n        description: 'Health check endpoint'\n      }\n    },\n    {\n      method: 'GET',\n      path: '/config',\n      handler: configHandler,\n      options: {\n        tags: ['api'],\n        description: 'Retrieve all configuration'\n      }\n    },\n    {\n      method: 'GET',\n      path: '/publicConfig',\n      handler: getLoginConfigHandler,\n      options: {\n        auth: false,\n        tags: ['api'],\n        description: 'Retrieve Application configuration'\n      }\n    },\n    {\n      method: 'GET',\n      path: '/integrationConfig',\n      handler: getSystems,\n      options: {\n        tags: ['api'],\n        description: 'Retrieve Application integrations'\n      }\n    },\n    {\n      method: 'GET',\n      path: '/forms',\n      handler: getForms,\n      options: {\n        tags: ['api'],\n        description: 'Retrieve forms'\n      }\n    },\n    {\n      method: 'GET',\n      path: '/dashboardQueries',\n      handler: getDashboardQueries,\n      options: {\n        tags: ['api'],\n        auth: false,\n        description: 'Fetch dashboard queries from country config'\n      }\n    },\n    {\n      method: 'GET',\n      path: '/locations',\n      handler: fetchLocationsHandler,\n      options: {\n        tags: ['api'],\n        auth: false,\n        description: 'Get all locations',\n        validate: {\n          query: locationQuerySchema\n        }\n      }\n    },\n    {\n      method: 'POST',\n      path: '/locations',\n      handler: createLocationHandler,\n      options: {\n        tags: ['api'],\n        auth: {\n          scope: [SCOPES.CONFIG_UPDATE_ALL, SCOPES.USER_DATA_SEEDING]\n        },\n        description: 'Create a location',\n        validate: {\n          payload: createLocationReqSchema\n        }\n      }\n    },\n    {\n      method: 'GET',\n      path: '/locations/{locationId}',\n      handler: fetchLocationHandler,\n      options: {\n        tags: ['api'],\n        auth: false,\n        description: 'Get a single location',\n        validate: {\n          params: requestParamsSchema\n        }\n      }\n    },\n    {\n      method: 'PUT',\n      path: '/locations/{locationId}',\n      handler: updateLocationHandler,\n      options: {\n        tags: ['api'],\n        auth: {\n          scope: [SCOPES.CONFIG_UPDATE_ALL]\n        },\n        description: 'Update a location or facility',\n        validate: {\n          payload: updateSchema,\n          params: requestParamsSchema\n        }\n      }\n    },\n    {\n      method: 'GET',\n      path: '/locations/{locationId}/hierarchy',\n      handler: locationHierarchyHandler,\n      options: {\n        tags: ['api'],\n        auth: false,\n        description: \"Get location's hierarchy\",\n        validate: {\n          params: Joi.object({\n            locationId: Joi.string().uuid()\n          })\n        }\n      }\n    },\n    {\n      method: 'GET',\n      path: '/locations/{locationId}/children',\n      handler: resolveChildren,\n      options: {\n        auth: false,\n        tags: ['api'],\n        description:\n          'Retrieve all the children (multi-level) of a particular location',\n        validate: {\n          params: Joi.object({\n            locationId: Joi.string().uuid()\n          })\n        }\n      }\n    }\n  ]\n}",
      "startLine": 33,
      "endLine": 187,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/config/routes.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-34",
      "type": "function_declaration",
      "name": "verifyTokenHandler",
      "text": "async function verifyTokenHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { token } = request.payload as IVerifyTokenPayload\n\n  let valid = false\n  try {\n    valid = await verifyToken(token)\n  } catch (err) {\n    throw internal('Failed to verifyToken token', err)\n  }\n\n  return { valid }\n}",
      "startLine": 20,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/verifyToken/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-25",
      "type": "function_declaration",
      "name": "fetchLocationHandler",
      "text": "async function fetchLocationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const locationId = request.params.locationId\n  const response = await fetchFromHearth<SavedLocation>(\n    `Location/${locationId}`\n  )\n\n  return response\n}",
      "startLine": 15,
      "endLine": 25,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@111-143",
      "type": "function_declaration",
      "name": "setExtensions",
      "text": "function setExtensions(\n  malePopulations: Statistics,\n  femalePopulations: Statistics,\n  totalPopulations: Statistics,\n  birthRates: Statistics\n) {\n  const extensions: Extension[] = [\n    {\n      url: 'http://hl7.org/fhir/StructureDefinition/location-boundary-geojson',\n      valueAttachment: {\n        contentType: 'application/geo+json',\n        data: '<base64>' // base64 encoded geoJSON feature object\n      }\n    },\n    {\n      url: 'http://opencrvs.org/specs/id/statistics-male-populations',\n      valueString: JSON.stringify(malePopulations)\n    },\n    {\n      url: 'http://opencrvs.org/specs/id/statistics-female-populations',\n      valueString: JSON.stringify(femalePopulations)\n    },\n    {\n      url: 'http://opencrvs.org/specs/id/statistics-total-populations',\n      valueString: JSON.stringify(totalPopulations)\n    },\n    {\n      url: 'http://opencrvs.org/specs/id/statistics-crude-birth-rates',\n      valueString: JSON.stringify(birthRates)\n    }\n  ]\n  return extensions\n}",
      "startLine": 111,
      "endLine": 143,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@145-174",
      "type": "function_declaration",
      "name": "generateStatisticalExtensions",
      "text": "function generateStatisticalExtensions(\n  sourceStatistic: LocationStatistic[]\n) {\n  const malePopulations: Statistics = []\n  const femalePopulations: Statistics = []\n  const totalPopulations: Statistics = []\n  const birthRates: Statistics = []\n\n  for (const data of sourceStatistic) {\n    femalePopulations.push({\n      [data.year]: data.female_population\n    })\n    malePopulations.push({\n      [data.year]: data.male_population\n    })\n    totalPopulations.push({\n      [data.year]: data.population\n    })\n    birthRates.push({\n      [data.year]: data.crude_birth_rate\n    })\n  }\n\n  return setExtensions(\n    malePopulations,\n    femalePopulations,\n    totalPopulations,\n    birthRates\n  )\n}",
      "startLine": 145,
      "endLine": 174,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@176-243",
      "type": "function_declaration",
      "name": "updateStatisticalExtensions",
      "text": "function updateStatisticalExtensions(\n  sourceStatistic: LocationStatistic,\n  extension: Extension[]\n) {\n  let malePopulations: Statistics = []\n  let femalePopulations: Statistics = []\n  let totalPopulations: Statistics = []\n  let birthRates: Statistics = []\n\n  for (const data of extension) {\n    if (data.url === ExtensionUrl.MALE_POPULATION) {\n      malePopulations = JSON.parse(data.valueString!)\n      const previousData = malePopulations.find((year) =>\n        Boolean(year[sourceStatistic.year])\n      )\n      if (previousData) {\n        previousData[sourceStatistic.year] = sourceStatistic.male_population\n      } else {\n        malePopulations.push({\n          [sourceStatistic.year]: sourceStatistic.male_population\n        })\n      }\n    } else if (data.url === ExtensionUrl.FEMALE_POPULATION) {\n      femalePopulations = JSON.parse(data.valueString!)\n      const previousData = femalePopulations.find((year) =>\n        Boolean(year[sourceStatistic.year])\n      )\n      if (previousData) {\n        previousData[sourceStatistic.year] = sourceStatistic.female_population\n      } else {\n        femalePopulations.push({\n          [sourceStatistic.year]: sourceStatistic.female_population\n        })\n      }\n    } else if (data.url === ExtensionUrl.TOTAL_POPULATION) {\n      totalPopulations = JSON.parse(data.valueString!)\n      const previousData = totalPopulations.find((year) =>\n        Boolean(year[sourceStatistic.year])\n      )\n      if (previousData) {\n        previousData[sourceStatistic.year] = sourceStatistic.population\n      } else {\n        totalPopulations.push({\n          [sourceStatistic.year]: sourceStatistic.population\n        })\n      }\n    } else if (data.url === ExtensionUrl.CRUDE_BIRTH_RATE) {\n      birthRates = JSON.parse(data.valueString!)\n      const previousData = birthRates.find((year) =>\n        Boolean(year[sourceStatistic.year])\n      )\n      if (previousData) {\n        previousData[sourceStatistic.year] = sourceStatistic.crude_birth_rate\n      } else {\n        birthRates.push({\n          [sourceStatistic.year]: sourceStatistic.crude_birth_rate\n        })\n      }\n    }\n  }\n\n  return setExtensions(\n    malePopulations,\n    femalePopulations,\n    totalPopulations,\n    birthRates\n  )\n}",
      "startLine": 176,
      "endLine": 243,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@245-258",
      "type": "function_declaration",
      "name": "getLocationsByIdentifier",
      "text": "async function getLocationsByIdentifier(identifier: string) {\n  const locationSearchResult = await fetchFromHearth<Bundle<Location>>(\n    `Location/?identifier=${identifier}&_count=0`\n  )\n\n  return (\n    (locationSearchResult &&\n      locationSearchResult.entry &&\n      locationSearchResult.entry.map(\n        (locationEntry) => locationEntry.resource as Location\n      )) ||\n    []\n  )\n}",
      "startLine": 245,
      "endLine": 258,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/locations/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-38",
      "type": "function_declaration",
      "name": "getDashboardQueries",
      "text": "async function getDashboardQueries(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const url = new URL('dashboards/queries.json', env.COUNTRY_CONFIG_URL)\n  const response = await fetch(url)\n\n  if (response.status === 404) {\n    return defaultQueries()\n  }\n\n  if (!response.ok) {\n    throw new Error(\n      `Error fetching dashboard queries: ${JSON.stringify(\n        await response.json(),\n        null,\n        4\n      )}`\n    )\n  }\n\n  return response.json()\n}",
      "startLine": 16,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/dashboardQueries/dashboardQueries.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-39",
      "type": "function_declaration",
      "name": "verifyToken",
      "text": "function verifyToken(token: string) {\n  return f.pipe(token, safeVerifyJwt, e.chainW(tokenPayload.decode))\n}",
      "startLine": 37,
      "endLine": 39,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/utils/verifyToken.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-35",
      "type": "function_declaration",
      "name": "up",
      "text": "async function up(db: Db, client: MongoClient) {\n  const session = client.startSession()\n  try {\n    const channels = baseConfig.Channels\n    await session.withTransaction(async () => {\n      for (const channel of channels) {\n        await db.collection('channels').updateMany(\n          { name: channel.name },\n          { $set: channel },\n          {\n            upsert: true\n          }\n        )\n      }\n    })\n  } finally {\n    await session.endSession()\n  }\n}",
      "startLine": 17,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/openhim/20220825071508-channels-v1.0.1.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-46",
      "type": "function_declaration",
      "name": "down",
      "text": "async function down(db: Db, client: MongoClient) {\n  const session = client.startSession()\n  try {\n    await session.withTransaction(async () => {\n      await db.collection('channels').deleteMany({})\n    })\n  } finally {\n    await session.endSession()\n  }\n}",
      "startLine": 37,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/openhim/20220825071508-channels-v1.0.1.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@68-77",
      "type": "function_declaration",
      "name": "up",
      "text": "async function up(db: Db, client: MongoClient): Promise<void> {\n  const session = client.startSession()\n  try {\n    await session.withTransaction(async () => {\n      await upsertChannel(db, newChannel)\n    })\n  } finally {\n    await session.endSession()\n  }\n}",
      "startLine": 68,
      "endLine": 77,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/openhim/20220826062206-channels-v1.0.1-to-v1.1.0.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@79-88",
      "type": "function_declaration",
      "name": "down",
      "text": "async function down(db: Db, client: MongoClient): Promise<void> {\n  const session = client.startSession()\n  try {\n    await session.withTransaction(async () => {\n      await removeChannel(db, newChannel)\n    })\n  } finally {\n    await session.endSession()\n  }\n}",
      "startLine": 79,
      "endLine": 88,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/openhim/20220826062206-channels-v1.0.1-to-v1.1.0.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-94",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  let whitelist: string[] = [env.DOMAIN]\n  if (env.DOMAIN[0] !== '*') {\n    whitelist = [env.LOGIN_URL, env.CLIENT_APP_URL]\n  }\n  logger.info(`Whitelist: ${JSON.stringify(whitelist)}`)\n  const server = new Hapi.Server({\n    host: env.HOST,\n    port: env.PORT,\n    routes: {\n      cors: { origin: whitelist },\n      validate: {\n        failAction: async (_, _2, err) => {\n          if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`ValidationError: ${err?.message}`)\n            throw badRequest(`Invalid request payload input`)\n          } else {\n            // During development, log and respond with the full error.\n            logger.error(err?.message)\n            throw err\n          }\n        }\n      },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n\n  await server.register(getPlugins())\n\n  server.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:config-user'\n    },\n    validate: (payload: any, request: Hapi.Request) =>\n      validateFunc(payload, request, env.CHECK_INVALID_TOKEN, env.AUTH_URL)\n  })\n\n  server.auth.default('jwt')\n\n  const routes = getRoutes()\n  server.route(routes)\n\n  server.ext({\n    type: 'onRequest',\n    method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }\n  })\n\n  async function stop() {\n    await server.stop()\n    await database.stop()\n    await mongoDirect.stop()\n    server.log('info', 'Config server stopped')\n  }\n\n  async function start() {\n    await server.start()\n    await database.start()\n    await mongoDirect.start()\n    server.log('info', `Config server started on ${env.HOST}:${env.PORT}`)\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 25,
      "endLine": 94,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@73-76",
      "type": "method_definition",
      "name": "method",
      "text": "method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }",
      "startLine": 73,
      "endLine": 76,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@79-84",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    await database.stop()\n    await mongoDirect.stop()\n    server.log('info', 'Config server stopped')\n  }",
      "startLine": 79,
      "endLine": 84,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@86-91",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    await server.start()\n    await database.start()\n    await mongoDirect.start()\n    server.log('info', `Config server started on ${env.HOST}:${env.PORT}`)\n  }",
      "startLine": 86,
      "endLine": 91,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@65-72",
      "type": "function_declaration",
      "name": "getTotalUserWithAvatarCountByCollectionName",
      "text": "async function getTotalUserWithAvatarCountByCollectionName(\n  db: Db,\n  collectionName: string,\n  fieldToCheck: string\n) {\n  const filter = { [fieldToCheck]: { $exists: true } }\n  return await db.collection(collectionName).countDocuments(filter)\n}",
      "startLine": 65,
      "endLine": 72,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/user-mgnt/20230623175740-migrate-profile-image-to-minio.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@11-17",
      "type": "function_declaration",
      "name": "createServerWithEnvironment",
      "text": "function createServerWithEnvironment(env: Record<string, string>) {\n  jest.resetModules()\n  process.env = { ...process.env, ...env, LOG_LEVEL: 'error' }\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  /* eslint-disable @typescript-eslint/no-var-requires */\n  return require('../server').createServer()\n}",
      "startLine": 11,
      "endLine": 17,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/tests/util.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-34",
      "type": "function_declaration",
      "name": "createProductionEnvironmentServer",
      "text": "function createProductionEnvironmentServer() {\n  return createServerWithEnvironment({\n    NODE_ENV: 'production',\n    AUTH_HOST: '0.0.0.0',\n    AUTH_PORT: '4040',\n    CLIENT_APP_URL: 'http://localhost:3000/',\n    COUNTRY_CONFIG_URL: 'http://localhost:3040/',\n    COUNTRY_CONFIG_URL_INTERNAL: 'http://localhost:3040/',\n    DOMAIN: '*',\n    LOGIN_URL: 'http://localhost:3020/',\n    METRICS_URL: 'http://localhost:1050',\n    NOTIFICATION_SERVICE_URL: 'http://localhost:2020/',\n    REDIS_HOST: 'localhost',\n    USER_MANAGEMENT_URL: 'http://localhost:3030/'\n  })\n}",
      "startLine": 19,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/tests/util.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@346-351",
      "type": "function_declaration",
      "name": "getTotalDocCountByCollectionName",
      "text": "async function getTotalDocCountByCollectionName(\n  db: Db,\n  collectionName: string\n) {\n  return await db.collection(collectionName).count()\n}",
      "startLine": 346,
      "endLine": 351,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/user-mgnt/20221229110512-modify-user-roleAndtype-fieldName.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@353-355",
      "type": "function_declaration",
      "name": "getUserCursor",
      "text": "async function getUserCursor(db: Db, limit = 50, skip = 0) {\n  return db.collection('users').find({}, { limit, skip })\n}",
      "startLine": 353,
      "endLine": 355,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/user-mgnt/20221229110512-modify-user-roleAndtype-fieldName.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@357-366",
      "type": "function_declaration",
      "name": "createCollectionIfDoesNotExist",
      "text": "async function createCollectionIfDoesNotExist(db: Db, collectionName: string) {\n  const collectionExists = await checkIfCollectionExists(db, collectionName)\n\n  if (!collectionExists) {\n    await db.createCollection(collectionName)\n    console.log(`${collectionName} collection created`)\n  } else {\n    console.log(`${collectionName} collection already exists`)\n  }\n}",
      "startLine": 357,
      "endLine": 366,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/user-mgnt/20221229110512-modify-user-roleAndtype-fieldName.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@368-374",
      "type": "function_declaration",
      "name": "checkIfCollectionExists",
      "text": "async function checkIfCollectionExists(db: Db, collectionName: string) {\n  const collectionExists = await db\n    .listCollections({ name: collectionName })\n    .hasNext()\n\n  return collectionExists\n}",
      "startLine": 368,
      "endLine": 374,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/user-mgnt/20221229110512-modify-user-roleAndtype-fieldName.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-35",
      "type": "function_declaration",
      "name": "postUserActionToMetrics",
      "text": "async function postUserActionToMetrics(\n  action: string,\n  token: string,\n  remoteAddress: string,\n  userAgent: string,\n  practitionerId?: string\n) {\n  const url = resolve(env.METRICS_URL, '/audit/events')\n  const body = { action: action, practitionerId }\n  const authentication = 'Bearer ' + token\n\n  await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: authentication,\n      'x-real-ip': remoteAddress,\n      'x-real-user-agent': userAgent\n    }\n  })\n}",
      "startLine": 14,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/metrics.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@81-186",
      "type": "function_declaration",
      "name": "setInformantDeceasedAndLocationDetails",
      "text": "async function setInformantDeceasedAndLocationDetails(\n  db: Db,\n  body: any,\n  composition: fhir.Composition\n) {\n  const informantSection = composition.section?.find(\n    (section) => section.code?.coding?.[0].code === 'informant-details'\n  )\n\n  const deceasedSection = composition.section?.find(\n    (section) => section.code?.coding?.[0].code === 'deceased-details'\n  )\n\n  const encounterSection = composition.section?.find(\n    (section) =>\n      section.code?.coding?.[0].code === 'birth-encounter' ||\n      section.code?.coding?.[0].code === 'death-encounter'\n  )\n\n  if (informantSection) {\n    const relatedPersonId =\n      informantSection?.entry?.[0]?.reference?.replace('RelatedPerson/', '') ??\n      ''\n\n    const relatedPersonDoc = await getCollectionDocuments(\n      db,\n      COLLECTION_NAMES.RELATEDPERSON,\n      [relatedPersonId]\n    )\n    if (relatedPersonDoc.length > 0) {\n      const patientId = relatedPersonDoc[0].patient?.reference.replace(\n        'Patient/',\n        ''\n      )\n      const patientDoc = await getCollectionDocuments(\n        db,\n        COLLECTION_NAMES.PATIENT,\n        [patientId]\n      )\n      if (patientDoc.length > 0) {\n        body.informantDoB = patientDoc[0].birthDate\n        body.informantIdentifier =\n          patientDoc[0].identifier &&\n          patientDoc[0].identifier.find(\n            (identify: Identifier) => identify.type === 'NATIONAL_ID'\n          )?.value\n      }\n    }\n  }\n\n  if (deceasedSection) {\n    const patientId =\n      deceasedSection?.entry?.[0]?.reference?.replace('Patient/', '') ?? ''\n    const patientDoc = await getCollectionDocuments(\n      db,\n      COLLECTION_NAMES.PATIENT,\n      [patientId]\n    )\n    if (patientDoc.length > 0) {\n      body.gender = patientDoc[0].gender\n      body.deceasedDoB = patientDoc[0].birthDate\n      body.deceasedIdentifier =\n        patientDoc[0].identifier &&\n        patientDoc[0].identifier.find(\n          (identify: Identifier) => identify.type === 'NATIONAL_ID'\n        )?.value\n    }\n  }\n\n  if (encounterSection) {\n    const encounterId =\n      encounterSection?.entry?.[0]?.reference?.replace('Encounter/', '') ?? ''\n\n    const encounterDoc = await getCollectionDocuments(\n      db,\n      COLLECTION_NAMES.ENCOUNTER,\n      [encounterId]\n    )\n\n    if (encounterDoc.length > 0) {\n      const locationId =\n        encounterDoc[0]?.location?.[0]?.location?.reference?.replace(\n          'Location/',\n          ''\n        )\n\n      const locationDoc = locationId\n        ? await getCollectionDocuments(db, COLLECTION_NAMES.LOCATION, [\n            locationId\n          ])\n        : []\n\n      if (locationDoc.length > 0) {\n        const address: fhir.Address = locationDoc[0].address\n        if (address) {\n          body.eventCountry = address.country\n          const eventJurisdictionIds: string[] = []\n          address.state && eventJurisdictionIds.push(address.state)\n          address.district && eventJurisdictionIds.push(address.district)\n          body.eventJurisdictionIds = eventJurisdictionIds\n        }\n      }\n    }\n  }\n  await updateComposition(composition.id!, body)\n}",
      "startLine": 81,
      "endLine": 186,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20221110092434-add_identifiers_DOB_gender_location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@779-790",
      "type": "function_declaration",
      "name": "defaultQueries",
      "text": "function defaultQueries() {\n  const lastUpdatedAt = subMinutes(\n    new Date(),\n    REFRESH_AFTER_IN_MINUTE\n  ).toISOString()\n\n  return [\n    registrations({ lastUpdatedAt }),\n    declarations({ lastUpdatedAt }),\n    populationEstimatesPerDay()\n  ]\n}",
      "startLine": 779,
      "endLine": 790,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/dashboardQueries/defaultQueries.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@70-72",
      "type": "function_declaration",
      "name": "getDocumentReferenceCursor",
      "text": "async function getDocumentReferenceCursor(db: Db, limit = 50, skip = 0) {\n  return db.collection('DocumentReference').find({}, { limit, skip })\n}",
      "startLine": 70,
      "endLine": 72,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20221128065238-migrate-documents-to-minio.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@74-79",
      "type": "function_declaration",
      "name": "getTotalDocCountByCollectionName",
      "text": "async function getTotalDocCountByCollectionName(\n  db: Db,\n  collectionName: string\n) {\n  return await db.collection(collectionName).count()\n}",
      "startLine": 74,
      "endLine": 79,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20221128065238-migrate-documents-to-minio.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-25",
      "type": "function_declaration",
      "name": "getSystems",
      "text": "async function getSystems(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const authHeader = getToken(request)\n\n  return fetchUserManagement<Integration[]>('/getAllSystems', {\n    Authorization: authHeader\n  })\n}",
      "startLine": 16,
      "endLine": 25,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/system/systemHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@148-155",
      "type": "function_declaration",
      "name": "getTotalAvailableDocCountByCollectionName",
      "text": "async function getTotalAvailableDocCountByCollectionName(\n  db: Db,\n  collectionName: string,\n  fieldToCheck: string\n) {\n  const filter = { [fieldToCheck]: { $exists: true } }\n  return await db.collection(collectionName).countDocuments(filter)\n}",
      "startLine": 148,
      "endLine": 155,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20230612060923-update-patient-identifier-with-codeableconcept.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@70-86",
      "type": "function_declaration",
      "name": "getCompositionIdToStartedByMap",
      "text": "async function getCompositionIdToStartedByMap(\n  db: Db,\n  compositionIds: string[]\n) {\n  const extractId = (reference: string) => reference.split('/')[1]\n  const cursor = await getTaskCursor(db, compositionIds)\n  const startedByMap = new Map<string, string>()\n  await cursor.forEach((task) => {\n    const compositionId = extractId(task.focus.reference)\n    if (startedByMap.has(compositionId)) return\n    startedByMap.set(\n      compositionId,\n      extractId(task.extension[0]?.valueReference.reference)\n    )\n  })\n  return startedByMap\n}",
      "startLine": 70,
      "endLine": 86,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20220822085901-rejected-declarations-started-by.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@88-122",
      "type": "function_declaration",
      "name": "getTaskCursor",
      "text": "function getTaskCursor(db: Db, compositionIds: string[]) {\n  const query = {\n    $match: {\n      'businessStatus.coding.code': {\n        $in: ['IN_PROGRESS', 'DECLARED', 'VALIDATED']\n      },\n      'focus.reference': {\n        $in: compositionIds.map(\n          (compositionId) => `Composition/${compositionId}`\n        )\n      }\n    }\n  }\n  const projection = {\n    $project: {\n      'focus.reference': 1,\n      extension: {\n        $filter: {\n          input: '$extension',\n          as: 'ext',\n          cond: {\n            $eq: [\n              '$$ext.url',\n              'http://opencrvs.org/specs/extension/regLastUser'\n            ]\n          }\n        }\n      },\n      meta: 1,\n      _id: 0\n    }\n  }\n  const sort = { $sort: { 'meta.lastUpdated': 1 } }\n  return db.collection('Task_history').aggregate([query, projection, sort])\n}",
      "startLine": 88,
      "endLine": 122,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20220822085901-rejected-declarations-started-by.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@228-234",
      "type": "function_declaration",
      "name": "getPractitionerRoleCursor",
      "text": "async function getPractitionerRoleCursor<T extends Document>(\n  db: Db,\n  limit = 50,\n  skip = 0\n) {\n  return db.collection('PractitionerRole').find<T>({}, { limit, skip })\n}",
      "startLine": 228,
      "endLine": 234,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20230127063226-update-practitioner-role.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@236-241",
      "type": "function_declaration",
      "name": "getTotalDocCountByCollectionName",
      "text": "async function getTotalDocCountByCollectionName(\n  db: Db,\n  collectionName: string\n) {\n  return await db.collection(collectionName).count()\n}",
      "startLine": 236,
      "endLine": 241,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20230127063226-update-practitioner-role.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-36",
      "type": "function_declaration",
      "name": "anonymousTokenHandler",
      "text": "async function anonymousTokenHandler(\n  _request: Hapi.Request,\n  _h: Hapi.ResponseToolkit\n): Promise<IAuthResponse> {\n  const token = await createToken(\n    '__ANONYMOUS_USER__',\n    ['verify'],\n    [\n      'opencrvs:hearth-user',\n      'opencrvs:user-mgnt-user',\n      'opencrvs:workflow-user',\n      'opencrvs:countryconfig-user'\n    ],\n    'opencrvs:auth-service',\n    true\n  )\n  return { token }\n}",
      "startLine": 19,
      "endLine": 36,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/auth/src/features/anonymousToken/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-69",
      "type": "function_declaration",
      "name": "migrateRegistrations",
      "text": "async function migrateRegistrations(measurement: string, db: Db) {\n  const result = (await query(\n    `SELECT COUNT(compositionId) as total FROM ${measurement} WHERE registrarPractitionerId = ''`\n  )) as unknown as IMigrationRegistrationResults[]\n\n  const totalCount = result[0]?.total ?? 0\n\n  console.log(\n    `Migration - InfluxDB :: Total points found for measurement ${measurement}: ${totalCount}`\n  )\n\n  let processed = 0\n\n  while (processed < totalCount) {\n    const registrations = (await query(\n      `SELECT * FROM ${measurement} WHERE registrarPractitionerId = '' LIMIT ${LIMIT}`\n    )) as unknown as IRegistrationFields[]\n    console.log(\n      `Migration - InfluxDB :: Processing ${measurement}, ${processed + 1}-${\n        processed + registrations.length\n      }`\n    )\n    const updatedPoints = await getUpdatedPoints(registrations, measurement, db)\n\n    await writePoints(updatedPoints)\n\n    const startTime = registrations[0]?.time?.getNanoTime()\n    const endTime = registrations[registrations.length - 1].time?.getNanoTime()\n\n    const deleteQuery = `DELETE FROM ${measurement} WHERE registrarPractitionerId = '' AND time >= ${startTime} AND time <= ${endTime}`\n    await query(deleteQuery)\n\n    processed += registrations.length\n    console.log(\n      `Migration - InfluxDB :: Processing done: ${(\n        (processed / totalCount) *\n        100\n      ).toFixed(2)}%`\n    )\n  }\n}",
      "startLine": 29,
      "endLine": 69,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20221031131452-add_practioner_id_event_registrations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-66",
      "type": "function_declaration",
      "name": "findDuplicates",
      "text": "function findDuplicates(arr: string[]): string[] {\n  const freqCount = arr.reduce((counter, str) => {\n    if (counter.has(str)) {\n      counter.set(str, counter.get(str)! + 1)\n    } else {\n      counter.set(str, 1)\n    }\n    return counter\n  }, new Map<string, number>())\n  return [...freqCount.entries()]\n    .filter(([_, count]) => count > 1)\n    .map(([name, _]) => name)\n}",
      "startLine": 54,
      "endLine": 66,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/forms/validation.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@488-490",
      "type": "method_definition",
      "name": "if",
      "text": "if (!visited.has(dep) && hasCycle(dep, visited, stack)) {\n                return true\n              }",
      "startLine": 488,
      "endLine": 490,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 25,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/config/src/handlers/forms/validation.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@103-179",
      "type": "function_declaration",
      "name": "updateEventLocationIdOrJurisdictionIds",
      "text": "async function updateEventLocationIdOrJurisdictionIds(db: Db, elasticDoc: any) {\n  const body: Record<string, any> = {}\n  const compositionId = elasticDoc._id\n  const compositionFromDB = await getCollectionDocuments(\n    db,\n    COLLECTION_NAMES.COMPOSITION,\n    [compositionId]\n  )\n\n  if (!compositionFromDB) {\n    throw new Error(`could not find composition with id: ${compositionId}`)\n  }\n\n  const composition = compositionFromDB[0]\n  const encounterSection = composition.section.find(\n    (section: any) =>\n      section.code?.coding?.[0]?.code === 'birth-encounter' ||\n      section.code?.coding?.[0]?.code === 'death-encounter'\n  )\n\n  if (!encounterSection) {\n    throw new Error(\n      `could not find encounter in compositionID: ${compositionId}`\n    )\n  }\n  const encounterId = encounterSection.entry[0]?.reference.replace(\n    'Encounter/',\n    ''\n  )\n\n  const encounterDoc = await getCollectionDocuments(\n    db,\n    COLLECTION_NAMES.ENCOUNTER,\n    [encounterId]\n  )\n\n  if (encounterDoc.length > 0) {\n    const locationId =\n      encounterDoc[0]?.location?.[0]?.location?.reference?.replace(\n        'Location/',\n        ''\n      )\n\n    const locationDoc = locationId\n      ? await getCollectionDocuments(db, COLLECTION_NAMES.LOCATION, [\n          locationId\n        ])\n      : []\n\n    if (locationDoc.length > 0) {\n      const firstLocationDoc = locationDoc[0]\n      if (firstLocationDoc.type?.coding?.[0]?.code === 'HEALTH_FACILITY') {\n        body.eventLocationId = firstLocationDoc.id\n      } else {\n        const address = firstLocationDoc.address\n        if (address) {\n          const eventJurisdictionIds: string[] = []\n          address.state && eventJurisdictionIds.push(address.state)\n          address.district && eventJurisdictionIds.push(address.district)\n          if (address.line) {\n            address.line[10] && eventJurisdictionIds.push(address.line[10])\n            address.line[11] && eventJurisdictionIds.push(address.line[11])\n            address.line[12] && eventJurisdictionIds.push(address.line[12])\n          }\n          body.eventJurisdictionIds = eventJurisdictionIds\n          body.eventCountry = address.country\n        }\n      }\n    } else {\n      console.error(\n        `No location found for locationId:${locationId} against encounter of compositionId:${composition.id}`\n      )\n    }\n  }\n\n  await updateComposition(composition.id, body, { refresh: 'wait_for' })\n}",
      "startLine": 103,
      "endLine": 179,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20230602120944-populate-valid-locationid.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@127-132",
      "type": "function_declaration",
      "name": "getTotalTaskCountByCollectionName",
      "text": "async function getTotalTaskCountByCollectionName(\n  db: Db,\n  collectionName: string\n) {\n  return await db.collection(collectionName).count()\n}",
      "startLine": 127,
      "endLine": 132,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20230602090436-update-identifier-with-system.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-35",
      "type": "function_declaration",
      "name": "derivePartOfFromAddress",
      "text": "function derivePartOfFromAddress(address: fhir.Address) {\n  let partOf = address.state\n\n  if (!isEmpty(address.district)) {\n    partOf = address.district\n  }\n\n  if (!isEmpty(address.line?.[10])) {\n    partOf = address.line?.[10]\n  }\n\n  if (!isEmpty(address.line?.[11])) {\n    partOf = address.line?.[11]\n  }\n\n  if (!isEmpty(address.line?.[12])) {\n    partOf = address.line?.[12]\n  }\n\n  return partOf\n}",
      "startLine": 15,
      "endLine": 35,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/migrations/hearth/20231024153838-partof-to-address.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@12-18",
      "type": "function_declaration",
      "name": "reportProgress",
      "text": "function reportProgress(message: string, step: number, total: number) {\n  // log every 0.1% progress\n  const logEvery = Math.max(10, Math.round(total / 1000))\n  if (step % logEvery === 0 || step === total) {\n    console.log(`${message}: ${((100 * step) / total).toFixed(2)}%`)\n  }\n}",
      "startLine": 12,
      "endLine": 18,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/progressTracker.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-34",
      "type": "function_declaration",
      "name": "getNotificationContent",
      "text": "function getNotificationContent(): NotificationContent[] {\n  return Object.keys(NOTIFICATION_NAME_MAPPING_WITH_RESOURCE).map((key) => ({\n    name: key,\n    enabled: true,\n    createdAt: Date.now(),\n    updatedAt: Date.now()\n  }))\n}",
      "startLine": 27,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/resource-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-66",
      "type": "function_declaration",
      "name": "isBase64FileString",
      "text": "function isBase64FileString(fileData: string) {\n  if (fileData === '' || fileData.trim() === '') {\n    return false\n  }\n  const strSplit = fileData.split(':')\n  return strSplit.length > 0 && strSplit[0] === 'data'\n}",
      "startLine": 60,
      "endLine": 66,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/minio-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-32",
      "type": "function_declaration",
      "name": "getBirthCompositionsCursor",
      "text": "async function getBirthCompositionsCursor(db: Db, limit = 50, skip = 0) {\n  return db\n    .collection(COLLECTION_NAMES.COMPOSITION)\n    .find<fhir.Composition & { id: string }>(\n      {\n        'section.code.coding': { $elemMatch: { code: 'birth-encounter' } }\n      },\n      { limit, skip }\n    )\n}",
      "startLine": 23,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/hearth-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-41",
      "type": "function_declaration",
      "name": "getBirthCompositionsCount",
      "text": "async function getBirthCompositionsCount(db: Db) {\n  return db\n    .collection(COLLECTION_NAMES.COMPOSITION)\n    .find({\n      'section.code.coding': { $elemMatch: { code: 'birth-encounter' } }\n    })\n    .count()\n}",
      "startLine": 34,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/hearth-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-45",
      "type": "function_declaration",
      "name": "getCompositionCursor",
      "text": "async function getCompositionCursor(db: Db, limit = 50, skip = 0) {\n  return db.collection(COLLECTION_NAMES.COMPOSITION).find({}, { limit, skip })\n}",
      "startLine": 43,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/hearth-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@47-55",
      "type": "function_declaration",
      "name": "getCertifiedTaskCursor",
      "text": "async function getCertifiedTaskCursor<T extends Document>(\n  db: Db,\n  limit = 50,\n  skip = 0\n) {\n  return db\n    .collection(COLLECTION_NAMES.TASK)\n    .find<T>({ 'businessStatus.coding.code': 'CERTIFIED' }, { limit, skip })\n}",
      "startLine": 47,
      "endLine": 55,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/hearth-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@57-62",
      "type": "function_declaration",
      "name": "getTotalCertifiedTaskCount",
      "text": "async function getTotalCertifiedTaskCount(db: Db) {\n  return db\n    .collection(COLLECTION_NAMES.TASK)\n    .find({ 'businessStatus.coding.code': 'CERTIFIED' })\n    .count()\n}",
      "startLine": 57,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/hearth-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-69",
      "type": "function_declaration",
      "name": "getTotalDocCountByCollectionName",
      "text": "async function getTotalDocCountByCollectionName(\n  db: Db,\n  collectionName: string\n) {\n  return await db.collection(collectionName).count()\n}",
      "startLine": 64,
      "endLine": 69,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/hearth-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@71-86",
      "type": "function_declaration",
      "name": "getCollectionDocuments",
      "text": "async function getCollectionDocuments(\n  db: Db,\n  collectionName: string,\n  ids: string[]\n) {\n  if (ids.length > 0) {\n    return await db\n      .collection(collectionName)\n      .find({\n        id: { $in: ids }\n      })\n      .toArray()\n  } else {\n    return await db.collection(collectionName).find().toArray()\n  }\n}",
      "startLine": 71,
      "endLine": 86,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/utils/hearth-helper.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@50-68",
      "type": "function_declaration",
      "name": "main",
      "text": "async function main() {\n  console.info(`Reindexing search...`)\n  const jobId = await triggerReindex()\n  await new Promise<void>((resolve, reject) => {\n    const intervalId = setInterval(async () => {\n      try {\n        const isCompleted = await checkReindexStatus(jobId)\n        if (isCompleted) {\n          clearInterval(intervalId)\n          resolve()\n        }\n      } catch (error) {\n        clearInterval(intervalId)\n        reject(error)\n      }\n    }, 1000)\n  })\n  console.info(`...done reindexing search with job id ${jobId}`)\n}",
      "startLine": 50,
      "endLine": 68,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/migration/src/reindex-search.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-33",
      "type": "function_declaration",
      "name": "useDocumentTitle",
      "text": "function useDocumentTitle() {\n  const applicationName = useSelector(selectApplicationName)\n  React.useEffect(() => {\n    if (applicationName) {\n      document.title = applicationName\n    }\n  }, [applicationName])\n}",
      "startLine": 26,
      "endLine": 33,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/Page.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@35-40",
      "type": "function_declaration",
      "name": "useLoadConfigurations",
      "text": "function useLoadConfigurations() {\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    dispatch(loadLanguages())\n  }, [dispatch])\n}",
      "startLine": 35,
      "endLine": 40,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/Page.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@42-50",
      "type": "function_declaration",
      "name": "useStoreClientRedirectRoute",
      "text": "function useStoreClientRedirectRoute() {\n  const dispatch = useDispatch()\n  const paramRedirectTo = useSearchQuery('redirectTo')\n  React.useEffect(() => {\n    if (!!paramRedirectTo) {\n      dispatch(storeClientRedirectRoute(paramRedirectTo))\n    }\n  }, [dispatch, paramRedirectTo])\n}",
      "startLine": 42,
      "endLine": 50,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/Page.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@52-64",
      "type": "function_declaration",
      "name": "useSyncLanguage",
      "text": "function useSyncLanguage() {\n  const dispatch = useDispatch()\n  const paramLanguage = useSearchQuery('lang')\n  React.useEffect(() => {\n    async function syncLanguage() {\n      const languageToUse =\n        paramLanguage ?? (await retrieveLanguage()) ?? getDefaultLanguage()\n\n      if (languageToUse) dispatch(changeLanguage({ language: languageToUse }))\n    }\n    syncLanguage()\n  }, [dispatch, paramLanguage])\n}",
      "startLine": 52,
      "endLine": 64,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/Page.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@56-61",
      "type": "function_declaration",
      "name": "syncLanguage",
      "text": "async function syncLanguage() {\n      const languageToUse =\n        paramLanguage ?? (await retrieveLanguage()) ?? getDefaultLanguage()\n\n      if (languageToUse) dispatch(changeLanguage({ language: languageToUse }))\n    }",
      "startLine": 56,
      "endLine": 61,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/Page.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@66-72",
      "type": "function_declaration",
      "name": "Page",
      "text": "function Page({ children }: IProps) {\n  useLoadConfigurations()\n  useSyncLanguage()\n  useDocumentTitle()\n  useStoreClientRedirectRoute()\n  return <>{children}</>\n}",
      "startLine": 66,
      "endLine": 72,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/Page.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@40-42",
      "type": "function_declaration",
      "name": "selectCountryLogo",
      "text": "function selectCountryLogo(store: IStoreState) {\n  return getKey(store, 'config').COUNTRY_LOGO?.file\n}",
      "startLine": 40,
      "endLine": 42,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/login/selectors.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@44-65",
      "type": "function_declaration",
      "name": "selectCountryBackground",
      "text": "function selectCountryBackground(store: IStoreState): ILoginBackground {\n  const countryBackground = getKey(store, 'config').LOGIN_BACKGROUND\n  if (countryBackground?.backgroundImage) {\n    return {\n      backgroundColor: '',\n      backgroundImage: countryBackground.backgroundImage,\n      imageFit: countryBackground.imageFit\n    }\n  } else if (countryBackground?.backgroundColor) {\n    return {\n      backgroundColor: countryBackground?.backgroundColor,\n      backgroundImage: '',\n      imageFit: ''\n    }\n  } else {\n    return {\n      backgroundColor: '',\n      backgroundImage: '',\n      imageFit: ''\n    }\n  }\n}",
      "startLine": 44,
      "endLine": 65,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/login/selectors.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@66-68",
      "type": "function_declaration",
      "name": "selectApplicationName",
      "text": "function selectApplicationName(store: IStoreState) {\n  return getKey(store, 'config').APPLICATION_NAME\n}",
      "startLine": 66,
      "endLine": 68,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/login/selectors.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@59-64",
      "type": "function_declaration",
      "name": "delay",
      "text": "function delay(cmd: RunCmd<any>, time: number) {\n  return Cmd.list(\n    [Cmd.run(() => new Promise((resolve) => setTimeout(resolve, time))), cmd],\n    { sequence: true }\n  )\n}",
      "startLine": 59,
      "endLine": 64,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/login/reducer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@70-266",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case actions.CONFIG_LOAD:\n      return loop(state, CONFIG_CMD)\n    case actions.CONFIG_LOADED:\n      return loop(\n        { ...state, config: action.payload },\n        Cmd.run(() => merge(window.config, action.payload))\n      )\n    case actions.CONFIG_LOAD_ERROR:\n      return loop(state, delay(CONFIG_CMD, RETRY_TIMEOUT))\n    case actions.AUTHENTICATE:\n      return loop(\n        {\n          ...state,\n          submitting: true,\n          submissionError: false,\n          resentAuthenticationCode: false,\n          stepOneDetails: action.payload\n        },\n        Cmd.run<\n          actions.AuthenticationFailedAction,\n          actions.AuthenticateResponseAction\n        >(authApi.authenticate, {\n          successActionCreator: (args: IAuthenticateResponse) =>\n            actions.completeAuthentication(args, action.payload.inAppRedirect),\n          failActionCreator: actions.failAuthentication,\n          args: [action.payload]\n        })\n      )\n    case actions.AUTHENTICATE_VALIDATE:\n      return {\n        ...state,\n        submissionError: true,\n        errorCode: action.payload\n      }\n    case actions.AUTHENTICATE_RESET:\n      return {\n        ...state,\n        submissionError: false\n      }\n    case actions.AUTHENTICATION_FAILED:\n      if (action.payload.message === 'VERSION_MISMATCH')\n        return {\n          ...state,\n          reloadModalVisibility: true\n        }\n      return {\n        ...state,\n        submitting: false,\n        submissionError: true,\n        errorCode: action.payload.response && action.payload.response.status\n      }\n    case actions.AUTHENTICATION_COMPLETED:\n      return loop(\n        {\n          ...state,\n          submitting: action.payload.token ? true : false,\n          submissionError: false,\n          resentAuthenticationCode: false,\n          authenticationDetails: {\n            ...state.authenticationDetails,\n            nonce: action.payload.nonce,\n            mobile: action.payload.mobile,\n            email: action.payload.email\n          }\n        },\n\n        Cmd.run(\n          (getState: () => IStoreState) => {\n            if (action.payload.token) {\n              window.location.assign(\n                `${window.config.CLIENT_APP_URL}?token=${\n                  action.payload.token\n                }&lang=${getState().i18n.language}`\n              )\n            } else {\n              action.payload.inAppRedirect()\n            }\n          },\n\n          { args: [Cmd.getState] }\n        )\n      )\n    case actions.RESEND_AUTHENTICATION_CODE:\n      const notificationEvent = action.payload\n      return loop(\n        {\n          ...state,\n          submissionError: false,\n          resentAuthenticationCode: false\n        },\n        Cmd.run<\n          actions.ResendAuthenticationCodeFailedAction,\n          actions.ResendAuthenticationCodeCompleteAction\n        >(authApi.resendAuthenticationCode, {\n          successActionCreator: actions.completeAuthenticationCodeResend,\n          failActionCreator: actions.failAuthenticationCodeResend,\n          args: [state.authenticationDetails.nonce, notificationEvent]\n        })\n      )\n    case actions.RESEND_AUTHENTICATION_CODE_FAILED:\n      if (action.payload.message === 'VERSION_MISMATCH')\n        return {\n          ...state,\n          reloadModalVisibility: true\n        }\n      return {\n        ...state,\n        resentAuthenticationCode: false,\n        submissionError: true\n      }\n    case actions.RESEND_AUTHENTICATION_CODE_COMPLETED:\n      return {\n        ...state,\n        resentAuthenticationCode: true,\n        submissionError: false,\n        authenticationDetails: {\n          ...state.authenticationDetails,\n          nonce: action.payload.nonce\n        }\n      }\n    case actions.CLIENT_REDIRECT_ROUTE:\n      const redirectRoute = action.payload.url\n      return {\n        ...state,\n        redirectToURL: redirectRoute\n      }\n    case actions.VERIFY_CODE:\n      const code = action.payload.code\n      return loop(\n        {\n          ...state,\n          submitting: true,\n          submissionError: false,\n          resentAuthenticationCode: false\n        },\n        Cmd.run<\n          actions.VerifyCodeFailedAction,\n          actions.VerifyCodeCompleteAction\n        >(authApi.verifyCode, {\n          successActionCreator: actions.completeVerifyCode,\n          failActionCreator: actions.failVerifyCode,\n          args: [{ code, nonce: state.authenticationDetails.nonce }]\n        })\n      )\n    case actions.VERIFY_CODE_FAILED:\n      if (action.payload.message === 'VERSION_MISMATCH')\n        return {\n          ...state,\n          reloadModalVisibility: true\n        }\n      return { ...state, submitting: false, submissionError: true }\n    case actions.VERIFY_CODE_COMPLETED:\n      return loop(\n        {\n          ...state,\n          stepSubmitting: false,\n          submissionError: false,\n          resentAuthenticationCode: false,\n          token: action.payload.token\n        },\n        Cmd.run(\n          (getState: () => IStoreState) => {\n            const redirectToURL = getState().login.redirectToURL\n            const fullURL = new URL(\n              redirectToURL\n                ? `${redirectToURL}?token=${action.payload.token}&lang=${\n                    getState().i18n.language\n                  }`\n                : `?token=${action.payload.token}&lang=${\n                    getState().i18n.language\n                  }`,\n\n              window.config.CLIENT_APP_URL\n            ).toString()\n\n            window.location.assign(fullURL)\n          },\n          { args: [Cmd.getState] }\n        )\n      )\n    case actions.GOTO_APP:\n      return loop(\n        {\n          ...state\n        },\n        Cmd.run(() => {\n          window.location.assign(\n            `${window.config.CLIENT_APP_URL}?token=${state.token}`\n          )\n        })\n      )\n    case actions.RELOAD_MODAL_VISIBILITY:\n      return { ...state, reloadModalVisibility: action.payload.visibility }\n    default:\n      return state\n  }",
      "startLine": 70,
      "endLine": 266,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/login/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-192",
      "type": "function_declaration",
      "name": "StepTwoContainer",
      "text": "function StepTwoContainer() {\n  const dispatch = useDispatch()\n  const logo = usePersistentCountryLogo()\n\n  const submitting = useSelector(getsubmitting)\n\n  const submissionError = useSelector(getSubmissionError)\n  const resentAuthenticationCode = useSelector(getResentAuthenticationCode)\n\n  const stepOneDetails = useSelector(getStepOneDetails)\n  const intl = useIntl()\n\n  const appName = useSelector(selectApplicationName)\n\n  React.useEffect(() => {\n    if (appName) document.title = appName\n  }, [appName])\n\n  const mobileNumber =\n    stepOneDetails.mobile && maskString(stepOneDetails.mobile)\n  const emailAddress = stepOneDetails.email && maskEmail(stepOneDetails.email)\n\n  const field = stepTwoFields.code\n  const notificationEvent = NotificationEvent.TWO_FACTOR_AUTHENTICATION\n  const notificationMethod = window.config.USER_NOTIFICATION_DELIVERY_METHOD\n\n  return (\n    <Container id=\"login-step-two-box\">\n      <Box id=\"Box\">\n        <Stack direction=\"column\" alignItems=\"stretch\" gap={24}>\n          <LogoContainer>\n            <CountryLogo size=\"small\" src={logo} />\n          </LogoContainer>\n          {resentAuthenticationCode ? (\n            <React.Fragment>\n              <Stack direction=\"column\" alignItems=\"stretch\" gap={8}>\n                <Text element=\"h1\" variant=\"h2\" align=\"center\">\n                  {intl.formatMessage(messages.stepTwoResendTitle)}\n                </Text>\n                <Text\n                  variant=\"reg16\"\n                  align=\"center\"\n                  color=\"supportingCopy\"\n                  element=\"p\"\n                >\n                  {notificationMethod === 'sms' &&\n                    intl.formatMessage(messages.resentSMS, {\n                      number: mobileNumber\n                    })}\n                  {notificationMethod === 'email' &&\n                    intl.formatMessage(messages.resentEMAIL, {\n                      email: emailAddress\n                    })}\n                </Text>\n              </Stack>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <Stack direction=\"column\" alignItems=\"stretch\" gap={8}>\n                <Text element=\"h1\" variant=\"h2\" align=\"center\">\n                  {intl.formatMessage(messages.stepTwoTitle)}\n                </Text>\n\n                <Text\n                  variant=\"reg16\"\n                  align=\"center\"\n                  color=\"supportingCopy\"\n                  element=\"p\"\n                >\n                  {notificationMethod === 'sms' &&\n                    intl.formatMessage(messages.stepTwoInstructionSMS, {\n                      number: mobileNumber\n                    })}\n                  {notificationMethod === 'email' &&\n                    intl.formatMessage(messages.stepTwoInstructionEMAIL, {\n                      email: emailAddress\n                    })}\n                </Text>\n              </Stack>\n            </React.Fragment>\n          )}\n        </Stack>\n\n        <Form\n          onSubmit={(values: IVerifyCodeNumbers) =>\n            dispatch(actions.verifyCode(values))\n          }\n        >\n          {({ handleSubmit }) => (\n            <FormWrapper id={FORM_NAME} onSubmit={handleSubmit}>\n              <Stack direction=\"column\" alignItems=\"stretch\" gap={24}>\n                <Field name={field.name} field={field}>\n                  {({ meta, input, ...otherProps }) => (\n                    <InputField\n                      {...field}\n                      {...otherProps}\n                      touched={Boolean(meta.touched)}\n                      label={intl.formatMessage(messages.verficationCodeLabel)}\n                      optionalLabel={intl.formatMessage(messages.optionalLabel)}\n                      hideAsterisk\n                    >\n                      <TextInput\n                        {...field}\n                        {...input}\n                        touched={Boolean(meta.touched)}\n                        error={Boolean(meta.error)}\n                      />\n                    </InputField>\n                  )}\n                </Field>\n                <Stack direction=\"column\" gap={16}>\n                  <Button\n                    size=\"large\"\n                    type=\"primary\"\n                    fullWidth\n                    id=\"login-mobile-submit\"\n                    loading={submitting}\n                  >\n                    {intl.formatMessage(messages.verify)}\n                  </Button>\n\n                  <Button\n                    size=\"small\"\n                    type=\"tertiary\"\n                    onClick={(e) => {\n                      e.preventDefault()\n                      dispatch(\n                        actions.resendAuthenticationCode(notificationEvent)\n                      )\n                    }}\n                    id=\"login-mobile-resend\"\n                  >\n                    {intl.formatMessage(messages.resend, {\n                      notificationMethod\n                    })}\n                  </Button>\n                </Stack>\n              </Stack>\n            </FormWrapper>\n          )}\n        </Form>\n      </Box>\n      {submissionError && (\n        <Toast type=\"error\" onClose={() => dispatch(resetSubmissionError())}>\n          {intl.formatMessage(messages.codeSubmissionError)}\n        </Toast>\n      )}\n    </Container>\n  )\n}",
      "startLine": 43,
      "endLine": 192,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/views/StepTwo/StepTwoContainer.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@28-32",
      "type": "method_definition",
      "name": "transformIndexHtml",
      "text": "transformIndexHtml(html: string) {\n        return html.replace(/%(.*?)%/g, function (_, p1) {\n          return env[p1]\n        })\n      }",
      "startLine": 28,
      "endLine": 32,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/vite.config.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@73-114",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case actions.LOAD_LANGUAGE:\n      return loop(\n        state,\n        Cmd.run(loadContent, {\n          successActionCreator: actions.loadLanguagesSuccess\n        })\n      )\n    case actions.LOAD_LANGUAGE_SUCCESS:\n      const { languages } = action.payload\n\n      const loadedLanguagesState: ILanguageState = languages.reduce(\n        (indexedByLang, language) => ({\n          ...indexedByLang,\n          [language.lang]: language\n        }),\n        {}\n      )\n      return {\n        ...state,\n        messages: getNextMessages(state.language, loadedLanguagesState),\n        languages: loadedLanguagesState\n      }\n    case actions.CHANGE_LANGUAGE:\n      const messages = getNextMessages(action.payload.language, state.languages)\n      let language = action.payload.language\n\n      if (!state.languages[language]) {\n        language = getDefaultLanguage()\n      }\n\n      return loop(\n        {\n          ...state,\n          language,\n          messages\n        },\n        Cmd.run(() => storeLanguage(language))\n      )\n    default:\n      return state\n  }",
      "startLine": 73,
      "endLine": 114,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/i18n/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-18",
      "type": "function_declaration",
      "name": "configStorage",
      "text": "function configStorage(dbName: string) {\n  localForage.config({\n    driver: localForage.INDEXEDDB,\n    name: dbName\n  })\n}",
      "startLine": 13,
      "endLine": 18,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/storage.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-16",
      "type": "function_declaration",
      "name": "getAvailableLanguages",
      "text": "function getAvailableLanguages() {\n  return window.config.LANGUAGES.split(',')\n}",
      "startLine": 14,
      "endLine": 16,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@18-20",
      "type": "function_declaration",
      "name": "getDefaultLanguage",
      "text": "function getDefaultLanguage() {\n  return getAvailableLanguages()[0]\n}",
      "startLine": 18,
      "endLine": 20,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-24",
      "type": "function_declaration",
      "name": "storeLanguage",
      "text": "function storeLanguage(language: string) {\n  storage.setItem('language', language)\n}",
      "startLine": 22,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-28",
      "type": "function_declaration",
      "name": "retrieveLanguage",
      "text": "async function retrieveLanguage() {\n  return (await storage.getItem('language')) || getDefaultLanguage()\n}",
      "startLine": 26,
      "endLine": 28,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@62-68",
      "type": "function_declaration",
      "name": "renderAppWithConfig",
      "text": "async function renderAppWithConfig() {\n  return authApi.getApplicationConfig().then((res) => {\n    store.dispatch(applicationConfigLoadedAction(res))\n\n    root.render(<App router={router} store={store} />)\n  })\n}",
      "startLine": 62,
      "endLine": 68,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/index.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@30-80",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  const server = new Hapi.Server({\n    host: HOST,\n    port: PORT,\n    routes: {\n      cors: { origin: ['*'] },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n\n  await server.register(getPlugins())\n\n  server.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:webhooks-user'\n    },\n    validate: (payload: any, request: Hapi.Request) =>\n      validateFunc(payload, request, CHECK_INVALID_TOKEN, AUTH_URL)\n  })\n\n  server.auth.default('jwt')\n\n  const routes = getRoutes()\n  server.route(routes)\n\n  server.ext({\n    type: 'onRequest',\n    method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }\n  })\n\n  async function start() {\n    await server.start()\n    await database.start()\n    await queue.startQueue()\n    server.log('info', `server started on ${HOST}:${PORT}`)\n  }\n\n  async function stop() {\n    await server.stop()\n    await database.stop()\n    server.log('info', 'server stopped')\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 30,
      "endLine": 80,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@60-63",
      "type": "method_definition",
      "name": "method",
      "text": "method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }",
      "startLine": 60,
      "endLine": 63,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@66-71",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    await server.start()\n    await database.start()\n    await queue.startQueue()\n    server.log('info', `server started on ${HOST}:${PORT}`)\n  }",
      "startLine": 66,
      "endLine": 71,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@73-77",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    await database.stop()\n    server.log('info', 'server stopped')\n  }",
      "startLine": 73,
      "endLine": 77,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-45",
      "type": "function_declaration",
      "name": "startQueue",
      "text": "async function startQueue() {\n  try {\n    webhookQueue = initQueue()\n  } catch (error) {\n    logger.error(`Can't init webhook queue: ${error}`)\n    throw Error(error)\n  }\n}",
      "startLine": 38,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/queue.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@47-52",
      "type": "function_declaration",
      "name": "removeJob",
      "text": "async function removeJob(myQueue: Queue, id: string) {\n  const job = await myQueue.getJob(id)\n  if (job) {\n    job.remove()\n  }\n}",
      "startLine": 47,
      "endLine": 52,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/queue.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-100",
      "type": "function_declaration",
      "name": "initQueue",
      "text": "function initQueue(): Queue {\n  const connection = getRedis()\n  logger.info(\n    `Initialising queue on REDIS_HOST: ${REDIS_HOST} with connection: ${connection}`\n  )\n  const newQueue = new Queue(QUEUE_NAME, {\n    connection\n  })\n\n  EventEmitter.defaultMaxListeners = 50\n\n  const queueEvents = new QueueEvents(QUEUE_NAME, {\n    connection\n  })\n\n  queueEvents.on('waiting', ({ jobId }: QueueEventType) => {\n    logger.info(`A job with ID ${jobId} is waiting`)\n  })\n\n  queueEvents.on('active', ({ jobId, prev }: QueueEventType) => {\n    logger.info(`Job ${jobId} is now active; previous status was ${prev}`)\n  })\n\n  queueEvents.on('completed', ({ jobId, returnvalue }: QueueEventType) => {\n    logger.info(`${jobId} has completed and returned ${returnvalue}`)\n    removeJob(newQueue, jobId)\n  })\n\n  queueEvents.on('failed', ({ jobId, failedReason }: QueueEventType) => {\n    logger.info(`${jobId} has failed with reason ${failedReason}`)\n  })\n\n  const myWorker: Worker = initWorker(QUEUE_NAME, connection)\n\n  myWorker.on('drained', () => {\n    logger.info(`Queue is drained, no more jobs left`)\n  })\n\n  myWorker.on('completed', (job: Job) => {\n    logger.info(`job ${job.id} has completed`)\n  })\n\n  myWorker.on('failed', (job: Job) => {\n    logger.info(`job ${job.id} has failed`)\n  })\n  return newQueue\n}",
      "startLine": 54,
      "endLine": 100,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/queue.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-163",
      "type": "function_declaration",
      "name": "subscribeWebhooksHandler",
      "text": "async function subscribeWebhooksHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { hub } = request.payload as ISubscribePayload\n  if (!(hub.topic in TRIGGERS)) {\n    return h\n      .response({\n        hub: {\n          mode: 'denied',\n          topic: hub.topic,\n          reason: `Unsupported topic: ${hub.topic}`\n        }\n      })\n      .code(400)\n  }\n  const token: ITokenPayload = getTokenPayload(\n    request.headers.authorization.split(' ')[1]\n  )\n  const systemId = token.sub\n\n  try {\n    const system: ISystem = await getSystem(\n      { systemId },\n      request.headers.authorization\n    )\n    if (!system || system.status !== 'active') {\n      return h\n        .response({\n          hub: {\n            mode: 'denied',\n            topic: hub.topic,\n            reason:\n              'Active system details cannot be found.  This system is no longer authorized'\n          }\n        })\n        .code(400)\n    }\n\n    if (hub.secret !== system.sha_secret) {\n      return h\n        .response({\n          hub: {\n            mode: 'denied',\n            topic: hub.topic,\n            reason: 'hub.secret is incorrect'\n          }\n        })\n        .code(400)\n    }\n\n    if (hub.mode !== 'subscribe') {\n      return h\n        .response({\n          hub: {\n            mode: 'denied',\n            topic: hub.topic,\n            reason: 'hub.mode must be set to subscribe'\n          }\n        })\n        .code(400)\n    }\n    const webhookId = uuid()\n    const createdBy = {\n      client_id: system.client_id,\n      name: system.name,\n      type: getScopeType(system.scope),\n      username: system.username\n    }\n    const webhook = {\n      webhookId,\n      createdBy,\n      address: hub.callback,\n      sha_secret: hub.secret,\n      trigger: hub.topic in TRIGGERS ? hub.topic : undefined\n    }\n    const challenge = generateChallenge()\n\n    if (!(system.scope.indexOf('demo') > -1)) {\n      try {\n        const challengeCheck = await fetch(\n          resolve(\n            hub.callback,\n            `?mode=subscribe&challenge=${encodeURIComponent(challenge)}&topic=${\n              hub.topic\n            }`\n          ),\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n          .then((response) => {\n            return response.json()\n          })\n          .catch((error) => {\n            return Promise.reject(\n              new Error(` request failed: ${error.message}`)\n            )\n          })\n        if (challenge !== challengeCheck.challenge) {\n          throw new Error(\n            `${challenge} is not equal to ${challengeCheck.challenge}.  Subscription endpoint check failed`\n          )\n        }\n        await Webhook.create(webhook)\n        return h.response().code(202)\n      } catch (err) {\n        logger.error(err)\n        return h.response('Subscription callback check failed').code(400)\n      }\n    } else {\n      try {\n        await Webhook.create(webhook)\n        return h.response().code(202)\n      } catch (err) {\n        throw new Error(`Cannot save webhook in development: ${err}`)\n      }\n    }\n  } catch (err) {\n    logger.error(err)\n    return h.response().code(400)\n  }\n}",
      "startLine": 38,
      "endLine": 163,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/features/manage/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@178-225",
      "type": "function_declaration",
      "name": "listWebhooksHandler",
      "text": "async function listWebhooksHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const token: ITokenPayload = getTokenPayload(\n    request.headers.authorization.split(' ')[1]\n  )\n  const systemId = token.sub\n  try {\n    const system: ISystem = await getSystem(\n      { systemId },\n      request.headers.authorization\n    )\n    if (!system || system.status !== 'active') {\n      return h\n        .response(\n          'Active system details cannot be found.  This system is no longer authorized'\n        )\n        .code(400)\n    }\n    try {\n      const entries = await Webhook.find({\n        'createdBy.client_id': system.client_id\n      }).sort({\n        createdAt: 'asc'\n      })\n\n      const sortedEntries: any = []\n      entries.forEach((item) => {\n        const entry = {\n          id: item.webhookId,\n          callback: item.address,\n          createdAt: new Date((item.createdAt as number) * 1000).toISOString(),\n          createdBy: item.createdBy,\n          topic: item.trigger\n        }\n        sortedEntries.push(entry)\n      })\n      return h.response({ entries: sortedEntries }).code(200)\n    } catch (err) {\n      logger.error(err)\n      throw internal()\n    }\n  } catch (err) {\n    logger.error(err)\n    return h.response().code(400)\n  }\n}",
      "startLine": 178,
      "endLine": 225,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/features/manage/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@227-241",
      "type": "function_declaration",
      "name": "deleteWebhookHandler",
      "text": "async function deleteWebhookHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const webhookId = request.params.webhookId\n  if (!webhookId) {\n    return h.response('No webhook id in URL params').code(400)\n  }\n  try {\n    await Webhook.findOneAndRemove({ webhookId })\n  } catch (err) {\n    return h.response(`Could not delete webhook: ${webhookId}`).code(400)\n  }\n  return h.response().code(204)\n}",
      "startLine": 227,
      "endLine": 241,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/features/manage/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@247-264",
      "type": "function_declaration",
      "name": "deleteWebhookByClientIdHandler",
      "text": "async function deleteWebhookByClientIdHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { clientId } = request.payload as IDeleteWebhooksByClientIdPayload\n  if (!clientId) {\n    return h.response('No clientId in URL params').code(400)\n  }\n\n  try {\n    await Webhook.deleteMany({ 'createdBy.client_id': clientId })\n  } catch (err) {\n    logger.info(\n      `Could not delete webhooks associated with client_id: ${clientId}`\n    )\n  }\n  return h.response().code(204)\n}",
      "startLine": 247,
      "endLine": 264,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/features/manage/handler.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@73-149",
      "type": "class_declaration",
      "name": "UpdatePasswordComponent",
      "text": "class UpdatePasswordComponent extends React.Component<IFullProps, State> {\n  constructor(props: IFullProps) {\n    super(props)\n    this.state = {\n      newPassword: '',\n      confirmPassword: '',\n      validLength: false,\n      hasNumber: false,\n      hasCases: false,\n      passwordMismatched: false,\n      passwordMatched: false,\n      continuePressed: false\n    }\n  }\n  validateLength = (value: string) => {\n    this.setState(() => ({\n      validLength: value.length >= 12\n    }))\n  }\n  validateNumber = (value: string) => {\n    this.setState(() => ({\n      hasNumber: /\\d/.test(value)\n    }))\n  }\n  validateCases = (value: string) => {\n    this.setState(() => ({\n      hasCases: /[a-z]/.test(value) && /[A-Z]/.test(value)\n    }))\n  }\n  checkPasswordStrength = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value\n    this.setState(() => ({\n      newPassword: value,\n      confirmPassword: '',\n      passwordMatched: false,\n      passwordMismatched: false,\n      continuePressed: false\n    }))\n    this.validateLength(value)\n    this.validateNumber(value)\n    this.validateCases(value)\n  }\n  matchPassword = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newPassword = this.state.newPassword\n    const value = event.target.value\n    this.setState(() => ({\n      confirmPassword: value,\n      passwordMismatched: value.length > 0 && newPassword !== value,\n      passwordMatched: value.length > 0 && newPassword === value,\n      continuePressed: false\n    }))\n  }\n  whatNext = async (event: React.FormEvent) => {\n    event.preventDefault()\n    this.setState(() => ({\n      continuePressed: true,\n      passwordMismatched:\n        this.state.newPassword.length > 0 &&\n        this.state.newPassword !== this.state.confirmPassword\n    }))\n\n    if (\n      this.state.passwordMatched &&\n      this.state.hasCases &&\n      this.state.hasNumber &&\n      this.state.validLength\n    ) {\n      // { nonce: string }\n      await authApi.changePassword(\n        this.props.router.location.state.nonce,\n        this.state.newPassword\n      )\n      this.props.router.navigate(routes.SUCCESS, {\n        state: { forgottenItem: FORGOTTEN_ITEMS.PASSWORD }\n      })\n    }\n  }",
      "startLine": 73,
      "endLine": 149,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/views/ResetCredentialsForm/UpdatePasswordForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@74-86",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: IFullProps) {\n    super(props)\n    this.state = {\n      newPassword: '',\n      confirmPassword: '',\n      validLength: false,\n      hasNumber: false,\n      hasCases: false,\n      passwordMismatched: false,\n      passwordMatched: false,\n      continuePressed: false\n    }\n  }",
      "startLine": 74,
      "endLine": 86,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/views/ResetCredentialsForm/UpdatePasswordForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@62-64",
      "type": "method_definition",
      "name": "catch",
      "text": "catch (err) {\n    logger.error(`Cant create Redis instance: ${err}`)\n  }",
      "startLine": 62,
      "endLine": 64,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/database.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@67-71",
      "type": "method_definition",
      "name": "catch",
      "text": "catch (err) {\n    logger.error(`Cant connect to Mongo: ${err}`)\n    await wait(1000)\n    return connect()\n  }",
      "startLine": 67,
      "endLine": 71,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@74-76",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n  mongoose.disconnect()\n}",
      "startLine": 74,
      "endLine": 76,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@78-80",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n  return connect()\n}",
      "startLine": 78,
      "endLine": 80,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-29",
      "type": "function_declaration",
      "name": "createRequestSignature",
      "text": "function createRequestSignature(\n  requestSigningVersion: string,\n  signingSecret: string,\n  rawBody: string\n) {\n  const hmac = crypto.createHmac(requestSigningVersion, signingSecret)\n  hmac.update(`${requestSigningVersion}:${encodeURIComponent(rawBody)}`)\n  return `${requestSigningVersion}=${hmac.digest('hex')}`\n}",
      "startLine": 21,
      "endLine": 29,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/features/event/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@39-69",
      "type": "function_declaration",
      "name": "useLanguage",
      "text": "function useLanguage(selectedLanguage: string, paramLanguage: string | null) {\n  const applicationLanguages = window.config.LANGUAGES.split(',')\n  const navigate = useNavigate()\n  const location = useLocation()\n  const dispatch = useDispatch()\n  const languages = useSelector(getLanguages)\n  const intl = useIntl()\n\n  const languageOptions: ISelect2Option[] = Object.values(languages)\n    .map(({ lang }) => ({\n      value: lang,\n      label: intl.formatMessage(messages.language, { language: lang })\n    }))\n    .filter(({ value }) => applicationLanguages.includes(value))\n\n  const onChange = ({ value }: ISelect2Option) => {\n    if (paramLanguage) {\n      navigate(\n        {\n          pathname: location.pathname,\n          search: `lang=${value}`\n        },\n        {\n          replace: true\n        }\n      )\n    }\n    dispatch(changeLanguage({ language: value }))\n  }\n  return [languageOptions, onChange] as const\n}",
      "startLine": 39,
      "endLine": 69,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/i18n/components/LanguageSelect.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@71-93",
      "type": "function_declaration",
      "name": "LanguageSelect",
      "text": "function LanguageSelect() {\n  const paramLanguage = useSearchQuery('lang')\n  const selectedLanguage = useSelector(getLanguage)\n\n  const [languageOptions, onLanguageChange] = useLanguage(\n    selectedLanguage,\n    paramLanguage\n  )\n\n  return (\n    <>\n      {languageOptions.length > 1 && (\n        <SelectContainer>\n          <Select2\n            value={selectedLanguage}\n            options={languageOptions}\n            onChange={onLanguageChange}\n          />\n        </SelectContainer>\n      )}\n    </>\n  )\n}",
      "startLine": 71,
      "endLine": 93,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/i18n/components/LanguageSelect.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@33-35",
      "type": "function_declaration",
      "name": "getAvailableLanguages",
      "text": "function getAvailableLanguages() {\n  return env.LANGUAGES.split(',')\n}",
      "startLine": 33,
      "endLine": 35,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/constants.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-39",
      "type": "function_declaration",
      "name": "getDefaultLanguage",
      "text": "function getDefaultLanguage() {\n  return getAvailableLanguages()[0]\n}",
      "startLine": 37,
      "endLine": 39,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/constants.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-82",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  const server = new Hapi.Server({\n    host: HOST,\n    port: PORT,\n    routes: {\n      cors: { origin: ['*'] },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n\n  await server.register(getPlugins())\n\n  server.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:workflow-user'\n    },\n    validate: () => ({\n      isValid: true\n    })\n  })\n\n  server.auth.default('jwt')\n\n  const routes = getRoutes()\n  server.route(routes)\n\n  server.ext({\n    type: 'onRequest',\n    method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }\n  })\n\n  server.ext('onPreResponse', (request, h) => {\n    if (request.response instanceof Boom) {\n      logger.error(request.response)\n    }\n    return h.continue\n  })\n\n  async function start() {\n    await server.start()\n    server.log('info', `Workflow server started on ${HOST}:${PORT}`)\n  }\n\n  async function stop() {\n    await server.stop()\n    server.log('info', 'Workflow server stopped')\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 27,
      "endLine": 82,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@58-61",
      "type": "method_definition",
      "name": "method",
      "text": "method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }",
      "startLine": 58,
      "endLine": 61,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@71-74",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    await server.start()\n    server.log('info', `Workflow server started on ${HOST}:${PORT}`)\n  }",
      "startLine": 71,
      "endLine": 74,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@76-79",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    server.log('info', 'Workflow server stopped')\n  }",
      "startLine": 76,
      "endLine": 79,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-24",
      "type": "function_declaration",
      "name": "getDefaultLanguage",
      "text": "function getDefaultLanguage() {\n  return 'en'\n}",
      "startLine": 22,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/__mocks__/constants.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@103-138",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n    import.meta.env.PROD &&\n    'serviceWorker' in navigator &&\n    // @ts-ignore\n    !window.Cypress // This disables the service workder for our e2e tests\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL('', window.location.toString())\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = '/service-worker.js'\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, onNewConentAvailable)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, onNewConentAvailable)\n      }\n    })\n  }",
      "startLine": 103,
      "endLine": 138,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/registerServiceWorker.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@36-57",
      "type": "function_declaration",
      "name": "RouteComponentProps",
      "text": "function withRouter<ComponentProps extends RouteComponentProps>(\n  Component: React.ComponentType<ComponentProps>\n) {\n  function ComponentWithRouterProp(props: Omit<ComponentProps, 'router'>) {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n\n    /**\n     * For backwards compatibility, match is added to the router prop.\n     */\n    const match = { params }\n    return (\n      <Component\n        {...(props as ComponentProps)}\n        router={{ location, navigate, params, match }}\n      />\n    )\n  }\n\n  return ComponentWithRouterProp\n}",
      "startLine": 36,
      "endLine": 57,
      "parentType": "export_statement",
      "childrenTypes": [
        "ERROR",
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/common/WithRouterProps.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@39-54",
      "type": "function_declaration",
      "name": "ComponentWithRouterProp",
      "text": "function ComponentWithRouterProp(props: Omit<ComponentProps, 'router'>) {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n\n    /**\n     * For backwards compatibility, match is added to the router prop.\n     */\n    const match = { params }\n    return (\n      <Component\n        {...(props as ComponentProps)}\n        router={{ location, navigate, params, match }}\n      />\n    )\n  }",
      "startLine": 39,
      "endLine": 54,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/common/WithRouterProps.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@34-36",
      "type": "function_declaration",
      "name": "fetch",
      "text": "function fetch(...params: Parameters<typeof nodeFetch>) {\n  return nodeFetch(...params)\n}",
      "startLine": 34,
      "endLine": 36,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/utils/duplicate-checker.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@90-93",
      "type": "function_declaration",
      "name": "findBirthDuplicateIds",
      "text": "async function findBirthDuplicateIds(\n  authHeader: IAuthHeader,\n  birthRegDetails: BirthRegistration\n): Promise<{ id: UUID; trackingId: string }",
      "startLine": 90,
      "endLine": 93,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/utils/duplicate-checker.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@94-96",
      "type": "method_definition",
      "name": "if",
      "text": "if (!birthRegDetails || !birthRegDetails.child) {\n    return []\n  }",
      "startLine": 94,
      "endLine": 96,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/utils/duplicate-checker.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@130-148",
      "type": "function_declaration",
      "name": "findDuplicateIds",
      "text": "async function findDuplicateIds(\n  registrationDetails: BirthRegistration | DeathRegistration,\n  authHeader: IAuthHeader,\n  event: EVENT_TYPE\n) {\n  if (event === EVENT_TYPE.BIRTH) {\n    return findBirthDuplicateIds(\n      authHeader,\n      registrationDetails as BirthRegistration\n    )\n  } else if (event === EVENT_TYPE.DEATH) {\n    return findDeathDuplicateIds(\n      authHeader,\n      registrationDetails as DeathRegistration\n    )\n  }\n  // NOT IMPLEMENTED FOR MARRIAGE\n  return []\n}",
      "startLine": 130,
      "endLine": 148,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/utils/duplicate-checker.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@150-167",
      "type": "function_declaration",
      "name": "updateTaskWithDuplicateIds",
      "text": "function updateTaskWithDuplicateIds(\n  task: SavedTask,\n  duplicateIds: { id: string; trackingId: string }[]\n) {\n  const extension: Extension = {\n    url: FLAGGED_AS_POTENTIAL_DUPLICATE,\n    valueString: duplicateIds\n      .map((duplicate) => duplicate.trackingId)\n      .toString()\n  }\n  return addExtensionsToTask(\n    {\n      ...task,\n      lastModified: new Date().toISOString()\n    },\n    [extension]\n  ) as SavedTask\n}",
      "startLine": 150,
      "endLine": 167,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/utils/duplicate-checker.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@169-182",
      "type": "function_declaration",
      "name": "updateCompositionWithDuplicateIds",
      "text": "function updateCompositionWithDuplicateIds(\n  composition: Composition,\n  duplicateIds: { id: UUID; trackingId: string }[]\n) {\n  const relatesTo: NonNullable<Composition['relatesTo']> = duplicateIds.map(\n    (duplicate) => ({\n      code: 'duplicate',\n      targetReference: {\n        reference: `Composition/${duplicate.id}`\n      }\n    })\n  )\n  return addRelatesToToComposition(composition, relatesTo)\n}",
      "startLine": 169,
      "endLine": 182,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/utils/duplicate-checker.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-30",
      "type": "function_declaration",
      "name": "writeJSONToCSV",
      "text": "async function writeJSONToCSV(\n  filename: string,\n  data: Array<Record<string, any>>\n) {\n  const csv = stringify(data, {\n    header: true\n  })\n  return fs.promises.writeFile(filename, csv, 'utf8')\n}",
      "startLine": 22,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/extract-translations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-48",
      "type": "function_declaration",
      "name": "readCSVToJSON",
      "text": "async function readCSVToJSON<T>(filename: string) {\n  return new Promise<T>((resolve, reject) => {\n    const chunks: string[] = []\n    fs.createReadStream(filename)\n      .on('error', reject)\n      .pipe(\n        csv2json({\n          separator: ','\n        })\n      )\n      .on('data', (chunk: string) => chunks.push(chunk))\n      .on('error', reject)\n      .on('end', () => {\n        resolve(JSON.parse(chunks.join('')))\n      })\n  })\n}",
      "startLine": 32,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/extract-translations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@58-81",
      "type": "function_declaration",
      "name": "usePersistentCountryBackground",
      "text": "function usePersistentCountryBackground() {\n  const theme = useTheme()\n  const [countryBackground, setCountryBackground] = React.useState({\n    backgroundColor: `${(theme as ITheme).colors.purpleDarker}`,\n    backgroundImage: '',\n    imageFit: ''\n  })\n  const [offlineBackground, setOfflineBackground] =\n    React.useState(countryBackground)\n  React.useEffect(() => {\n    storage.getItem('country-background').then((res) => {\n      res ?? setCountryBackground(JSON.parse(res))\n    })\n  }, [])\n\n  const background = useSelector(selectCountryBackground)\n\n  if (background && !isEqual(background, offlineBackground)) {\n    setOfflineBackground(background)\n    storage.setItem('country-background', JSON.stringify(background))\n  }\n\n  return offlineBackground\n}",
      "startLine": 58,
      "endLine": 81,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/common/LoginBackgroundWrapper.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@83-96",
      "type": "function_declaration",
      "name": "usePersistentCountryLogo",
      "text": "function usePersistentCountryLogo() {\n  const [offlineLogo, setOfflineLogo] = React.useState('')\n  React.useEffect(() => {\n    storage.getItem('country-logo').then((res) => {\n      res ?? setOfflineLogo(res)\n    })\n  }, [])\n  const logo = useSelector(selectCountryLogo)\n  if (logo && logo !== offlineLogo) {\n    setOfflineLogo(logo)\n    localStorage.setItem('country-logo', logo)\n  }\n  return offlineLogo\n}",
      "startLine": 83,
      "endLine": 96,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/common/LoginBackgroundWrapper.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@98-108",
      "type": "function_declaration",
      "name": "LoginBackgroundWrapper",
      "text": "function LoginBackgroundWrapper({ children }: IProps) {\n  const countryBackground = usePersistentCountryBackground()\n  return (\n    <div>\n      <StyledPage background={countryBackground}>\n        <LanguageSelect />\n        {children}\n      </StyledPage>\n    </div>\n  )\n}",
      "startLine": 98,
      "endLine": 108,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/common/LoginBackgroundWrapper.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@21-37",
      "type": "function_declaration",
      "name": "uploadFileToMinio",
      "text": "async function uploadFileToMinio(\n  fileData: string,\n  authHeader: IAuthHeader\n): Promise<string> {\n  const suffix = '/upload'\n  const request = {\n    method: 'POST',\n    headers: {\n      ...authHeader,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ fileData: fileData })\n  }\n  const result = await fetch(`${DOCUMENTS_URL}${suffix}`, request)\n  const res = await result.json()\n  return res.refUrl\n}",
      "startLine": 21,
      "endLine": 37,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/documents.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@42-49",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n    'affidavit' in certificateDetails.collector &&\n    certificateDetails.collector.affidavit\n  ) {\n    for (const affidavit of certificateDetails.collector.affidavit) {\n      affidavit.data = await uploadFileToMinio(affidavit.data, authHeader)\n    }\n  }",
      "startLine": 42,
      "endLine": 49,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/documents.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@53-55",
      "type": "function_declaration",
      "name": "isPresignedUrl",
      "text": "function isPresignedUrl(url: string) {\n  return url.startsWith('http')\n}",
      "startLine": 53,
      "endLine": 55,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/documents.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@57-62",
      "type": "function_declaration",
      "name": "getCanonicalAttachmentURL",
      "text": "function getCanonicalAttachmentURL(url: string) {\n  const parsedUrl = new URL(url)\n  const filePath = parsedUrl.pathname\n\n  return filePath\n}",
      "startLine": 57,
      "endLine": 62,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/documents.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-76",
      "type": "function_declaration",
      "name": "uploadOrNormaliseSignatureData",
      "text": "function uploadOrNormaliseSignatureData(\n  signature: string,\n  authHeader: IAuthHeader\n) {\n  if (isBase64FileString(signature)) {\n    return uploadFileToMinio(signature, authHeader)\n  }\n\n  if (isPresignedUrl(signature)) {\n    return getCanonicalAttachmentURL(signature)\n  }\n  return signature\n}",
      "startLine": 64,
      "endLine": 76,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/documents.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@78-165",
      "type": "function_declaration",
      "name": "uploadBase64AttachmentsToDocumentsStore",
      "text": "async function uploadBase64AttachmentsToDocumentsStore(\n  record: BirthRegistration | DeathRegistration | MarriageRegistration,\n  authHeader: IAuthHeader\n) {\n  /*\n   * @todo input schema and target all AttachmentInput types automatically\n   */\n  if (record.registration?.informantsSignature) {\n    record.registration.informantsSignature =\n      await uploadOrNormaliseSignatureData(\n        record.registration.informantsSignature,\n        authHeader\n      )\n  }\n  if (record.registration?.groomSignature) {\n    record.registration.groomSignature = await uploadOrNormaliseSignatureData(\n      record.registration.groomSignature,\n      authHeader\n    )\n  }\n  if (record.registration?.brideSignature) {\n    record.registration.brideSignature = await uploadOrNormaliseSignatureData(\n      record.registration.brideSignature,\n      authHeader\n    )\n  }\n  if (record.registration?.witnessOneSignature) {\n    record.registration.witnessOneSignature =\n      await uploadOrNormaliseSignatureData(\n        record.registration.witnessOneSignature,\n        authHeader\n      )\n  }\n  if (record.registration?.witnessTwoSignature) {\n    record.registration.witnessTwoSignature =\n      await uploadOrNormaliseSignatureData(\n        record.registration.witnessTwoSignature,\n        authHeader\n      )\n  }\n  if (record.registration?.attachments) {\n    for (const attachment of record.registration.attachments) {\n      if (attachment.data && isBase64FileString(attachment.data)) {\n        const fileUri = await uploadFileToMinio(attachment.data, authHeader)\n        attachment.data = fileUri\n      }\n    }\n  }\n  if (record.registration?.certificates) {\n    for (const certificate of record.registration.certificates) {\n      if (!certificate?.collector) {\n        continue\n      }\n      if (certificate.collector.affidavit) {\n        for (const affidavit of certificate.collector.affidavit) {\n          if (affidavit.data && isBase64FileString(affidavit.data)) {\n            const fileUri = await uploadFileToMinio(affidavit.data, authHeader)\n            affidavit.data = fileUri\n          }\n        }\n      }\n      if (certificate.collector.photo) {\n        for (const photo of certificate.collector.photo) {\n          if (photo.data && isBase64FileString(photo.data)) {\n            const fileUri = await uploadFileToMinio(photo.data, authHeader)\n            photo.data = fileUri\n          }\n        }\n      }\n    }\n  }\n  if (record.registration?.correction?.attachments) {\n    for (const attachment of record.registration.correction.attachments) {\n      if (attachment.data && isBase64FileString(attachment.data)) {\n        const fileUri = await uploadFileToMinio(attachment.data, authHeader)\n        attachment.data = fileUri\n      }\n    }\n  }\n  if (record.registration?.correction?.payment?.attachmentData) {\n    const fileUri = await uploadFileToMinio(\n      record.registration.correction.payment.attachmentData,\n      authHeader\n    )\n    record.registration.correction.payment.attachmentData = fileUri\n  }\n  return record\n}",
      "startLine": 78,
      "endLine": 165,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/documents.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-46",
      "type": "function_declaration",
      "name": "notifyForAction",
      "text": "async function notifyForAction({\n  event,\n  action,\n  record,\n  headers\n}: {\n  event: EVENT_TYPE\n  action: string\n  record: Saved<ValidRecord>\n  headers: Record<string, string>\n}) {\n  try {\n    await fetch(ACTION_NOTIFY_URL(event, action), {\n      method: 'POST',\n      body: JSON.stringify(record),\n      headers: {\n        'Content-Type': 'application/fhir+json',\n        ...headers\n      }\n    })\n  } catch (e) {\n    logger.error(e)\n  }\n}",
      "startLine": 23,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/utils/country-config-api.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-42",
      "type": "function_declaration",
      "name": "initWorker",
      "text": "function initWorker(name: string, connection: IORedis.Redis): Worker {\n  return new Worker(\n    name,\n    async (job) => {\n      try {\n        await fetch(job.data.url, {\n          method: 'POST',\n          body: JSON.stringify(job.data.payload),\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Hub-Signature': job.data.hmac\n          }\n        })\n      } catch (err) {\n        logger.error(err)\n        throw err\n      }\n    },\n    { connection }\n  )\n}",
      "startLine": 22,
      "endLine": 42,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/processor.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-17",
      "type": "function_declaration",
      "name": "isRejectedTask",
      "text": "function isRejectedTask(taskResource: Task) {\n  return getTaskBusinessStatus(taskResource) === RegStatus.REJECTED\n}",
      "startLine": 15,
      "endLine": 17,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/task/fhir/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-21",
      "type": "function_declaration",
      "name": "isArchiveTask",
      "text": "function isArchiveTask(taskResource: Task) {\n  return getTaskBusinessStatus(taskResource) === RegStatus.ARCHIVED\n}",
      "startLine": 19,
      "endLine": 21,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/task/fhir/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@103-193",
      "type": "function_declaration",
      "name": "StepOneContainer",
      "text": "function StepOneContainer() {\n  const submitting = useSelector(getsubmitting)\n  const errorCode = useSelector(getErrorCode)\n  const submissionError = useSelector(getSubmissionError)\n  const intl = useIntl()\n  const isOffline: boolean = navigator.onLine ? false : true\n\n  const navigate = useNavigate()\n\n  const toStepTwo = () => navigate(STEP_TWO)\n\n  const dispatch = useDispatch()\n\n  const logo = usePersistentCountryLogo()\n  const appName = useSelector(selectApplicationName)\n\n  React.useEffect(() => {\n    if (appName) document.title = appName\n  }, [appName])\n  return (\n    <Container id=\"login-step-one-box\">\n      <Box id=\"Box\">\n        <LogoContainer>\n          <CountryLogo size=\"small\" src={logo} />\n        </LogoContainer>\n        <Form\n          onSubmit={(values: IAuthenticationData) =>\n            dispatch(actions.authenticate(values, toStepTwo))\n          }\n        >\n          {({ handleSubmit }) => (\n            <FormWrapper id={FORM_NAME} onSubmit={handleSubmit}>\n              <Stack direction=\"column\" alignItems=\"stretch\" gap={24}>\n                <Text element=\"h1\" variant=\"h2\" align=\"center\">\n                  {intl.formatMessage(messages.stepOneLoginText)}\n                </Text>\n\n                <Field name={userNameField.name} component={UserNameInput} />\n\n                <Field name={passwordField.name} component={Password} />\n                <Stack direction=\"column\" gap={16}>\n                  <Button\n                    id=\"login-mobile-submit\"\n                    type=\"primary\"\n                    size=\"large\"\n                    fullWidth\n                    loading={submitting}\n                  >\n                    {intl.formatMessage(messages.submit)}\n                  </Button>\n                  <Link\n                    to={FORGOTTEN_ITEM}\n                    id=\"login-forgot-password\"\n                    style={{\n                      textDecoration: 'none',\n                      display: 'flex',\n                      justifyContent: 'center'\n                    }}\n                  >\n                    <Button size=\"small\" type=\"tertiary\">\n                      {intl.formatMessage(messages.forgotPassword)}\n                    </Button>\n                  </Link>\n                </Stack>\n              </Stack>\n            </FormWrapper>\n          )}\n        </Form>\n      </Box>\n\n      {submissionError && errorCode ? (\n        <Toast type=\"error\" onClose={() => dispatch(resetSubmissionError())}>\n          {errorCode === ERROR_CODE_FIELD_MISSING &&\n            intl.formatMessage(messages.fieldMissing)}\n          {errorCode === ERROR_CODE_INVALID_CREDENTIALS &&\n            intl.formatMessage(messages.submissionError)}\n          {errorCode === ERROR_CODE_FORBIDDEN_CREDENTIALS &&\n            intl.formatMessage(messages.forbiddenCredentialError)}\n          {errorCode === ERROR_CODE_PHONE_NUMBER_VALIDATE &&\n            intl.formatMessage(messages.phoneNumberFormat)}\n        </Toast>\n      ) : (\n        isOffline && (\n          <Toast type=\"error\">\n            {intl.formatMessage(messages.networkError)}\n          </Toast>\n        )\n      )}\n    </Container>\n  )\n}",
      "startLine": 103,
      "endLine": 193,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/login/src/views/StepOne/StepOneContainer.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@28-50",
      "type": "function_declaration",
      "name": "getUser",
      "text": "async function getUser(\n  userId: string,\n  authHeader: { Authorization: string }\n) {\n  const res = await fetch(`${USER_MANAGEMENT_URL}getUser`, {\n    method: 'POST',\n    body: JSON.stringify({ userId }),\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader\n    }\n  })\n\n  if (!res.ok) {\n    throw new Error(\n      `Unable to retrieve user in workflow. Error: ${res.status} status received`\n    )\n  }\n\n  const body = await res.json()\n\n  return body\n}",
      "startLine": 28,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/user/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@52-74",
      "type": "function_declaration",
      "name": "getSystem",
      "text": "async function getSystem(\n  systemId: string,\n  authHeader: { Authorization: string }\n) {\n  const res = await fetch(`${USER_MANAGEMENT_URL}getSystem`, {\n    method: 'POST',\n    body: JSON.stringify({ systemId }),\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader\n    }\n  })\n\n  if (!res.ok) {\n    throw new Error(\n      `Unable to retrieve system in workflow. Error: ${res.status} status received`\n    )\n  }\n\n  const body = await res.json()\n\n  return body\n}",
      "startLine": 52,
      "endLine": 74,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/user/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@133-153",
      "type": "function_declaration",
      "name": "getLoggedInPractitionerResource",
      "text": "async function getLoggedInPractitionerResource(\n  token: string\n): Promise<SavedPractitioner> {\n  const tokenPayload = getTokenPayload(token)\n  const isNotificationAPIUser =\n    tokenPayload.scope.indexOf('notification-api') > -1\n  const isRecordSearchAPIUser = tokenPayload.scope.indexOf('recordsearch') > -1\n\n  let userResponse\n  if (isNotificationAPIUser || isRecordSearchAPIUser) {\n    userResponse = await getSystem(tokenPayload.sub, {\n      Authorization: `Bearer ${token}`\n    })\n  } else {\n    userResponse = await getUser(tokenPayload.sub, {\n      Authorization: `Bearer ${token}`\n    })\n  }\n\n  return await getFromFhir(`/Practitioner/${userResponse.practitionerId}`)\n}",
      "startLine": 133,
      "endLine": 153,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/user/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@155-162",
      "type": "function_declaration",
      "name": "getPractitionerRef",
      "text": "function getPractitionerRef(practitioner: Practitioner) {\n  if (!practitioner || !practitioner.id) {\n    throw new Error('Invalid practitioner data found')\n  }\n  return `Practitioner/${\n    practitioner.id as UUID /* @todo move to practitioner */\n  }` as const\n}",
      "startLine": 155,
      "endLine": 162,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/user/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@164-166",
      "type": "function_declaration",
      "name": "getPractitionerRoleByPractitionerId",
      "text": "function getPractitionerRoleByPractitionerId(practitionerId: UUID) {\n  return getFromFhir(`/PractitionerRole?practitioner=${practitionerId}`)\n}",
      "startLine": 164,
      "endLine": 166,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/user/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-47",
      "type": "function_declaration",
      "name": "getInformantSMSNotification",
      "text": "async function getInformantSMSNotification(token: string) {\n  try {\n    const recordNotificationURL = new URL(\n      'record-notification',\n      COUNTRY_CONFIG_URL\n    ).toString()\n    const res = await fetch(recordNotificationURL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    })\n    return (await res.json()) as NotificationFlags\n  } catch (err) {\n    logger.error(`Unable to get informant SMS Notifications for error : ${err}`)\n    throw err\n  }\n}",
      "startLine": 29,
      "endLine": 47,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/sms-notification-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-42",
      "type": "function_declaration",
      "name": "generateTrackingIdForEvents",
      "text": "async function generateTrackingIdForEvents(\n  eventType: EVENT_TYPE,\n  bundle: Bundle,\n  token: string\n) {\n  const trackingIdFromCountryConfig = await getTrackingIdFromCountryConfig(\n    bundle,\n    token\n  )\n  if (trackingIdFromCountryConfig) {\n    return trackingIdFromCountryConfig as TrackingID\n  } else {\n    // using first letter of eventType for prefix\n    // TODO: for divorce, need to think about prefix as Death & Divorce prefix is same 'D'\n    return generateTrackingId(eventType.charAt(0)) as TrackingID\n  }\n}",
      "startLine": 26,
      "endLine": 42,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-49",
      "type": "function_declaration",
      "name": "setupLastRegOffice",
      "text": "function setupLastRegOffice<T extends Task>(\n  taskResource: T,\n  practitionerOfficeId: UUID\n): T {\n  const regUserLastOfficeExtension = findExtension(\n    `${OPENCRVS_SPECIFICATION_URL}extension/regLastOffice`,\n    taskResource.extension\n  )\n  if (regUserLastOfficeExtension && regUserLastOfficeExtension.valueReference) {\n    regUserLastOfficeExtension.valueReference.reference = `Location/${practitionerOfficeId}`\n  } else {\n    taskResource.extension.push({\n      url: `${OPENCRVS_SPECIFICATION_URL}extension/regLastOffice`,\n      valueReference: { reference: `Location/${practitionerOfficeId}` }\n    })\n  }\n  return taskResource\n}",
      "startLine": 32,
      "endLine": 49,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-bundle-modifier.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@51-73",
      "type": "function_declaration",
      "name": "setupLastRegUser",
      "text": "function setupLastRegUser<T extends Task>(\n  taskResource: T,\n  practitioner: Practitioner\n): T {\n  if (!taskResource.extension) {\n    taskResource.extension = []\n  }\n  const regUserExtension = findExtension(\n    `${OPENCRVS_SPECIFICATION_URL}extension/regLastUser`,\n    taskResource.extension\n  )\n  if (regUserExtension && regUserExtension.valueReference) {\n    regUserExtension.valueReference.reference = getPractitionerRef(practitioner)\n  } else {\n    taskResource.extension.push({\n      url: `${OPENCRVS_SPECIFICATION_URL}extension/regLastUser`,\n      valueReference: { reference: getPractitionerRef(practitioner) }\n    })\n  }\n  taskResource.lastModified =\n    taskResource.lastModified || new Date().toISOString()\n  return taskResource\n}",
      "startLine": 51,
      "endLine": 73,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-bundle-modifier.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@75-113",
      "type": "function_declaration",
      "name": "updatePatientIdentifierWithRN",
      "text": "function updatePatientIdentifierWithRN(\n  record: WaitingForValidationRecord,\n  composition: Composition,\n  sectionCodes: string[],\n  identifierType: SupportedPatientIdentifierCode,\n  registrationNumber: string\n): Saved<Patient>[] {\n  return sectionCodes.map((sectionCode) => {\n    const sectionEntry = getSectionEntryBySectionCode(composition, sectionCode)\n    const patientId = resourceIdentifierToUUID(\n      sectionEntry.reference as ResourceIdentifier\n    )\n    const patient = getResourceFromBundleById<Patient>(record, patientId)\n\n    if (!patient.identifier) {\n      patient.identifier = []\n    }\n    const rnIdentifier = patient.identifier.find(\n      (identifier: fhir3.Identifier) =>\n        identifier.type?.coding?.[0].code === identifierType\n    )\n    if (rnIdentifier) {\n      rnIdentifier.value = registrationNumber\n    } else {\n      patient.identifier.push({\n        type: {\n          coding: [\n            {\n              system: `${OPENCRVS_SPECIFICATION_URL}identifier-type`,\n              code: identifierType\n            }\n          ]\n        },\n        value: registrationNumber\n      })\n    }\n    return patient\n  })\n}",
      "startLine": 75,
      "endLine": 113,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-bundle-modifier.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@115-157",
      "type": "function_declaration",
      "name": "upsertPatientIdentifiers",
      "text": "function upsertPatientIdentifiers(\n  record: ValidRecord,\n  composition: Composition,\n  sectionCodes: string[],\n  identifiers: {\n    type: SupportedPatientIdentifierCode\n    value: string\n  }[]\n): Saved<Patient>[] {\n  return sectionCodes.map((sectionCode) => {\n    const sectionEntry = getSectionEntryBySectionCode(composition, sectionCode)\n    const patientId = resourceIdentifierToUUID(\n      sectionEntry.reference as ResourceIdentifier\n    )\n    const patient = getResourceFromBundleById<Patient>(record, patientId)\n\n    if (!patient.identifier) {\n      patient.identifier = []\n    }\n    identifiers.forEach((id) => {\n      const existingIdentifier = patient.identifier!.find((existingId) =>\n        isEqual(existingId.type, id.type)\n      )\n      if (existingIdentifier) {\n        existingIdentifier.value = id.value\n      } else {\n        patient.identifier!.push({\n          type: {\n            coding: [\n              {\n                system: `${OPENCRVS_SPECIFICATION_URL}identifier-type`,\n                code: id.type\n              }\n            ]\n          },\n          value: id.value\n        })\n      }\n    })\n\n    return patient\n  })\n}",
      "startLine": 115,
      "endLine": 157,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-bundle-modifier.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-24",
      "type": "function_declaration",
      "name": "getTaskResourceFromFhirBundle",
      "text": "function getTaskResourceFromFhirBundle(fhirBundle: Bundle): Task {\n  const resources = fhirBundle.entry.map((entry) => entry.resource)\n\n  const task = resources.find(isTask)\n\n  if (!task) {\n    throw new Error('No task resource found')\n  }\n\n  return task\n}",
      "startLine": 14,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-template.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-46",
      "type": "function_declaration",
      "name": "getSectionEntryBySectionCode",
      "text": "function getSectionEntryBySectionCode(\n  composition: Composition | undefined,\n  sectionCode: string\n): fhir3.Reference {\n  const personSection =\n    composition &&\n    composition.section &&\n    composition.section.find((section: CompositionSection) => {\n      if (!section.code || !section.code.coding) {\n        return false\n      }\n      return section.code.coding.some((coding) => coding.code === sectionCode)\n    })\n\n  if (!personSection || !personSection.entry) {\n    throw new Error(\n      `Invalid person section found for given code: ${sectionCode}`\n    )\n  }\n  return personSection.entry[0]\n}",
      "startLine": 26,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-template.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@44-52",
      "type": "function_declaration",
      "name": "getSharedContactMsisdn",
      "text": "async function getSharedContactMsisdn(fhirBundle: Bundle) {\n  if (!fhirBundle || !fhirBundle.entry) {\n    throw new Error('Invalid FHIR bundle found for declaration')\n  }\n  return getPhoneNo(\n    getTaskResourceFromFhirBundle(fhirBundle as Bundle) as Task,\n    getEventType(fhirBundle)\n  )\n}",
      "startLine": 44,
      "endLine": 52,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-62",
      "type": "function_declaration",
      "name": "getSharedContactEmail",
      "text": "async function getSharedContactEmail(fhirBundle: Bundle) {\n  if (!fhirBundle || !fhirBundle.entry) {\n    throw new Error('Invalid FHIR bundle found for declaration')\n  }\n  return getEmailAddress(\n    getTaskResourceFromFhirBundle(fhirBundle as Bundle) as Task,\n    getEventType(fhirBundle)\n  )\n}",
      "startLine": 54,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-74",
      "type": "function_declaration",
      "name": "concatenateName",
      "text": "function concatenateName(fhirNames: OpenCRVSPatientName[]) {\n  const language = getDefaultLanguage()\n  const name = fhirNames.find((humanName: OpenCRVSPatientName) => {\n    return humanName.use === language\n  })\n\n  if (!name) {\n    throw new Error(`Didn't found informant's ${language} name`)\n  }\n  return [...(name.given ?? []), name.family].filter(Boolean).join(' ')\n}",
      "startLine": 64,
      "endLine": 74,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@76-96",
      "type": "function_declaration",
      "name": "getTrackingId",
      "text": "function getTrackingId(fhirBundle: Bundle) {\n  const resource =\n    fhirBundle && fhirBundle.entry && fhirBundle.entry[0].resource\n  if (!resource) {\n    throw new Error('getTrackingId: Invalid FHIR bundle found for declaration')\n  }\n  switch (resource.resourceType) {\n    case 'Composition':\n      const composition = resource as Composition\n      if (!composition.identifier) {\n        throw new Error(\n          'getTrackingId: Invalid FHIR bundle found for declaration'\n        )\n      }\n      return composition.identifier.value\n    case 'Task':\n      return getTrackingIdFromTaskResource(resource as Task)\n    default:\n      return undefined\n  }\n}",
      "startLine": 76,
      "endLine": 96,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@98-113",
      "type": "function_declaration",
      "name": "getTrackingIdFromTaskResource",
      "text": "function getTrackingIdFromTaskResource(taskResource: Task) {\n  const eventType = getTaskEventType(taskResource as Task) as EVENT_TYPE\n  const trackingIdentifier =\n    taskResource &&\n    taskResource.identifier &&\n    taskResource.identifier.find((identifier) => {\n      return (\n        identifier.system ===\n        `${OPENCRVS_SPECIFICATION_URL}id/${eventType.toLowerCase()}-tracking-id`\n      )\n    })\n  if (!trackingIdentifier || !trackingIdentifier.value) {\n    throw new Error(\"Didn't find any identifier for tracking id\")\n  }\n  return trackingIdentifier.value\n}",
      "startLine": 98,
      "endLine": 113,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@115-132",
      "type": "function_declaration",
      "name": "getRegistrationNumber",
      "text": "function getRegistrationNumber(\n  taskResource: Task,\n  eventType: EVENT_TYPE\n) {\n  const brnIdentifier =\n    taskResource &&\n    taskResource.identifier &&\n    taskResource.identifier.find((identifier) => {\n      return (\n        identifier.system ===\n        `${OPENCRVS_SPECIFICATION_URL}id/${eventType.toLowerCase()}-registration-number`\n      )\n    })\n  if (!brnIdentifier || !brnIdentifier.value) {\n    throw new Error(\"Didn't find any identifier for birth registration number\")\n  }\n  return brnIdentifier.value\n}",
      "startLine": 115,
      "endLine": 132,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@134-147",
      "type": "function_declaration",
      "name": "hasRegistrationNumber",
      "text": "function hasRegistrationNumber(\n  fhirBundle: Bundle,\n  eventType: EVENT_TYPE\n) {\n  try {\n    getRegistrationNumber(\n      getTaskResourceFromFhirBundle(fhirBundle as Bundle) as Task,\n      eventType\n    )\n    return true\n  } catch (error) {\n    return false\n  }\n}",
      "startLine": 134,
      "endLine": 147,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@149-162",
      "type": "function_declaration",
      "name": "getPaperFormID",
      "text": "function getPaperFormID(taskResource: Task) {\n  const paperFormIdentifier =\n    taskResource &&\n    taskResource.identifier &&\n    taskResource.identifier.find((identifier) => {\n      return (\n        identifier.system === `${OPENCRVS_SPECIFICATION_URL}id/paper-form-id`\n      )\n    })\n  if (!paperFormIdentifier || !paperFormIdentifier.value) {\n    throw new Error(\"Didn't find any identifier for paper form id\")\n  }\n  return paperFormIdentifier.value\n}",
      "startLine": 149,
      "endLine": 162,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@164-174",
      "type": "function_declaration",
      "name": "getEntryId",
      "text": "function getEntryId(fhirBundle: Bundle) {\n  const composition =\n    fhirBundle &&\n    fhirBundle.entry &&\n    (fhirBundle.entry[0].resource as Composition)\n\n  if (!composition || !composition.id) {\n    throw new Error('getEntryId: Invalid FHIR bundle found for declaration')\n  }\n  return composition.id\n}",
      "startLine": 164,
      "endLine": 174,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/features/registration/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-127",
      "type": "function_declaration",
      "name": "birthRegisteredHandler",
      "text": "async function birthRegisteredHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const bundle = request.payload as RegisteredRecord\n  const authHeader: IAuthHeader = {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  }\n\n  let webhookQueue: Queue\n\n  try {\n    webhookQueue = getQueue()\n  } catch (error) {\n    logger.error(`Can't get webhook queue: ${error}`)\n    return internal(error)\n  }\n\n  try {\n    const webhooks: IWebhookModel[] | null = await Webhook.find()\n    if (!webhooks) {\n      throw internal('Failed to find webhooks')\n    }\n    logger.info(`Subscribed webhooks: ${JSON.stringify(webhooks)}`)\n    if (webhooks) {\n      for (const webhookToNotify of webhooks) {\n        logger.info(\n          `Queueing webhook ${webhookToNotify.trigger} ${\n            TRIGGERS[TRIGGERS.BIRTH_REGISTERED]\n          }`\n        )\n        const permissions = await fetchSystemPermissions(\n          webhookToNotify,\n          authHeader,\n          EventType.Birth\n        )\n\n        let finalBundle: RegisteredRecord\n        if (webhookToNotify.createdBy.type === 'webhook') {\n          finalBundle = getPermissionsBundle(bundle, permissions)\n        } else {\n          finalBundle = bundle\n        }\n        if (webhookToNotify.trigger === TRIGGERS[TRIGGERS.BIRTH_REGISTERED]) {\n          const payload = {\n            timestamp: new Date().toISOString(),\n            id: webhookToNotify.webhookId,\n            event: {\n              hub: {\n                topic: TRIGGERS[TRIGGERS.BIRTH_REGISTERED]\n              },\n              context: [finalBundle]\n            }\n          }\n          logger.info(\n            `Dispatching BIRTH_REGISTERED webhook: ${JSON.stringify({\n              timestamp: payload.timestamp,\n              id: payload.id,\n              event: { hub: { topic: payload.event.hub.topic } },\n              context: ['<<redacted>>']\n            })}`\n          )\n          const hmac = createRequestSignature(\n            'sha256',\n            webhookToNotify.sha_secret,\n            JSON.stringify(payload)\n          )\n          webhookQueue.add(\n            `${webhookToNotify.webhookId}_${\n              TRIGGERS[TRIGGERS.BIRTH_REGISTERED]\n            }`,\n            {\n              payload,\n              url: webhookToNotify.address,\n              hmac\n            },\n            {\n              jobId: `WEBHOOK_${new ShortUIDGen().randomUUID().toUpperCase()}_${\n                webhookToNotify.webhookId\n              }`,\n              attempts: 3\n            }\n          )\n        }\n      }\n    } else {\n      logger.info(`No webhooks subscribed to birth registration trigger`)\n    }\n  } catch (error) {\n    logger.error(`Webhooks/birthRegisteredHandler: error: ${error}`)\n    return internal(error)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 32,
      "endLine": 127,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/features/event/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@129-224",
      "type": "function_declaration",
      "name": "deathRegisteredHandler",
      "text": "async function deathRegisteredHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const bundle = request.payload as RegisteredRecord\n  const authHeader: IAuthHeader = {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id']\n  }\n\n  let webhookQueue: Queue\n\n  try {\n    webhookQueue = getQueue()\n  } catch (error) {\n    logger.error(`Can't get webhook queue: ${error}`)\n    return internal(error)\n  }\n\n  try {\n    const webhooks: IWebhookModel[] | null = await Webhook.find()\n    if (!webhooks) {\n      throw internal('Failed to find webhooks')\n    }\n    logger.info(`Subscribed webhooks: ${JSON.stringify(webhooks)}`)\n    if (webhooks) {\n      for (const webhookToNotify of webhooks) {\n        logger.info(\n          `Queueing webhook ${webhookToNotify.trigger} ${\n            TRIGGERS[TRIGGERS.DEATH_REGISTERED]\n          }`\n        )\n        const permissions = await fetchSystemPermissions(\n          webhookToNotify,\n          authHeader,\n          EventType.Death\n        )\n\n        let finalBundle: RegisteredRecord\n        if (webhookToNotify.createdBy.type === 'webhook') {\n          finalBundle = getPermissionsBundle(bundle, permissions)\n        } else {\n          finalBundle = bundle\n        }\n        if (webhookToNotify.trigger === TRIGGERS[TRIGGERS.DEATH_REGISTERED]) {\n          const payload = {\n            timestamp: new Date().toISOString(),\n            id: webhookToNotify.webhookId,\n            event: {\n              hub: {\n                topic: TRIGGERS[TRIGGERS.DEATH_REGISTERED]\n              },\n              context: [finalBundle]\n            }\n          }\n          logger.info(\n            `Dispatching DEATH_REGISTERED webhook: ${JSON.stringify({\n              timestamp: payload.timestamp,\n              id: payload.id,\n              event: { hub: { topic: payload.event.hub.topic } },\n              context: ['<<redacted>>']\n            })}`\n          )\n          const hmac = createRequestSignature(\n            'sha256',\n            webhookToNotify.sha_secret,\n            JSON.stringify(payload)\n          )\n          webhookQueue.add(\n            `${webhookToNotify.webhookId}_${\n              TRIGGERS[TRIGGERS.DEATH_REGISTERED]\n            }`,\n            {\n              payload,\n              url: webhookToNotify.address,\n              hmac\n            },\n            {\n              jobId: `WEBHOOK_${new ShortUIDGen().randomUUID().toUpperCase()}_${\n                webhookToNotify.webhookId\n              }`,\n              attempts: 3\n            }\n          )\n        }\n      }\n    } else {\n      logger.info(`No webhooks subscribed to death registration trigger`)\n    }\n  } catch (error) {\n    logger.error(`Webhooks/deathRegisteredHandler: error: ${error}`)\n    return internal(error)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 129,
      "endLine": 224,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/features/event/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@226-231",
      "type": "function_declaration",
      "name": "marriageRegisteredHandler",
      "text": "async function marriageRegisteredHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  return h.response().code(200)\n}",
      "startLine": 226,
      "endLine": 231,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/webhooks/src/features/event/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-42",
      "type": "function_declaration",
      "name": "auditEvent",
      "text": "async function auditEvent(\n  action: RecordEvent,\n  bundle: ValidRecord,\n  authToken: string\n) {\n  const eventType = getEventType(bundle).toLowerCase()\n  const res = await fetch(\n    new URL(`/events/${eventType}/${action}`, METRICS_URL).href,\n    {\n      method: 'POST',\n      body: JSON.stringify(bundle),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${authToken}`\n      }\n    }\n  )\n  if (!res.ok) {\n    throw new Error(\n      `Writing an audit event to metrics failed with [${\n        res.status\n      }] body: ${await res.text()}`\n    )\n  }\n  return res\n}",
      "startLine": 17,
      "endLine": 42,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/audit.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@44-70",
      "type": "function_declaration",
      "name": "createNewAuditEvent",
      "text": "async function createNewAuditEvent(\n  bundle: ValidRecord,\n  authToken: string\n) {\n  const eventType = getEventType(bundle).toLowerCase()\n\n  const res = await fetch(\n    new URL(`/events/${eventType}/request-correction`, METRICS_URL).href,\n    {\n      method: 'POST',\n      body: JSON.stringify(bundle),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${authToken}`\n      }\n    }\n  )\n  if (!res.ok) {\n    throw new Error(\n      `Writing an audit event to metrics failed with [${\n        res.status\n      }] body: ${await res.text()}`\n    )\n  }\n\n  return res\n}",
      "startLine": 44,
      "endLine": 70,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/audit.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-31",
      "type": "function_declaration",
      "name": "hasDuplicateExtension",
      "text": "function hasDuplicateExtension(task: SavedTask) {\n  return task.extension.find(\n    (e) => e.url === 'http://opencrvs.org/specs/extension/markedAsDuplicate'\n  )\n}",
      "startLine": 27,
      "endLine": 31,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/duplicate.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-35",
      "type": "function_declaration",
      "name": "findReasonForDuplicate",
      "text": "function findReasonForDuplicate(task: SavedTask) {\n  return task.reason?.text\n}",
      "startLine": 33,
      "endLine": 35,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/duplicate.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-39",
      "type": "function_declaration",
      "name": "findCommentForDuplicate",
      "text": "function findCommentForDuplicate(task: SavedTask) {\n  return task.statusReason?.text\n}",
      "startLine": 37,
      "endLine": 39,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/duplicate.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@41-51",
      "type": "function_declaration",
      "name": "findDuplicateTrackingId",
      "text": "function findDuplicateTrackingId(task: SavedTask) {\n  type DuplicateExtenstion = Extract<\n    Extension,\n    { url: 'http://opencrvs.org/specs/extension/markedAsDuplicate' }\n  >\n\n  return task.extension.find(\n    (e): e is DuplicateExtenstion =>\n      e.url === 'http://opencrvs.org/specs/extension/markedAsDuplicate'\n  )!.valueString\n}",
      "startLine": 41,
      "endLine": 51,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/duplicate.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-51",
      "type": "function_declaration",
      "name": "upsertRegistrationHandler",
      "text": "async function upsertRegistrationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const token = getToken(request)\n  const compositionId = request.params.id\n  const { identifiers } = request.payload as EventRegistrationPayload\n\n  const savedRecord = await getValidRecordById(\n    compositionId,\n    request.headers.authorization,\n    true\n  )\n\n  const [upsertedRecord, changedResources] = toIdentifierUpserted(\n    savedRecord,\n    identifiers\n  )\n\n  await sendBundleToHearth(changedResources)\n  await indexBundle(upsertedRecord, token)\n\n  return h.response(upsertedRecord).code(200)\n}",
      "startLine": 28,
      "endLine": 51,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/upsert-identifiers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-54",
      "type": "function_declaration",
      "name": "duplicateRecordHandler",
      "text": "async function duplicateRecordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const recordId = request.params.id\n\n  const token = getToken(request)\n  const payload = validateRequest(requestSchema, request.payload)\n\n  const record = await getRecordById(\n    recordId,\n    token,\n    ['READY_FOR_REVIEW'],\n    false\n  )\n  const { reason, comment, duplicateTrackingId } = payload\n\n  const duplicatedRecord = await toDuplicated(\n    record,\n    token,\n    reason,\n    comment,\n    duplicateTrackingId\n  )\n\n  await auditEvent('marked-as-duplicate', duplicatedRecord, token)\n\n  return duplicatedRecord\n}",
      "startLine": 26,
      "endLine": 54,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/duplicate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-25",
      "type": "function_declaration",
      "name": "checkForUnassignExtenstion",
      "text": "function checkForUnassignExtenstion(task: Task) {\n  return task.extension.find(\n    (e) => e.url === 'http://opencrvs.org/specs/extension/regUnassigned'\n  )\n}",
      "startLine": 21,
      "endLine": 25,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/unassign.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-23",
      "type": "function_declaration",
      "name": "checkForDownloadExtenstion",
      "text": "function checkForDownloadExtenstion(task: Task) {\n  return task.extension.find(\n    (e) => e.url === 'http://opencrvs.org/specs/extension/regAssigned'\n  )\n}",
      "startLine": 19,
      "endLine": 23,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/download.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@80-94",
      "type": "function_declaration",
      "name": "getFHIRValueField",
      "text": "function getFHIRValueField(value: unknown) {\n  if (typeof value === 'string') {\n    return { valueString: value }\n  }\n\n  if (typeof value === 'number') {\n    return { valueInteger: value }\n  }\n\n  if (typeof value === 'boolean') {\n    return { valueBoolean: value }\n  }\n\n  throw new Error('Invalid value type')\n}",
      "startLine": 80,
      "endLine": 94,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/fhir.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-40",
      "type": "function_declaration",
      "name": "retrieveRecordHandler",
      "text": "async function retrieveRecordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = validateRequest(\n    z.object({\n      id: z.string()\n    }),\n    request.payload\n  )\n\n  const token = getToken(request)\n  // Task history is fetched rather than the task only\n  const record = await getValidRecordById(payload.id, token, true)\n\n  const [retrievedRecord, changedResources] = await toRetrieved(record, token)\n\n  // Here the sent bundle is saved with task only\n  await sendBundleToHearth(changedResources)\n\n  return retrievedRecord\n}",
      "startLine": 19,
      "endLine": 40,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/retrieve.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@35-125",
      "type": "function_declaration",
      "name": "eventNotificationHandler",
      "text": "async function eventNotificationHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const bundle = request.payload as Bundle<Resource>\n  const token = getToken(request)\n\n  const unsavedTask = getTaskResourceFromFhirBundle(bundle)\n\n  const tokenPayload = getTokenPayload(token)\n  const system = await getSystem(tokenPayload.sub, {\n    Authorization: `Bearer ${token}`\n  })\n\n  const practitioner = await getFromFhir(\n    `/Practitioner/${system.practitionerId}`\n  )\n\n  const { name, username, type } = system\n  const systemInformationJSON = { name, username, type }\n\n  const taskWithRegLastUser = addExtensionsToTask(unsavedTask, [\n    {\n      url: 'http://opencrvs.org/specs/extension/regLastUser',\n      valueReference: {\n        reference: `Practitioner/${practitioner.id}`\n      }\n    }\n  ])\n\n  const event = getEventType(bundle)\n  const trackingId = await generateTrackingIdForEvents(event, bundle, token)\n\n  const taskWithRegLastUserAndStatus: Task = {\n    ...taskWithRegLastUser,\n    lastModified: new Date().toISOString(),\n    businessStatus: {\n      coding: [\n        {\n          system: 'http://opencrvs.org/specs/reg-status',\n          code: 'IN_PROGRESS'\n        }\n      ]\n    },\n    identifier: [\n      ...taskWithRegLastUser.identifier,\n      {\n        system: `http://opencrvs.org/specs/id/${\n          event.toLowerCase() as Lowercase<EVENT_TYPE>\n        }-tracking-id`,\n        value: trackingId\n      },\n      {\n        system: 'http://opencrvs.org/specs/id/system_identifier',\n        value: JSON.stringify(systemInformationJSON)\n      }\n    ]\n  }\n\n  const officeExtension = taskWithRegLastUserAndStatus.extension.find(\n    (e) => e.url === 'http://opencrvs.org/specs/extension/regLastOffice'\n  ) as\n    | StringExtensionType['http://opencrvs.org/specs/extension/regLastOffice']\n    | undefined\n\n  if (!officeExtension) throw internal('Office id not found in bundle')\n\n  const savedBundleWithRegLastUserAndBusinessStatus = {\n    ...bundle,\n    entry: [\n      ...bundle.entry.filter((e) => e.resource.resourceType !== 'Task'),\n      {\n        fullUrl: bundle.entry.find((e) => e.resource.resourceType === 'Task')\n          ?.fullUrl,\n        resource: taskWithRegLastUserAndStatus\n      }\n    ]\n  }\n\n  const responseBundle = await sendBundleToHearth(\n    savedBundleWithRegLastUserAndBusinessStatus\n  )\n  const compositionId = findCompositionIdFromTransactionResponse(responseBundle)\n\n  const updatedBundle = await getValidRecordById(compositionId!, token, true)\n\n  await indexBundle(updatedBundle, token)\n  await auditEvent('sent-notification', updatedBundle, token)\n\n  return h.response(updatedBundle).code(200)\n}",
      "startLine": 35,
      "endLine": 125,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/eventNotificationHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-30",
      "type": "function_declaration",
      "name": "hasDeduplicateExtension",
      "text": "function hasDeduplicateExtension(task: SavedTask) {\n  return task.extension.find(\n    (e) => e.url === 'http://opencrvs.org/specs/extension/markedAsNotDuplicate'\n  )\n}",
      "startLine": 26,
      "endLine": 30,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/not-duplicate.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-30",
      "type": "function_declaration",
      "name": "getRegStatus",
      "text": "function getRegStatus(record: ReadyForReviewRecord | RegisteredRecord) {\n  const taskEntry = record.entry.find((e) => e.resource.resourceType === 'Task')\n  //@ts-ignore\n  return taskEntry?.resource.businessStatus.coding[0].code\n}",
      "startLine": 26,
      "endLine": 30,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/reinstate.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-77",
      "type": "function_declaration",
      "name": "unassignRecordHandler",
      "text": "async function unassignRecordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = validateRequest(\n    z.object({\n      id: z.string()\n    }),\n    request.payload\n  )\n\n  const token = getToken(request)\n  const tokenPayload = getTokenPayload(token)\n  const record = await getRecordById(\n    // Task history is fetched rather than the task only\n    payload.id,\n    token,\n    [\n      'CERTIFIED',\n      'VALIDATED',\n      'IN_PROGRESS',\n      'READY_FOR_REVIEW',\n      'REGISTERED',\n      'ISSUED',\n      'CORRECTION_REQUESTED'\n    ],\n    true\n  )\n\n  const assignment = findAssignment(record)\n  if (!assignment) throw new Error('The declaration is not assigned')\n\n  const practitionerId = assignment.practitioner.id\n  const lastUser = await getUserOrSystemByCriteria({ practitionerId }, token)\n\n  // Non-registrars can't unassign declarations from registrars\n  if (\n    !tokenPayload.scope.includes('register') &&\n    lastUser.scope?.includes('register')\n  ) {\n    throw new Error('The declaration cannot be unassigned by this type of user')\n  }\n\n  const { unassignedRecord, unassignedRecordWithTaskOnly } = await toUnassigned(\n    record,\n    token\n  )\n\n  await sendBundleToHearth(unassignedRecordWithTaskOnly)\n  await indexBundleToRoute(unassignedRecord, token, '/events/unassigned')\n  await auditEvent('unassigned', unassignedRecord, token)\n\n  return unassignedRecord\n}",
      "startLine": 24,
      "endLine": 77,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/unassign.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-78",
      "type": "function_declaration",
      "name": "updateField",
      "text": "async function updateField(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const compositionId = request.params.id\n  const { fieldId, valueString, valueBoolean } = request.payload as FieldInput\n\n  const savedRecord = await getValidRecordById(\n    compositionId,\n    request.headers.authorization,\n    false\n  )\n  const recordResources = savedRecord.entry.map((x) => x.resource)\n\n  // There is only one QuestionnaireResponse in the record\n  const questionnaireResponseResource = recordResources.filter((resource) =>\n    isQuestionnaireResponse(resource)\n  )[0]\n\n  const questionnaireResponseItems = upsertAnswer(\n    questionnaireResponseResource.item ?? [],\n    { fieldId, valueString, valueBoolean }\n  )\n\n  const updatedQuestionnaireResponseResource = {\n    resource: {\n      ...questionnaireResponseResource,\n      item: questionnaireResponseItems\n    }\n  }\n\n  const updatedRecord = {\n    ...savedRecord,\n    entry: [updatedQuestionnaireResponseResource]\n  }\n\n  await sendBundleToHearth(updatedRecord)\n  return h.response(updatedRecord).code(200)\n}",
      "startLine": 40,
      "endLine": 78,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/update-field.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-24",
      "type": "function_declaration",
      "name": "checkForViewedExtenstion",
      "text": "function checkForViewedExtenstion(task: Task) {\n  return task.extension.find(\n    (e) => e.url === 'http://opencrvs.org/specs/extension/regViewed'\n  )\n}",
      "startLine": 20,
      "endLine": 24,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/view.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-26",
      "type": "function_declaration",
      "name": "checkForVerifiedExtension",
      "text": "function checkForVerifiedExtension(task: Task) {\n  return task.extension.find(\n    (e) => e.url === 'http://opencrvs.org/specs/extension/regVerified'\n  )\n}",
      "startLine": 22,
      "endLine": 26,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/verify.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-33",
      "type": "function_declaration",
      "name": "findVerificationIp",
      "text": "function findVerificationIp(task: Task) {\n  return task.extension.find(\n    (e) => e.url === 'http://opencrvs.org/specs/extension/regVerified'\n    //@ts-ignore\n  )!.valueString\n}",
      "startLine": 28,
      "endLine": 33,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/verify.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-46",
      "type": "function_declaration",
      "name": "verifyRecordHandler",
      "text": "async function verifyRecordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const token = getToken(request)\n  const recordId = request.params.id\n  const record = await getRecordById(\n    recordId,\n    token,\n    ['REGISTERED', 'ISSUED'],\n    true\n  )\n\n  const payload = validateRequest(\n    z.object({\n      'x-real-ip': z.string()\n    }),\n    request.payload\n  )\n\n  const { verifiedRecord, verifiedRecordWithTaskOnly } = toVerified(\n    record,\n    payload['x-real-ip']\n  )\n\n  await sendBundleToHearth(verifiedRecordWithTaskOnly)\n  return verifiedRecord\n}",
      "startLine": 19,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/verify.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-38",
      "type": "function_declaration",
      "name": "markAsNotDuplicateHandler",
      "text": "async function markAsNotDuplicateHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const recordId = request.params.id\n  const token = getToken(request)\n  const record = await getRecordById(\n    recordId,\n    token,\n    ['READY_FOR_REVIEW'],\n    true\n  )\n\n  const notDuplicateBundle = await toNotDuplicated(record, token)\n\n  await indexBundleToRoute(notDuplicateBundle, token, '/events/not-duplicate')\n  await auditEvent('not-duplicate', notDuplicateBundle, token)\n\n  return notDuplicateBundle\n}",
      "startLine": 19,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/not-duplicate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@18-35",
      "type": "function_declaration",
      "name": "viewRecordHandler",
      "text": "async function viewRecordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const token = getToken(request)\n  const recordId = request.params.id\n  const record = await getValidRecordById(recordId, token, true)\n\n  const { viewedRecord, viewedRecordWithSpecificEntries } = await toViewed(\n    record,\n    token\n  )\n\n  await sendBundleToHearth(viewedRecordWithSpecificEntries)\n  await auditEvent('viewed', viewedRecord, token)\n\n  return viewedRecord\n}",
      "startLine": 18,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/view.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@88-94",
      "type": "function_declaration",
      "name": "findTask",
      "text": "function findTask(bundle: Bundle) {\n  const task = bundle.entry.map((e) => e.resource).find(isTask)\n  if (!task) {\n    throw new Error('Task not found in bundle')\n  }\n  return task\n}",
      "startLine": 88,
      "endLine": 94,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/create.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@96-109",
      "type": "function_declaration",
      "name": "findExistingDeclarationIds",
      "text": "async function findExistingDeclarationIds(draftId: string) {\n  const taskBundle = await findTaskFromIdentifier(draftId)\n  if (taskBundle.entry.length > 0) {\n    const trackingId = getTrackingId(taskBundle)\n    if (!trackingId) {\n      throw new Error('No trackingID found for existing declaration')\n    }\n    return {\n      compositionId: taskBundle.entry[0].resource.focus.reference.split('/')[1],\n      trackingId\n    }\n  }\n  return null\n}",
      "startLine": 96,
      "endLine": 109,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/create.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@56-62",
      "type": "function_declaration",
      "name": "getNotificationFlags",
      "text": "async function getNotificationFlags(token: string) {\n  try {\n    return await getInformantSMSNotification(token)\n  } catch {\n    return {}\n  }\n}",
      "startLine": 56,
      "endLine": 62,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/notification.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-71",
      "type": "function_declaration",
      "name": "isNotificationEnabled",
      "text": "async function isNotificationEnabled(\n  action: NotificationEvent,\n  event: EVENT_TYPE,\n  token: string\n) {\n  const notificationFlags = await getNotificationFlags(token)\n  return notificationFlags?.[event]?.[action] ?? false\n}",
      "startLine": 64,
      "endLine": 71,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/notification.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-33",
      "type": "function_declaration",
      "name": "indexBundle",
      "text": "async function indexBundle(bundle: ValidRecord, authToken: string) {\n  const res = await fetch(new URL('/record', SEARCH_URL).href, {\n    method: 'POST',\n    body: JSON.stringify(bundle),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${authToken}`\n    }\n  })\n  if (!res.ok) {\n    throw new Error(\n      `Indexing a bundle to search service failed with [${\n        res.status\n      }] body: ${await res.text()}`\n    )\n  }\n\n  return res\n}",
      "startLine": 15,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/search.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-83",
      "type": "function_declaration",
      "name": "downloadRecordHandler",
      "text": "async function downloadRecordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = validateRequest(\n    z.object({\n      id: z.string()\n    }),\n    request.payload\n  )\n\n  const token = getToken(request)\n  const tokenPayload = getTokenPayload(token)\n  // Task history is fetched rather than the task only\n  const record = await getValidRecordById(payload.id, token, true)\n\n  const task = getTaskFromSavedBundle(record)\n  const businessStatus = getStatusFromTask(task)\n\n  if (!businessStatus) {\n    throw new Error(\"Task didn't have any status. This should never happen\")\n  }\n\n  const { downloadedBundleWithResources, downloadedRecord } =\n    await toDownloaded(record, token)\n\n  const assignment = findAssignment(record)\n  if (assignment) {\n    const user = await getUser(tokenPayload.sub, {\n      Authorization: `Bearer ${token}`\n    })\n    const practitionerId = user.practitionerId\n\n    if (assignment.practitioner.id !== practitionerId)\n      throw new Error('Record is assigned to a different user')\n  }\n\n  /*\n   * Storing the details of the downloaded record in the database(s) is slow.\n   * So we return the requested record to the requesting users optimistically immediately.\n   * The time difference is 50ms when not waiting and 1000ms when waiting.\n   */\n  process.nextTick(async () => {\n    try {\n      // Here the sent bundle is saved with task only\n      await sendBundleToHearth(downloadedBundleWithResources)\n      await auditEvent('assigned', downloadedRecord, token)\n\n      await indexBundleToRoute(downloadedRecord, token, '/events/assigned')\n    } catch (error) {\n      logger.error(error)\n    }\n  })\n\n  return downloadedRecord\n}",
      "startLine": 28,
      "endLine": 83,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/download.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-51",
      "type": "function_declaration",
      "name": "findActiveCorrectionRequest",
      "text": "function findActiveCorrectionRequest(bundle: Bundle) {\n  return bundle.entry\n    .map(({ resource }) => resource)\n    .filter(isTask)\n    .filter(isCorrectionRequestedTask)\n    .find((task) => {\n      return task.status === 'requested'\n    })\n}",
      "startLine": 43,
      "endLine": 51,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/correction/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@53-76",
      "type": "function_declaration",
      "name": "sendNotification",
      "text": "async function sendNotification<T extends keyof PayloadMap>(\n  smsType: T,\n  recipient: Contacts,\n  authHeader: { Authorization: string },\n  notificationPayload: PayloadMap[T]\n) {\n  const res = await fetch(`${NOTIFICATION_SERVICE_URL}${smsType}`, {\n    method: 'POST',\n    body: JSON.stringify({\n      ...recipient,\n      ...notificationPayload\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader\n    }\n  })\n\n  if (!res.ok) {\n    throw new Error(`Failed to send notification ${res.statusText}`)\n  }\n\n  return res\n}",
      "startLine": 53,
      "endLine": 76,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/correction/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-29",
      "type": "function_declaration",
      "name": "getReasonFromTask",
      "text": "function getReasonFromTask(task: SavedTask) {\n  return task.statusReason?.text\n}",
      "startLine": 27,
      "endLine": 29,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/handler/reject.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-45",
      "type": "function_declaration",
      "name": "getRecordSpecificToken",
      "text": "async function getRecordSpecificToken(\n  token: string,\n  headers: Record<string, string>,\n  recordId: string\n) {\n  const grantType = 'urn:opencrvs:oauth:grant-type:token-exchange'\n  const subject_token_type = 'urn:ietf:params:oauth:token-type:access_token'\n  const requested_token_type =\n    'urn:opencrvs:oauth:token-type:single_record_token'\n\n  const authUrl = new URL(\n    `token?grant_type=${grantType}&subject_token=${token}&subject_token_type=${subject_token_type}&requested_token_type=${requested_token_type}&record_id=${recordId}`,\n    AUTH_URL\n  )\n\n  const res = await fetch(authUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers\n    }\n  })\n\n  if (!res.ok) {\n    throw new Error(\n      `Error calling token exchange handler [${res.statusText} ${\n        res.status\n      }]: ${await res.text()}`\n    )\n  }\n  return (await res.json()) as { access_token: string }\n}",
      "startLine": 14,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/token-exchange.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-38",
      "type": "function_declaration",
      "name": "StateIdenfitiers",
      "text": "async function getRecordById<T extends Array<keyof StateIdenfitiers>>(\n  recordId: string,\n  authorizationToken: string,\n  allowedStates: T,\n  /** Includes TaskHistories in the bundle. Is always required when the bundle is being indexed by ElasticSearch as when searching for records, workqueue views use status histories */\n  includeHistoryResources: boolean\n): Promise<StateIdenfitiers[T[number]]> {\n  const url = new URL(\n    `/records/${recordId}${\n      includeHistoryResources ? '?includeHistoryResources' : ''\n    }`,\n    SEARCH_URL\n  )\n  url.searchParams.append('states', allowedStates.join(','))\n\n  const res = await fetch(url.href, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: authorizationToken\n    }\n  })\n\n  return res.json()\n}",
      "startLine": 15,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "ERROR",
        "identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-62",
      "type": "function_declaration",
      "name": "getValidRecordById",
      "text": "async function getValidRecordById(\n  recordId: string,\n  token: string,\n  includeHistoryResources: boolean\n) {\n  return await getRecordById(\n    recordId,\n    token,\n    [\n      'ARCHIVED',\n      'CERTIFIED',\n      'CORRECTION_REQUESTED',\n      'IN_PROGRESS',\n      'ISSUED',\n      'READY_FOR_REVIEW',\n      'REGISTERED',\n      'REJECTED',\n      'VALIDATED',\n      'WAITING_VALIDATION'\n    ],\n    includeHistoryResources\n  )\n}",
      "startLine": 40,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/workflow/src/records/index.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@31-35",
      "type": "method_definition",
      "name": "headers",
      "text": "headers() {\n          return {\n            Authorization: token\n          }\n        }",
      "startLine": 31,
      "endLine": 35,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/toolkit/src/api/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-19",
      "type": "function_declaration",
      "name": "and",
      "text": "function and(clauses: ClauseInput[]): ClauseOutput {\n  return {\n    type: 'and',\n    clauses: clauses.map((clause) => Clause.parse(clause))\n  }\n}",
      "startLine": 14,
      "endLine": 19,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/toolkit/src/conditionals/deduplication.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-26",
      "type": "function_declaration",
      "name": "or",
      "text": "function or(clauses: ClauseInput[]): ClauseOutput {\n  return {\n    type: 'or',\n    clauses: clauses.map((clause) => Clause.parse(clause))\n  }\n}",
      "startLine": 21,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/toolkit/src/conditionals/deduplication.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-41",
      "type": "function_declaration",
      "name": "field",
      "text": "function field(fieldId: string) {\n  return {\n    fuzzyMatches: (\n      options: { fuzziness?: string | number; boost?: number } = {}\n    ) =>\n      ({\n        fieldId,\n        type: 'fuzzy',\n        options: {\n          fuzziness: options.fuzziness ?? 'AUTO:4,7',\n          boost: options.boost ?? 1\n        }\n      }) as const,\n    strictMatches: (options: { boost?: number } = {}",
      "startLine": 28,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/toolkit/src/conditionals/deduplication.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-70",
      "type": "function_declaration",
      "name": "storeVerificationCode",
      "text": "async function storeVerificationCode(nonce: string, code: string) {\n  const codeDetails = {\n    code,\n    createdAt: Date.now()\n  }\n  await redis.set(`verification_${nonce}`, JSON.stringify(codeDetails))\n}",
      "startLine": 64,
      "endLine": 70,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/routes/verifyCode/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@72-78",
      "type": "function_declaration",
      "name": "generateAndStoreVerificationCode",
      "text": "async function generateAndStoreVerificationCode(\n  nonce: string\n): Promise<SixDigitVerificationCode> {\n  const code = crypto.randomInt(100000, 999999).toString()\n  await storeVerificationCode(nonce, code)\n  return code\n}",
      "startLine": 72,
      "endLine": 78,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/routes/verifyCode/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@80-97",
      "type": "function_declaration",
      "name": "checkVerificationCode",
      "text": "async function checkVerificationCode(\n  nonce: string,\n  code: string\n): Promise<void> {\n  const codeDetails = await getVerificationCodeDetails(nonce)\n\n  const codeExpired =\n    (Date.now() - codeDetails.createdAt) / 1000 >=\n    CONFIG_SMS_CODE_EXPIRY_SECONDS\n\n  if (code !== codeDetails.code) {\n    throw new Error('sms code invalid')\n  }\n\n  if (codeExpired) {\n    throw new Error('sms code expired')\n  }\n}",
      "startLine": 80,
      "endLine": 97,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/routes/verifyCode/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@99-109",
      "type": "function_declaration",
      "name": "getVerificationCodeDetails",
      "text": "async function getVerificationCodeDetails(\n  nonce: string\n): Promise<ICodeDetails> {\n  const codeDetails = await redis.get(`verification_${nonce}`)\n\n  if (!codeDetails) {\n    throw new Error('sms code not found')\n  }\n\n  return JSON.parse(codeDetails) as ICodeDetails\n}",
      "startLine": 99,
      "endLine": 109,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/routes/verifyCode/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@111-116",
      "type": "function_declaration",
      "name": "deleteUsedVerificationCode",
      "text": "async function deleteUsedVerificationCode(\n  nonce: string\n): Promise<boolean> {\n  const count = await redis.del(`verification_${nonce}`)\n  return Boolean(count)\n}",
      "startLine": 111,
      "endLine": 116,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/routes/verifyCode/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@118-120",
      "type": "function_declaration",
      "name": "generateNonce",
      "text": "function generateNonce() {\n  return crypto.randomBytes(16).toString('base64').toString()\n}",
      "startLine": 118,
      "endLine": 120,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/routes/verifyCode/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-175",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  let whitelist: string[] = [HOSTNAME]\n  if (HOSTNAME[0] !== '*') {\n    whitelist = [LOGIN_URL, CLIENT_APP_URL]\n  }\n  logger.info(`Whitelist: ${JSON.stringify(whitelist)}`)\n  const app = new Hapi.Server({\n    host: HOST,\n    port: PORT,\n    routes: {\n      cors: { origin: whitelist },\n      validate: {\n        failAction: async (_, _2, err: Boom) => {\n          if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`ValidationError: ${err.message}`)\n            throw badRequest(`Invalid request payload input`)\n          } else {\n            // During development, log and respond with the full error.\n            logger.error(err.message)\n            throw err\n          }\n        }\n      },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n  const plugins = getPlugins()\n\n  await app.register(plugins)\n\n  const apolloServer = new ApolloServer<BaseContext>({\n    ...getApolloConfig(),\n    plugins: [ApolloServerPluginLandingPageLocalDefault({ footer: false })]\n  })\n\n  app.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:gateway-user'\n    },\n    validate: (payload: any, request: Hapi.Request) =>\n      validateFunc(payload, request, CHECK_INVALID_TOKEN, AUTH_URL)\n  })\n\n  app.auth.default('jwt')\n\n  const routes = getRoutes()\n  app.route(routes)\n\n  app.ext('onRequest', (req, h) => {\n    if (req.url.pathname.startsWith('/v1')) {\n      req.url.pathname = req.url.pathname.replace('/v1', '')\n      req.setUrl(req.url)\n    }\n    return h.continue\n  })\n\n  app.ext('onPreResponse', (request, reply) => {\n    if (!isBoom(request.response)) {\n      request.response.header('access-control-expose-headers', 'X-Version', {\n        append: true\n      })\n      request.response.header(\n        'X-Version',\n        String(process.env.npm_package_version)\n      )\n    }\n\n    if (request.response instanceof RateLimitError) {\n      return reply\n        .response({\n          statusCode: 402,\n          error: 'Rate limit exceeded',\n          message: request.response.message\n        })\n        .code(402)\n    }\n\n    return reply.continue\n  })\n\n  /*\n   * For debugging sent declarations on pre-prod environments.\n   * Custom implementation a sGood doesn't support logging request payloads\n   * https://github.com/hapijs/good/search?q=request&type=Issues\n   */\n  if (process.env.NODE_ENV !== 'production') {\n    app.events.on('response', (request) => {\n      app.log('info', JSON.stringify(request.payload))\n    })\n  }\n\n  async function start() {\n    await apolloServer.start()\n\n    await app.register({\n      plugin: hapiApollo,\n      options: {\n        path: '/graphql',\n        postRoute: {\n          options: {\n            auth: {\n              strategy: 'jwt',\n              mode: 'try'\n            }\n          }\n        },\n        getRoute: {\n          options: {\n            auth: {\n              strategy: 'jwt',\n              mode: 'try'\n            }\n          }\n        },\n        context: async ({ request }) => new Context(request),\n        apolloServer\n      }\n    })\n\n    await app.start()\n    await database.start()\n    app.log('info', `server started on port ${PORT}`)\n  }\n\n  async function stop() {\n    await app.stop()\n    await database.stop()\n    app.log('info', 'server stopped')\n  }\n\n  return { app, start, stop }\n}",
      "startLine": 40,
      "endLine": 175,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@53-57",
      "type": "method_definition",
      "name": "if",
      "text": "if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`ValidationError: ${err.message}`)\n            throw badRequest(`Invalid request payload input`)\n          }",
      "startLine": 53,
      "endLine": 57,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 17,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@135-166",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    await apolloServer.start()\n\n    await app.register({\n      plugin: hapiApollo,\n      options: {\n        path: '/graphql',\n        postRoute: {\n          options: {\n            auth: {\n              strategy: 'jwt',\n              mode: 'try'\n            }\n          }\n        },\n        getRoute: {\n          options: {\n            auth: {\n              strategy: 'jwt',\n              mode: 'try'\n            }\n          }\n        },\n        context: async ({ request }) => new Context(request),\n        apolloServer\n      }\n    })\n\n    await app.start()\n    await database.start()\n    app.log('info', `server started on port ${PORT}`)\n  }",
      "startLine": 135,
      "endLine": 166,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@168-172",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await app.stop()\n    await database.stop()\n    app.log('info', 'server stopped')\n  }",
      "startLine": 168,
      "endLine": 172,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-36",
      "type": "function_declaration",
      "name": "getDataSources",
      "text": "function getDataSources(contextValue: Context) {\n  return {\n    documentsAPI: new DocumentsAPI({ contextValue }),\n    paymentsAPI: new PaymentsAPI({ contextValue }),\n    locationsAPI: new LocationsAPI({ contextValue }),\n    countryConfigAPI: new CountryConfigAPI({ contextValue }),\n    usersAPI: new UsersAPI({ contextValue }),\n    fhirAPI: new FHIRAPI({ contextValue }),\n    minioAPI: new MinioAPI({ contextValue }),\n    metricsAPI: new MetricsAPI({ contextValue }),\n    recordsAPI: new RecordsAPI()\n  }\n}",
      "startLine": 24,
      "endLine": 36,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/context.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-37",
      "type": "function_declaration",
      "name": "postAssignmentSearch",
      "text": "async function postAssignmentSearch(\n  authHeader: IAuthHeader,\n  compositionId: string\n) {\n  return fetch(`${SEARCH_URL}search/assignment`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader\n    },\n    body: JSON.stringify({ compositionId })\n  })\n    .then((response) => {\n      return response.json()\n    })\n    .catch((error) => {\n      return Promise.reject(\n        new Error(`Search assignment failed: ${error.message}`)\n      )\n    })\n}",
      "startLine": 17,
      "endLine": 37,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/authorisation.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@17-38",
      "type": "class_declaration",
      "name": "OpenCRVSRESTDataSource",
      "text": "class OpenCRVSRESTDataSource extends RESTDataSource {\n  public context: Context\n\n  override willSendRequest(_path: string, request: AugmentedRequest) {\n    const { authorization } = this.context.request.headers\n    request.headers = { authorization }\n  }\n\n  override didEncounterError(error: Error) {\n    if (\n      error instanceof GraphQLError &&\n      error.extensions.code === 'UNAUTHENTICATED'\n    ) {\n      throw new AuthenticationError()\n    }\n  }\n\n  constructor(options: { contextValue: Context }) {\n    super()\n    this.context = options.contextValue\n  }\n}",
      "startLine": 17,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/data-source.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@20-23",
      "type": "method_definition",
      "name": "willSendRequest",
      "text": "willSendRequest(_path: string, request: AugmentedRequest) {\n    const { authorization } = this.context.request.headers\n    request.headers = { authorization }\n  }",
      "startLine": 20,
      "endLine": 23,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/data-source.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@25-32",
      "type": "method_definition",
      "name": "didEncounterError",
      "text": "didEncounterError(error: Error) {\n    if (\n      error instanceof GraphQLError &&\n      error.extensions.code === 'UNAUTHENTICATED'\n    ) {\n      throw new AuthenticationError()\n    }\n  }",
      "startLine": 25,
      "endLine": 32,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/data-source.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@34-37",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(options: { contextValue: Context }) {\n    super()\n    this.context = options.contextValue\n  }",
      "startLine": 34,
      "endLine": 37,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/data-source.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@82-88",
      "type": "method_definition",
      "name": "serialize",
      "text": "serialize(value) {\n        if (!['string', 'number', 'boolean'].includes(typeof value)) {\n          throw new Error('Value must be either a String, Boolean or an number')\n        }\n\n        return value\n      }",
      "startLine": 82,
      "endLine": 88,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/config.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@89-95",
      "type": "method_definition",
      "name": "parseValue",
      "text": "parseValue(value) {\n        if (!['string', 'number', 'boolean'].includes(typeof value)) {\n          throw new Error('Value must be either a String, Boolean or an number')\n        }\n\n        return value\n      }",
      "startLine": 89,
      "endLine": 95,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/config.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@96-111",
      "type": "method_definition",
      "name": "parseLiteral",
      "text": "parseLiteral(ast) {\n        switch (ast.kind) {\n          case Kind.INT:\n            return parseInt(ast.value, 10)\n          case Kind.FLOAT:\n            return parseFloat(ast.value)\n          case Kind.BOOLEAN:\n            return ast.value\n          case Kind.STRING:\n            return ast.value\n          default:\n            throw new Error(\n              'Value must be either a String, Boolean or an number'\n            )\n        }\n      }",
      "startLine": 96,
      "endLine": 111,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/config.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@116-124",
      "type": "method_definition",
      "name": "serialize",
      "text": "serialize(value: unknown) {\n        if (typeof value !== 'string') {\n          throw new GraphQLError(\n            `PlainDate must be of type string, found: ${typeof value}`\n          )\n        }\n\n        return value\n      }",
      "startLine": 116,
      "endLine": 124,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/config.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@125-139",
      "type": "method_definition",
      "name": "parseValue",
      "text": "parseValue(value: unknown) {\n        if (typeof value !== 'string') {\n          throw new GraphQLError(\n            `PlainDate must be of type string, found: ${typeof value}`\n          )\n        }\n\n        if (!validateDate(value)) {\n          throw new GraphQLError(\n            `PlainDate cannot be represented by an invalid date-string: ${value}`\n          )\n        }\n\n        return value\n      }",
      "startLine": 125,
      "endLine": 139,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/config.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@140-156",
      "type": "method_definition",
      "name": "parseLiteral",
      "text": "parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n          throw new GraphQLError(\n            `PlainDate must be of type string, found: ${ast.kind}`,\n            ast\n          )\n        }\n        const { value } = ast\n\n        if (!validateDate(value)) {\n          throw new GraphQLError(\n            `PlainDate cannot be represented by an invalid date-string: ${value}`\n          )\n        }\n\n        return value\n      }",
      "startLine": 140,
      "endLine": 156,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/config.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@172-234",
      "type": "function_declaration",
      "name": "authSchemaTransformer",
      "text": "function authSchemaTransformer(schema: GraphQLSchema) {\n  const directiveName = 'auth'\n\n  return mapSchema(schema, {\n    [MapperKind.OBJECT_FIELD]: (fieldConfig, _fieldName, fieldType) => {\n      if (!['Mutation', 'Query'].includes(fieldType)) {\n        return undefined\n      }\n\n      const authDirective = getDirective(\n        schema,\n        fieldConfig,\n        directiveName\n      )?.[0]\n\n      const { resolve = defaultFieldResolver } = fieldConfig\n      fieldConfig.resolve = async function (source, args, context, info) {\n        if (authDirective && authDirective.requires === 'ANONYMOUS') {\n          return resolve(source, args, context, info)\n        }\n\n        if (!context.request.auth.isAuthenticated) {\n          throw new AuthenticationError('Unauthorized')\n        }\n\n        const credentials = context.request.auth.credentials\n\n        try {\n          const userId = credentials.sub\n          let user: IUserModelData | ISystemModelData\n          const isSystemUser = credentials.scope.indexOf('recordsearch') > -1\n          if (isSystemUser) {\n            user = await getSystem(\n              { systemId: userId },\n              { Authorization: context.request.headers.authorization }\n            )\n          } else {\n            user = await getUser(\n              { userId },\n              { Authorization: context.request.headers.authorization }\n            )\n          }\n\n          if (!user || !['active', 'pending'].includes(user.status)) {\n            throw new AuthenticationError('Authentication failed')\n          }\n\n          // @TODO: When scope work is done, this check should stay.\n          // For now, the registrar might not have 'record.confirm-registration' token, but the per-record issued token will have it\n\n          // if (credentials && !isEqual(credentials.scope, user.scope)) {\n          //   throw new AuthenticationError('Authentication failed')\n          // }\n        } catch (err) {\n          throw new AuthenticationError(err)\n        }\n\n        return resolve(source, args, context, info)\n      }\n      return fieldConfig\n    }\n  })\n}",
      "startLine": 172,
      "endLine": 234,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/config.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-57",
      "type": "function_declaration",
      "name": "generateQueryForType",
      "text": "function generateQueryForType(\n  schema: GraphQLSchema,\n  typeName: string\n): string {\n  const type = schema.getType(typeName)\n\n  if (!type || !isObjectType(type)) {\n    throw new Error(\n      `Type \"${typeName}\" not found in schema or is not an object type.`\n    )\n  }\n\n  function buildFields(type: GraphQLObjectType): string {\n    const fields = type.getFields()\n    let fieldStr = ''\n\n    for (const fieldName in fields) {\n      const field = fields[fieldName]\n      let fieldType = field.type\n\n      if (isNonNullType(fieldType)) {\n        fieldType = fieldType.ofType\n      }\n      if (isListType(fieldType)) {\n        fieldType = fieldType.ofType\n      }\n\n      if (isObjectType(fieldType)) {\n        fieldStr += `${fieldName} { ${buildFields(fieldType)} } `\n      } else if (isScalarType(fieldType)) {\n        fieldStr += `${fieldName} `\n      }\n    }\n    return fieldStr.trim()\n  }\n\n  return buildFields(type)\n}",
      "startLine": 20,
      "endLine": 57,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/query-generator.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-54",
      "type": "function_declaration",
      "name": "buildFields",
      "text": "function buildFields(type: GraphQLObjectType): string {\n    const fields = type.getFields()\n    let fieldStr = ''\n\n    for (const fieldName in fields) {\n      const field = fields[fieldName]\n      let fieldType = field.type\n\n      if (isNonNullType(fieldType)) {\n        fieldType = fieldType.ofType\n      }\n      if (isListType(fieldType)) {\n        fieldType = fieldType.ofType\n      }\n\n      if (isObjectType(fieldType)) {\n        fieldStr += `${fieldName} { ${buildFields(fieldType)} } `\n      } else if (isScalarType(fieldType)) {\n        fieldStr += `${fieldName} `\n      }\n    }\n    return fieldStr.trim()\n  }",
      "startLine": 32,
      "endLine": 54,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/graphql/query-generator.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@23-26",
      "type": "method_definition",
      "name": "headers",
      "text": "headers({ opList }) {\n        const headers = opList[0].context?.headers\n        return headers as HTTPHeaders\n      }",
      "startLine": 23,
      "endLine": 26,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/v2-events/events/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-15",
      "type": "function_declaration",
      "name": "fetch",
      "text": "function fetch(...params: Parameters<typeof nodeFetch>) {\n  return nodeFetch(...params)\n}",
      "startLine": 13,
      "endLine": 15,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/fetch.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-62",
      "type": "function_declaration",
      "name": "validateAttachments",
      "text": "async function validateAttachments(\n  attachments: Array<{ data?: string; uri?: string }>\n) {\n  for (const file of attachments) {\n    if (isMinioUrl(file.data)) {\n      continue\n    }\n\n    if (isMinioUri(file.uri)) {\n      continue\n    }\n\n    if (!file.data) {\n      throw new Error(`No attachment file found!`)\n    }\n\n    const data = file.data.split('base64,')?.[1] || ''\n    const mime = file.data.split(';')[0].replace('data:', '')\n\n    if (!mime.startsWith('image/')) {\n      throw new Error(`File type doesn't match image/*`)\n    }\n\n    const buffer = Buffer.from(data, 'base64')\n    const type = await fromBuffer(buffer)\n    if (!type) {\n      throw new Error(\"File type couldn't be determined\")\n    }\n\n    if (!type.mime.startsWith('image/')) {\n      throw new Error(`File type doesn't match image/*`)\n    }\n  }\n}",
      "startLine": 29,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/validators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-78",
      "type": "function_declaration",
      "name": "validateBirthDeclarationAttachments",
      "text": "function validateBirthDeclarationAttachments(\n  details: GQLBirthRegistrationInput\n) {\n  const attachments = [\n    details.registration?.attachments,\n    details.informant?.affidavit,\n    details.mother?.photo,\n    details.father?.photo,\n    details.child?.photo\n  ]\n    .flat()\n    .filter((x): x is GQLAttachmentInput => x !== undefined)\n\n  return validateAttachments(attachments)\n}",
      "startLine": 64,
      "endLine": 78,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/validators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@80-95",
      "type": "function_declaration",
      "name": "validateDeathDeclarationAttachments",
      "text": "function validateDeathDeclarationAttachments(\n  details: GQLDeathRegistrationInput\n) {\n  const attachments = [\n    details.registration?.attachments,\n    details.informant?.affidavit,\n    details.mother?.photo,\n    details.father?.photo,\n    details.deceased?.photo,\n    details.spouse?.photo\n  ]\n    .flat()\n    .filter((x): x is GQLAttachmentInput => x !== undefined)\n\n  return validateAttachments(attachments)\n}",
      "startLine": 80,
      "endLine": 95,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/validators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@97-109",
      "type": "function_declaration",
      "name": "validateMarriageDeclarationAttachments",
      "text": "function validateMarriageDeclarationAttachments(\n  details: GQLMarriageRegistrationInput\n) {\n  const attachments = [\n    details.registration?.attachments,\n    details.bride?.photo,\n    details.groom?.photo\n  ]\n    .flat()\n    .filter((x): x is GQLAttachmentInput => x !== undefined)\n\n  return validateAttachments(attachments)\n}",
      "startLine": 97,
      "endLine": 109,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/validators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@100-114",
      "type": "function_declaration",
      "name": "makeRegistrationCorrection",
      "text": "function makeRegistrationCorrection(\n  recordId: string,\n  record:\n    | GQLBirthRegistrationInput\n    | GQLDeathRegistrationInput\n    | GQLMarriageRegistrationInput,\n  authHeader: IAuthHeader\n) {\n  return createRequest<void>(\n    'POST',\n    `/records/${recordId}/make-correction`,\n    authHeader,\n    record\n  )\n}",
      "startLine": 100,
      "endLine": 114,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/workflow/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@116-127",
      "type": "function_declaration",
      "name": "rejectRegistrationCorrection",
      "text": "function rejectRegistrationCorrection(\n  recordId: string,\n  details: GQLCorrectionRejectionInput,\n  authHeader: IAuthHeader\n) {\n  return createRequest<void>(\n    'POST',\n    `/records/${recordId}/reject-correction`,\n    authHeader,\n    details\n  )\n}",
      "startLine": 116,
      "endLine": 127,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/workflow/index.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@14-22",
      "type": "class_declaration",
      "name": "UnassignError",
      "text": "class UnassignError extends GraphQLError {\n  constructor(message = 'You have been unassigned from this event') {\n    super(message, {\n      extensions: {\n        code: 'UNASSIGNED'\n      }\n    })\n  }\n}",
      "startLine": 14,
      "endLine": 22,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/graphql-errors.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@15-21",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(message = 'You have been unassigned from this event') {\n    super(message, {\n      extensions: {\n        code: 'UNASSIGNED'\n      }\n    })\n  }",
      "startLine": 15,
      "endLine": 21,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/graphql-errors.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@23-32",
      "type": "class_declaration",
      "name": "UserInputError",
      "text": "class UserInputError extends GraphQLError {\n  constructor(message = 'Invalid user input', invalidArgs = {}) {\n    super(message, {\n      extensions: {\n        code: 'BAD_USER_INPUT',\n        invalidArgs\n      }\n    })\n  }\n}",
      "startLine": 23,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/graphql-errors.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@24-31",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(message = 'Invalid user input', invalidArgs = {}) {\n    super(message, {\n      extensions: {\n        code: 'BAD_USER_INPUT',\n        invalidArgs\n      }\n    })\n  }",
      "startLine": 24,
      "endLine": 31,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/graphql-errors.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@34-42",
      "type": "class_declaration",
      "name": "AuthenticationError",
      "text": "class AuthenticationError extends GraphQLError {\n  constructor(message = 'Unauthorized') {\n    super(message, {\n      extensions: {\n        code: 'UNAUTHENTICATED'\n      }\n    })\n  }\n}",
      "startLine": 34,
      "endLine": 42,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/graphql-errors.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@35-41",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(message = 'Unauthorized') {\n    super(message, {\n      extensions: {\n        code: 'UNAUTHENTICATED'\n      }\n    })\n  }",
      "startLine": 35,
      "endLine": 41,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/graphql-errors.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@37-39",
      "type": "method_definition",
      "name": "getTotalMetrics",
      "text": "async getTotalMetrics(_, variables, { headers: authHeader }) {\n      return getMetrics('/totalMetrics', variables, authHeader)\n    }",
      "startLine": 37,
      "endLine": 39,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@40-62",
      "type": "method_definition",
      "name": "getRegistrationsListByFilter",
      "text": "async getRegistrationsListByFilter(\n      _,\n      { filterBy, ...variables },\n      { headers: authHeader }\n    ) {\n      let result\n      if (filterBy === FILTER_BY.REGISTERER) {\n        result = await getMetrics(\n          '/totalMetricsByRegistrar',\n          variables,\n          authHeader\n        )\n      } else if (filterBy === FILTER_BY.LOCATION) {\n        result = await getMetrics(\n          '/totalMetricsByLocation',\n          variables,\n          authHeader\n        )\n      } else if (filterBy === FILTER_BY.TIME) {\n        result = await getMetrics('/totalMetricsByTime', variables, authHeader)\n      }\n      return result\n    }",
      "startLine": 40,
      "endLine": 62,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@63-75",
      "type": "method_definition",
      "name": "getVSExports",
      "text": "async getVSExports(_, variables, { headers: authHeader }) {\n      let results\n      if (inScope(authHeader, [SCOPES.PERFORMANCE_EXPORT_VITAL_STATISTICS])) {\n        results = await getMetrics('/fetchVSExport', variables, authHeader)\n        return {\n          results\n        }\n      } else {\n        throw new Error(\n          'User does not have the scope required for this resource'\n        )\n      }\n    }",
      "startLine": 63,
      "endLine": 75,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@76-91",
      "type": "method_definition",
      "name": "getTotalPayments",
      "text": "async getTotalPayments(\n      _,\n      { timeStart, timeEnd, locationId, event },\n      { headers: authHeader }\n    ) {\n      return getMetrics(\n        '/totalPayments',\n        {\n          timeStart,\n          timeEnd,\n          locationId,\n          event\n        },\n        authHeader\n      )\n    }",
      "startLine": 76,
      "endLine": 91,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@92-106",
      "type": "method_definition",
      "name": "getTotalCertifications",
      "text": "async getTotalCertifications(\n      _,\n      { timeStart, timeEnd, locationId },\n      { headers: authHeader }\n    ) {\n      return getMetrics(\n        '/totalCertifications',\n        {\n          timeStart,\n          timeEnd,\n          locationId\n        },\n        authHeader\n      )\n    }",
      "startLine": 92,
      "endLine": 106,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@107-122",
      "type": "method_definition",
      "name": "getTotalCorrections",
      "text": "async getTotalCorrections(\n      _,\n      { timeStart, timeEnd, locationId, event },\n      { headers: authHeader }\n    ) {\n      return getMetrics(\n        '/totalCorrections',\n        {\n          timeStart,\n          timeEnd,\n          locationId,\n          event\n        },\n        authHeader\n      )\n    }",
      "startLine": 107,
      "endLine": 122,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@123-137",
      "type": "method_definition",
      "name": "getDeclarationsStartedMetrics",
      "text": "async getDeclarationsStartedMetrics(\n      _,\n      { timeStart, timeEnd, locationId },\n      { headers: authHeader }\n    ) {\n      return getMetrics(\n        '/declarationsStarted',\n        {\n          timeStart,\n          timeEnd,\n          locationId\n        },\n        authHeader\n      )\n    }",
      "startLine": 123,
      "endLine": 137,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@138-160",
      "type": "method_definition",
      "name": "fetchMonthWiseEventMetrics",
      "text": "async fetchMonthWiseEventMetrics(\n      _,\n      { timeStart, timeEnd, locationId, event },\n      { headers: authHeader }\n    ) {\n      const metricsData = await getMetrics(\n        '/monthWiseEventEstimations',\n        locationId\n          ? {\n              timeStart,\n              timeEnd,\n              locationId,\n              event\n            }\n          : {\n              timeStart,\n              timeEnd,\n              event\n            },\n        authHeader\n      )\n      return metricsData\n    }",
      "startLine": 138,
      "endLine": 160,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@161-183",
      "type": "method_definition",
      "name": "fetchLocationWiseEventMetrics",
      "text": "async fetchLocationWiseEventMetrics(\n      _,\n      { timeStart, timeEnd, locationId, event },\n      { headers: authHeader }\n    ) {\n      const metricsData = await getMetrics(\n        '/locationWiseEventEstimations',\n        locationId\n          ? {\n              timeStart,\n              timeEnd,\n              locationId,\n              event\n            }\n          : {\n              timeStart,\n              timeEnd,\n              event\n            },\n        authHeader\n      )\n      return metricsData\n    }",
      "startLine": 161,
      "endLine": 183,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@184-196",
      "type": "method_definition",
      "name": "getUserAuditLog",
      "text": "async getUserAuditLog(_, params, { headers: authHeader }) {\n      return await getMetrics(\n        '/audit/events',\n        {\n          practitionerId: params.practitionerId,\n          skip: params.skip,\n          count: params.count,\n          timeStart: params.timeStart,\n          timeEnd: params.timeEnd\n        },\n        authHeader\n      )\n    }",
      "startLine": 184,
      "endLine": 196,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@197-207",
      "type": "method_definition",
      "name": "getLocationStatistics",
      "text": "async getLocationStatistics(\n      _,\n      { locationId, populationYear },\n      { headers: authHeader }\n    ) {\n      return getMetrics(\n        '/locationStatistics',\n        locationId ? { locationId, populationYear } : { populationYear },\n        authHeader\n      )\n    }",
      "startLine": 197,
      "endLine": 207,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-18",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n  redis.quit()\n}",
      "startLine": 16,
      "endLine": 18,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/utils/redis.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@21-27",
      "type": "method_definition",
      "name": "__resolveType",
      "text": "__resolveType(obj) {\n      if (obj.data?.compositionId) {\n        return 'UserAuditLogItemWithComposition'\n      } else {\n        return 'UserAuditLogItem'\n      }\n    }",
      "startLine": 21,
      "endLine": 27,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@30-38",
      "type": "method_definition",
      "name": "__resolveType",
      "text": "__resolveType(obj, context, info) {\n      if (info.variableValues.filterBy === FILTER_BY.REGISTERER)\n        return 'TotalMetricsByRegistrar'\n      else if (info.variableValues.filterBy === FILTER_BY.LOCATION)\n        return 'TotalMetricsByLocation'\n      else if (info.variableValues.filterBy === FILTER_BY.TIME)\n        return 'TotalMetricsByTime'\n      else throw new Error('Invalid type')\n    }",
      "startLine": 30,
      "endLine": 38,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@41-44",
      "type": "method_definition",
      "name": "location",
      "text": "async location({ location }, _, { headers: authHeader }) {\n      // @TODO: For simplicity, metrics shouldn't pass the `Location/` prefix here.\n      return await fetchLocation(resourceIdentifierToUUID(location))\n    }",
      "startLine": 41,
      "endLine": 44,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@47-56",
      "type": "method_definition",
      "name": "url",
      "text": "async url(\n      { url: fileUri }: GQLVSExport,\n      _,\n      { headers: authHeader, presignDocumentUrls }\n    ) {\n      if (!presignDocumentUrls) {\n        return fileUri\n      }\n      return getPresignedUrlFromUri(fileUri, authHeader)\n    }",
      "startLine": 47,
      "endLine": 56,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@59-75",
      "type": "method_definition",
      "name": "registrarPractitioner",
      "text": "async registrarPractitioner(\n      { registrarPractitioner },\n      _,\n      { headers: authHeader }\n    ) {\n      const res = await fetch(`${USER_MANAGEMENT_URL}getUser`, {\n        method: 'POST',\n        body: JSON.stringify({\n          practitionerId: registrarPractitioner\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n      return await res.json()\n    }",
      "startLine": 59,
      "endLine": 75,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/metrics/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@17-29",
      "type": "method_definition",
      "name": "getUserRoles",
      "text": "async getUserRoles(_, __, { headers: authHeader }) {\n      const roles = await fetchJSON<Roles[]>(\n        joinURL(COUNTRY_CONFIG_URL, `/roles`),\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            ...authHeader\n          }\n        }\n      )\n\n      return roles\n    }",
      "startLine": 17,
      "endLine": 29,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/role/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@96-145",
      "type": "function_declaration",
      "name": "validateTask",
      "text": "async function validateTask(bundle: Bundle) {\n  const taskEntry = bundle.entry?.find(\n    (entry) => entry.resource?.resourceType === 'Task'\n  )\n  const compositionEntry = bundle.entry?.find(\n    (entry) => entry.resource?.resourceType === 'Composition'\n  )\n  if (!taskEntry) {\n    throw new Error('Task entry not found! in bundle')\n  }\n  if (!compositionEntry) {\n    throw new Error('Composition entry not found! in bundle')\n  }\n  const task = taskEntry.resource as Task\n  if (task.status !== 'draft') {\n    throw new Error('Task status should be draft')\n  }\n  if (task.focus?.reference !== compositionEntry.fullUrl) {\n    throw new Error('Task must reference the composition entry')\n  }\n\n  if (!task.extension) {\n    throw new Error('Task extensions not found')\n  }\n\n  // validate office id and office location\n  const regLastOfficeIdRef = findExtension(\n    `${OPENCRVS_SPECIFICATION_URL}extension/regLastOffice`,\n    task.extension\n  )?.valueReference?.reference\n\n  if (!regLastOfficeIdRef) {\n    throw BoomErrorWithCustomMessage(\n      `Could not process the Event Notification, as office id was not provided`\n    )\n  }\n\n  // check if the office id is valid and it is part of the provided office location\n  const office = await fetchFromHearth(`${regLastOfficeIdRef}`)\n\n  if (\n    !office ||\n    !office.type ||\n    office.type.coding?.[0]?.code !== Code.CRVS_OFFICE\n  ) {\n    throw BoomErrorWithCustomMessage(\n      `Could not process the Event Notification, as the provided office with id ${regLastOfficeIdRef} was not found`\n    )\n  }\n}",
      "startLine": 96,
      "endLine": 145,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/eventNotification/eventNotificationHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@147-171",
      "type": "function_declaration",
      "name": "eventNotificationHandler",
      "text": "async function eventNotificationHandler(\n  req: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  let bundle: Bundle\n  try {\n    bundle = req.payload as Bundle\n\n    await validateTask(bundle)\n    await validateAddressesOfTask(bundle)\n  } catch (e) {\n    if (e.isBoom) {\n      return h\n        .response({\n          statusCode: e.output.payload.statusCode,\n          error: e.output.payload.message,\n          message: e.output.payload.boomCustomMessage\n        })\n        .code(e.output.payload.statusCode)\n    }\n    return badRequest(e)\n  }\n\n  return await createHospitalNotification(getAuthHeader(req), bundle)\n}",
      "startLine": 147,
      "endLine": 171,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/eventNotification/eventNotificationHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@173-217",
      "type": "function_declaration",
      "name": "validateAddressesOfTask",
      "text": "async function validateAddressesOfTask(bundle: Bundle) {\n  //validate the patient addresses\n  const patientEntries = bundle.entry\n    .map(({ resource }) => resource)\n    .filter(isPatient)\n\n  if (!patientEntries || patientEntries.length === 0) {\n    throw BoomErrorWithCustomMessage(\n      `Could not process the Event Notification, as there were no Person found!`\n    )\n  }\n\n  for (const patient of patientEntries) {\n    const addresses = (patient as Patient).address\n\n    if (addresses) {\n      for (const address of addresses) {\n        await validateLocationLevelsAndCountry(address)\n      }\n    }\n  }\n\n  // validate event encounter\n  const encounter = getResourceByType<Encounter>(bundle, 'Encounter')\n  if (!encounter) {\n    throw BoomErrorWithCustomMessage('Encounter entry not found!!')\n  }\n\n  const locationId = encounter.location?.[0].location.reference\n  if (!locationId) {\n    throw BoomErrorWithCustomMessage('Encounter location not found! in bundle!')\n  }\n\n  const location = await fetchFromHearth(`${locationId}`)\n\n  if (!location || !location.type) {\n    throw BoomErrorWithCustomMessage(\n      `Encounter location with id ${locationId} not found!`\n    )\n  }\n\n  if (location.type.coding?.[0]?.code !== Code.HEALTH_FACILITY) {\n    await validateLocationLevelsAndCountry(location.address)\n  }\n}",
      "startLine": 173,
      "endLine": 217,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/eventNotification/eventNotificationHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@237-276",
      "type": "function_declaration",
      "name": "validateLocationLevelsAndCountry",
      "text": "async function validateLocationLevelsAndCountry(address: Address) {\n  const isCountryValid =\n    address.country === 'FAR' ||\n    (address?.country && lookup.byIso(address?.country))\n\n  if (!isCountryValid) {\n    throw BoomErrorWithCustomMessage(\n      `Could not process the Event Notification, as the supplied country code ${address.country} was incorrect`\n    )\n  }\n\n  if (address.country === DEFAULT_COUNTRY) {\n    const locationLevels = [\n      address.line?.[12],\n      address.line?.[11],\n      address.line?.[10],\n      address.district,\n      address.state\n    ]\n\n    for (let i = 0; i < locationLevels.length - 1; i++) {\n      if (locationLevels[i]) {\n        const location = await fetchFromHearth(`Location/${locationLevels[i]}`)\n\n        if (!location || !location.type) {\n          throw BoomErrorWithCustomMessage(\n            `Could not process the Event Notification, as the location with id ${locationLevels[i]} not found!`\n          )\n        }\n        const partOf = location.partOf.reference\n\n        if (!partOf || partOf !== `Location/${locationLevels[i + 1]}`) {\n          throw BoomErrorWithCustomMessage(\n            `Could not process the Event Notification, as the supplied location hierarchy was incorrect`\n          )\n        }\n      }\n    }\n  }\n}",
      "startLine": 237,
      "endLine": 276,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/eventNotification/eventNotificationHandler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@278-282",
      "type": "function_declaration",
      "name": "BoomErrorWithCustomMessage",
      "text": "function BoomErrorWithCustomMessage(message: string) {\n  const boomError = badImplementation()\n  boomError.output.payload.boomCustomMessage = message\n  return boomError\n}",
      "startLine": 278,
      "endLine": 282,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/eventNotification/eventNotificationHandler.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@19-54",
      "type": "method_definition",
      "name": "bookmarkAdvancedSearch",
      "text": "async bookmarkAdvancedSearch(\n      _,\n      { bookmarkSearchInput },\n      { headers: authHeader }\n    ) {\n      // Only registrar or registration agent should be able to search user\n      if (\n        !inScope(authHeader, [\n          SCOPES.SEARCH_BIRTH,\n          SCOPES.SEARCH_DEATH,\n          SCOPES.SEARCH_MARRIAGE,\n          SCOPES.SEARCH_BIRTH_MY_JURISDICTION,\n          SCOPES.SEARCH_DEATH_MY_JURISDICTION,\n          SCOPES.SEARCH_MARRIAGE_MY_JURISDICTION\n        ])\n      ) {\n        throw new Error('Advanced search is not allowed for this user')\n      }\n\n      const res = await fetch(`${USER_MANAGEMENT_URL}searches`, {\n        method: 'POST',\n        body: JSON.stringify(bookmarkSearchInput),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 201) {\n        throw new Error(\n          `Something went wrong on user management service. Couldn't bookmark advanced search.`\n        )\n      }\n      const response = await res.json()\n      return response\n    }",
      "startLine": 19,
      "endLine": 54,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/bookmarkAdvancedSearch/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@55-97",
      "type": "method_definition",
      "name": "removeBookmarkedAdvancedSearch",
      "text": "async removeBookmarkedAdvancedSearch(\n      _,\n      { removeBookmarkedSearchInput },\n      { headers: authHeader }\n    ) {\n      // Only registrar or registration agent should be able to search user\n      if (\n        !inScope(authHeader, [\n          SCOPES.SEARCH_BIRTH,\n          SCOPES.SEARCH_DEATH,\n          SCOPES.SEARCH_MARRIAGE,\n          SCOPES.SEARCH_BIRTH_MY_JURISDICTION,\n          SCOPES.SEARCH_DEATH_MY_JURISDICTION,\n          SCOPES.SEARCH_MARRIAGE_MY_JURISDICTION\n        ])\n      ) {\n        throw new Error(\n          'Advanced search is only allowed for registrar or registration agent'\n        )\n      }\n\n      const removeBookmarkedSearchPayload = {\n        userId: removeBookmarkedSearchInput.userId,\n        searchId: removeBookmarkedSearchInput.searchId\n      }\n\n      const res = await fetch(`${USER_MANAGEMENT_URL}searches`, {\n        method: 'DELETE',\n        body: JSON.stringify(removeBookmarkedSearchPayload),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          `Something went wrong on user management service. Couldn't unbookmarked advanced search.`\n        )\n      }\n      const response = res.json()\n      return await response\n    }",
      "startLine": 55,
      "endLine": 97,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/bookmarkAdvancedSearch/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@310-406",
      "type": "method_definition",
      "name": "createOrUpdateUser",
      "text": "async createOrUpdateUser(_, { user }, { headers: authHeader }) {\n      if (\n        !inScope(authHeader, [\n          SCOPES.USER_DATA_SEEDING,\n          SCOPES.USER_CREATE,\n          SCOPES.USER_CREATE_MY_JURISDICTION,\n          SCOPES.USER_UPDATE,\n          SCOPES.USER_UPDATE_MY_JURISDICTION\n        ])\n      ) {\n        throw new Error('Create or update user is not allowed for this user')\n      }\n      if (\n        inScope(authHeader, [\n          SCOPES.USER_CREATE_MY_JURISDICTION,\n          SCOPES.USER_UPDATE_MY_JURISDICTION\n        ]) &&\n        user.primaryOffice\n      ) {\n        const requestingUser = await getUserFromHeader(authHeader)\n        const isUnderJurisdiction = await isOfficeUnderJurisdiction(\n          requestingUser.primaryOfficeId as UUID,\n          user.primaryOffice as UUID\n        )\n        if (!isUnderJurisdiction) {\n          throw new Error(\n            'Cannot create or update user in offices not under jurisdiction'\n          )\n        }\n      }\n\n      if (user.role && !hasScope(authHeader, SCOPES.USER_DATA_SEEDING)) {\n        const scopes = getScopes(authHeader)\n        const creatableRoleIds =\n          findScope(scopes, 'user.create')?.options?.role ?? []\n\n        const editableRoleIds =\n          findScope(scopes, 'user.edit')?.options?.role ?? []\n\n        if (![...creatableRoleIds, ...editableRoleIds].includes(user.role)) {\n          throw new Error(\n            `A user with role \"${user.role}\" can not be created or updated by this user`\n          )\n        }\n      }\n\n      try {\n        if (user.signature) {\n          await validateAttachments([user.signature])\n        }\n      } catch (error) {\n        throw new UserInputError(error.message)\n      }\n\n      const roles = await fetchJSON<Roles>(\n        joinURL(COUNTRY_CONFIG_URL, '/roles')\n      )\n      const userPayload: IUserPayload = createOrUpdateUserPayload(user, roles)\n      const action = userPayload.id ? 'updateUser' : 'createUser'\n\n      const res = await fetch(joinURL(USER_MANAGEMENT_URL, action), {\n        method: 'POST',\n        body: JSON.stringify(userPayload),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status === 403) {\n        const errorResponse = await res.json()\n        const duplicateDataErrorMap = {\n          emailForNotification: {\n            field: 'email',\n            conflictingValue: userPayload.emailForNotification\n          },\n          mobile: {\n            field: 'mobile',\n            conflictingValue: userPayload.mobile\n          }\n        }\n\n        throw new UserInputError(errorResponse.message, {\n          duplicateNotificationMethodError:\n            duplicateDataErrorMap[\n              errorResponse[\n                'errorThrowingProperty'\n              ] as keyof typeof duplicateDataErrorMap\n            ]\n        })\n      } else if (res.status !== 201) {\n        throw new Error(\n          `Something went wrong on user-mgnt service. Couldn't perform ${action}`\n        )\n      }\n      return await res.json()\n    }",
      "startLine": 310,
      "endLine": 406,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@407-438",
      "type": "method_definition",
      "name": "activateUser",
      "text": "async activateUser(\n      _,\n      { userId, password, securityQNAs },\n      { headers: authHeader }\n    ) {\n      if (\n        !isTokenOwner(authHeader, userId) &&\n        !inScope(authHeader, [\n          SCOPES.USER_UPDATE,\n          SCOPES.USER_UPDATE_MY_JURISDICTION\n        ])\n      )\n        throw new Error('User can not be activated')\n\n      const res = await fetch(`${USER_MANAGEMENT_URL}activateUser`, {\n        method: 'POST',\n        body: JSON.stringify({ userId, password, securityQNAs }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      const response = await res.json()\n\n      if (res.status !== 201) {\n        throw new Error(\n          \"Something went wrong on user-mgnt service. Couldn't activate given user\"\n        )\n      }\n      return response.userId\n    }",
      "startLine": 407,
      "endLine": 438,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@439-471",
      "type": "method_definition",
      "name": "changePassword",
      "text": "async changePassword(\n      _,\n      { userId, existingPassword, password },\n      { headers: authHeader }\n    ) {\n      // Only token owner of CONFIG_UPDATE_ALL should be able to change their password\n      if (\n        !inScope(authHeader, [\n          SCOPES.USER_UPDATE,\n          SCOPES.USER_UPDATE_MY_JURISDICTION\n        ]) &&\n        !isTokenOwner(authHeader, userId)\n      ) {\n        throw new Error(\n          `Change password is not allowed. ${userId} is not the owner of the token`\n        )\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}changeUserPassword`, {\n        method: 'POST',\n        body: JSON.stringify({ userId, existingPassword, password }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          \"Something went wrong on user-mgnt service. Couldn't change user password\"\n        )\n      }\n      return true\n    }",
      "startLine": 439,
      "endLine": 471,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@472-503",
      "type": "method_definition",
      "name": "changePhone",
      "text": "async changePhone(\n      _,\n      { userId, phoneNumber, nonce, verifyCode },\n      { headers: authHeader }\n    ) {\n      if (!isTokenOwner(authHeader, userId)) {\n        throw new Error(\n          `Change phone is not allowed. ${userId} is not the owner of the token`\n        )\n      }\n      try {\n        await checkVerificationCode(nonce, verifyCode)\n      } catch (err) {\n        logger.error(err)\n        throw new Error(`Change phone is not allowed. Error: ${err}`)\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}changeUserPhone`, {\n        method: 'POST',\n        body: JSON.stringify({ userId, phoneNumber }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          \"Something went wrong on user-mgnt service. Couldn't change user phone number\"\n        )\n      }\n      return true\n    }",
      "startLine": 472,
      "endLine": 503,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@504-535",
      "type": "method_definition",
      "name": "changeEmail",
      "text": "async changeEmail(\n      _,\n      { userId, email, nonce, verifyCode },\n      { headers: authHeader }\n    ) {\n      if (!isTokenOwner(authHeader, userId)) {\n        throw new Error(\n          `Change email is not allowed. ${userId} is not the owner of the token`\n        )\n      }\n      try {\n        await checkVerificationCode(nonce, verifyCode)\n      } catch (err) {\n        logger.error(err)\n        throw new Error(`Change email is not allowed. Error: ${err}`)\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}changeUserEmail`, {\n        method: 'POST',\n        body: JSON.stringify({ userId, email }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          \"Something went wrong on user-mgnt service. Couldn't change user email\"\n        )\n      }\n      return true\n    }",
      "startLine": 504,
      "endLine": 535,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@536-573",
      "type": "method_definition",
      "name": "changeAvatar",
      "text": "async changeAvatar(_, { userId, avatar }, { headers: authHeader }) {\n      try {\n        await validateAttachments([avatar])\n      } catch (error) {\n        throw new UserInputError(error.message)\n      }\n\n      // Only token owner should be able to change their avatar\n      if (!isTokenOwner(authHeader, userId)) {\n        throw new Error(\n          `Changing avatar is not allowed. ${userId} is not the owner of the token`\n        )\n      }\n\n      if (isBase64FileString(avatar.data)) {\n        const docUploadResponse = await uploadBase64ToMinio(\n          avatar.data,\n          authHeader\n        )\n        avatar.data = docUploadResponse\n      }\n\n      const res = await fetch(`${USER_MANAGEMENT_URL}changeUserAvatar`, {\n        method: 'POST',\n        body: JSON.stringify({ userId, avatar }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          \"Something went wrong on user-mgnt service. Couldn't change user avatar\"\n        )\n      }\n      return avatar\n    }",
      "startLine": 536,
      "endLine": 573,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@574-614",
      "type": "method_definition",
      "name": "auditUser",
      "text": "async auditUser(\n      _,\n      { userId, action, reason, comment },\n      { headers: authHeader }\n    ) {\n      if (\n        !inScope(authHeader, [\n          SCOPES.USER_UPDATE,\n          SCOPES.USER_UPDATE_MY_JURISDICTION,\n          SCOPES.USER_DATA_SEEDING\n        ])\n      ) {\n        throw new Error(\n          `User ${userId} is not allowed to audit for not having the sys admin scope`\n        )\n      }\n\n      const auditedBy = getUserId(authHeader)\n\n      const res = await fetch(`${USER_MANAGEMENT_URL}auditUser`, {\n        method: 'POST',\n        body: JSON.stringify({\n          userId,\n          auditedBy,\n          action,\n          reason,\n          comment\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          `Something went wrong on user-mgnt service. Couldn't audit user ${userId}`\n        )\n      }\n      return true\n    }",
      "startLine": 574,
      "endLine": 614,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@615-642",
      "type": "method_definition",
      "name": "resendInvite",
      "text": "async resendInvite(_, { userId }, { headers: authHeader }) {\n      if (\n        !inScope(authHeader, [\n          SCOPES.USER_UPDATE,\n          SCOPES.USER_UPDATE_MY_JURISDICTION\n        ])\n      ) {\n        throw new Error('SMS invite can not be resent by this user')\n      }\n\n      const res = await fetch(`${USER_MANAGEMENT_URL}resendInvite`, {\n        method: 'POST',\n        body: JSON.stringify({\n          userId\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          `Something went wrong on user-mgnt service. Couldn't send sms to ${userId}`\n        )\n      }\n      return true\n    }",
      "startLine": 615,
      "endLine": 642,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@643-669",
      "type": "method_definition",
      "name": "usernameReminder",
      "text": "async usernameReminder(_, { userId }, { headers: authHeader }) {\n      if (\n        !inScope(authHeader, [\n          SCOPES.USER_UPDATE,\n          SCOPES.USER_UPDATE_MY_JURISDICTION\n        ])\n      ) {\n        throw new Error('Username reminder can not be resent by this user')\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}usernameReminder`, {\n        method: 'POST',\n        body: JSON.stringify({\n          userId\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          `Something went wrong on user-mgnt service. Couldn't send sms to ${userId}`\n        )\n      }\n      return true\n    }",
      "startLine": 643,
      "endLine": 669,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@670-696",
      "type": "method_definition",
      "name": "resetPasswordInvite",
      "text": "async resetPasswordInvite(_, { userId }, { headers: authHeader }) {\n      if (\n        !inScope(authHeader, [\n          SCOPES.USER_UPDATE,\n          SCOPES.USER_UPDATE_MY_JURISDICTION\n        ])\n      ) {\n        throw new Error('Reset password can not be sent by this user')\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}resetPasswordInvite`, {\n        method: 'POST',\n        body: JSON.stringify({\n          userId\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          `Something went wrong on user-mgnt service. Couldn't reset password and send sms to ${userId}`\n        )\n      }\n      return true\n    }",
      "startLine": 670,
      "endLine": 696,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@700-725",
      "type": "function_declaration",
      "name": "createOrUpdateUserPayload",
      "text": "function createOrUpdateUserPayload(\n  user: GQLUserInput,\n  roles: Roles\n): IUserPayload {\n  const userPayload: IUserPayload = {\n    name: user.name.map((name: GQLHumanNameInput) => ({\n      use: name.use as string,\n      family: name.familyName?.trim() as string,\n      given: [name.firstNames?.trim() || ''] as string[]\n    })),\n    role: user.role as string,\n    ...(user.password && { password: user.password }),\n    ...(user.status && { status: user.status }),\n    primaryOfficeId: user.primaryOffice as string,\n    email: '',\n    ...(user.email && { emailForNotification: user.email }), //instead of saving data in email, we want to store it in emailForNotification property\n    ...(user.mobile && { mobile: user.mobile as string }),\n    device: user.device as string,\n    signature: user.signature,\n    ...(user.username && { username: user.username })\n  }\n  if (user.id) {\n    userPayload.id = user.id\n  }\n  return userPayload\n}",
      "startLine": 700,
      "endLine": 725,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-45",
      "type": "function_declaration",
      "name": "getUser",
      "text": "async function getUser(\n  body: { [key: string]: string | undefined },\n  authHeader: IAuthHeader\n): Promise<IUserModelData> {\n  const res = await fetch(`${USER_MANAGEMENT_URL}getUser`, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader\n    }\n  })\n  return await res.json()\n}",
      "startLine": 32,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@47-60",
      "type": "function_declaration",
      "name": "getSystem",
      "text": "async function getSystem(\n  body: { [key: string]: string | undefined },\n  authHeader: IAuthHeader\n): Promise<ISystemModelData> {\n  const res = await fetch(`${USER_MANAGEMENT_URL}getSystem`, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json',\n      ...authHeader\n    }\n  })\n  return await res.json()\n}",
      "startLine": 47,
      "endLine": 60,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@62-78",
      "type": "function_declaration",
      "name": "getUserMobile",
      "text": "async function getUserMobile(userId: string, authHeader: IAuthHeader) {\n  try {\n    const res = await fetch(`${USER_MANAGEMENT_URL}getUserMobile`, {\n      method: 'POST',\n      body: JSON.stringify({ userId }),\n      headers: {\n        'Content-Type': 'application/json',\n        ...authHeader\n      }\n    })\n    const body = await res.json()\n\n    return body\n  } catch (err) {\n    logger.error(`Unable to retrieve mobile for error : ${err}`)\n  }\n}",
      "startLine": 62,
      "endLine": 78,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@80-90",
      "type": "function_declaration",
      "name": "scopesInclude",
      "text": "function scopesInclude(\n  scopes:\n    | Scope[]\n    | undefined /* @todo remove undefined variant and make scope a required field for users */,\n  scope: Scope\n) {\n  if (!scopes) {\n    return false\n  }\n  return scopes.includes(scope)\n}",
      "startLine": 80,
      "endLine": 90,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@92-99",
      "type": "function_declaration",
      "name": "hasScope",
      "text": "function hasScope(authHeader: IAuthHeader, scope: Scope) {\n  if (!authHeader || !authHeader.Authorization) {\n    return false\n  }\n  const tokenPayload = getTokenPayload(authHeader.Authorization.split(' ')[1])\n\n  return (tokenPayload.scope && tokenPayload.scope.indexOf(scope) > -1) || false\n}",
      "startLine": 92,
      "endLine": 99,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@101-104",
      "type": "function_declaration",
      "name": "inScope",
      "text": "function inScope(authHeader: IAuthHeader, scopes: Scope[]) {\n  const matchedScope = scopes.find((scope) => hasScope(authHeader, scope))\n  return !!matchedScope\n}",
      "startLine": 101,
      "endLine": 104,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@106-112",
      "type": "function_declaration",
      "name": "isTokenOwner",
      "text": "function isTokenOwner(authHeader: IAuthHeader, userId: string) {\n  if (!authHeader || !authHeader.Authorization) {\n    return false\n  }\n  const tokenPayload = getTokenPayload(authHeader.Authorization.split(' ')[1])\n  return (tokenPayload.sub && tokenPayload.sub === userId) || false\n}",
      "startLine": 106,
      "endLine": 112,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@139-142",
      "type": "function_declaration",
      "name": "getUserFromHeader",
      "text": "function getUserFromHeader(header: IAuthHeader) {\n  const userId = getUserId(header)\n  return getUser({ userId }, header)\n}",
      "startLine": 139,
      "endLine": 142,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@144-147",
      "type": "function_declaration",
      "name": "getFullName",
      "text": "function getFullName(user: IUserModelData, language: string) {\n  const localName = user.name.find((name) => name.use === language)\n  return `${localName?.given.join(' ') || ''} ${localName?.family || ''}`.trim()\n}",
      "startLine": 144,
      "endLine": 147,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@149-162",
      "type": "function_declaration",
      "name": "isOfficeUnderJurisdiction",
      "text": "async function isOfficeUnderJurisdiction(\n  officeId: UUID,\n  otherOfficeId: UUID\n) {\n  const officeLocation = await fetchLocation(officeId)\n  const parentLocationId =\n    officeLocation.partOf &&\n    resourceIdentifierToUUID(officeLocation.partOf.reference)\n  if (!parentLocationId) {\n    return false\n  }\n  const otherOfficeHierarchy = await fetchLocationHierarchy(otherOfficeId)\n  return otherOfficeHierarchy.map(({ id }) => id).includes(parentLocationId)\n}",
      "startLine": 149,
      "endLine": 162,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/utils/index.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@18-102",
      "type": "class_declaration",
      "name": "UsersAPI",
      "text": "class UsersAPI extends OpenCRVSRESTDataSource {\n  override baseURL = USER_MANAGEMENT_URL\n  private memoizedResults: Map<string, Promise<IUserModelData>>\n\n  constructor(options: { contextValue: Context }) {\n    super(options)\n    this.memoizedResults = new Map()\n  }\n\n  async getUserByEmail(email: string): Promise<IUserModelData | null> {\n    const cacheKey = `${this.baseURL}/getUser:email:${email}`\n\n    const cachedResponse = this.memoizedResults.get(cacheKey)\n\n    if (cachedResponse) {\n      return cachedResponse\n    }\n\n    try {\n      const response = this.post('getUser', { body: { email } })\n\n      this.memoizedResults.set(cacheKey, response)\n\n      return await response\n    } catch (e) {\n      // Don't need to throw errors if unauthorized error is found for no user with this email\n      if (e instanceof AuthenticationError) return null\n      else throw e\n    }\n  }\n\n  async getUserByMobile(mobile: string): Promise<IUserModelData | null> {\n    const cacheKey = `${this.baseURL}/getUser:mobile:${mobile}`\n\n    const cachedResponse = this.memoizedResults.get(cacheKey)\n\n    if (cachedResponse) {\n      return cachedResponse\n    }\n\n    try {\n      const response = this.post('getUser', { body: { mobile } })\n\n      this.memoizedResults.set(cacheKey, response)\n\n      return await response\n    } catch (e) {\n      // Don't need to throw errors if unauthorized error is found for no user with this mobile\n      if (e instanceof AuthenticationError) return null\n      else throw e\n    }\n  }\n  async getUserById(id: string): Promise<IUserModelData> {\n    const cacheKey = `${this.baseURL}/getUser:user:${id}`\n\n    const cachedResponse = this.memoizedResults.get(cacheKey)\n\n    if (cachedResponse) {\n      return cachedResponse\n    }\n\n    const response = this.post('getUser', { body: { userId: id } })\n\n    this.memoizedResults.set(cacheKey, response)\n\n    return response\n  }\n\n  async getUserByPractitionerId(id: string): Promise<IUserModelData> {\n    const cacheKey = `${this.baseURL}/getUser:practitioner:${id}`\n\n    const cachedResponse = this.memoizedResults.get(cacheKey)\n\n    if (cachedResponse) {\n      return cachedResponse\n    }\n    const response = this.post('getUser', {\n      body: { practitionerId: id }\n    })\n\n    this.memoizedResults.set(cacheKey, response)\n\n    return response\n  }\n}",
      "startLine": 18,
      "endLine": 102,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/usersAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@22-25",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(options: { contextValue: Context }) {\n    super(options)\n    this.memoizedResults = new Map()\n  }",
      "startLine": 22,
      "endLine": 25,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/usersAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@27-47",
      "type": "method_definition",
      "name": "getUserByEmail",
      "text": "async getUserByEmail(email: string): Promise<IUserModelData | null> {\n    const cacheKey = `${this.baseURL}/getUser:email:${email}`\n\n    const cachedResponse = this.memoizedResults.get(cacheKey)\n\n    if (cachedResponse) {\n      return cachedResponse\n    }\n\n    try {\n      const response = this.post('getUser', { body: { email } })\n\n      this.memoizedResults.set(cacheKey, response)\n\n      return await response\n    } catch (e) {\n      // Don't need to throw errors if unauthorized error is found for no user with this email\n      if (e instanceof AuthenticationError) return null\n      else throw e\n    }\n  }",
      "startLine": 27,
      "endLine": 47,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/usersAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@49-69",
      "type": "method_definition",
      "name": "getUserByMobile",
      "text": "async getUserByMobile(mobile: string): Promise<IUserModelData | null> {\n    const cacheKey = `${this.baseURL}/getUser:mobile:${mobile}`\n\n    const cachedResponse = this.memoizedResults.get(cacheKey)\n\n    if (cachedResponse) {\n      return cachedResponse\n    }\n\n    try {\n      const response = this.post('getUser', { body: { mobile } })\n\n      this.memoizedResults.set(cacheKey, response)\n\n      return await response\n    } catch (e) {\n      // Don't need to throw errors if unauthorized error is found for no user with this mobile\n      if (e instanceof AuthenticationError) return null\n      else throw e\n    }\n  }",
      "startLine": 49,
      "endLine": 69,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/usersAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@70-84",
      "type": "method_definition",
      "name": "getUserById",
      "text": "async getUserById(id: string): Promise<IUserModelData> {\n    const cacheKey = `${this.baseURL}/getUser:user:${id}`\n\n    const cachedResponse = this.memoizedResults.get(cacheKey)\n\n    if (cachedResponse) {\n      return cachedResponse\n    }\n\n    const response = this.post('getUser', { body: { userId: id } })\n\n    this.memoizedResults.set(cacheKey, response)\n\n    return response\n  }",
      "startLine": 70,
      "endLine": 84,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/usersAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@86-101",
      "type": "method_definition",
      "name": "getUserByPractitionerId",
      "text": "async getUserByPractitionerId(id: string): Promise<IUserModelData> {\n    const cacheKey = `${this.baseURL}/getUser:practitioner:${id}`\n\n    const cachedResponse = this.memoizedResults.get(cacheKey)\n\n    if (cachedResponse) {\n      return cachedResponse\n    }\n    const response = this.post('getUser', {\n      body: { practitionerId: id }\n    })\n\n    this.memoizedResults.set(cacheKey, response)\n\n    return response\n  }",
      "startLine": 86,
      "endLine": 101,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/usersAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@22-47",
      "type": "method_definition",
      "name": "isLeafLevelLocation",
      "text": "async isLeafLevelLocation(_, { locationId }) {\n      let children: SavedLocation[]\n      /*\n       * This is because of a tech debt we have that\n       * there is no location resource created for the\n       * country so we have a bunch of places where we\n       * need to manually check if the id equals '0'\n       */\n      if (locationId === '0') {\n        children = await fetchAllLocations()\n      } else {\n        children = await fetchLocationChildren(locationId as UUID)\n      }\n      /*\n       * We want to consider only the admin structure locations\n       * here & not the offices or addresses that might have the\n       * given location as a parent\n       */\n      const administrativeChildLocation = children.filter(\n        (child) =>\n          child.type?.coding?.some(({ code }) => code === 'ADMIN_STRUCTURE') &&\n          child.partOf &&\n          resourceIdentifierToUUID(child.partOf.reference) === locationId\n      )\n      return administrativeChildLocation.length == 0\n    }",
      "startLine": 22,
      "endLine": 47,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/location/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@14-31",
      "type": "class_declaration",
      "name": "RecordsAPI",
      "text": "class RecordsAPI {\n  private cachedRecord: Saved<Bundle> | null = null\n\n  setRecord(record: Saved<Bundle>) {\n    this.cachedRecord = record\n  }\n  getRecord() {\n    if (!this.cachedRecord) {\n      throw new Error(\n        'Context record has not been set. This should never happen.'\n      )\n    }\n    return this.cachedRecord!\n  }\n  fetchRecord() {\n    return this.cachedRecord\n  }\n}",
      "startLine": 14,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/recordsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@17-19",
      "type": "method_definition",
      "name": "setRecord",
      "text": "setRecord(record: Saved<Bundle>) {\n    this.cachedRecord = record\n  }",
      "startLine": 17,
      "endLine": 19,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/recordsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@20-27",
      "type": "method_definition",
      "name": "getRecord",
      "text": "getRecord() {\n    if (!this.cachedRecord) {\n      throw new Error(\n        'Context record has not been set. This should never happen.'\n      )\n    }\n    return this.cachedRecord!\n  }",
      "startLine": 20,
      "endLine": 27,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/recordsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@28-30",
      "type": "method_definition",
      "name": "fetchRecord",
      "text": "fetchRecord() {\n    return this.cachedRecord\n  }",
      "startLine": 28,
      "endLine": 30,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/recordsAPI.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@18-43",
      "type": "class_declaration",
      "name": "DocumentsAPI",
      "text": "class DocumentsAPI extends OpenCRVSRESTDataSource {\n  override baseURL = FHIR_URL\n\n  override willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }\n\n  getDocument(id: string) {\n    return this.get(`DocumentReference/${id}`)\n  }\n  async findBySubject(reference: `${string}/${string}`) {\n    const bundle: Bundle = await this.get(\n      `DocumentReference/?subject=${reference}`\n    )\n    if (!bundle.entry) {\n      return []\n    }\n    return bundle.entry.map(\n      (entry: BundleEntry) => entry.resource as DocumentReference\n    )\n  }\n}",
      "startLine": 18,
      "endLine": 43,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/documentsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@21-27",
      "type": "method_definition",
      "name": "willSendRequest",
      "text": "willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }",
      "startLine": 21,
      "endLine": 27,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/documentsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@29-31",
      "type": "method_definition",
      "name": "getDocument",
      "text": "getDocument(id: string) {\n    return this.get(`DocumentReference/${id}`)\n  }",
      "startLine": 29,
      "endLine": 31,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/documentsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@32-42",
      "type": "method_definition",
      "name": "findBySubject",
      "text": "async findBySubject(reference: `${string}/${string}`) {\n    const bundle: Bundle = await this.get(\n      `DocumentReference/?subject=${reference}`\n    )\n    if (!bundle.entry) {\n      return []\n    }\n    return bundle.entry.map(\n      (entry: BundleEntry) => entry.resource as DocumentReference\n    )\n  }",
      "startLine": 32,
      "endLine": 42,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/documentsAPI.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@20-26",
      "type": "class_declaration",
      "name": "MetricsAPI",
      "text": "class MetricsAPI extends OpenCRVSRESTDataSource {\n  override baseURL = `${METRICS_URL}`\n\n  getTimeLogged(recordId: string) {\n    return this.get(`/timeLogged?compositionId=${recordId}`)\n  }\n}",
      "startLine": 20,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/metricsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@23-25",
      "type": "method_definition",
      "name": "getTimeLogged",
      "text": "getTimeLogged(recordId: string) {\n    return this.get(`/timeLogged?compositionId=${recordId}`)\n  }",
      "startLine": 23,
      "endLine": 25,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/metricsAPI.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@15-21",
      "type": "class_declaration",
      "name": "CountryConfigAPI",
      "text": "class CountryConfigAPI extends OpenCRVSRESTDataSource {\n  override baseURL = COUNTRY_CONFIG_URL\n\n  getRoles(): Promise<Roles> {\n    return this.get(`/roles`)\n  }\n}",
      "startLine": 15,
      "endLine": 21,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/countryConfigAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@18-20",
      "type": "method_definition",
      "name": "getRoles",
      "text": "getRoles(): Promise<Roles> {\n    return this.get(`/roles`)\n  }",
      "startLine": 18,
      "endLine": 20,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/countryConfigAPI.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-36",
      "type": "function_declaration",
      "name": "checkServiceHealth",
      "text": "async function checkServiceHealth(url: string) {\n  const res = await fetch(url, {\n    method: 'GET'\n  })\n\n  const body = await res.json()\n\n  if (body.success === true) {\n    return true\n  }\n\n  return false\n}",
      "startLine": 24,
      "endLine": 36,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/healthCheck/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@59-74",
      "type": "function_declaration",
      "name": "healthCheckHandler",
      "text": "async function healthCheckHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const responses = {} as Record<keyof typeof SERVICES, boolean>\n\n  for (const [key, value] of Object.entries(SERVICES)) {\n    try {\n      const res = await checkServiceHealth(value)\n      responses[key as keyof typeof SERVICES] = res\n    } catch (err) {\n      responses[key as keyof typeof SERVICES] = false\n    }\n  }\n  return responses\n}",
      "startLine": 59,
      "endLine": 74,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/healthCheck/handler.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@16-30",
      "type": "class_declaration",
      "name": "MinioAPI",
      "text": "class MinioAPI extends OpenCRVSRESTDataSource {\n  override baseURL = `${DOCUMENTS_URL}`\n\n  override willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }\n\n  getStaticData(fileUri: string) {\n    return this.get(`/presigned-url${fileUri}`)\n  }\n}",
      "startLine": 16,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/minioAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@19-25",
      "type": "method_definition",
      "name": "willSendRequest",
      "text": "willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }",
      "startLine": 19,
      "endLine": 25,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/minioAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@27-29",
      "type": "method_definition",
      "name": "getStaticData",
      "text": "getStaticData(fileUri: string) {\n    return this.get(`/presigned-url${fileUri}`)\n  }",
      "startLine": 27,
      "endLine": 29,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/minioAPI.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@17-31",
      "type": "class_declaration",
      "name": "PaymentsAPI",
      "text": "class PaymentsAPI extends OpenCRVSRESTDataSource {\n  override baseURL = FHIR_URL\n\n  override willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }\n\n  getPayment(id: string): Promise<PaymentReconciliation> {\n    return this.get(`PaymentReconciliation/${id}`)\n  }\n}",
      "startLine": 17,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/paymentsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@20-26",
      "type": "method_definition",
      "name": "willSendRequest",
      "text": "willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }",
      "startLine": 20,
      "endLine": 26,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/paymentsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@28-30",
      "type": "method_definition",
      "name": "getPayment",
      "text": "getPayment(id: string): Promise<PaymentReconciliation> {\n    return this.get(`PaymentReconciliation/${id}`)\n  }",
      "startLine": 28,
      "endLine": 30,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/paymentsAPI.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-33",
      "type": "function_declaration",
      "name": "getPresignedUrlFromUri",
      "text": "async function getPresignedUrlFromUri(\n  fileUri: string,\n  authHeader: IAuthHeader\n) {\n  const response = (await fetchDocuments(\n    '/presigned-url',\n    authHeader,\n    'POST',\n    JSON.stringify({ fileUri })\n  )) as { presignedURL: string }\n\n  return response.presignedURL\n}",
      "startLine": 21,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/utils.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@26-114",
      "type": "class_declaration",
      "name": "FHIRAPI",
      "text": "class FHIRAPI extends OpenCRVSRESTDataSource {\n  override baseURL = FHIR_URL\n\n  override willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }\n\n  async getPractitioner(practitionerId: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (record) {\n      const inBundle = record.entry\n        .map(({ resource }) => resource)\n        .filter(isPractitioner)\n        .find((resource) => resource.id === practitionerId)\n\n      if (inBundle) {\n        return inBundle\n      }\n    }\n\n    const res = await this.get<Practitioner>(`Practitioner/${practitionerId}`)\n    return res\n  }\n  async getPractitionerRoleByPractitionerId(practitionerId: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (record) {\n      const inBundle = record.entry\n        .map(({ resource }) => resource)\n        .filter(isPractitionerRole)\n        .find(\n          (resource) =>\n            resource.practitioner?.reference ===\n            `Practitioner/${practitionerId}`\n        )\n\n      if (inBundle) {\n        return { entry: [{ resource: inBundle }] }\n      }\n    }\n\n    return this.get(`PractitionerRole?practitioner=${practitionerId}`)\n  }\n\n  async getPractionerRoleHistory(id: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (!record) {\n      throw new Error('No record in context. This should never happen')\n    }\n    return record.entry\n      .map(({ resource }) => resource)\n      .filter(isPractitionerRoleOrPractitionerRoleHistory)\n      .filter((role) => role.id === id)\n  }\n\n  getCompositionHistory(id: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (!record) {\n      throw new Error('No record in context. This should never happen')\n    }\n    return record.entry\n      .map(({ resource }) => resource)\n      .filter((composition) => composition.id === id)\n      .filter(isCompositionOrCompositionHistory)\n      .filter(isSaved)\n      .sort((resourceA, resourceB) => {\n        const dateA = new Date(resourceA.meta?.lastUpdated || '')\n        const dateB = new Date(resourceB.meta?.lastUpdated || '')\n        return dateA.getTime() - dateB.getTime()\n      })\n  }\n  getDocumentReference(id: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (!record) {\n      throw new Error('No record in context. This should never happen')\n    }\n    const reference = record.entry\n      .map(({ resource }) => resource)\n      .filter(isDocumentReference)\n      .find((documentReference) => documentReference.id === id)\n    if (reference) {\n      return reference\n    }\n    return this.get(`DocumentReference/${id}`)\n  }\n}",
      "startLine": 26,
      "endLine": 114,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/FHIRAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@29-35",
      "type": "method_definition",
      "name": "willSendRequest",
      "text": "willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }",
      "startLine": 29,
      "endLine": 35,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/FHIRAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@37-52",
      "type": "method_definition",
      "name": "getPractitioner",
      "text": "async getPractitioner(practitionerId: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (record) {\n      const inBundle = record.entry\n        .map(({ resource }) => resource)\n        .filter(isPractitioner)\n        .find((resource) => resource.id === practitionerId)\n\n      if (inBundle) {\n        return inBundle\n      }\n    }\n\n    const res = await this.get<Practitioner>(`Practitioner/${practitionerId}`)\n    return res\n  }",
      "startLine": 37,
      "endLine": 52,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/FHIRAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@53-71",
      "type": "method_definition",
      "name": "getPractitionerRoleByPractitionerId",
      "text": "async getPractitionerRoleByPractitionerId(practitionerId: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (record) {\n      const inBundle = record.entry\n        .map(({ resource }) => resource)\n        .filter(isPractitionerRole)\n        .find(\n          (resource) =>\n            resource.practitioner?.reference ===\n            `Practitioner/${practitionerId}`\n        )\n\n      if (inBundle) {\n        return { entry: [{ resource: inBundle }] }\n      }\n    }\n\n    return this.get(`PractitionerRole?practitioner=${practitionerId}`)\n  }",
      "startLine": 53,
      "endLine": 71,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/FHIRAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@73-82",
      "type": "method_definition",
      "name": "getPractionerRoleHistory",
      "text": "async getPractionerRoleHistory(id: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (!record) {\n      throw new Error('No record in context. This should never happen')\n    }\n    return record.entry\n      .map(({ resource }) => resource)\n      .filter(isPractitionerRoleOrPractitionerRoleHistory)\n      .filter((role) => role.id === id)\n  }",
      "startLine": 73,
      "endLine": 82,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/FHIRAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@84-99",
      "type": "method_definition",
      "name": "getCompositionHistory",
      "text": "getCompositionHistory(id: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (!record) {\n      throw new Error('No record in context. This should never happen')\n    }\n    return record.entry\n      .map(({ resource }) => resource)\n      .filter((composition) => composition.id === id)\n      .filter(isCompositionOrCompositionHistory)\n      .filter(isSaved)\n      .sort((resourceA, resourceB) => {\n        const dateA = new Date(resourceA.meta?.lastUpdated || '')\n        const dateB = new Date(resourceB.meta?.lastUpdated || '')\n        return dateA.getTime() - dateB.getTime()\n      })\n  }",
      "startLine": 84,
      "endLine": 99,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/FHIRAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@100-113",
      "type": "method_definition",
      "name": "getDocumentReference",
      "text": "getDocumentReference(id: string) {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (!record) {\n      throw new Error('No record in context. This should never happen')\n    }\n    const reference = record.entry\n      .map(({ resource }) => resource)\n      .filter(isDocumentReference)\n      .find((documentReference) => documentReference.id === id)\n    if (reference) {\n      return reference\n    }\n    return this.get(`DocumentReference/${id}`)\n  }",
      "startLine": 100,
      "endLine": 113,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/FHIRAPI.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@22-48",
      "type": "class_declaration",
      "name": "LocationsAPI",
      "text": "class LocationsAPI extends OpenCRVSRESTDataSource {\n  override baseURL = APPLICATION_CONFIG_URL\n\n  override willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }\n\n  async getLocation(id: string): Promise<Saved<Location>> {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (record) {\n      const inBundle = findResourceFromBundleById<Saved<Location>>(record, id)\n      if (inBundle) {\n        return inBundle\n      }\n    }\n\n    return this.get<Saved<Location>>(`locations/${id}`)\n  }\n\n  async getHierarchy(id: UUID): Promise<Array<Saved<Location>>> {\n    return this.get<Array<Saved<Location>>>(`locations/${id}/hierarchy`)\n  }\n}",
      "startLine": 22,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/locationsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@25-31",
      "type": "method_definition",
      "name": "willSendRequest",
      "text": "willSendRequest(\n    _path: string,\n    request: AugmentedRequest\n  ): void | Promise<void> {\n    super.willSendRequest(_path, request)\n    request.headers['Content-Type'] = 'application/fhir+json'\n  }",
      "startLine": 25,
      "endLine": 31,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/locationsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@33-43",
      "type": "method_definition",
      "name": "getLocation",
      "text": "async getLocation(id: string): Promise<Saved<Location>> {\n    const record = this.context.dataSources.recordsAPI.fetchRecord()\n    if (record) {\n      const inBundle = findResourceFromBundleById<Saved<Location>>(record, id)\n      if (inBundle) {\n        return inBundle\n      }\n    }\n\n    return this.get<Saved<Location>>(`locations/${id}`)\n  }",
      "startLine": 33,
      "endLine": 43,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/locationsAPI.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@45-47",
      "type": "method_definition",
      "name": "getHierarchy",
      "text": "async getHierarchy(id: UUID): Promise<Array<Saved<Location>>> {\n    return this.get<Array<Saved<Location>>>(`locations/${id}/hierarchy`)\n  }",
      "startLine": 45,
      "endLine": 47,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/fhir/locationsAPI.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@74-78",
      "type": "function_declaration",
      "name": "getAnonymousToken",
      "text": "async function getAnonymousToken() {\n  const res = await fetch(new URL('/anonymous-token', AUTH_URL).toString())\n  const { token } = await res.json()\n  return token\n}",
      "startLine": 74,
      "endLine": 78,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@119-262",
      "type": "method_definition",
      "name": "if",
      "text": "if (!obj?.type?.text) return 'BirthRegistration'\n      if (obj.type.text == 'Birth Declaration') return 'BirthRegistration'\n      if (obj.type.text == 'Death Declaration') return 'DeathRegistration'\n    }\n  },\n  Query: {\n    async fetchBirthRegistration(_, { id }, context): Promise<Saved<Bundle>> {\n      if (inScope(context.headers, ACTIONABLE_SCOPES)) {\n        const record = await fetchRegistrationForDownloading(\n          id,\n          context.headers\n        )\n        context.dataSources.recordsAPI.setRecord(record)\n        return record\n      } else {\n        throw new Error('User does not have enough scope')\n      }\n    },\n    async fetchDeathRegistration(_, { id }, context): Promise<Saved<Bundle>> {\n      if (inScope(context.headers, ACTIONABLE_SCOPES)) {\n        const record = await fetchRegistrationForDownloading(\n          id,\n          context.headers\n        )\n        context.dataSources.recordsAPI.setRecord(record)\n        return record\n      } else {\n        throw new Error('User does not have enough scope')\n      }\n    },\n    async fetchMarriageRegistration(\n      _,\n      { id },\n      context\n    ): Promise<Saved<Bundle>> {\n      if (inScope(context.headers, ACTIONABLE_SCOPES)) {\n        const record = await fetchRegistrationForDownloading(\n          id,\n          context.headers\n        )\n        context.dataSources.recordsAPI.setRecord(record)\n        return record\n      } else {\n        throw new Error('User does not have enough scope')\n      }\n    },\n    async queryRegistrationByIdentifier(\n      _,\n      { identifier },\n      { headers: authHeader }\n    ): Promise<Saved<Bundle>> {\n      if (\n        hasScope(authHeader, SCOPES.RECORD_REGISTER) ||\n        hasScope(authHeader, SCOPES.RECORD_SUBMIT_FOR_APPROVAL)\n      ) {\n        const taskBundle = await fetchFHIR<Bundle<Task>>(\n          `/Task?identifier=${identifier}`,\n          authHeader\n        )\n\n        if (!taskBundle || !taskBundle.entry || !taskBundle.entry[0]) {\n          throw new Error(`Task does not exist for identifer ${identifier}`)\n        }\n        const task = taskBundle.entry[0].resource\n\n        if (!task.focus || !task.focus.reference) {\n          throw new Error(`Composition reference not found`)\n        }\n\n        return await fetchFHIR(`/${task.focus.reference}`, authHeader)\n      } else {\n        throw new Error('User does not have enough scope')\n      }\n    },\n    async fetchRegistration(_, { id }, context): Promise<Saved<Bundle>> {\n      const record = await getRecordById(id, context.headers.Authorization)\n      context.dataSources.recordsAPI.setRecord(record)\n      return record\n    },\n    async fetchRegistrationForViewing(\n      _,\n      { id },\n      context\n    ): Promise<Saved<Bundle>> {\n      const record = await viewDeclaration(id, context.headers)\n      context.dataSources.recordsAPI.setRecord(record)\n      return record\n    },\n    async queryPersonByIdentifier(_, { identifier }, { headers: authHeader }) {\n      if (\n        hasScope(authHeader, SCOPES.RECORD_REGISTER) ||\n        hasScope(authHeader, SCOPES.RECORD_SUBMIT_FOR_APPROVAL) ||\n        hasScope(authHeader, SCOPES.RECORD_SUBMIT_INCOMPLETE)\n      ) {\n        const personBundle = await fetchFHIR<Bundle<Patient>>(\n          `/Patient?identifier=${identifier}`,\n          authHeader\n        )\n        if (!personBundle || !personBundle.entry || !personBundle.entry[0]) {\n          throw new Error(`Person does not exist for identifer ${identifier}`)\n        }\n        const person = personBundle.entry[0].resource\n\n        return person\n      } else {\n        throw new Error('User does not have enough scope')\n      }\n    },\n    async queryPersonByNidIdentifier(\n      _,\n      { dob, nid, country },\n      { headers: authHeader }\n    ) {\n      if (\n        hasScope(authHeader, SCOPES.RECORD_REGISTER) ||\n        hasScope(authHeader, SCOPES.RECORD_SUBMIT_FOR_APPROVAL) ||\n        hasScope(authHeader, SCOPES.RECORD_DECLARE_BIRTH) ||\n        hasScope(authHeader, SCOPES.RECORD_DECLARE_DEATH) ||\n        hasScope(authHeader, SCOPES.RECORD_DECLARE_MARRIAGE)\n      ) {\n        const response = await fetch(\n          `${COUNTRY_CONFIG_URL}/verify/nid/${country}`,\n          {\n            method: 'POST',\n            body: JSON.stringify({ dob, nid }),\n            headers: {\n              'Content-Type': 'application/json',\n              ...authHeader\n            }\n          }\n        ).then((data) => data.json())\n\n        if (!response.operationResult.success) {\n          throw new Error(response.operationResult.error.errorMessage)\n        } else {\n          return response.data\n        }\n      } else {\n        throw new Error('User does not have enough scope')\n      }\n    },\n    async fetchRegistrationCountByStatus(\n      _,\n      { locationId, status, event }",
      "startLine": 119,
      "endLine": 262,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@126-133",
      "type": "method_definition",
      "name": "if",
      "text": "if (inScope(context.headers, ACTIONABLE_SCOPES)) {\n        const record = await fetchRegistrationForDownloading(\n          id,\n          context.headers\n        )\n        context.dataSources.recordsAPI.setRecord(record)\n        return record\n      }",
      "startLine": 126,
      "endLine": 133,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 43,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@138-145",
      "type": "method_definition",
      "name": "if",
      "text": "if (inScope(context.headers, ACTIONABLE_SCOPES)) {\n        const record = await fetchRegistrationForDownloading(\n          id,\n          context.headers\n        )\n        context.dataSources.recordsAPI.setRecord(record)\n        return record\n      }",
      "startLine": 138,
      "endLine": 145,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 41,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@154-161",
      "type": "method_definition",
      "name": "if",
      "text": "if (inScope(context.headers, ACTIONABLE_SCOPES)) {\n        const record = await fetchRegistrationForDownloading(\n          id,\n          context.headers\n        )\n        context.dataSources.recordsAPI.setRecord(record)\n        return record\n      }",
      "startLine": 154,
      "endLine": 161,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 39,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@170-189",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n        hasScope(authHeader, SCOPES.RECORD_REGISTER) ||\n        hasScope(authHeader, SCOPES.RECORD_SUBMIT_FOR_APPROVAL)\n      ) {\n        const taskBundle = await fetchFHIR<Bundle<Task>>(\n          `/Task?identifier=${identifier}`,\n          authHeader\n        )\n\n        if (!taskBundle || !taskBundle.entry || !taskBundle.entry[0]) {\n          throw new Error(`Task does not exist for identifer ${identifier}`)\n        }\n        const task = taskBundle.entry[0].resource\n\n        if (!task.focus || !task.focus.reference) {\n          throw new Error(`Composition reference not found`)\n        }\n\n        return await fetchFHIR(`/${task.focus.reference}`, authHeader)\n      }",
      "startLine": 170,
      "endLine": 189,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 38,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@324-332",
      "type": "method_definition",
      "name": "createBirthRegistration",
      "text": "async createBirthRegistration(_, { details }, { headers: authHeader }) {\n      try {\n        await validateBirthDeclarationAttachments(details)\n      } catch (error) {\n        throw new UserInputError(error.message)\n      }\n\n      return await createRegistration(details, EVENT_TYPE.BIRTH, authHeader)\n    }",
      "startLine": 324,
      "endLine": 332,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@333-341",
      "type": "method_definition",
      "name": "createDeathRegistration",
      "text": "async createDeathRegistration(_, { details }, { headers: authHeader }) {\n      try {\n        await validateDeathDeclarationAttachments(details)\n      } catch (error) {\n        throw new UserInputError(error.message)\n      }\n\n      return createRegistration(details, EVENT_TYPE.DEATH, authHeader)\n    }",
      "startLine": 333,
      "endLine": 341,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@342-350",
      "type": "method_definition",
      "name": "createMarriageRegistration",
      "text": "async createMarriageRegistration(_, { details }, { headers: authHeader }) {\n      try {\n        await validateMarriageDeclarationAttachments(details)\n      } catch (error) {\n        throw new UserInputError(error.message)\n      }\n\n      return createRegistration(details, EVENT_TYPE.MARRIAGE, authHeader)\n    }",
      "startLine": 342,
      "endLine": 350,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@351-366",
      "type": "method_definition",
      "name": "markBirthAsValidated",
      "text": "async markBirthAsValidated(_, { id, details }, { headers: authHeader }) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (!hasScope(authHeader, SCOPES.RECORD_SUBMIT_FOR_APPROVAL)) {\n        throw new Error('User does not have enough scope')\n      } else {\n        return await markEventAsValidated(\n          id,\n          authHeader,\n          EVENT_TYPE.BIRTH,\n          details\n        )\n      }\n    }",
      "startLine": 351,
      "endLine": 366,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@367-381",
      "type": "method_definition",
      "name": "markDeathAsValidated",
      "text": "async markDeathAsValidated(_, { id, details }, { headers: authHeader }) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (!hasScope(authHeader, SCOPES.RECORD_SUBMIT_FOR_APPROVAL)) {\n        throw new Error('User does not have enough scope')\n      }\n      return await markEventAsValidated(\n        id,\n        authHeader,\n        EVENT_TYPE.DEATH,\n        details\n      )\n    }",
      "startLine": 367,
      "endLine": 381,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@382-397",
      "type": "method_definition",
      "name": "markMarriageAsValidated",
      "text": "async markMarriageAsValidated(_, { id, details }, { headers: authHeader }) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (!hasScope(authHeader, SCOPES.RECORD_SUBMIT_FOR_APPROVAL)) {\n        throw new Error('User does not have enough scope')\n      } else {\n        return await markEventAsValidated(\n          id,\n          authHeader,\n          EVENT_TYPE.MARRIAGE,\n          details\n        )\n      }\n    }",
      "startLine": 382,
      "endLine": 397,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@398-408",
      "type": "method_definition",
      "name": "markBirthAsRegistered",
      "text": "async markBirthAsRegistered(_, { id, details }, { headers: authHeader }) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (hasScope(authHeader, SCOPES.RECORD_REGISTER)) {\n        return markEventAsRegistered(id, authHeader, EVENT_TYPE.BIRTH, details)\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 398,
      "endLine": 408,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@409-419",
      "type": "method_definition",
      "name": "markDeathAsRegistered",
      "text": "async markDeathAsRegistered(_, { id, details }, { headers: authHeader }) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (hasScope(authHeader, SCOPES.RECORD_REGISTER)) {\n        return markEventAsRegistered(id, authHeader, EVENT_TYPE.DEATH, details)\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 409,
      "endLine": 419,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@420-439",
      "type": "method_definition",
      "name": "markMarriageAsRegistered",
      "text": "async markMarriageAsRegistered(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (hasScope(authHeader, SCOPES.RECORD_REGISTER)) {\n        return markEventAsRegistered(\n          id,\n          authHeader,\n          EVENT_TYPE.MARRIAGE,\n          details\n        )\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 420,
      "endLine": 439,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@440-464",
      "type": "method_definition",
      "name": "markEventAsVoided",
      "text": "async markEventAsVoided(\n      _,\n      { id, reason, comment },\n      { headers: authHeader }\n    ) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (\n        !inScope(authHeader, [\n          SCOPES.RECORD_REGISTER,\n          SCOPES.RECORD_SUBMIT_FOR_APPROVAL\n        ])\n      ) {\n        throw new Error('User does not have enough scope')\n      }\n      const taskEntry = await rejectDeclaration(id, authHeader, reason, comment)\n      if (!taskEntry) {\n        throw new Error('Task not found')\n      }\n\n      // return the taskId\n      return taskEntry.resource.id\n    }",
      "startLine": 440,
      "endLine": 464,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@465-491",
      "type": "method_definition",
      "name": "markEventAsArchived",
      "text": "async markEventAsArchived(\n      _,\n      { id, reason, comment, duplicateTrackingId },\n      { headers: authHeader }\n    ) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (\n        !inScope(authHeader, [\n          SCOPES.RECORD_REGISTER,\n          SCOPES.RECORD_SUBMIT_FOR_APPROVAL\n        ])\n      ) {\n        throw new Error('User does not have enough scope')\n      }\n      const taskEntry = await archiveRegistration(\n        id,\n        authHeader,\n        reason,\n        comment,\n        duplicateTrackingId\n      )\n      // return the taskId\n      return taskEntry.resource.id\n    }",
      "startLine": 465,
      "endLine": 491,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@492-515",
      "type": "method_definition",
      "name": "markEventAsReinstated",
      "text": "async markEventAsReinstated(_, { id }, { headers: authHeader }) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (\n        !inScope(authHeader, [\n          SCOPES.RECORD_REGISTER,\n          SCOPES.RECORD_SUBMIT_FOR_APPROVAL\n        ])\n      ) {\n        throw new Error('User does not have enough scope')\n      }\n\n      const { taskId, prevRegStatus } = await reinstateRegistration(\n        id,\n        authHeader\n      )\n\n      return {\n        taskEntryResourceID: taskId,\n        registrationStatus: prevRegStatus\n      }\n    }",
      "startLine": 492,
      "endLine": 515,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@566-581",
      "type": "method_definition",
      "name": "markEventAsNotDuplicate",
      "text": "async markEventAsNotDuplicate(_, { id }, { headers: authHeader }) {\n      const isAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!isAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (\n        hasScope(authHeader, SCOPES.RECORD_REGISTER) ||\n        hasScope(authHeader, SCOPES.RECORD_SUBMIT_FOR_APPROVAL)\n      ) {\n        const composition = await markNotADuplicate(id, authHeader)\n\n        return composition.id\n      } else {\n        throw new Error('User does not have enough scope')\n      }\n    }",
      "startLine": 566,
      "endLine": 581,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@582-607",
      "type": "method_definition",
      "name": "markEventAsUnassigned",
      "text": "async markEventAsUnassigned(_, { id }, { headers: authHeader }) {\n      const assignedUser = await findUserAssignment(id, authHeader)\n      if (!assignedUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      const tokenPayload = getTokenPayload(\n        authHeader.Authorization.split(' ')[1]\n      )\n      const userId = tokenPayload.sub\n      const user = await getUser({ userId }, authHeader)\n      const assignedToSelf = user.practitionerId === assignedUser\n      if (\n        assignedToSelf ||\n        inScope(authHeader, [SCOPES.RECORD_UNASSIGN_OTHERS])\n      ) {\n        const task = getTaskFromSavedBundle(\n          await unassignRegistration(id, authHeader)\n        )\n\n        // return the taskId\n        return task.id\n      }\n      throw new UnassignError(\n        'User has been unassigned or does not have required scope'\n      )\n    }",
      "startLine": 582,
      "endLine": 607,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@608-635",
      "type": "method_definition",
      "name": "markEventAsDuplicate",
      "text": "async markEventAsDuplicate(\n      _,\n      { id, reason, comment, duplicateTrackingId },\n      { headers: authHeader }\n    ) {\n      const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n      if (!hasAssignedToThisUser) {\n        throw new UnassignError('User has been unassigned')\n      }\n      if (\n        !inScope(authHeader, [\n          SCOPES.RECORD_REGISTER,\n          SCOPES.RECORD_SUBMIT_FOR_APPROVAL\n        ])\n      ) {\n        throw new Error('User does not have enough scope')\n      }\n\n      const taskEntry = await duplicateRegistration(\n        id,\n        authHeader,\n        reason,\n        comment,\n        duplicateTrackingId\n      )\n\n      return taskEntry.resource.id\n    }",
      "startLine": 608,
      "endLine": 635,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@636-652",
      "type": "method_definition",
      "name": "confirmRegistration",
      "text": "async confirmRegistration(_, { id, details }, { headers: authHeader }) {\n      if (!inScope(authHeader, [SCOPES.RECORD_CONFIRM_REGISTRATION])) {\n        throw new Error('User does not have a Confirm Registration scope')\n      }\n\n      if (!hasRecordAccess(authHeader, id)) {\n        throw new Error('User does not have access to the record')\n      }\n\n      try {\n        const taskEntry = await confirmRegistration(id, authHeader, details)\n\n        return taskEntry.resource.id\n      } catch (error) {\n        throw new Error(`Failed to confirm registration: ${error.message}`)\n      }\n    }",
      "startLine": 636,
      "endLine": 652,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@653-672",
      "type": "method_definition",
      "name": "rejectRegistration",
      "text": "async rejectRegistration(_, { id, details }, { headers: authHeader }) {\n      if (!inScope(authHeader, [SCOPES.RECORD_REJECT_REGISTRATION])) {\n        throw new Error('User does not have a Reject Registration\" scope')\n      }\n\n      if (!hasRecordAccess(authHeader, id)) {\n        throw new Error('User does not have access to the record')\n      }\n\n      try {\n        const taskEntry = await rejectRegistration(id, authHeader, {\n          comment: details.comment || 'No comment provided',\n          reason: details.reason\n        })\n\n        return taskEntry.resource.id\n      } catch (error) {\n        throw new Error(`Error in rejectRegistration: ${error.message}`)\n      }\n    }",
      "startLine": 653,
      "endLine": 672,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@673-691",
      "type": "method_definition",
      "name": "upsertRegistrationIdentifier",
      "text": "async upsertRegistrationIdentifier(\n      _,\n      { id, identifierType, identifierValue },\n      { headers: authHeader }\n    ) {\n      if (!hasRecordAccess(authHeader, id)) {\n        throw new Error('User does not have access to the record')\n      }\n\n      try {\n        const taskEntry = await upsertRegistrationIdentifier(id, authHeader, {\n          identifiers: [{ type: identifierType, value: identifierValue }]\n        })\n\n        return taskEntry.resource.id\n      } catch (error) {\n        throw new Error(`Failed to confirm registration: ${error.message}`)\n      }\n    }",
      "startLine": 673,
      "endLine": 691,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@692-700",
      "type": "method_definition",
      "name": "updateField",
      "text": "async updateField(_, { id, details }, { headers: authHeader }) {\n      if (!hasRecordAccess(authHeader, id)) {\n        throw new Error('User does not have access to the record')\n      }\n\n      await updateField(id, authHeader, details)\n\n      return true\n    }",
      "startLine": 692,
      "endLine": 700,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@73-101",
      "type": "function_declaration",
      "name": "sendEmailToAllUsers",
      "text": "async function sendEmailToAllUsers(\n  subject: string,\n  body: string,\n  locale: string,\n  authHeader: IAuthHeader\n) {\n  const users = await fetchAllUsers(authHeader)\n  const requestId = uuid()\n  let i = 0\n  do {\n    const emails = users.results\n      .slice(i, i + DEFAULT_PAGE_SIZE)\n      .map((user) => user.emailForNotification)\n      .filter((email): email is string => email != undefined)\n    await requestNotificationServiceToSendEmails(\n      subject,\n      body,\n      emails,\n      locale,\n      requestId,\n      authHeader\n    )\n    i += DEFAULT_PAGE_SIZE\n  } while (users.total && i < users.total)\n\n  return {\n    success: true\n  }\n}",
      "startLine": 73,
      "endLine": 101,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/notification/service.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@19-38",
      "type": "method_definition",
      "name": "reactivateSystem",
      "text": "async reactivateSystem(_, { clientId }, { headers: authHeader }) {\n      if (!hasScope(authHeader, SCOPES.CONFIG_UPDATE_ALL)) {\n        throw new Error('Activate user is only allowed for this user')\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}reactivateSystem`, {\n        method: 'POST',\n        body: JSON.stringify({ clientId }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        throw new Error(\n          `Something went wrong on user management service. Couldn't activate system`\n        )\n      }\n      return res.json()\n    }",
      "startLine": 19,
      "endLine": 38,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/systems/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@39-60",
      "type": "method_definition",
      "name": "deactivateSystem",
      "text": "async deactivateSystem(_, { clientId }, { headers: authHeader }) {\n      if (!hasScope(authHeader, SCOPES.CONFIG_UPDATE_ALL)) {\n        throw new Error('Deactivate user is not allowed for this user')\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}deactivateSystem`, {\n        method: 'POST',\n        body: JSON.stringify({ clientId }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 200) {\n        return Promise.reject(\n          new Error(\n            `Something went wrong on user management service. Couldn't deactivate system`\n          )\n        )\n      }\n      return res.json()\n    }",
      "startLine": 39,
      "endLine": 60,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/systems/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@61-81",
      "type": "method_definition",
      "name": "registerSystem",
      "text": "async registerSystem(_, { system }, { headers: authHeader }) {\n      if (!hasScope(authHeader, SCOPES.CONFIG_UPDATE_ALL)) {\n        return Promise.reject(new Error('User is not allowed to create client'))\n      }\n\n      const res = await fetch(`${USER_MANAGEMENT_URL}registerSystem`, {\n        method: 'POST',\n        body: JSON.stringify(system),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      if (res.status !== 201) {\n        throw new Error(\n          `Something went wrong on user management service. Couldn't register new system`\n        )\n      }\n      return res.json()\n    }",
      "startLine": 61,
      "endLine": 81,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/systems/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@82-99",
      "type": "method_definition",
      "name": "refreshSystemSecret",
      "text": "async refreshSystemSecret(_, { clientId }, { headers: authHeader }) {\n      if (!hasScope(authHeader, SCOPES.CONFIG_UPDATE_ALL)) {\n        throw new Error('Only system user can update refresh client secret')\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}refreshSystemSecret`, {\n        method: 'POST',\n        body: JSON.stringify({ clientId: clientId }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n      if (res.status !== 200) {\n        throw new Error(`No user details found by given clientId`)\n      }\n\n      return res.json()\n    }",
      "startLine": 82,
      "endLine": 99,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/systems/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@100-117",
      "type": "method_definition",
      "name": "updatePermissions",
      "text": "async updatePermissions(_, { setting }, { headers: authHeader }) {\n      if (!hasScope(authHeader, SCOPES.CONFIG_UPDATE_ALL)) {\n        throw new Error('Only system user can update refresh client secret')\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}updatePermissions`, {\n        method: 'POST',\n        body: JSON.stringify(setting),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n      if (res.status !== 200) {\n        throw new Error(`Something went wrong`)\n      }\n\n      return res.json()\n    }",
      "startLine": 100,
      "endLine": 117,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/systems/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@118-144",
      "type": "method_definition",
      "name": "deleteSystem",
      "text": "async deleteSystem(_, { clientId }, { headers: authHeader }) {\n      if (!hasScope(authHeader, SCOPES.CONFIG_UPDATE_ALL)) {\n        throw new Error('Only system user can delete the system')\n      }\n      const res = await fetch(`${USER_MANAGEMENT_URL}deleteSystem`, {\n        method: 'POST',\n        body: JSON.stringify({ clientId: clientId }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n      if (res.status !== 200) {\n        throw new Error(`No System found by given clientId`)\n      }\n\n      await fetch(`${WEBHOOKS_URL}deleteWebhooksByClientId`, {\n        method: 'POST',\n        body: JSON.stringify({ clientId: clientId }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeader\n        }\n      })\n\n      return res.json()\n    }",
      "startLine": 118,
      "endLine": 144,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/systems/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@148-154",
      "type": "method_definition",
      "name": "fetchSystem",
      "text": "async fetchSystem(_, { clientId }, { headers: authHeader }) {\n      if (authHeader && !hasScope(authHeader, SCOPES.CONFIG_UPDATE_ALL)) {\n        throw new Error('Fetch integration is not allowed for this user')\n      }\n\n      return getSystem({ clientId }, authHeader)\n    }",
      "startLine": 148,
      "endLine": 154,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/systems/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@20-35",
      "type": "method_definition",
      "name": "sendNotificationToAllUsers",
      "text": "async sendNotificationToAllUsers(\n      _: any,\n      { subject, body, type, locale },\n      { headers: authHeader }\n    ) {\n      if (!inScope(authHeader, [SCOPES.CONFIG_UPDATE_ALL])) {\n        throw unauthorized(\n          'Sending mass notification is only allowed for national system admin'\n        )\n      }\n      if (type === GQLNotificationType.EMAIL) {\n        return sendEmailToAllUsers(subject, body, locale, authHeader)\n      } else {\n        throw new Error('Unsupported notification type')\n      }\n    }",
      "startLine": 20,
      "endLine": 35,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/notification/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@81-100",
      "type": "function_declaration",
      "name": "hasBirthDuplicates",
      "text": "async function hasBirthDuplicates(\n  authHeader: IAuthHeader,\n  bundle: GQLBirthRegistrationInput\n) {\n  if (!bundle || !bundle.child) {\n    return false\n  }\n\n  const res = await findBirthDuplicates(authHeader, {\n    motherIdentifier: bundle.mother?.identifier?.[0]?.id,\n    childFirstNames: bundle.child.name?.[0]?.firstNames,\n    childFamilyName: bundle.child.name?.[0]?.familyName,\n    childDoB: bundle.child.birthDate,\n    motherFirstNames: bundle.mother?.name?.[0]?.firstNames,\n    motherFamilyName: bundle.mother?.name?.[0]?.familyName,\n    motherDoB: bundle.mother?.birthDate\n  })\n\n  return !res || res.length > 0\n}",
      "startLine": 81,
      "endLine": 100,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@102-119",
      "type": "function_declaration",
      "name": "hasDeathDuplicates",
      "text": "async function hasDeathDuplicates(\n  authHeader: IAuthHeader,\n  bundle: GQLDeathRegistrationInput\n) {\n  if (!bundle || !bundle.deceased) {\n    return false\n  }\n\n  const res = await findDeathDuplicates(authHeader, {\n    deceasedFirstNames: bundle.deceased?.name?.[0]?.firstNames,\n    deceasedFamilyName: bundle.deceased?.name?.[0]?.familyName,\n    deceasedIdentifier: bundle.deceased?.identifier?.[0]?.id,\n    deceasedDoB: bundle.deceased?.birthDate,\n    deathDate: bundle.deceased?.deceased?.deathDate\n  })\n\n  return !res || res.length > 0\n}",
      "startLine": 102,
      "endLine": 119,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/service.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@23-34",
      "type": "class_declaration",
      "name": "RateLimitError",
      "text": "class RateLimitError extends GraphQLError {\n  constructor(message = 'You are being rate limited') {\n    super(message, {\n      extensions: {\n        code: 'RATE_LIMIT_EXCEEDED',\n        http: {\n          status: 429\n        }\n      }\n    })\n  }\n}",
      "startLine": 23,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/rate-limit.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@24-33",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(message = 'You are being rate limited') {\n    super(message, {\n      extensions: {\n        code: 'RATE_LIMIT_EXCEEDED',\n        http: {\n          status: 429\n        }\n      }\n    })\n  }",
      "startLine": 24,
      "endLine": 33,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/rate-limit.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@157-159",
      "type": "method_definition",
      "name": "id",
      "text": "id(userModel: IUserModelData) {\n      return userModel._id\n    }",
      "startLine": 157,
      "endLine": 159,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@168-170",
      "type": "method_definition",
      "name": "userMgntUserID",
      "text": "userMgntUserID(userModel: IUserModelData) {\n      return userModel._id\n    }",
      "startLine": 168,
      "endLine": 170,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@171-180",
      "type": "method_definition",
      "name": "underInvestigation",
      "text": "underInvestigation(userModel: IUserModelData) {\n      return (\n        userModel &&\n        userModel.status &&\n        userModel.status === 'deactivated' &&\n        userModel.auditHistory &&\n        userModel.auditHistory[userModel.auditHistory.length - 1].reason ===\n          'SUSPICIOUS'\n      )\n    }",
      "startLine": 171,
      "endLine": 180,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@181-183",
      "type": "method_definition",
      "name": "email",
      "text": "email(userModel: IUserModelData) {\n      return userModel.emailForNotification\n    }",
      "startLine": 181,
      "endLine": 183,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@184-186",
      "type": "method_definition",
      "name": "primaryOffice",
      "text": "async primaryOffice(userModel: IUserModelData, _, { dataSources }) {\n      return dataSources.locationsAPI.getLocation(userModel.primaryOfficeId)\n    }",
      "startLine": 184,
      "endLine": 186,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@187-240",
      "type": "method_definition",
      "name": "localRegistrar",
      "text": "async localRegistrar(\n      userModel: IUserModelData,\n      _,\n      { headers: authHeader, dataSources }\n    ) {\n      const tokenPayload = getTokenPayload(authHeader.Authorization)\n      const scope = tokenPayload.scope\n\n      if (!scope) {\n        return null\n      }\n\n      const { practitionerId, practitionerRole } = !scope.includes(\n        SCOPES.RECORD_REGISTER\n      )\n        ? await getPractitionerByOfficeId(userModel.primaryOfficeId, authHeader)\n        : {\n            practitionerId: `Practitioner/${\n              userModel.practitionerId as UUID\n            }` as const,\n            practitionerRole: userModel.role\n          }\n\n      if (!practitionerId) {\n        return\n      }\n\n      const practitioner = await dataSources.fhirAPI.getPractitioner(\n        resourceIdentifierToUUID(practitionerId)\n      )\n\n      if (!practitioner) {\n        return\n      }\n\n      const signatureExtension = getSignatureExtension(practitioner.extension)\n\n      const presignedUrl = !scopesInclude(\n        userModel.scope,\n        SCOPES.RECORD_SUBMIT_INCOMPLETE\n      )\n        ? signatureExtension &&\n          (await getPresignedUrlFromUri(\n            signatureExtension.valueAttachment.url,\n            authHeader\n          ))\n        : null\n\n      return {\n        role: practitionerRole,\n        name: practitioner.name,\n        signature: presignedUrl\n      }\n    }",
      "startLine": 187,
      "endLine": 240,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@241-265",
      "type": "method_definition",
      "name": "signature",
      "text": "async signature(\n      userModel: IUserModelData,\n      _,\n      { headers: authHeader, dataSources }\n    ) {\n      const practitioner = await dataSources.fhirAPI.getPractitioner(\n        userModel.practitionerId\n      )\n\n      const signatureExtension = getSignatureExtension(practitioner.extension)\n\n      const presignedUrl =\n        signatureExtension &&\n        (await getPresignedUrlFromUri(\n          signatureExtension.valueAttachment.url,\n          authHeader\n        ))\n\n      if (!presignedUrl) return null\n\n      return {\n        type: signatureExtension.valueAttachment.contentType,\n        data: presignedUrl\n      }\n    }",
      "startLine": 241,
      "endLine": 265,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@269-277",
      "type": "method_definition",
      "name": "data",
      "text": "async data(avatar: IAvatar, _, { dataSources }) {\n      if (avatar.data) {\n        const { presignedURL } = await dataSources.minioAPI.getStaticData(\n          avatar.data\n        )\n        return presignedURL\n      }\n      return null\n    }",
      "startLine": 269,
      "endLine": 277,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/user/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@77-218",
      "type": "method_definition",
      "name": "searchEvents",
      "text": "async searchEvents(\n      _,\n      {\n        userId,\n        advancedSearchParameters,\n        count,\n        skip,\n        sortColumn,\n        sort = 'desc',\n        sortBy\n      },\n      { headers: authHeader, dataSources }\n    ) {\n      if (\n        !inScope(authHeader, [\n          SCOPES.SEARCH_BIRTH,\n          SCOPES.SEARCH_DEATH,\n          SCOPES.SEARCH_MARRIAGE,\n          SCOPES.SEARCH_BIRTH_MY_JURISDICTION,\n          SCOPES.SEARCH_DEATH_MY_JURISDICTION,\n          SCOPES.SEARCH_MARRIAGE_MY_JURISDICTION,\n          SCOPES.RECORDSEARCH\n        ])\n      )\n        return {\n          totalItems: 0,\n          results: []\n        }\n\n      // TODO: refactor this concept to avoid calling the dataSource.usersAPI\n      const userIdentifier = getTokenPayload(authHeader.Authorization).sub\n      let user\n      let system\n\n      const isExternalAPI = hasScope(authHeader, SCOPES.RECORDSEARCH)\n\n      if (isExternalAPI) {\n        system = await getSystem({ systemId: userIdentifier }, authHeader)\n      } else {\n        user = await dataSources.usersAPI.getUserById(userIdentifier!)\n      }\n\n      const office = user\n        ? await dataSources.locationsAPI.getLocation(user.primaryOfficeId)\n        : undefined\n      const officeLocationId = office\n        ? office.partOf?.reference &&\n          resourceIdentifierToUUID(office.partOf.reference)\n        : undefined\n\n      if (user && !officeLocationId) {\n        throw new Error('User office not found')\n      }\n\n      const transformedSearchParams = transformSearchParams(\n        getTokenPayload(authHeader.Authorization).scope,\n        advancedSearchParameters,\n        officeLocationId ?? ''\n      )\n\n      const searchCriteria: ISearchCriteria = {\n        sort,\n        parameters: transformedSearchParams\n      }\n\n      if (count) {\n        searchCriteria.size = count\n      }\n      if (skip) {\n        searchCriteria.from = skip\n      }\n      if (userId) {\n        searchCriteria.createdBy = userId\n      }\n      if (sortColumn) {\n        searchCriteria.sortColumn = sortColumn\n      }\n      if (sortBy) {\n        searchCriteria.sortBy = sortBy.map((sort) => ({\n          [sort.column]: sort.order\n        }))\n      }\n\n      if (isExternalAPI && system) {\n        const getTotalRequest = await getMetrics(\n          '/advancedSearch',\n          {},\n          authHeader\n        )\n        if (getTotalRequest.total >= system.settings.dailyQuota) {\n          throw new RateLimitError('Daily search quota exceeded')\n        }\n\n        const searchResult: ApiResponse<ISearchResponse<any>> =\n          await postAdvancedSearch(authHeader, searchCriteria)\n\n        if ((searchResult?.statusCode ?? 0) >= 400) {\n          const errMsg = searchResult as Options<string>\n          throw new Error(errMsg.message)\n        }\n\n        await Promise.all(\n          (searchResult.body.hits.hits || []).map((hit) =>\n            retrieveRecord(hit._id, authHeader)\n          )\n        )\n\n        if (searchResult.body.hits.total.value) {\n          await postMetrics('/advancedSearch', {}, authHeader)\n        }\n\n        return {\n          totalItems:\n            (searchResult &&\n              searchResult.body.hits &&\n              searchResult.body.hits.total.value) ||\n            0,\n          results:\n            (searchResult &&\n              searchResult.body.hits &&\n              searchResult.body.hits.hits) ||\n            []\n        }\n      } else {\n        const hasAtLeastOneParam = Object.values(advancedSearchParameters).some(\n          (param) => Boolean(param)\n        )\n\n        if (!hasAtLeastOneParam) {\n          throw new Error('There is no param to search ')\n        }\n\n        searchCriteria.parameters = { ...transformedSearchParams }\n\n        const searchResult: ApiResponse<ISearchResponse<any>> =\n          await postAdvancedSearch(authHeader, searchCriteria)\n        return {\n          totalItems: searchResult?.body?.hits?.total?.value ?? 0,\n          results: searchResult?.body?.hits?.hits ?? []\n        }\n      }\n    }",
      "startLine": 77,
      "endLine": 218,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@219-257",
      "type": "method_definition",
      "name": "getEventsWithProgress",
      "text": "async getEventsWithProgress(\n      _,\n      {\n        declarationJurisdictionId,\n        registrationStatuses,\n        compositionType,\n        count,\n        skip,\n        sort = 'desc'\n      },\n      { headers: authHeader }\n    ) {\n      if (!inScope(authHeader, [SCOPES.PERFORMANCE_READ])) {\n        throw new Error('User does not have enough scope')\n      }\n\n      const searchCriteria: ISearchCriteria = {\n        sort,\n        parameters: {\n          declarationJurisdictionId: declarationJurisdictionId,\n          registrationStatuses: registrationStatuses,\n          compositionType: compositionType\n        }\n      }\n\n      if (count) {\n        searchCriteria.size = count\n      }\n      if (skip) {\n        searchCriteria.from = skip\n      }\n\n      const searchResult: ApiResponse<ISearchResponse<any>> =\n        await postAdvancedSearch(authHeader, searchCriteria)\n      return {\n        totalItems: searchResult?.body?.hits?.total?.value || 0,\n        results: searchResult?.body?.hits?.hits || []\n      }\n    }",
      "startLine": 219,
      "endLine": 257,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@38-56",
      "type": "method_definition",
      "name": "requestRegistrationCorrection",
      "text": "async requestRegistrationCorrection(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      if (\n        inScope(authHeader, [SCOPES.RECORD_REGISTRATION_REQUEST_CORRECTION])\n      ) {\n        const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n        if (!hasAssignedToThisUser) {\n          throw new UnassignError('User has been unassigned')\n        }\n\n        await requestRegistrationCorrection(id, details, authHeader)\n        return id\n      } else {\n        throw new Error('User does not have a register or validate scope')\n      }\n    }",
      "startLine": 38,
      "endLine": 56,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@57-72",
      "type": "method_definition",
      "name": "rejectRegistrationCorrection",
      "text": "async rejectRegistrationCorrection(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      if (inScope(authHeader, [SCOPES.RECORD_REGISTRATION_CORRECT])) {\n        const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n        if (!hasAssignedToThisUser) {\n          throw new UnassignError('User has been unassigned')\n        }\n        await rejectRegistrationCorrection(id, details, authHeader)\n        return id\n      } else {\n        throw new Error('User does not have a register or validate scope')\n      }\n    }",
      "startLine": 57,
      "endLine": 72,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@73-92",
      "type": "method_definition",
      "name": "approveBirthRegistrationCorrection",
      "text": "async approveBirthRegistrationCorrection(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      if (inScope(authHeader, [SCOPES.RECORD_REGISTRATION_CORRECT])) {\n        const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n        if (!hasAssignedToThisUser) {\n          throw new UnassignError('User has been unassigned')\n        }\n        try {\n          await validateBirthDeclarationAttachments(details)\n        } catch (error) {\n          throw new UserInputError(error.message)\n        }\n        return approveEventRegistrationCorrection(id, authHeader, details)\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 73,
      "endLine": 92,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@93-112",
      "type": "method_definition",
      "name": "approveDeathRegistrationCorrection",
      "text": "async approveDeathRegistrationCorrection(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      if (inScope(authHeader, [SCOPES.RECORD_REGISTRATION_CORRECT])) {\n        const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n        if (!hasAssignedToThisUser) {\n          throw new UnassignError('User has been unassigned')\n        }\n        try {\n          await validateDeathDeclarationAttachments(details)\n        } catch (error) {\n          throw new UserInputError(error.message)\n        }\n        return await approveEventRegistrationCorrection(id, authHeader, details)\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 93,
      "endLine": 112,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@113-132",
      "type": "method_definition",
      "name": "approveMarriageRegistrationCorrection",
      "text": "async approveMarriageRegistrationCorrection(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      if (inScope(authHeader, [SCOPES.RECORD_REGISTRATION_CORRECT])) {\n        const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n        if (!hasAssignedToThisUser) {\n          throw new UnassignError('User has been unassigned')\n        }\n        try {\n          await validateMarriageDeclarationAttachments(details)\n        } catch (error) {\n          throw new UserInputError(error.message)\n        }\n        return await approveEventRegistrationCorrection(id, authHeader, details)\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 113,
      "endLine": 132,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@133-152",
      "type": "method_definition",
      "name": "createBirthRegistrationCorrection",
      "text": "async createBirthRegistrationCorrection(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      if (inScope(authHeader, [SCOPES.RECORD_REGISTRATION_CORRECT])) {\n        const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n        if (!hasAssignedToThisUser) {\n          throw new UnassignError('User has been unassigned')\n        }\n        try {\n          await validateBirthDeclarationAttachments(details)\n        } catch (error) {\n          throw new UserInputError(error.message)\n        }\n        return createEventRegistrationCorrection(id, authHeader, details)\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 133,
      "endLine": 152,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@153-172",
      "type": "method_definition",
      "name": "createDeathRegistrationCorrection",
      "text": "async createDeathRegistrationCorrection(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      if (inScope(authHeader, [SCOPES.RECORD_REGISTRATION_CORRECT])) {\n        const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n        if (!hasAssignedToThisUser) {\n          throw new UnassignError('User has been unassigned')\n        }\n        try {\n          await validateDeathDeclarationAttachments(details)\n        } catch (error) {\n          throw new UserInputError(error.message)\n        }\n        return await createEventRegistrationCorrection(id, authHeader, details)\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 153,
      "endLine": 172,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@173-192",
      "type": "method_definition",
      "name": "createMarriageRegistrationCorrection",
      "text": "async createMarriageRegistrationCorrection(\n      _,\n      { id, details },\n      { headers: authHeader }\n    ) {\n      if (inScope(authHeader, [SCOPES.RECORD_REGISTRATION_CORRECT])) {\n        const hasAssignedToThisUser = await checkUserAssignment(id, authHeader)\n        if (!hasAssignedToThisUser) {\n          throw new UnassignError('User has been unassigned')\n        }\n        try {\n          await validateMarriageDeclarationAttachments(details)\n        } catch (error) {\n          throw new UserInputError(error.message)\n        }\n        return await createEventRegistrationCorrection(id, authHeader, details)\n      } else {\n        throw new Error('User does not have a register scope')\n      }\n    }",
      "startLine": 173,
      "endLine": 192,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@196-207",
      "type": "function_declaration",
      "name": "createEventRegistrationCorrection",
      "text": "async function createEventRegistrationCorrection(\n  id: string,\n  authHeader: IAuthHeader,\n  input:\n    | GQLBirthRegistrationInput\n    | GQLDeathRegistrationInput\n    | GQLMarriageRegistrationInput\n) {\n  await makeRegistrationCorrection(id, input, authHeader)\n\n  return id\n}",
      "startLine": 196,
      "endLine": 207,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@209-219",
      "type": "function_declaration",
      "name": "approveEventRegistrationCorrection",
      "text": "async function approveEventRegistrationCorrection(\n  id: string,\n  authHeader: IAuthHeader,\n  input:\n    | GQLBirthRegistrationInput\n    | GQLDeathRegistrationInput\n    | GQLMarriageRegistrationInput\n) {\n  await approveRegistrationCorrection(id, input, authHeader)\n  return id\n}",
      "startLine": 209,
      "endLine": 219,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/correction/root-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@120-151",
      "type": "function_declaration",
      "name": "handleRequest",
      "text": "async function handleRequest(event, requestId) {\n  const client = await resolveMainClient(event)\n  const response = await getResponse(event, client, requestId)\n\n  // Send back the response clone for the \"response:*\" life-cycle events.\n  // Ensure MSW is active and ready to handle the message, otherwise\n  // this message will pend indefinitely.\n  if (client && activeClientIds.has(client.id)) {\n    ;(async function () {\n      const responseClone = response.clone()\n\n      sendToClient(\n        client,\n        {\n          type: 'RESPONSE',\n          payload: {\n            requestId,\n            isMockedResponse: IS_MOCKED_RESPONSE in response,\n            type: responseClone.type,\n            status: responseClone.status,\n            statusText: responseClone.statusText,\n            body: responseClone.body,\n            headers: Object.fromEntries(responseClone.headers.entries())\n          }\n        },\n        [responseClone.body]\n      )\n    })()\n  }\n\n  return response\n}",
      "startLine": 120,
      "endLine": 151,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/public/mockServiceWorker.js",
      "language": "js"
    },
    {
      "id": "function_declaration@157-182",
      "type": "function_declaration",
      "name": "resolveMainClient",
      "text": "async function resolveMainClient(event) {\n  const client = await self.clients.get(event.clientId)\n\n  if (activeClientIds.has(event.clientId)) {\n    return client\n  }\n\n  if (client?.frameType === 'top-level') {\n    return client\n  }\n\n  const allClients = await self.clients.matchAll({\n    type: 'window'\n  })\n\n  return allClients\n    .filter((client) => {\n      // Get only those clients that are currently visible.\n      return client.visibilityState === 'visible'\n    })\n    .find((client) => {\n      // Find the client ID that's recorded in the\n      // set of clients that have registered the worker.\n      return activeClientIds.has(client.id)\n    })\n}",
      "startLine": 157,
      "endLine": 182,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/public/mockServiceWorker.js",
      "language": "js"
    },
    {
      "id": "function_declaration@184-266",
      "type": "function_declaration",
      "name": "getResponse",
      "text": "async function getResponse(event, client, requestId) {\n  const { request } = event\n\n  // Clone the request because it might've been already used\n  // (i.e. its body has been read and sent to the client).\n  const requestClone = request.clone()\n\n  function passthrough() {\n    // Cast the request headers to a new Headers instance\n    // so the headers can be manipulated with.\n    const headers = new Headers(requestClone.headers)\n\n    // Remove the \"accept\" header value that marked this request as passthrough.\n    // This prevents request alteration and also keeps it compliant with the\n    // user-defined CORS policies.\n    const acceptHeader = headers.get('accept')\n    if (acceptHeader) {\n      const values = acceptHeader.split(',').map((value) => value.trim())\n      const filteredValues = values.filter(\n        (value) => value !== 'msw/passthrough'\n      )\n\n      if (filteredValues.length > 0) {\n        headers.set('accept', filteredValues.join(', '))\n      } else {\n        headers.delete('accept')\n      }\n    }\n\n    return fetch(requestClone, { headers })\n  }\n\n  // Bypass mocking when the client is not active.\n  if (!client) {\n    return passthrough()\n  }\n\n  // Bypass initial page load requests (i.e. static assets).\n  // The absence of the immediate/parent client in the map of the active clients\n  // means that MSW hasn't dispatched the \"MOCK_ACTIVATE\" event yet\n  // and is not ready to handle requests.\n  if (!activeClientIds.has(client.id)) {\n    return passthrough()\n  }\n\n  // Notify the client that a request has been intercepted.\n  const requestBuffer = await request.arrayBuffer()\n  const clientMessage = await sendToClient(\n    client,\n    {\n      type: 'REQUEST',\n      payload: {\n        id: requestId,\n        url: request.url,\n        mode: request.mode,\n        method: request.method,\n        headers: Object.fromEntries(request.headers.entries()),\n        cache: request.cache,\n        credentials: request.credentials,\n        destination: request.destination,\n        integrity: request.integrity,\n        redirect: request.redirect,\n        referrer: request.referrer,\n        referrerPolicy: request.referrerPolicy,\n        body: requestBuffer,\n        keepalive: request.keepalive\n      }\n    },\n    [requestBuffer]\n  )\n\n  switch (clientMessage.type) {\n    case 'MOCK_RESPONSE': {\n      return respondWithMock(clientMessage.data)\n    }\n\n    case 'PASSTHROUGH': {\n      return passthrough()\n    }\n  }\n\n  return passthrough()\n}",
      "startLine": 184,
      "endLine": 266,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/public/mockServiceWorker.js",
      "language": "js"
    },
    {
      "id": "function_declaration@191-214",
      "type": "function_declaration",
      "name": "passthrough",
      "text": "function passthrough() {\n    // Cast the request headers to a new Headers instance\n    // so the headers can be manipulated with.\n    const headers = new Headers(requestClone.headers)\n\n    // Remove the \"accept\" header value that marked this request as passthrough.\n    // This prevents request alteration and also keeps it compliant with the\n    // user-defined CORS policies.\n    const acceptHeader = headers.get('accept')\n    if (acceptHeader) {\n      const values = acceptHeader.split(',').map((value) => value.trim())\n      const filteredValues = values.filter(\n        (value) => value !== 'msw/passthrough'\n      )\n\n      if (filteredValues.length > 0) {\n        headers.set('accept', filteredValues.join(', '))\n      } else {\n        headers.delete('accept')\n      }\n    }\n\n    return fetch(requestClone, { headers })\n  }",
      "startLine": 191,
      "endLine": 214,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/public/mockServiceWorker.js",
      "language": "js"
    },
    {
      "id": "function_declaration@268-285",
      "type": "function_declaration",
      "name": "sendToClient",
      "text": "function sendToClient(client, message, transferrables = []) {\n  return new Promise((resolve, reject) => {\n    const channel = new MessageChannel()\n\n    channel.port1.onmessage = (event) => {\n      if (event.data && event.data.error) {\n        return reject(event.data.error)\n      }\n\n      resolve(event.data)\n    }\n\n    client.postMessage(\n      message,\n      [channel.port2].concat(transferrables.filter(Boolean))\n    )\n  })\n}",
      "startLine": 268,
      "endLine": 285,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/public/mockServiceWorker.js",
      "language": "js"
    },
    {
      "id": "function_declaration@287-304",
      "type": "function_declaration",
      "name": "respondWithMock",
      "text": "async function respondWithMock(response) {\n  // Setting response status code to 0 is a no-op.\n  // However, when responding with a \"Response.error()\", the produced Response\n  // instance will have status code set to 0. Since it's not possible to create\n  // a Response instance with status code 0, handle that use-case separately.\n  if (response.status === 0) {\n    return Response.error()\n  }\n\n  const mockedResponse = new Response(response.body, response)\n\n  Reflect.defineProperty(mockedResponse, IS_MOCKED_RESPONSE, {\n    value: true,\n    enumerable: true\n  })\n\n  return mockedResponse\n}",
      "startLine": 287,
      "endLine": 304,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/public/mockServiceWorker.js",
      "language": "js"
    },
    {
      "id": "method_definition@194-205",
      "type": "method_definition",
      "name": "__resolveType",
      "text": "__resolveType(obj: ISearchEventDataTemplate) {\n      if (obj._source.event === EVENT.BIRTH) {\n        return 'BirthEventSearchSet'\n      }\n      if (obj._source.event === EVENT.DEATH) {\n        return 'DeathEventSearchSet'\n      }\n      if (obj._source.event === EVENT.MARRIAGE) {\n        return 'MarriageEventSearchSet'\n      }\n      return null as never\n    }",
      "startLine": 194,
      "endLine": 205,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@208-210",
      "type": "method_definition",
      "name": "id",
      "text": "id(resultSet: ISearchEventDataTemplate) {\n      return resultSet._id\n    }",
      "startLine": 208,
      "endLine": 210,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@211-213",
      "type": "method_definition",
      "name": "type",
      "text": "type(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source.event\n    }",
      "startLine": 211,
      "endLine": 213,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@214-216",
      "type": "method_definition",
      "name": "registration",
      "text": "registration(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source\n    }",
      "startLine": 214,
      "endLine": 216,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@217-219",
      "type": "method_definition",
      "name": "operationHistories",
      "text": "operationHistories(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source.operationHistories\n    }",
      "startLine": 217,
      "endLine": 219,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@220-222",
      "type": "method_definition",
      "name": "childName",
      "text": "childName(resultSet: ISearchEventDataTemplate) {\n      return getChildName(resultSet._source)\n    }",
      "startLine": 220,
      "endLine": 222,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@223-225",
      "type": "method_definition",
      "name": "dateOfBirth",
      "text": "dateOfBirth(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.childDoB) || null\n    }",
      "startLine": 223,
      "endLine": 225,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@226-235",
      "type": "method_definition",
      "name": "placeOfBirth",
      "text": "placeOfBirth(resultSet: ISearchEventDataTemplate) {\n      return (\n        (resultSet._source && resultSet._source.eventLocationId) ||\n        (resultSet._source &&\n          resultSet._source.eventJurisdictionIds[\n            resultSet._source.eventJurisdictionIds.length - 1\n          ]) ||\n        null\n      )\n    }",
      "startLine": 226,
      "endLine": 235,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@236-238",
      "type": "method_definition",
      "name": "childGender",
      "text": "childGender(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.gender) || null\n    }",
      "startLine": 236,
      "endLine": 238,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@239-241",
      "type": "method_definition",
      "name": "childIdentifier",
      "text": "childIdentifier(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.childIdentifier) || null\n    }",
      "startLine": 239,
      "endLine": 241,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@242-244",
      "type": "method_definition",
      "name": "mothersFirstName",
      "text": "mothersFirstName(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.motherFirstNames) || null\n    }",
      "startLine": 242,
      "endLine": 244,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@245-247",
      "type": "method_definition",
      "name": "mothersLastName",
      "text": "mothersLastName(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.motherFamilyName) || null\n    }",
      "startLine": 245,
      "endLine": 247,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@248-250",
      "type": "method_definition",
      "name": "fathersFirstName",
      "text": "fathersFirstName(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.fatherFirstNames) || null\n    }",
      "startLine": 248,
      "endLine": 250,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@251-253",
      "type": "method_definition",
      "name": "fathersLastName",
      "text": "fathersLastName(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.fatherFamilyName) || null\n    }",
      "startLine": 251,
      "endLine": 253,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@254-256",
      "type": "method_definition",
      "name": "motherDateOfBirth",
      "text": "motherDateOfBirth(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.motherDoB) || null\n    }",
      "startLine": 254,
      "endLine": 256,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@257-259",
      "type": "method_definition",
      "name": "fatherDateOfBirth",
      "text": "fatherDateOfBirth(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.fatherDoB) || null\n    }",
      "startLine": 257,
      "endLine": 259,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@260-262",
      "type": "method_definition",
      "name": "motherIdentifier",
      "text": "motherIdentifier(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.motherIdentifier) || null\n    }",
      "startLine": 260,
      "endLine": 262,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@263-265",
      "type": "method_definition",
      "name": "fatherIdentifier",
      "text": "fatherIdentifier(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.fatherIdentifier) || null\n    }",
      "startLine": 263,
      "endLine": 265,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@268-270",
      "type": "method_definition",
      "name": "id",
      "text": "id(resultSet: ISearchEventDataTemplate) {\n      return resultSet._id\n    }",
      "startLine": 268,
      "endLine": 270,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@271-273",
      "type": "method_definition",
      "name": "type",
      "text": "type(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source.event\n    }",
      "startLine": 271,
      "endLine": 273,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@274-276",
      "type": "method_definition",
      "name": "registration",
      "text": "registration(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source\n    }",
      "startLine": 274,
      "endLine": 276,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@277-279",
      "type": "method_definition",
      "name": "operationHistories",
      "text": "operationHistories(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source.operationHistories\n    }",
      "startLine": 277,
      "endLine": 279,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@280-282",
      "type": "method_definition",
      "name": "deceasedGender",
      "text": "deceasedGender(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.gender) || null\n    }",
      "startLine": 280,
      "endLine": 282,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@283-285",
      "type": "method_definition",
      "name": "deceasedName",
      "text": "deceasedName(resultSet: ISearchEventDataTemplate) {\n      return getDeceasedName(resultSet._source)\n    }",
      "startLine": 283,
      "endLine": 285,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@286-288",
      "type": "method_definition",
      "name": "dateOfDeath",
      "text": "dateOfDeath(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.deathDate) || null\n    }",
      "startLine": 286,
      "endLine": 288,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@291-293",
      "type": "method_definition",
      "name": "id",
      "text": "id(resultSet: ISearchEventDataTemplate) {\n      return resultSet._id\n    }",
      "startLine": 291,
      "endLine": 293,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@294-296",
      "type": "method_definition",
      "name": "type",
      "text": "type(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source.event\n    }",
      "startLine": 294,
      "endLine": 296,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@297-299",
      "type": "method_definition",
      "name": "registration",
      "text": "registration(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source\n    }",
      "startLine": 297,
      "endLine": 299,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@300-302",
      "type": "method_definition",
      "name": "operationHistories",
      "text": "operationHistories(resultSet: ISearchEventDataTemplate) {\n      return resultSet._source.operationHistories\n    }",
      "startLine": 300,
      "endLine": 302,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@303-305",
      "type": "method_definition",
      "name": "brideName",
      "text": "brideName(resultSet: ISearchEventDataTemplate) {\n      return getBrideName(resultSet._source)\n    }",
      "startLine": 303,
      "endLine": 305,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@306-308",
      "type": "method_definition",
      "name": "brideIdentifier",
      "text": "brideIdentifier(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.brideIdentifier) || null\n    }",
      "startLine": 306,
      "endLine": 308,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@309-311",
      "type": "method_definition",
      "name": "groomName",
      "text": "groomName(resultSet: ISearchEventDataTemplate) {\n      return getGroomName(resultSet._source)\n    }",
      "startLine": 309,
      "endLine": 311,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@312-314",
      "type": "method_definition",
      "name": "groomIdentifier",
      "text": "groomIdentifier(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.groomIdentifier) || null\n    }",
      "startLine": 312,
      "endLine": 314,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@315-317",
      "type": "method_definition",
      "name": "dateOfMarriage",
      "text": "dateOfMarriage(resultSet: ISearchEventDataTemplate) {\n      return (resultSet._source && resultSet._source.marriageDate) || null\n    }",
      "startLine": 315,
      "endLine": 317,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@320-322",
      "type": "method_definition",
      "name": "status",
      "text": "status(searchData: ISearchDataTemplate) {\n      return searchData.type\n    }",
      "startLine": 320,
      "endLine": 322,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@323-325",
      "type": "method_definition",
      "name": "registeredLocationId",
      "text": "registeredLocationId(searchData: ISearchDataTemplate) {\n      return searchData.declarationLocationId\n    }",
      "startLine": 323,
      "endLine": 325,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@326-328",
      "type": "method_definition",
      "name": "eventLocationId",
      "text": "eventLocationId(searchData: ISearchDataTemplate) {\n      return searchData.eventLocationId\n    }",
      "startLine": 326,
      "endLine": 328,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@329-331",
      "type": "method_definition",
      "name": "duplicates",
      "text": "duplicates(searchData: ISearchDataTemplate) {\n      return searchData.relatesTo\n    }",
      "startLine": 329,
      "endLine": 331,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@332-334",
      "type": "method_definition",
      "name": "contactRelationship",
      "text": "contactRelationship(searchData: ISearchDataTemplate) {\n      return searchData.informantType\n    }",
      "startLine": 332,
      "endLine": 334,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@335-337",
      "type": "method_definition",
      "name": "contactNumber",
      "text": "contactNumber(searchData: ISearchDataTemplate) {\n      return searchData.contactNumber\n    }",
      "startLine": 335,
      "endLine": 337,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@338-340",
      "type": "method_definition",
      "name": "contactEmail",
      "text": "contactEmail(searchData: ISearchDataTemplate) {\n      return searchData.contactEmail\n    }",
      "startLine": 338,
      "endLine": 340,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@343-377",
      "type": "method_definition",
      "name": "operatorName",
      "text": "operatorName(searchData: ISearchDataTemplate) {\n      const names = [\n        {\n          use: 'en',\n          given:\n            (searchData.operatorFirstNames && [\n              searchData.operatorFirstNames\n            ]) ||\n            null,\n          family:\n            (searchData.operatorFamilyName && [\n              searchData.operatorFamilyName\n            ]) ||\n            null\n        }\n      ]\n\n      if (NATIVE_LANGUAGE) {\n        names.push({\n          use: NATIVE_LANGUAGE,\n          given:\n            (searchData.operatorFirstNamesLocale && [\n              searchData.operatorFirstNamesLocale\n            ]) ||\n            null,\n          family:\n            (searchData.operatorFamilyNameLocale && [\n              searchData.operatorFamilyNameLocale\n            ]) ||\n            null\n        })\n      }\n\n      return names\n    }",
      "startLine": 343,
      "endLine": 377,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@380-382",
      "type": "method_definition",
      "name": "id",
      "text": "id(searchData: ISearchEventDataTemplate) {\n      return searchData._id\n    }",
      "startLine": 380,
      "endLine": 382,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@383-385",
      "type": "method_definition",
      "name": "type",
      "text": "type(searchData: ISearchEventDataTemplate) {\n      return searchData._source.event\n    }",
      "startLine": 383,
      "endLine": 385,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@386-393",
      "type": "method_definition",
      "name": "name",
      "text": "name(searchData: ISearchEventDataTemplate) {\n      if (searchData._source.event === EVENT.BIRTH) {\n        return getChildName(searchData._source)\n      } else if (searchData._source.event === EVENT.DEATH) {\n        return getDeceasedName(searchData._source)\n      }\n      return null\n    }",
      "startLine": 386,
      "endLine": 393,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@394-401",
      "type": "method_definition",
      "name": "dateOfEvent",
      "text": "dateOfEvent(searchData: ISearchEventDataTemplate) {\n      if (searchData._source.event === EVENT.BIRTH) {\n        return (searchData._source && searchData._source.childDoB) || null\n      } else if (searchData._source.event === EVENT.DEATH) {\n        return (searchData._source && searchData._source.deathDate) || null\n      }\n      return null\n    }",
      "startLine": 394,
      "endLine": 401,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@402-404",
      "type": "method_definition",
      "name": "registration",
      "text": "registration(searchData: ISearchEventDataTemplate) {\n      return searchData._source\n    }",
      "startLine": 402,
      "endLine": 404,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@405-414",
      "type": "method_definition",
      "name": "startedAt",
      "text": "startedAt(searchData: ISearchEventDataTemplate) {\n      let startedAt = null\n      if (searchData._source.operationHistories) {\n        startedAt = (\n          searchData._source\n            .operationHistories as GQLOperationHistorySearchSet[]\n        )[0].operatedOn\n      }\n      return startedAt\n    }",
      "startLine": 405,
      "endLine": 414,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@428-439",
      "type": "method_definition",
      "name": "startedByFacility",
      "text": "async startedByFacility(\n      searchData: ISearchEventDataTemplate,\n      _,\n      { dataSources }\n    ) {\n      if (!searchData._source.eventLocationId) return null\n\n      const location = await dataSources.locationsAPI.getLocation(\n        searchData._source.eventLocationId\n      )\n      return location.name\n    }",
      "startLine": 428,
      "endLine": 439,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@449-451",
      "type": "method_definition",
      "name": "timeInProgress",
      "text": "timeInProgress(timeLoggedResponse: IEventDurationResponse[]) {\n      return getTimeLoggedDataByStatus(timeLoggedResponse, 'IN_PROGRESS')\n    }",
      "startLine": 449,
      "endLine": 451,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@452-454",
      "type": "method_definition",
      "name": "timeInReadyForReview",
      "text": "timeInReadyForReview(timeLoggedResponse: IEventDurationResponse[]) {\n      return getTimeLoggedDataByStatus(timeLoggedResponse, 'DECLARED')\n    }",
      "startLine": 452,
      "endLine": 454,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@455-457",
      "type": "method_definition",
      "name": "timeInRequiresUpdates",
      "text": "timeInRequiresUpdates(timeLoggedResponse: IEventDurationResponse[]) {\n      return getTimeLoggedDataByStatus(timeLoggedResponse, 'REJECTED')\n    }",
      "startLine": 455,
      "endLine": 457,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@458-460",
      "type": "method_definition",
      "name": "timeInWaitingForApproval",
      "text": "timeInWaitingForApproval(timeLoggedResponse: IEventDurationResponse[]) {\n      return getTimeLoggedDataByStatus(timeLoggedResponse, 'VALIDATED')\n    }",
      "startLine": 458,
      "endLine": 460,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@461-466",
      "type": "method_definition",
      "name": "timeInWaitingForBRIS",
      "text": "timeInWaitingForBRIS(timeLoggedResponse: IEventDurationResponse[]) {\n      return getTimeLoggedDataByStatus(\n        timeLoggedResponse,\n        'WAITING_FOR_VALIDATION'\n      )\n    }",
      "startLine": 461,
      "endLine": 466,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@467-469",
      "type": "method_definition",
      "name": "timeInReadyToPrint",
      "text": "timeInReadyToPrint(timeLoggedResponse: IEventDurationResponse[]) {\n      return getTimeLoggedDataByStatus(timeLoggedResponse, 'REGISTERED')\n    }",
      "startLine": 467,
      "endLine": 469,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@472-495",
      "type": "method_definition",
      "name": "avatarURL",
      "text": "async avatarURL(\n      assignmentData: IAssignment,\n      _,\n      { dataSources, headers: authHeader, presignDocumentUrls }\n    ) {\n      const user = await dataSources.usersAPI.getUserByPractitionerId(\n        assignmentData.practitionerId\n      )\n\n      if (user.avatar?.data) {\n        if (!presignDocumentUrls) {\n          return user.avatar.data\n        }\n        const avatarURL = await getPresignedUrlFromUri(\n          user.avatar.data,\n          authHeader\n        )\n        return avatarURL\n      }\n\n      const userName = getFullName(user, 'en')\n\n      return `${AVATAR_API}${userName}`\n    }",
      "startLine": 472,
      "endLine": 495,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/search/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@150-152",
      "type": "method_definition",
      "name": "get",
      "text": "get() {\n    return hiddenMock()\n  }",
      "startLine": 150,
      "endLine": 152,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/setupTests.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@153-155",
      "type": "method_definition",
      "name": "set",
      "text": "set(bool) {\n    hiddenMock.mockReturnValue(Boolean(bool))\n  }",
      "startLine": 153,
      "endLine": 155,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/setupTests.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-41",
      "type": "function_declaration",
      "name": "reloadModalVisibilityReducer",
      "text": "function reloadModalVisibilityReducer(\n  state: IReloadModalVisibilityState = initialState,\n  action: ReloadModalVisibilityAction\n): IReloadModalVisibilityState {\n  if (action.type === RELOAD_MODAL_VISIBILITY) {\n    return { ...state, isReloadModalVisible: Boolean(action.payload) }\n  }\n  return state\n}",
      "startLine": 33,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/reload/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-32",
      "type": "function_declaration",
      "name": "validateApplicationVersion",
      "text": "async function validateApplicationVersion() {\n  const runningVer = localStorage.getItem('running-version')\n\n  if (!runningVer || runningVer !== APPLICATION_VERSION) {\n    localStorage.setItem('running-version', APPLICATION_VERSION)\n    const userData = await storage.getItem('USER_DATA')\n    const allUserData: IUserData[] = !userData\n      ? []\n      : (JSON.parse(userData) as IUserData[])\n\n    allUserData.forEach((userData) => {\n      userData['declarations'] = []\n    })\n\n    await storage.setItem('USER_DATA', JSON.stringify(allUserData))\n  }\n}",
      "startLine": 16,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-35",
      "type": "function_declaration",
      "name": "isNavigatorOnline",
      "text": "function isNavigatorOnline() {\n  return navigator.onLine\n}",
      "startLine": 33,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-58",
      "type": "function_declaration",
      "name": "useOnlineStatus",
      "text": "function useOnlineStatus() {\n  const [isOnline, setOnline] = useState(isNavigatorOnline())\n\n  useEffect(() => {\n    const handleConnectionChange = () => {\n      setOnline(isNavigatorOnline())\n    }\n\n    window.addEventListener(ONLINE, handleConnectionChange)\n    window.addEventListener(OFFLINE, handleConnectionChange)\n\n    return () => {\n      window.removeEventListener(ONLINE, handleConnectionChange)\n      window.removeEventListener(OFFLINE, handleConnectionChange)\n    }\n  }, [])\n\n  return isOnline\n}",
      "startLine": 40,
      "endLine": 58,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@94-101",
      "type": "function_declaration",
      "name": "createRedirect",
      "text": "function createRedirect(from: string, to: string) {\n  return {\n    path: from,\n    loader: () => {\n      return redirect(to)\n    }\n  }\n}",
      "startLine": 94,
      "endLine": 101,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/App.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@539-562",
      "type": "function_declaration",
      "name": "App",
      "text": "function App({ client, store, router }: IAppProps) {\n  const { client: apolloClient } = useApolloClient(store)\n\n  return (\n    <ErrorBoundary>\n      <GlobalStyle />\n      <ApolloProvider client={client ?? apolloClient}>\n        <Provider store={store}>\n          <I18nContainer>\n            <ThemeProvider theme={getTheme()}>\n              <StyledErrorBoundary>\n                <RouterProvider\n                  router={router}\n                  // v7_startTransition used to be true for a moment, but it changed the routing and broke some farajaland e2e tests (and possibly changed actual functionality as well).\n                  future={{ v7_startTransition: false }}\n                />\n              </StyledErrorBoundary>\n            </ThemeProvider>\n          </I18nContainer>\n        </Provider>\n      </ApolloProvider>\n    </ErrorBoundary>\n  )\n}",
      "startLine": 539,
      "endLine": 562,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/App.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@179-181",
      "type": "method_definition",
      "name": "firstNames",
      "text": "firstNames(name: fhir3.HumanName) {\n      return name.given?.at(0) ?? ''\n    }",
      "startLine": 179,
      "endLine": 181,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@182-184",
      "type": "method_definition",
      "name": "middleName",
      "text": "middleName(name: fhir3.HumanName) {\n      return name.given?.at(1) ?? ''\n    }",
      "startLine": 182,
      "endLine": 184,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@185-187",
      "type": "method_definition",
      "name": "familyName",
      "text": "familyName(name: fhir3.HumanName) {\n      return name.family\n    }",
      "startLine": 185,
      "endLine": 187,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@188-193",
      "type": "method_definition",
      "name": "marriedLastName",
      "text": "marriedLastName(name) {\n      if (!name.suffix) {\n        return null\n      }\n      return Array.isArray(name.suffix) ? name.suffix.join(' ') : name.suffix\n    }",
      "startLine": 188,
      "endLine": 193,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@445-447",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return\n      }",
      "startLine": 445,
      "endLine": 447,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@481-483",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return\n      }",
      "startLine": 481,
      "endLine": 483,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@507-509",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return\n      }",
      "startLine": 507,
      "endLine": 509,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 16,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@537-539",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return\n      }",
      "startLine": 537,
      "endLine": 539,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@552-554",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return\n      }",
      "startLine": 552,
      "endLine": 554,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@575-577",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return\n      }",
      "startLine": 575,
      "endLine": 577,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@602-604",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return null\n      }",
      "startLine": 602,
      "endLine": 604,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@629-631",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return null\n      }",
      "startLine": 629,
      "endLine": 631,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@652-654",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return null\n      }",
      "startLine": 652,
      "endLine": 654,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@682-684",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return null\n      }",
      "startLine": 682,
      "endLine": 684,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 47,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@740-742",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return null\n      }",
      "startLine": 740,
      "endLine": 742,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 45,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@763-765",
      "type": "method_definition",
      "name": "if",
      "text": "if (!relatedPerson.patient) {\n        return null\n      }",
      "startLine": 763,
      "endLine": 765,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 47,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1239-1241",
      "type": "method_definition",
      "name": "if",
      "text": "if (!comment.authorString) {\n        return null\n      }",
      "startLine": 1239,
      "endLine": 1241,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 20,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1332-1337",
      "type": "method_definition",
      "name": "Boolean",
      "text": "Boolean(hasShowedDocument?.valueString)\n      }\n\n      if (typeof hasShowedDocument?.valueBoolean === 'boolean') {\n        return hasShowedDocument?.valueBoolean\n      }",
      "startLine": 1332,
      "endLine": 1337,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1429-1435",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n        !encounterParticipant ||\n        !encounterParticipant.individual ||\n        !encounterParticipant.individual.reference\n      ) {\n        return null\n      }",
      "startLine": 1429,
      "endLine": 1435,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 38,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1477-1566",
      "type": "method_definition",
      "name": "return",
      "text": "return (\n        (encounterParticipant &&\n          encounterParticipant.period &&\n          encounterParticipant.period.start) ||\n        null\n      )\n    }\n  },\n  InputOutput: {\n    value: (inputOutput: TaskInput) => {\n      if (inputOutput.valueBoolean !== undefined) {\n        return inputOutput.valueBoolean\n      }\n      if (inputOutput.valueInteger !== undefined) {\n        return inputOutput.valueInteger\n      }\n\n      return inputOutput.valueString\n    }\n  },\n  History: {\n    documents: async (task: Task, _, context) => {\n      const encounter = task.encounter?.reference\n      if (!encounter) {\n        return []\n      }\n      const record = context.dataSources.recordsAPI.getRecord()\n      return record.entry\n        .map((entry) => entry.resource)\n        .filter(isDocumentReference)\n        .filter((x) => x.subject?.reference === encounter)\n    },\n    payment: async (task: Task, _, context) => {\n      const includesPayment = findExtension(\n        `${OPENCRVS_SPECIFICATION_URL}extension/paymentDetails`,\n        task.extension as Extension[]\n      )\n\n      if (!includesPayment) {\n        return null\n      }\n\n      const paymentReference = includesPayment.valueReference!\n        .reference as `${string}/${string}`\n\n      const paymentId = paymentReference.split('/')[1]\n      const paymentReconciliation =\n        getResourceFromBundleById<PaymentReconciliation>(\n          context.dataSources.recordsAPI.getRecord(),\n          paymentId\n        )\n\n      if (!paymentReconciliation) {\n        throw new Error(\n          'PaymentReconciliation resource not found even when task has payment extension. This should never happen'\n        )\n      }\n      const record = context.dataSources.recordsAPI.getRecord()\n      const documentReference = record.entry\n        .map((entry) => entry.resource)\n        .filter(isDocumentReference)\n        .filter(\n          (x) => x.subject?.reference === `PaymentReconciliation/${paymentId}`\n        )\n\n      return {\n        id: paymentId,\n        type: paymentReconciliation.detail?.[0].type?.coding?.[0].code,\n        amount: paymentReconciliation.detail?.[0].amount?.value,\n        outcome: paymentReconciliation.outcome?.coding?.[0].code,\n        date: paymentReconciliation.detail?.[0].date,\n        attachmentURL:\n          documentReference.length > 0\n            ? context.presignDocumentUrls\n              ? await getPresignedUrlFromUri(\n                  documentReference[0].content[0].attachment.data!,\n                  context.headers\n                )\n              : documentReference[0].content[0].attachment.data!\n            : null\n      }\n    },\n    hasShowedVerifiedDocument: (task: Task) => {\n      const hasShowedDocument = findExtension(\n        `${OPENCRVS_SPECIFICATION_URL}extension/hasShowedVerifiedDocument`,\n        task.extension as Extension[]\n      )\n      if (hasShowedDocument?.valueString) {\n        return Boolean(hasShowedDocument?.valueString)\n      }",
      "startLine": 1477,
      "endLine": 1566,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 36,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1487-1489",
      "type": "method_definition",
      "name": "if",
      "text": "if (inputOutput.valueBoolean !== undefined) {\n        return inputOutput.valueBoolean\n      }",
      "startLine": 1487,
      "endLine": 1489,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 43,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1490-1492",
      "type": "method_definition",
      "name": "if",
      "text": "if (inputOutput.valueInteger !== undefined) {\n        return inputOutput.valueInteger\n      }",
      "startLine": 1490,
      "endLine": 1492,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 43,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1867-1878",
      "type": "method_definition",
      "name": "eventLocation",
      "text": "async eventLocation(record: Saved<Bundle>) {\n      const encounter = findEncounterFromRecord(record, DEATH_ENCOUNTER_CODE)\n\n      if (!encounter || !encounter.location) {\n        return null\n      }\n\n      return getResourceFromBundleById(\n        record,\n        resourceIdentifierToUUID(encounter.location[0].location.reference)\n      )\n    }",
      "startLine": 1867,
      "endLine": 1878,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1879-1881",
      "type": "method_definition",
      "name": "deathDescription",
      "text": "async deathDescription(record: Saved<Bundle>) {\n      return findObservationByCode(record, DEATH_DESCRIPTION_CODE)?.valueString\n    }",
      "startLine": 1879,
      "endLine": 1881,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1882-1885",
      "type": "method_definition",
      "name": "mannerOfDeath",
      "text": "async mannerOfDeath(record: Saved<Bundle>) {\n      return findObservationByCode(record, MANNER_OF_DEATH_CODE)\n        ?.valueCodeableConcept?.coding?.[0].code\n    }",
      "startLine": 1882,
      "endLine": 1885,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1886-1889",
      "type": "method_definition",
      "name": "causeOfDeathEstablished",
      "text": "async causeOfDeathEstablished(record: Saved<Bundle>) {\n      return findObservationByCode(record, CAUSE_OF_DEATH_ESTABLISHED_CODE)\n        ?.valueCodeableConcept?.coding?.[0].code\n    }",
      "startLine": 1886,
      "endLine": 1889,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1890-1893",
      "type": "method_definition",
      "name": "causeOfDeathMethod",
      "text": "async causeOfDeathMethod(record: Saved<Bundle>) {\n      return findObservationByCode(record, CAUSE_OF_DEATH_METHOD_CODE)\n        ?.valueCodeableConcept?.coding?.[0].code\n    }",
      "startLine": 1890,
      "endLine": 1893,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1894-1897",
      "type": "method_definition",
      "name": "causeOfDeath",
      "text": "async causeOfDeath(record: Saved<Bundle>) {\n      return findObservationByCode(record, CAUSE_OF_DEATH_CODE)\n        ?.valueCodeableConcept?.coding?.[0].code\n    }",
      "startLine": 1894,
      "endLine": 1897,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1898-1901",
      "type": "method_definition",
      "name": "maleDependentsOfDeceased",
      "text": "async maleDependentsOfDeceased(record: Saved<Bundle>) {\n      return findObservationByCode(record, MALE_DEPENDENTS_ON_DECEASED_CODE)\n        ?.valueString\n    }",
      "startLine": 1898,
      "endLine": 1901,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1902-1905",
      "type": "method_definition",
      "name": "femaleDependentsOfDeceased",
      "text": "async femaleDependentsOfDeceased(record: Saved<Bundle>) {\n      return findObservationByCode(record, FEMALE_DEPENDENTS_ON_DECEASED_CODE)\n        ?.valueString\n    }",
      "startLine": 1902,
      "endLine": 1905,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1907-1943",
      "type": "method_definition",
      "name": "questionnaire",
      "text": "async questionnaire(record: Saved<Bundle>) {\n      const recordResources = record.entry.map((x) => x.resource)\n\n      const encounter = findEncounterFromRecord(record, DEATH_ENCOUNTER_CODE)\n\n      if (!encounter) {\n        return null\n      }\n\n      const questionnaireResponses = recordResources\n        .filter(isQuestionnaireResponse)\n        .filter(\n          (response) =>\n            response.subject?.reference === `Encounter/${encounter.id}`\n        )\n\n      const questionnaireResponse = questionnaireResponses[0]\n\n      if (!questionnaireResponse) {\n        return null\n      }\n      const questionnaire: GQLQuestionnaireQuestion[] = []\n\n      if (questionnaireResponse.item && questionnaireResponse.item.length) {\n        questionnaireResponse.item.forEach((item) => {\n          if (item.answer && item.answer[0]) {\n            questionnaire.push({\n              fieldId: item.text,\n              value: item.answer[0].valueString\n            })\n          }\n        })\n        return questionnaire\n      } else {\n        return null\n      }\n    }",
      "startLine": 1907,
      "endLine": 1943,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1944-1952",
      "type": "method_definition",
      "name": "medicalPractitioner",
      "text": "async medicalPractitioner(record: Saved<Bundle>) {\n      const encounter = findEncounterFromRecord(record, DEATH_ENCOUNTER_CODE)\n\n      const encounterParticipant = encounter?.participant?.[0]\n      if (!encounterParticipant) {\n        return null\n      }\n      return encounterParticipant\n    }",
      "startLine": 1944,
      "endLine": 1952,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1953-1959",
      "type": "method_definition",
      "name": "history",
      "text": "async history(record: Saved<Bundle>) {\n      return record.entry\n        .map(({ resource }) => resource)\n        .filter(isTaskOrTaskHistory)\n        .filter(notCorrectedHistory)\n        .sort(sortDescending)\n    }",
      "startLine": 1953,
      "endLine": 1959,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2043-2046",
      "type": "method_definition",
      "name": "weightAtBirth",
      "text": "async weightAtBirth(record: Saved<Bundle>) {\n      return findObservationByCode(record, BODY_WEIGHT_CODE)?.valueQuantity\n        ?.value\n    }",
      "startLine": 2043,
      "endLine": 2046,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2047-2049",
      "type": "method_definition",
      "name": "attendantAtBirth",
      "text": "async attendantAtBirth(record: Saved<Bundle>) {\n      return findObservationByCode(record, BIRTH_ATTENDANT_CODE)?.valueString\n    }",
      "startLine": 2047,
      "endLine": 2049,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2050-2052",
      "type": "method_definition",
      "name": "childrenBornAliveToMother",
      "text": "async childrenBornAliveToMother(record: Saved<Bundle>) {\n      return findObservationByCode(record, BIRTH_ATTENDANT_CODE)?.valueInteger\n    }",
      "startLine": 2050,
      "endLine": 2052,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2053-2056",
      "type": "method_definition",
      "name": "foetalDeathsToMother",
      "text": "async foetalDeathsToMother(record: Saved<Bundle>) {\n      return findObservationByCode(record, NUMBER_FOEATAL_DEATH_CODE)\n        ?.valueInteger\n    }",
      "startLine": 2053,
      "endLine": 2056,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2057-2059",
      "type": "method_definition",
      "name": "lastPreviousLiveBirth",
      "text": "async lastPreviousLiveBirth(record: Saved<Bundle>) {\n      return findObservationByCode(record, LAST_LIVE_BIRTH_CODE)?.valueDateTime\n    }",
      "startLine": 2057,
      "endLine": 2059,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2060-2063",
      "type": "method_definition",
      "name": "birthType",
      "text": "async birthType(record: Saved<Bundle>) {\n      return findObservationByCode(record, BIRTH_TYPE_CODE)?.valueQuantity\n        ?.value\n    }",
      "startLine": 2060,
      "endLine": 2063,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2064-2100",
      "type": "method_definition",
      "name": "questionnaire",
      "text": "async questionnaire(record: Saved<Bundle>) {\n      const recordResources = record.entry.map((x) => x.resource)\n\n      const encounter = findEncounterFromRecord(record, BIRTH_ENCOUNTER_CODE)\n\n      if (!encounter) {\n        return null\n      }\n\n      const questionnaireResponses = recordResources\n        .filter(isQuestionnaireResponse)\n        .filter(\n          (response) =>\n            response.subject?.reference === `Encounter/${encounter.id}`\n        )\n\n      const questionnaireResponse = questionnaireResponses[0]\n\n      if (!questionnaireResponse) {\n        return null\n      }\n      const questionnaire: GQLQuestionnaireQuestion[] = []\n\n      if (questionnaireResponse.item && questionnaireResponse.item.length) {\n        questionnaireResponse.item.forEach((item) => {\n          if (item.answer && item.answer[0]) {\n            questionnaire.push({\n              fieldId: item.text,\n              value: item.answer[0].valueString\n            })\n          }\n        })\n        return questionnaire\n      } else {\n        return null\n      }\n    }",
      "startLine": 2064,
      "endLine": 2100,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2101-2112",
      "type": "method_definition",
      "name": "eventLocation",
      "text": "async eventLocation(record: Saved<Bundle>) {\n      const encounter = findEncounterFromRecord(record, BIRTH_ENCOUNTER_CODE)\n\n      if (!encounter || !encounter.location) {\n        return null\n      }\n\n      return getResourceFromBundleById(\n        record,\n        resourceIdentifierToUUID(encounter.location[0].location.reference)\n      )\n    }",
      "startLine": 2101,
      "endLine": 2112,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2113-2119",
      "type": "method_definition",
      "name": "history",
      "text": "async history(record: Saved<Bundle>) {\n      return record.entry\n        .map(({ resource }) => resource)\n        .filter(isTaskOrTaskHistory)\n        .filter(notCorrectedHistory)\n        .sort(sortDescending)\n    }",
      "startLine": 2113,
      "endLine": 2119,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2198-2234",
      "type": "method_definition",
      "name": "questionnaire",
      "text": "async questionnaire(record: Saved<Bundle>) {\n      const recordResources = record.entry.map((x) => x.resource)\n\n      const encounter = findEncounterFromRecord(record, MARRIAGE_ENCOUNTER_CODE)\n\n      if (!encounter) {\n        return null\n      }\n\n      const questionnaireResponses = recordResources\n        .filter(isQuestionnaireResponse)\n        .filter(\n          (response) =>\n            response.subject?.reference === `Encounter/${encounter.id}`\n        )\n\n      const questionnaireResponse = questionnaireResponses[0]\n\n      if (!questionnaireResponse) {\n        return null\n      }\n      const questionnaire: GQLQuestionnaireQuestion[] = []\n\n      if (questionnaireResponse.item && questionnaireResponse.item.length) {\n        questionnaireResponse.item.forEach((item) => {\n          if (item.answer && item.answer[0]) {\n            questionnaire.push({\n              fieldId: item.text,\n              value: item.answer[0].valueString\n            })\n          }\n        })\n        return questionnaire\n      } else {\n        return null\n      }\n    }",
      "startLine": 2198,
      "endLine": 2234,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2235-2238",
      "type": "method_definition",
      "name": "typeOfMarriage",
      "text": "async typeOfMarriage(record: Saved<Bundle>) {\n      return findObservationByCode(record, MARRIAGE_TYPE_CODE)?.valueQuantity\n        ?.value\n    }",
      "startLine": 2235,
      "endLine": 2238,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2239-2250",
      "type": "method_definition",
      "name": "eventLocation",
      "text": "async eventLocation(record: Saved<Bundle>) {\n      const encounter = findEncounterFromRecord(record, MARRIAGE_ENCOUNTER_CODE)\n\n      if (!encounter || !encounter.location) {\n        return null\n      }\n\n      return getResourceFromBundleById(\n        record,\n        resourceIdentifierToUUID(encounter.location[0].location.reference)\n      )\n    }",
      "startLine": 2239,
      "endLine": 2250,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@2251-2257",
      "type": "method_definition",
      "name": "history",
      "text": "async history(record: Saved<Bundle>) {\n      return record.entry\n        .map(({ resource }) => resource)\n        .filter(isTaskOrTaskHistory)\n        .filter(notCorrectedHistory)\n        .sort(sortDescending)\n    }",
      "startLine": 2251,
      "endLine": 2257,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/gateway/src/features/registration/type-resolvers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-30",
      "type": "function_declaration",
      "name": "writeJSONToCSV",
      "text": "async function writeJSONToCSV(\n  filename: string,\n  data: Array<Record<string, any>>\n) {\n  const csv = stringify(data, {\n    header: true\n  })\n  return fs.promises.writeFile(filename, csv as any, 'utf8')\n}",
      "startLine": 22,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/extract-translations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-48",
      "type": "function_declaration",
      "name": "readCSVToJSON",
      "text": "async function readCSVToJSON<T>(filename: string) {\n  return new Promise<T>((resolve, reject) => {\n    const chunks: string[] = []\n    fs.createReadStream(filename)\n      .on('error', reject)\n      .pipe(\n        csv2json({\n          separator: ','\n        })\n      )\n      .on('data', (chunk: string) => chunks.push(chunk))\n      .on('error', reject)\n      .on('end', () => {\n        resolve(JSON.parse(chunks.join('')))\n      })\n  })\n}",
      "startLine": 32,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/extract-translations.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@57-60",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: Props) {\n    super(props)\n    this.state = { error: null }\n  }",
      "startLine": 57,
      "endLine": 60,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/routes/TRPCErrorBoundary.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@62-64",
      "type": "method_definition",
      "name": "getDerivedStateFromError",
      "text": "static getDerivedStateFromError(error: Error) {\n    return { error }\n  }",
      "startLine": 62,
      "endLine": 64,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/routes/TRPCErrorBoundary.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@66-69",
      "type": "method_definition",
      "name": "componentDidCatch",
      "text": "componentDidCatch(error: Error) {\n    // eslint-disable-next-line no-console\n    console.error('TRPC Error Caught:', error)\n  }",
      "startLine": 66,
      "endLine": 69,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/routes/TRPCErrorBoundary.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@71-143",
      "type": "method_definition",
      "name": "render",
      "text": "render() {\n    // eslint-disable-next-line no-shadow\n    const { intl, redirectToAuthentication } = this.props\n    if (this.state.error) {\n      const error = this.state.error\n      let httpCode = 500\n      let message = error.message\n\n      if (error instanceof TRPCClientError) {\n        if (\n          error.meta &&\n          typeof error.meta === 'object' &&\n          'response' in error.meta &&\n          error.meta.response &&\n          typeof error.meta.response === 'object' &&\n          'status' in error.meta.response &&\n          'statusText' in error.meta.response\n        ) {\n          httpCode = Number(error.meta.response.status)\n          message = String(error.meta.response.statusText)\n        }\n      }\n      /**\n       * TODO: Improve the error message design once the probable errors are defined\n       * and the design/ux is ready.\n       */\n      return (\n        <Sentry.ErrorBoundary\n          showDialog={!development}\n          onError={(err) => {\n            // eslint-disable-next-line no-console\n            console.log('Sentry.ErrorBoundary: ', err)\n          }}\n        >\n          <PageWrapper>\n            <ErrorContainer>\n              {httpCode === 401 ? (\n                <>\n                  <ErrorTitle>\n                    {intl.formatMessage(errorMessages.errorTitleUnauthorized)}\n                  </ErrorTitle>\n                  <ErrorMessage>\n                    {intl.formatMessage(errorMessages.errorCodeUnauthorized)}\n                  </ErrorMessage>\n                  <TertiaryButton\n                    id=\"GoToLoginPage\"\n                    onClick={() => redirectToAuthentication(true)}\n                  >\n                    {intl.formatMessage(buttonMessages.login)}\n                  </TertiaryButton>\n                </>\n              ) : (\n                <>\n                  <ErrorTitle>\n                    {intl.formatMessage(errorMessages.errorTitle)}\n                  </ErrorTitle>\n                  <ErrorMessage>{message}</ErrorMessage>\n                  <TertiaryButton\n                    id=\"GoToHomepage\"\n                    onClick={() => (window.location.href = '/')}\n                  >\n                    {intl.formatMessage(buttonMessages.goToHomepage)}\n                  </TertiaryButton>\n                </>\n              )}\n            </ErrorContainer>\n          </PageWrapper>\n        </Sentry.ErrorBoundary>\n      )\n    }\n\n    return this.props.children\n  }",
      "startLine": 71,
      "endLine": 143,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/routes/TRPCErrorBoundary.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@38-55",
      "type": "function_declaration",
      "name": "getTrpcClient",
      "text": "function getTrpcClient() {\n  return createTRPCClient<AppRouter>({\n    links: [\n      loggerLink({\n        enabled: (op) => op.direction === 'down' && op.result instanceof Error\n      }),\n      httpLink({\n        url: '/api/events',\n        transformer: superjson,\n        headers() {\n          return {\n            authorization: `Bearer ${getToken()}`\n          }\n        }\n      })\n    ]\n  })\n}",
      "startLine": 38,
      "endLine": 55,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/trpc.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@47-51",
      "type": "method_definition",
      "name": "headers",
      "text": "headers() {\n          return {\n            authorization: `Bearer ${getToken()}`\n          }\n        }",
      "startLine": 47,
      "endLine": 51,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/trpc.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@57-70",
      "type": "function_declaration",
      "name": "getQueryClient",
      "text": "function getQueryClient() {\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        gcTime: Infinity,\n        retry: 1\n      },\n      mutations: {\n        gcTime: Infinity,\n        retry: 1\n      }\n    }\n  })\n}",
      "startLine": 57,
      "endLine": 70,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/trpc.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@72-85",
      "type": "function_declaration",
      "name": "createIDBPersister",
      "text": "function createIDBPersister(idbValidKey = 'reactQuery') {\n  return {\n    persistClient: async (client) => {\n      await storage.setItem(idbValidKey, client)\n    },\n    restoreClient: async () => {\n      const client = await storage.getItem<PersistedClient>(idbValidKey)\n      return client || undefined\n    },\n    removeClient: async () => {\n      await storage.removeItem(idbValidKey)\n    }\n  } satisfies Persister\n}",
      "startLine": 72,
      "endLine": 85,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/trpc.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@34-176",
      "type": "function_declaration",
      "name": "FormHeader",
      "text": "function FormHeader({\n  label,\n  onSaveAndExit,\n  route,\n  appbarIcon\n}: {\n  label: TranslationConfig\n  onSaveAndExit?: () => void\n  route: AllowedRouteWithEventId\n  appbarIcon?: React.ReactNode\n}) {\n  const intl = useIntl()\n  const { modal, exit, goToHome, deleteDeclaration } = useEventFormNavigation()\n\n  const { eventId } = useTypedParams(route)\n\n  if (!eventId) {\n    throw new Error('Event id is required')\n  }\n  const events = useEvents()\n  const event = events.getEventState.useSuspenseQuery(eventId)\n\n  const onExit = useCallback(async () => {\n    await exit(event)\n  }, [event, exit])\n\n  const onDelete = useCallback(async () => {\n    await deleteDeclaration(eventId)\n  }, [eventId, deleteDeclaration])\n\n  const menuItems = isUndeclaredDraft(event.status)\n    ? [\n        {\n          label: 'Delete declaration',\n          icon: <Icon name=\"Trash\" />,\n          handler: onDelete\n        }\n      ]\n    : []\n\n  return (\n    <AppBar\n      desktopLeft={appbarIcon}\n      desktopRight={\n        <>\n          {onSaveAndExit ? (\n            <>\n              <Button\n                disabled={false}\n                id=\"save-exit-btn\"\n                size=\"small\"\n                type=\"primary\"\n                onClick={onSaveAndExit}\n              >\n                <Icon name=\"DownloadSimple\" />\n                {intl.formatMessage(messages.saveExitButton)}\n              </Button>\n\n              <Button\n                data-testid=\"exit-button\"\n                size=\"small\"\n                type=\"secondary\"\n                onClick={onExit}\n              >\n                <Icon name=\"X\" />\n                {intl.formatMessage(messages.exitButton)}\n              </Button>\n              {menuItems.length > 0 && (\n                <ToggleMenu\n                  id=\"event-menu\"\n                  menuItems={menuItems}\n                  toggleButton={\n                    <Icon\n                      color=\"primary\"\n                      data-testid=\"event-menu-toggle-button-image\"\n                      name=\"DotsThreeVertical\"\n                      size=\"large\"\n                    />\n                  }\n                />\n              )}\n            </>\n          ) : (\n            <Button\n              data-testid=\"exit-button\"\n              size=\"small\"\n              type=\"icon\"\n              onClick={goToHome}\n            >\n              <Icon name=\"X\" />\n            </Button>\n          )}\n          {modal}\n        </>\n      }\n      desktopTitle={intl.formatMessage(label)}\n      mobileLeft={appbarIcon}\n      mobileRight={\n        <>\n          {onSaveAndExit ? (\n            <>\n              <Button\n                disabled={false}\n                size=\"small\"\n                type=\"icon\"\n                onClick={onSaveAndExit}\n              >\n                <Icon name=\"DownloadSimple\" />\n              </Button>\n              <Button size=\"small\" type=\"icon\" onClick={onExit}>\n                <Icon name=\"X\" />\n              </Button>\n              <ToggleMenu\n                id={'event-menu'}\n                menuItems={[\n                  {\n                    label: 'Delete declaration',\n                    icon: <Icon name=\"Trash\" />,\n                    handler: onDelete\n                  }\n                ]}\n                toggleButton={\n                  <Icon\n                    color=\"primary\"\n                    data-testid=\"event-menu-toggle-button-image\"\n                    name=\"DotsThreeVertical\"\n                    size=\"large\"\n                  />\n                }\n              />\n            </>\n          ) : (\n            <Button size=\"small\" type=\"icon\" onClick={goToHome}>\n              <Icon name=\"X\" />\n            </Button>\n          )}\n          {modal}\n        </>\n      }\n      mobileTitle={intl.formatMessage(label)}\n    />\n  )\n}",
      "startLine": 34,
      "endLine": 176,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/layouts/form/FormHeader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@25-60",
      "type": "function_declaration",
      "name": "FormLayout",
      "text": "function FormLayout({\n  route,\n  children,\n  onSaveAndExit,\n  appbarIcon = <DeclarationIcon />\n}: {\n  route: AllowedRouteWithEventId\n  children: React.ReactNode\n  onSaveAndExit?: () => void | Promise<void>\n  appbarIcon?: React.ReactNode\n}) {\n  const { eventId } = useTypedParams(route)\n  const events = useEvents()\n  const event = events.getEventState.useSuspenseQuery(eventId)\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n\n  return (\n    <Frame\n      header={\n        <FormHeader\n          appbarIcon={appbarIcon}\n          label={configuration.label}\n          route={route}\n          onSaveAndExit={onSaveAndExit}\n        />\n      }\n      skipToContentText=\"Skip to form\"\n    >\n      <React.Suspense fallback={<Spinner id=\"event-form-spinner\" />}>\n        {children}\n      </React.Suspense>\n    </Frame>\n  )\n}",
      "startLine": 25,
      "endLine": 60,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/layouts/form/index.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@30-60",
      "type": "function_declaration",
      "name": "convertDotToTripleUnderscore",
      "text": "function convertDotToTripleUnderscore(obj: EventState, parentKey = '') {\n  const result: Record<string, PrimitiveType> = {}\n\n  for (const [key, value] of Object.entries(obj)) {\n    const newKey =\n      (parentKey ? parentKey + INTERNAL_SEPARATOR : '') +\n      key.replace(/\\./g, INTERNAL_SEPARATOR)\n    if (Array.isArray(value)) {\n      value.forEach((val, id) => {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (typeof val === 'object' && val !== null) {\n          Object.assign(\n            result,\n            convertDotToTripleUnderscore(\n              val,\n              (newKey ? newKey + INTERNAL_SEPARATOR : '') + id\n            )\n          )\n        }\n      })\n      /* @TODO: Check if the typing is correct or is there a case where null could come in */\n      /*  eslint-disable-next-line @typescript-eslint/no-unnecessary-condition */\n    } else if (typeof value === 'object' && value !== null) {\n      Object.assign(result, convertDotToTripleUnderscore(value, newKey))\n    } else {\n      result[newKey] = !value ? EMPTY_TOKEN : value\n    }\n  }\n\n  return result\n}",
      "startLine": 30,
      "endLine": 60,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/messages/utils.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@66-72",
      "type": "function_declaration",
      "name": "convertDotInCurlyBraces",
      "text": "function convertDotInCurlyBraces(str: string): string {\n  return str.replace(/{([^}]+)}/g, (_, content) => {\n    // Replace dots with triple underscores within the curly braces\n    const transformedContent = content.replace(/\\./g, INTERNAL_SEPARATOR)\n    return `{${transformedContent}}`\n  })\n}",
      "startLine": 66,
      "endLine": 72,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/messages/utils.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@74-92",
      "type": "function_declaration",
      "name": "getVariablesFromElement",
      "text": "function getVariablesFromElement(element: MessageFormatElement): string[] {\n  if (isArgumentElement(element)) {\n    return [element.value]\n  }\n  if (isSelectElement(element)) {\n    return [element.value].concat(\n      Object.values(element.options)\n        .flatMap((el) => el.value)\n        .flatMap((el) => getVariablesFromElement(el))\n    )\n  }\n\n  if (isPluralElement(element)) {\n    return Object.values(element.options)\n      .flatMap((el) => el.value)\n      .flatMap((el) => getVariablesFromElement(el))\n  }\n  return []\n}",
      "startLine": 74,
      "endLine": 92,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/messages/utils.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@27-35",
      "type": "function_declaration",
      "name": "renderUseIntlHook",
      "text": "function renderUseIntlHook() {\n      return renderHook(() => useIntlFormatMessageWithFlattenedParams(), {\n        wrapper: ({ children }) => (\n          <IntlProvider locale=\"en\" messages={messages}>\n            {children}\n          </IntlProvider>\n        )\n      })\n    }",
      "startLine": 27,
      "endLine": 35,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/messages/utils.test.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@42-96",
      "type": "function_declaration",
      "name": "useSaveAndExitModal",
      "text": "function useSaveAndExitModal() {\n  const [saveAndExitModal, openModal] = useModal()\n  const intl = useIntl()\n\n  async function handleSaveAndExit(onSaveAndExit: () => void) {\n    const saveAndExitConfirm = await openModal<boolean | null>((close) => (\n      <ResponsiveModal\n        autoHeight\n        actions={[\n          <Button\n            key=\"cancel_save_exit\"\n            id=\"cancel_save_exit\"\n            type=\"tertiary\"\n            onClick={() => {\n              close(null)\n            }}\n          >\n            {intl.formatMessage(saveAndExitModalMessages.cancel)}\n          </Button>,\n          <Button\n            key=\"confirm_save_exit\"\n            id=\"confirm_save_exit\"\n            type=\"positive\"\n            onClick={() => {\n              close(true)\n            }}\n          >\n            {intl.formatMessage(saveAndExitModalMessages.confirm)}\n          </Button>\n        ]}\n        handleClose={() => close(null)}\n        id=\"save_declaration_confirmation\"\n        responsive={false}\n        show={true}\n        title={intl.formatMessage(\n          saveAndExitModalMessages.saveDeclarationConfirmModalTitle\n        )}\n      >\n        <Stack>\n          <Text color=\"grey500\" element=\"p\" variant=\"reg16\">\n            {intl.formatMessage(\n              saveAndExitModalMessages.saveDeclarationConfirmModalDescription\n            )}\n          </Text>\n        </Stack>\n      </ResponsiveModal>\n    ))\n\n    if (saveAndExitConfirm) {\n      onSaveAndExit()\n    }\n    return\n  }\n  return { saveAndExitModal, handleSaveAndExit }\n}",
      "startLine": 42,
      "endLine": 96,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/SaveAndExitModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@46-94",
      "type": "function_declaration",
      "name": "handleSaveAndExit",
      "text": "async function handleSaveAndExit(onSaveAndExit: () => void) {\n    const saveAndExitConfirm = await openModal<boolean | null>((close) => (\n      <ResponsiveModal\n        autoHeight\n        actions={[\n          <Button\n            key=\"cancel_save_exit\"\n            id=\"cancel_save_exit\"\n            type=\"tertiary\"\n            onClick={() => {\n              close(null)\n            }}\n          >\n            {intl.formatMessage(saveAndExitModalMessages.cancel)}\n          </Button>,\n          <Button\n            key=\"confirm_save_exit\"\n            id=\"confirm_save_exit\"\n            type=\"positive\"\n            onClick={() => {\n              close(true)\n            }}\n          >\n            {intl.formatMessage(saveAndExitModalMessages.confirm)}\n          </Button>\n        ]}\n        handleClose={() => close(null)}\n        id=\"save_declaration_confirmation\"\n        responsive={false}\n        show={true}\n        title={intl.formatMessage(\n          saveAndExitModalMessages.saveDeclarationConfirmModalTitle\n        )}\n      >\n        <Stack>\n          <Text color=\"grey500\" element=\"p\" variant=\"reg16\">\n            {intl.formatMessage(\n              saveAndExitModalMessages.saveDeclarationConfirmModalDescription\n            )}\n          </Text>\n        </Stack>\n      </ResponsiveModal>\n    ))\n\n    if (saveAndExitConfirm) {\n      onSaveAndExit()\n    }\n    return\n  }",
      "startLine": 46,
      "endLine": 94,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/SaveAndExitModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@39-41",
      "type": "function_declaration",
      "name": "useNavigationHistory",
      "text": "function useNavigationHistory() {\n  return useContext(NavigationContext)\n}",
      "startLine": 39,
      "endLine": 41,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/NavigationStack.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@54-117",
      "type": "function_declaration",
      "name": "NavigationStack",
      "text": "function NavigationStack(props: PropsWithChildren) {\n  const location = useLocation()\n  const navigateType = useNavigationType()\n  const history = useNavigationHistory()\n  const [allowedToNavigate, setAllowedToNavigate] = useState(false)\n  // Tracks if we're in the process of backing out of the navigation stack\n  const [backing, setBacking] = useState(false)\n\n  useEffect(() => {\n    // User is accessing the view directly if there's no navigation history\n    const userAccessingViewDirectly = history.length === 0\n\n    // We also don't want to start backing the user if its only a page reload\n    const navEntry = performance.getEntriesByType(\n      'navigation'\n    )[0] as PerformanceNavigationTiming\n\n    const userReloadingPage = navEntry.type === 'reload'\n\n    // User is trying to navigate back to a view in the stack using browser back button\n    const navigatingBackToStack =\n      !userAccessingViewDirectly &&\n      navigateType === Action.Pop &&\n      !userReloadingPage\n\n    // On storybook tests we don't want to navigate the user with window.history.back()\n    const isStorybook = import.meta.env.STORYBOOK === 'true'\n\n    // When user tries to navigate back to the stack with browser back button,\n    // we initiate a sequence of back navigations to exit the stack completely.\n    // This preserves the browser's history state for proper forward/back navigation.\n    if (navigatingBackToStack && !isStorybook) {\n      setBacking(true)\n    }\n\n    setAllowedToNavigate(true)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  // Continue backing out of the stack.\n  // This effect retriggers on each location change, until we unmount.\n  useEffect(() => {\n    if (backing) {\n      window.history.back()\n    }\n  }, [location, backing])\n\n  // When unmounting while in backing mode, perform one final back navigation\n  // This ensures we land at the correct previous page that the user intended to reach\n  useEffect(() => {\n    return () => {\n      if (backing) {\n        window.history.back()\n      }\n    }\n  }, [backing])\n\n  // Don't render children while backing out or before navigation is allowed\n  if (!allowedToNavigate || backing) {\n    return null\n  }\n\n  return props.children\n}",
      "startLine": 54,
      "endLine": 117,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/NavigationStack.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@33-41",
      "type": "function_declaration",
      "name": "joinValues",
      "text": "function joinValues(\n  values: Array<string | undefined | null>,\n  separator = ' '\n) {\n  return values\n    .filter((value) => !!value)\n    .join(separator)\n    .trim()\n}",
      "startLine": 33,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-50",
      "type": "function_declaration",
      "name": "getUsersFullName",
      "text": "function getUsersFullName(\n  names: ResolvedUser['name'],\n  language: string\n) {\n  const match = names.find((name) => name.use === language) ?? names[0]\n\n  return joinValues([...match.given, match.family])\n}",
      "startLine": 43,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@76-79",
      "type": "function_declaration",
      "name": "flattenEventIndex",
      "text": "function flattenEventIndex(event: NonNullable<EventIndex>) {\n  const { declaration, ...rest } = event\n  return { ...rest, ...declaration }\n}",
      "startLine": 76,
      "endLine": 79,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@83-85",
      "type": "function_declaration",
      "name": "isTemporaryId",
      "text": "function isTemporaryId(id: string) {\n  return id.startsWith('tmp-')\n}",
      "startLine": 83,
      "endLine": 85,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@87-89",
      "type": "function_declaration",
      "name": "createTemporaryId",
      "text": "function createTemporaryId() {\n  return `tmp-${uuid()}`\n}",
      "startLine": 87,
      "endLine": 89,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@102-183",
      "type": "function_declaration",
      "name": "replacePlaceholders",
      "text": "function replacePlaceholders({\n  fieldType,\n  currentValue,\n  defaultValue,\n  systemVariables\n}: {\n  fieldType: FieldType\n  currentValue?: FieldValue\n  defaultValue?: FieldConfigDefaultValue\n  systemVariables: SystemVariables\n}): FieldValue | undefined {\n  if (currentValue) {\n    return currentValue\n  }\n\n  if (!defaultValue) {\n    return undefined\n  }\n\n  if (isFieldValueWithoutTemplates(defaultValue)) {\n    return defaultValue\n  }\n\n  if (isTemplateVariable(defaultValue)) {\n    const resolvedValue = get(systemVariables, defaultValue)\n    const validator = mapFieldTypeToZod(fieldType)\n\n    const parsedValue = validator.safeParse(resolvedValue)\n\n    if (parsedValue.success) {\n      return parsedValue.data as FieldValue\n    }\n\n    throw new Error(`Could not resolve ${defaultValue}: ${parsedValue.error}`)\n  }\n\n  if (\n    compositeFieldTypes.some((ft) => ft === fieldType) &&\n    typeof defaultValue === 'object'\n  ) {\n    /**\n     * defaultValue is typically an ADDRESS, FILE, or FILE_WITH_OPTIONS.\n     * Some STRING values within the defaultValue object may contain template variables (prefixed with $).\n     */\n    const result = { ...defaultValue }\n\n    // @TODO: This resolves template variables in the first level of the object. In the future, we might need to extend it to arbitrary depth.\n    for (const [key, val] of Object.entries(result)) {\n      if (isTemplateVariable(val)) {\n        const resolvedValue = get(systemVariables, val)\n        // For now, we only support resolving template variables for text fields.\n        const validator = mapFieldTypeToZod(FieldType.TEXT)\n        const parsedValue = validator.safeParse(resolvedValue)\n        if (parsedValue.success && parsedValue.data) {\n          result[key] = resolvedValue\n        } else {\n          throw new Error(`Could not resolve ${key}: ${parsedValue.error}`)\n        }\n      }\n    }\n\n    const resultValidator = mapFieldTypeToZod(fieldType)\n    const parsedResult = resultValidator.safeParse(result)\n    if (parsedResult.success) {\n      return result as FieldValue\n    }\n    throw new Error(\n      `Could not resolve ${fieldType}: ${JSON.stringify(\n        defaultValue\n      )}. Error: ${parsedResult.error}`\n    )\n  }\n  throw new Error(\n    `Could not resolve ${fieldType}: ${JSON.stringify(defaultValue)}`\n  )\n}\n\nexport const AssignmentStatus = {\n  ASSIGNED_TO_SELF: 'ASSIGNED_TO_SELF',\n  ASSIGNED_TO_OTHERS: 'ASSIGNED_TO_OTHERS',\n  UNASSIGNED: 'UNASSIGNED'\n}",
      "startLine": 102,
      "endLine": 183,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@113-115",
      "type": "method_definition",
      "name": "if",
      "text": "if (currentValue) {\n    return currentValue\n  }",
      "startLine": 113,
      "endLine": 115,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@150-160",
      "type": "method_definition",
      "name": "if",
      "text": "if (isTemplateVariable(val)) {\n        const resolvedValue = get(systemVariables, val)\n        // For now, we only support resolving template variables for text fields.\n        const validator = mapFieldTypeToZod(FieldType.TEXT)\n        const parsedValue = validator.safeParse(resolvedValue)\n        if (parsedValue.success && parsedValue.data) {\n          result[key] = resolvedValue\n        } else {\n          throw new Error(`Could not resolve ${key}: ${parsedValue.error}`)\n        }\n      }",
      "startLine": 150,
      "endLine": 160,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@76-107",
      "type": "function_declaration",
      "name": "LoadingIndicatorComp",
      "text": "function LoadingIndicatorComp({\n  loading,\n  noDeclaration,\n  hasError,\n  intl,\n  isOnline\n}: LoadingIndicatorCompProps) {\n  return (\n    <Wrapper>\n      {isOnline && loading && (\n        <LoadingContainer>\n          <Spinner baseColor=\"#4C68C1\" id=\"Spinner\" size={24} />\n        </LoadingContainer>\n      )}\n      <MobileViewContainer noDeclaration={noDeclaration}>\n        {isOnline && hasError && (\n          <ErrorText id=\"search-result-error-text-count\">\n            {intl.formatMessage(errorMessages.queryError)}\n          </ErrorText>\n        )}\n        {!isOnline && (\n          <ConnectivityContainer>\n            <NoConnectivity />\n            <Text id=\"wait-connection-text\">\n              {intl.formatMessage(constantsMessages.noConnection)}\n            </Text>\n          </ConnectivityContainer>\n        )}\n      </MobileViewContainer>\n    </Wrapper>\n  )\n}",
      "startLine": 76,
      "endLine": 107,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/LoadingIndicator.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@28-30",
      "type": "function_declaration",
      "name": "makeFormFieldIdFormikCompatible",
      "text": "function makeFormFieldIdFormikCompatible(fieldId: string) {\n  return fieldId.replaceAll(DOT_SEPARATOR, FIELD_SEPARATOR)\n}",
      "startLine": 28,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-34",
      "type": "function_declaration",
      "name": "makeFormikFieldIdOpenCRVSCompatible",
      "text": "function makeFormikFieldIdOpenCRVSCompatible(fieldId: string): string {\n  return fieldId.replaceAll(FIELD_SEPARATOR, DOT_SEPARATOR)\n}",
      "startLine": 32,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@36-54",
      "type": "function_declaration",
      "name": "handleDefaultValue",
      "text": "function handleDefaultValue({\n  field,\n  systemVariables\n}: {\n  field: FieldConfig\n  systemVariables: SystemVariables\n}) {\n  const defaultValue = field.defaultValue\n\n  if (isFieldConfigDefaultValue(field.defaultValue)) {\n    return replacePlaceholders({\n      fieldType: field.type,\n      defaultValue,\n      systemVariables\n    })\n  }\n\n  return defaultValue\n}",
      "startLine": 36,
      "endLine": 54,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-65",
      "type": "function_declaration",
      "name": "formatDateFieldValue",
      "text": "function formatDateFieldValue(value: string) {\n  return value\n    .split('-')\n    .map((d: string) => d.padStart(2, '0'))\n    .join('-')\n}",
      "startLine": 60,
      "endLine": 65,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@74-90",
      "type": "function_declaration",
      "name": "makeDatesFormatted",
      "text": "function makeDatesFormatted<T extends EventState>(\n  fields: FieldConfig[],\n  values: T\n): T {\n  return fields.reduce((acc, field) => {\n    const fieldId = field.id.replaceAll(DOT_SEPARATOR, FIELD_SEPARATOR)\n\n    if (field.type === FieldType.DATE && fieldId in values) {\n      const value = values[fieldId as keyof typeof values]\n      if (typeof value === 'string') {\n        const formattedDate = formatDateFieldValue(value)\n        return { ...acc, [fieldId]: formattedDate }\n      }\n    }\n    return acc\n  }, values)\n}",
      "startLine": 74,
      "endLine": 90,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-46",
      "type": "function_declaration",
      "name": "mapFieldsToValues",
      "text": "function mapFieldsToValues(\n  fields: FieldConfig[],\n  systemVariables: SystemVariables\n) {\n  return fields.reduce((memo, field) => {\n    const fieldInitialValue = handleDefaultValue({\n      field,\n      systemVariables\n    })\n\n    return { ...memo, [field.id]: fieldInitialValue }\n  }, {})\n}",
      "startLine": 34,
      "endLine": 46,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/FormFieldGenerator/FormFieldGenerator.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@62-128",
      "type": "function_declaration",
      "name": "DocumentViewer",
      "text": "function DocumentViewer({\n  id,\n  options,\n  children\n}: {\n  id?: string\n  options: Option<DocumentViewerOptionValue>[]\n  children?: React.ReactNode\n}) {\n  const [selectedOption, setSelectedOption] = useState<\n    Option<DocumentViewerOptionValue> | undefined\n  >(options[0])\n\n  const onChange = (val: Option<DocumentViewerOptionValue>) =>\n    setSelectedOption(val)\n\n  const [zoom, setZoom] = useState(1)\n  const [rotation, setRotation] = useState(0)\n\n  const zoomIn = () => {\n    setZoom((prev) => prev + 0.2)\n  }\n\n  const zoomOut = () => {\n    setZoom((prev) => {\n      if (prev >= 1) {\n        return prev - 0.2\n      }\n      return prev\n    })\n  }\n\n  const rotateLeft = () => {\n    setRotation((prev) => (prev - 90) % 360)\n  }\n\n  return (\n    <ViewerWrapper id={id}>\n      <ViewerContainer>\n        <ViewerHeader>\n          <Select\n            color=\"inherit\"\n            id=\"select_document\"\n            options={options}\n            value={selectedOption?.value}\n            onChange={onChange}\n          />\n          <PanControls\n            rotateLeft={rotateLeft}\n            zoomIn={zoomIn}\n            zoomOut={zoomOut}\n          />\n        </ViewerHeader>\n        {!!selectedOption && (\n          <ViewerImage>\n            <PanViewer\n              image={selectedOption.value.url}\n              rotation={rotation}\n              zoom={zoom}\n            />\n          </ViewerImage>\n        )}\n        {children}\n      </ViewerContainer>\n    </ViewerWrapper>\n  )\n}",
      "startLine": 62,
      "endLine": 128,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/DocumentViewer.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@56-133",
      "type": "function_declaration",
      "name": "SimpleDocumentUploader",
      "text": "function SimpleDocumentUploader({\n  acceptedFileTypes = [],\n  name,\n  onUploadingStateChanged,\n  previewTransformer,\n  onComplete,\n  label,\n  file,\n  description,\n  error: errorProps,\n  disableDeleteInPreview,\n  touched,\n  width,\n  maxFileSize\n}: SimpleDocumentUploaderProps) {\n  const intl = useIntl()\n  const [previewImage, setPreviewImage] = useState<FileFieldValue | null>(null)\n\n  const { error, handleFileChange } = useOnFileChange({\n    acceptedFileTypes,\n    onComplete,\n    onUploadingStateChanged,\n    maxFileSize\n  })\n\n  function selectForPreview(selectedPreviewImage: FieldValue) {\n    if (previewTransformer) {\n      return setPreviewImage(\n        previewTransformer(selectedPreviewImage as FileFieldValue)\n      )\n    }\n    setPreviewImage(selectedPreviewImage as FileFieldValue)\n  }\n\n  function closePreviewSection() {\n    setPreviewImage(null)\n  }\n\n  function onDelete() {\n    onComplete(null)\n    closePreviewSection()\n  }\n\n  const errorMessage = error || errorProps || ''\n\n  return (\n    <>\n      {description && <FieldDescription>{description}</FieldDescription>}\n      {errorMessage && (touched || error) && (\n        <ErrorText id=\"field-error\">{errorMessage}</ErrorText>\n      )}\n      <SingleDocumentPreview\n        attachment={file}\n        label={label}\n        onDelete={onDelete}\n        onSelect={selectForPreview}\n      />\n      {previewImage && (\n        <DocumentPreview\n          disableDelete={disableDeleteInPreview}\n          goBack={closePreviewSection}\n          previewImage={previewImage}\n          title={label}\n          onDelete={onDelete}\n        />\n      )}\n      <DocumentUploader\n        data-testid={name}\n        fullWidth={width === 'full'}\n        id={name}\n        name={name}\n        onChange={handleFileChange}\n      >\n        {intl.formatMessage(messages.uploadFile)}\n      </DocumentUploader>\n    </>\n  )\n}",
      "startLine": 56,
      "endLine": 133,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/SimpleDocumentUploader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@81-88",
      "type": "function_declaration",
      "name": "selectForPreview",
      "text": "function selectForPreview(selectedPreviewImage: FieldValue) {\n    if (previewTransformer) {\n      return setPreviewImage(\n        previewTransformer(selectedPreviewImage as FileFieldValue)\n      )\n    }\n    setPreviewImage(selectedPreviewImage as FileFieldValue)\n  }",
      "startLine": 81,
      "endLine": 88,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/SimpleDocumentUploader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@90-92",
      "type": "function_declaration",
      "name": "closePreviewSection",
      "text": "function closePreviewSection() {\n    setPreviewImage(null)\n  }",
      "startLine": 90,
      "endLine": 92,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/SimpleDocumentUploader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@94-97",
      "type": "function_declaration",
      "name": "onDelete",
      "text": "function onDelete() {\n    onComplete(null)\n    closePreviewSection()\n  }",
      "startLine": 94,
      "endLine": 97,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/SimpleDocumentUploader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@59-96",
      "type": "function_declaration",
      "name": "SingleDocumentPreview",
      "text": "function SingleDocumentPreview({\n  id,\n  attachment,\n  label,\n  onSelect,\n  dropdownOptions,\n  onDelete\n}: Props) {\n  function getFormattedLabelForDocType(docType: string) {\n    const matchingOptionForDocType =\n      dropdownOptions &&\n      dropdownOptions.find((option) => option.value === docType)\n    return matchingOptionForDocType && matchingOptionForDocType.label\n  }\n  return (\n    <Wrapper id={`preview-list-${id}`}>\n      {attachment && label && (\n        <Container>\n          <Label>\n            <Icon color=\"grey600\" name=\"Paperclip\" size=\"medium\" />\n            <Link onClick={() => onSelect(attachment)}>\n              <span>{getFormattedLabelForDocType(label) || label}</span>\n            </Link>\n          </Label>\n          <Button\n            aria-label=\"Delete attachment\"\n            id=\"preview_delete\"\n            size=\"small\"\n            type=\"icon\"\n            onClick={() => onDelete && onDelete(attachment)}\n          >\n            <Icon color=\"red\" name=\"Trash\" size=\"small\" />\n          </Button>\n        </Container>\n      )}\n    </Wrapper>\n  )\n}",
      "startLine": 59,
      "endLine": 96,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/SingleDocumentPreview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@67-72",
      "type": "function_declaration",
      "name": "getFormattedLabelForDocType",
      "text": "function getFormattedLabelForDocType(docType: string) {\n    const matchingOptionForDocType =\n      dropdownOptions &&\n      dropdownOptions.find((option) => option.value === docType)\n    return matchingOptionForDocType && matchingOptionForDocType.label\n  }",
      "startLine": 67,
      "endLine": 72,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/SingleDocumentPreview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@38-97",
      "type": "function_declaration",
      "name": "useOnFileChange",
      "text": "function useOnFileChange({\n  acceptedFileTypes,\n  onComplete,\n  onUploadingStateChanged,\n  maxFileSize\n}: {\n  acceptedFileTypes: MimeType[]\n  onComplete: (file: File | null) => void\n  onUploadingStateChanged?: (isUploading: boolean) => void\n  maxFileSize: number\n}) {\n  const intl = useIntl()\n  const [error, setError] = useState('')\n\n  const [filesBeingUploaded, setFilesBeingUploaded] = useState<\n    { label: string }[]\n  >([])\n\n  const handleFileChange = (uploadedFile: File) => {\n    setFilesBeingUploaded([...filesBeingUploaded, { label: uploadedFile.name }])\n\n    // @TODO: figure out why this is called so many times\n    onUploadingStateChanged?.(false)\n\n    const isFileTooLarge = uploadedFile.size > maxFileSize\n\n    const hasFileCriteria = acceptedFileTypes.length > 0\n    const isWrongFileType = acceptedFileTypes.every(\n      (fileType) => fileType !== uploadedFile.type\n    )\n    if ((hasFileCriteria && isWrongFileType) || isFileTooLarge) {\n      onUploadingStateChanged?.(false)\n      setFilesBeingUploaded([])\n\n      const newErrorMessage = isFileTooLarge\n        ? intl.formatMessage(messages.fileSizeError, {\n            maxSize: bytesToMB(maxFileSize)\n          })\n        : intl.formatMessage(messages.fileTypeError, {\n            types: acceptedFileTypes\n              .map((fileType) => fileType.split('/').pop())\n              .join(', '),\n            maxSize: bytesToMB(maxFileSize)\n          })\n\n      setError(newErrorMessage)\n    } else {\n      onUploadingStateChanged?.(false)\n\n      onComplete(uploadedFile)\n      setError('')\n      setFilesBeingUploaded([])\n    }\n  }\n\n  return {\n    error,\n    handleFileChange\n  }\n}",
      "startLine": 38,
      "endLine": 97,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/useOnFileChange.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@63-162",
      "type": "function_declaration",
      "name": "DocumentPreview",
      "text": "function DocumentPreview({\n  previewImage,\n  title,\n  goBack,\n  onDelete,\n  disableDelete,\n  id\n}: IProps) {\n  const [zoom, setZoom] = useState(1)\n  const [rotation, setRotation] = useState(0)\n\n  function zoomIn() {\n    setZoom((prevState) => prevState + 0.2)\n  }\n  function zoomOut() {\n    setZoom((prevState) => (prevState >= 1 ? prevState - 0.2 : prevState))\n  }\n  function rotateLeft() {\n    setRotation((prevState) => (prevState - 90) % 360)\n  }\n\n  return (\n    <ViewerWrapper id={id ?? 'preview_image_field'}>\n      <AppBar\n        desktopLeft={<Icon name=\"Paperclip\" size=\"large\" />}\n        desktopRight={\n          <Stack gap={8}>\n            <PanControls\n              rotateLeft={rotateLeft}\n              zoomIn={zoomIn}\n              zoomOut={zoomOut}\n            />\n            {!disableDelete && (\n              <>\n                <DividerVertical />\n                <Button\n                  id=\"preview_delete\"\n                  type=\"icon\"\n                  onClick={() => onDelete(previewImage)}\n                >\n                  <Icon color=\"red\" name=\"Trash\" />\n                </Button>\n              </>\n            )}\n            <DividerVertical />\n            <Button\n              aria-label=\"Go close\"\n              id=\"preview_close\"\n              size=\"medium\"\n              type=\"icon\"\n              onClick={goBack}\n            >\n              <Icon name=\"X\" size=\"medium\" />\n            </Button>\n          </Stack>\n        }\n        desktopTitle={title}\n        mobileLeft={<Icon name=\"Paperclip\" size=\"large\" />}\n        mobileRight={\n          <Stack gap={8}>\n            <PanControls\n              rotateLeft={rotateLeft}\n              zoomIn={zoomIn}\n              zoomOut={zoomOut}\n            />\n            {!disableDelete && (\n              <Button\n                id=\"preview_delete\"\n                type=\"icon\"\n                onClick={() => onDelete(previewImage)}\n              >\n                <Icon color=\"red\" name=\"Trash\" />\n              </Button>\n            )}\n            <Button\n              aria-label=\"Go back\"\n              id=\"preview_close\"\n              size=\"medium\"\n              type=\"icon\"\n              onClick={goBack}\n            >\n              <Icon name=\"X\" size=\"medium\" />\n            </Button>\n          </Stack>\n        }\n        mobileTitle={title}\n      />\n\n      <ViewerContainer>\n        <PanViewer\n          key={Math.random()}\n          id=\"document_image\"\n          image={getFullUrl(previewImage.filename)}\n          rotation={rotation}\n          zoom={zoom}\n        />\n      </ViewerContainer>\n    </ViewerWrapper>\n  )\n}",
      "startLine": 63,
      "endLine": 162,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/DocumentPreview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@74-76",
      "type": "function_declaration",
      "name": "zoomIn",
      "text": "function zoomIn() {\n    setZoom((prevState) => prevState + 0.2)\n  }",
      "startLine": 74,
      "endLine": 76,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/DocumentPreview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@77-79",
      "type": "function_declaration",
      "name": "zoomOut",
      "text": "function zoomOut() {\n    setZoom((prevState) => (prevState >= 1 ? prevState - 0.2 : prevState))\n  }",
      "startLine": 77,
      "endLine": 79,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/DocumentPreview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@80-82",
      "type": "function_declaration",
      "name": "rotateLeft",
      "text": "function rotateLeft() {\n    setRotation((prevState) => (prevState - 90) % 360)\n  }",
      "startLine": 80,
      "endLine": 82,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/DocumentPreview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@44-52",
      "type": "function_declaration",
      "name": "getUpdatedFiles",
      "text": "function getUpdatedFiles(\n  prevFiles: FileFieldValueWithOption[],\n  newFile: FileFieldValueWithOption\n) {\n  return [\n    ...prevFiles.filter((prevFile) => prevFile.option !== newFile.option),\n    newFile\n  ]\n}",
      "startLine": 44,
      "endLine": 52,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/DocumentUploaderWithOption.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@60-246",
      "type": "function_declaration",
      "name": "DocumentUploaderWithOption",
      "text": "function DocumentUploaderWithOption({\n  value,\n  onChange,\n  name,\n  description,\n  acceptedFileTypes = [],\n  options,\n  error,\n  hideOnEmptyOption,\n  autoSelectOnlyOption,\n  maxFileSize\n}: {\n  name: string\n  description?: string\n  acceptedFileTypes?: MimeType[]\n  options: SelectOption[]\n  value: FileFieldWithOptionValue\n  onChange: (file?: FileFieldValueWithOption[]) => void\n  error?: string\n  hideOnEmptyOption?: boolean\n  autoSelectOnlyOption?: boolean\n  maxFileSize: number\n}) {\n  const intl = useIntl()\n  const documentTypeRequiredErrorMessage = intl.formatMessage(\n    DocumentTypeRequiredError\n  )\n\n  const [files, setFiles] = useState(value)\n  const [filesBeingProcessed, setFilesBeingProcessed] = useState<\n    Array<{ label: string }>\n  >([])\n\n  const [selectedOption, setSelectedOption] = useState<string | undefined>(\n    undefined\n  )\n  const [unselectedOptionError, setUnselectedOptionError] = useState('')\n\n  const [previewImage, setPreviewImage] =\n    useState<FileFieldValueWithOption | null>(null)\n\n  const { uploadFile, deleteFile: deleteFileFromBackend } = useFileUpload(\n    name,\n    {\n      onSuccess: ({ type, originalFilename, filename, id }) => {\n        const newFile = {\n          filename,\n          originalFilename: originalFilename,\n          type: type,\n          option: id\n        }\n\n        setFilesBeingProcessed((prev) =>\n          prev.filter(({ label }) => label !== id)\n        )\n\n        setFiles((prevFiles) => getUpdatedFiles(prevFiles, newFile))\n        onChange(getUpdatedFiles(files, newFile))\n        setSelectedOption(undefined)\n      }\n    }\n  )\n\n  const getLabelForDocumentOption = (docType: string) => {\n    const label = options.find(({ value: val }) => val === docType)?.label\n    return label && intl.formatMessage(label)\n  }\n\n  const onComplete = (newFile: File | null) => {\n    if (newFile) {\n      if (selectedOption) {\n        setFilesBeingProcessed((prev) => [...prev, { label: selectedOption }])\n\n        uploadFile(newFile, selectedOption)\n      } else {\n        setUnselectedOptionError(documentTypeRequiredErrorMessage)\n      }\n    }\n  }\n\n  const { error: fileChangeError, handleFileChange } = useOnFileChange({\n    acceptedFileTypes,\n    onComplete,\n    maxFileSize\n  })\n\n  const onDeleteFile = (fileName: string) => {\n    deleteFileFromBackend(fileName)\n    setFiles((prevFiles) =>\n      prevFiles.filter((file) => file.filename !== fileName)\n    )\n    onChange(files.filter((file) => file.filename !== fileName))\n    setPreviewImage(null)\n  }\n\n  const remainingOptions = options.filter(\n    ({ value: val }) => !files.some((file) => file.option === val)\n  )\n\n  if (hideOnEmptyOption && remainingOptions.length === 0) {\n    return null\n  }\n\n  if (options.length === 1) {\n    const [onlyOption] = options\n    return (\n      <File.Input\n        acceptedFileTypes={acceptedFileTypes}\n        description={description}\n        error={error}\n        label={intl.formatMessage(onlyOption.label)}\n        maxFileSize={maxFileSize}\n        name={name}\n        value={value[0]}\n        width={'full'}\n        onChange={(file) => {\n          if (file) {\n            onChange([{ ...file, option: onlyOption.value }])\n          }\n        }}\n      />\n    )\n  }\n\n  if (\n    autoSelectOnlyOption &&\n    remainingOptions.length === 1 &&\n    remainingOptions[0].value !== selectedOption\n  ) {\n    setSelectedOption(remainingOptions[0].value)\n  }\n\n  const errorMessage = error || unselectedOptionError || fileChangeError || ''\n\n  return (\n    <UploadWrapper>\n      {errorMessage && (\n        <div id=\"upload-error\">\n          <ErrorText>{errorMessage}</ErrorText>\n        </div>\n      )}\n      <DocumentListPreview\n        documents={files}\n        dropdownOptions={options}\n        processingDocuments={filesBeingProcessed}\n        onDelete={onDeleteFile}\n        onSelect={(document) =>\n          setPreviewImage(document as FileFieldValueWithOption)\n        }\n      />\n\n      <Flex>\n        <DropdownContainer>\n          <Select.Input\n            id={name}\n            options={remainingOptions}\n            type={'SELECT'}\n            value={selectedOption}\n            onChange={(val) => {\n              setSelectedOption(val)\n              setUnselectedOptionError('')\n            }}\n          />\n        </DropdownContainer>\n        <DocumentUploader\n          disabled={Boolean(error)}\n          id={name}\n          name={name}\n          onChange={error ? undefined : handleFileChange}\n        >\n          {intl.formatMessage(messages.uploadFile)}\n        </DocumentUploader>\n      </Flex>\n\n      {previewImage && (\n        <DocumentPreview\n          goBack={() => setPreviewImage(null)}\n          previewImage={previewImage}\n          title={getLabelForDocumentOption(previewImage.option)}\n          onDelete={(file) => {\n            onDeleteFile(file.filename)\n          }}\n        />\n      )}\n    </UploadWrapper>\n  )\n}",
      "startLine": 60,
      "endLine": 246,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/DocumentUploaderWithOption.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@129-137",
      "type": "method_definition",
      "name": "if",
      "text": "if (newFile) {\n      if (selectedOption) {\n        setFilesBeingProcessed((prev) => [...prev, { label: selectedOption }])\n\n        uploadFile(newFile, selectedOption)\n      } else {\n        setUnselectedOptionError(documentTypeRequiredErrorMessage)\n      }\n    }",
      "startLine": 129,
      "endLine": 137,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/inputs/FileInput/DocumentUploaderWithOption.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@32-50",
      "type": "function_declaration",
      "name": "getValidationErrorsForForm",
      "text": "function getValidationErrorsForForm(\n  fields: FieldConfig[],\n  values: EventState\n) {\n  return fields.reduce((errorsForAllFields: Errors, field) => {\n    if (\n      // eslint-disable-next-line\n      errorsForAllFields[field.id] &&\n      errorsForAllFields[field.id].errors.length > 0\n    ) {\n      return errorsForAllFields\n    }\n\n    return {\n      ...errorsForAllFields,\n      [field.id]: runFieldValidations({ field, values })\n    }\n  }, {})\n}",
      "startLine": 32,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/forms/validation.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@75-93",
      "type": "function_declaration",
      "name": "IconComp",
      "text": "function IconComp({\n  status,\n  isValidatedOnReview,\n  isArchived\n}: {\n  status: string\n  isValidatedOnReview?: boolean\n  isArchived?: boolean\n}) {\n  return (\n    <Icon>\n      <DeclarationIcon\n        color={STATUS_TO_COLOR_MAP[status]}\n        isArchive={isArchived}\n        isValidatedOnReview={isValidatedOnReview}\n      />\n    </Icon>\n  )\n}",
      "startLine": 75,
      "endLine": 93,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/IconWithName.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@95-113",
      "type": "function_declaration",
      "name": "IconWithName",
      "text": "function IconWithName({\n  status,\n  name,\n  isValidatedOnReview,\n  isArchived\n}: IconProps) {\n  return (\n    <Flex id=\"flex\">\n      {status && (\n        <IconComp\n          isArchived={isArchived}\n          isValidatedOnReview={isValidatedOnReview}\n          status={status}\n        />\n      )}\n      {name}\n    </Flex>\n  )\n}",
      "startLine": 95,
      "endLine": 113,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/IconWithName.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@115-137",
      "type": "function_declaration",
      "name": "IconWithNameEvent",
      "text": "function IconWithNameEvent({\n  status,\n  name,\n  event,\n  isValidatedOnReview,\n  isArchived\n}: IconWithNameEventProps) {\n  return (\n    <Flex id=\"flex\">\n      {status && (\n        <IconComp\n          isArchived={isArchived}\n          isValidatedOnReview={isValidatedOnReview}\n          status={status}\n        />\n      )}\n      <NameEventContainer id=\"nameEvent\">\n        {name}\n        {event && <Event>{event}</Event>}\n      </NameEventContainer>\n    </Flex>\n  )\n}",
      "startLine": 115,
      "endLine": 137,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/components/IconWithName.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@94-103",
      "type": "function_declaration",
      "name": "useCreateDraft",
      "text": "function useCreateDraft() {\n  const options = trpcOptionsProxy.event.draft.create.mutationOptions()\n\n  return useMutation({\n    ...options,\n    ...queryClient.getMutationDefaults(\n      trpcOptionsProxy.event.draft.create.mutationKey()\n    )\n  })\n}",
      "startLine": 94,
      "endLine": 103,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/drafts/useDrafts.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@105-143",
      "type": "function_declaration",
      "name": "useDrafts",
      "text": "function useDrafts() {\n  const trpc = useTRPC()\n  const setDraft = localDraftStore((drafts) => drafts.setDraft)\n  const getLocalDraftOrDefault = localDraftStore(\n    (drafts) => drafts.getLocalDraftOrDefault\n  )\n\n  const localDraft = localDraftStore((drafts) => drafts.draft)\n  const createDraft = useCreateDraft()\n\n  return {\n    setLocalDraft: setDraft,\n    getLocalDraftOrDefault: getLocalDraftOrDefault,\n    submitLocalDraft: () => {\n      if (!localDraft) {\n        throw new Error('No draft to submit')\n      }\n\n      createDraft.mutate({\n        eventId: localDraft.eventId,\n        declaration: localDraft.action.declaration,\n        annotation: localDraft.action.annotation,\n        transactionId: localDraft.transactionId,\n        type: localDraft.action.type,\n        status: localDraft.action.status\n      })\n    },\n    getRemoteDrafts: function useDraftList(): Draft[] {\n      const options = trpc.event.draft.list.queryOptions()\n\n      const drafts = useSuspenseQuery({\n        ...options,\n        queryKey: trpc.event.draft.list.queryKey()\n      })\n\n      return drafts.data\n    }\n  }\n}",
      "startLine": 105,
      "endLine": 143,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/drafts/useDrafts.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-21",
      "type": "function_declaration",
      "name": "Debug",
      "text": "function Debug() {\n  return (\n    <>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </>\n  )\n}",
      "startLine": 15,
      "endLine": 21,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/debug/debug.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@70-150",
      "type": "function_declaration",
      "name": "EventSelector",
      "text": "function EventSelector() {\n  const intl = useIntl()\n  const navigate = useNavigate()\n  const [eventType, setEventType] = useState('')\n  const [noEventSelectedError, setNoEventSelectedError] = useState(false)\n  const eventConfigurations = useEventConfigurations()\n  const events = useEvents()\n  const clearForm = useEventFormData((state) => state.clear)\n  const clearAnnotation = useActionAnnotation((state) => state.clear)\n  const createEvent = events.createEvent()\n\n  function handleContinue() {\n    if (eventType === '') {\n      return setNoEventSelectedError(true)\n    }\n    const transactionId = createTemporaryId()\n    const eventConfig = eventConfigurations.find(({ id }) => id === eventType)\n\n    if (!eventConfig) {\n      throw new Error(`Configuration for event '${eventType}' not found`)\n    }\n\n    createEvent.mutate({\n      type: eventType,\n      transactionId,\n      dateOfEvent: eventConfig.dateOfEvent\n    })\n\n    clearForm()\n    clearAnnotation()\n\n    navigate(\n      ROUTES.V2.EVENTS.DECLARE.buildPath({\n        eventId: transactionId\n      })\n    )\n  }\n\n  return (\n    <>\n      {noEventSelectedError && (\n        <ErrorText id=\"require-error\">\n          {intl.formatMessage(messages.errorMessage)}\n        </ErrorText>\n      )}\n      <Stack\n        alignItems=\"left\"\n        direction=\"column\"\n        gap={16}\n        id=\"select_vital_event_view\"\n      >\n        {eventConfigurations.map((event) => (\n          <RadioButton\n            key={`${event.id}event`}\n            id={`select_${event.id}_event`}\n            label={intl.formatMessage(event.label)}\n            name={`${event.id}event`}\n            selected={eventType === event.id ? event.id : ''}\n            size=\"large\"\n            value={event.id}\n            onChange={() => {\n              setEventType(event.id)\n              setNoEventSelectedError(false)\n            }}\n          />\n        ))}\n\n        <Button\n          key=\"select-vital-event-continue\"\n          fullWidth\n          id=\"continue\"\n          size=\"large\"\n          type=\"primary\"\n          onClick={handleContinue}\n        >\n          {intl.formatMessage(messages.continueButton)}\n        </Button>\n      </Stack>\n    </>\n  )\n}",
      "startLine": 70,
      "endLine": 150,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/EventSelection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@81-106",
      "type": "function_declaration",
      "name": "handleContinue",
      "text": "function handleContinue() {\n    if (eventType === '') {\n      return setNoEventSelectedError(true)\n    }\n    const transactionId = createTemporaryId()\n    const eventConfig = eventConfigurations.find(({ id }) => id === eventType)\n\n    if (!eventConfig) {\n      throw new Error(`Configuration for event '${eventType}' not found`)\n    }\n\n    createEvent.mutate({\n      type: eventType,\n      transactionId,\n      dateOfEvent: eventConfig.dateOfEvent\n    })\n\n    clearForm()\n    clearAnnotation()\n\n    navigate(\n      ROUTES.V2.EVENTS.DECLARE.buildPath({\n        eventId: transactionId\n      })\n    )\n  }",
      "startLine": 81,
      "endLine": 106,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/EventSelection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@152-196",
      "type": "function_declaration",
      "name": "EventSelection",
      "text": "function EventSelection() {\n  const intl = useIntl()\n  const { goToHome } = useEventFormNavigation()\n\n  return (\n    <Frame\n      header={\n        <AppBar\n          desktopLeft={<Icon name=\"Draft\" size=\"large\" />}\n          desktopRight={\n            <Button\n              id=\"goBack\"\n              size=\"small\"\n              type=\"secondary\"\n              onClick={goToHome}\n            >\n              <Icon name=\"X\" />\n              {intl.formatMessage(messages.exitButton)}\n            </Button>\n          }\n          desktopTitle={intl.formatMessage(messages.registerNewEventTitle)}\n          mobileLeft={<Icon name=\"Draft\" size=\"large\" />}\n          mobileRight={\n            <Button size=\"medium\" type=\"icon\" onClick={goToHome}>\n              <Icon name=\"X\" />\n            </Button>\n          }\n          mobileTitle={intl.formatMessage(messages.registerNewEventTitle)}\n        />\n      }\n      skipToContentText={intl.formatMessage(\n        constantsMessages.skipToMainContent\n      )}\n    >\n      <Content\n        size={ContentSize.SMALL}\n        title={intl.formatMessage(messages.registerNewEventHeading)}\n      >\n        <React.Suspense fallback={<Spinner id=\"event-selector-spinner\" />}>\n          <EventSelector />\n        </React.Suspense>\n      </Content>\n    </Frame>\n  )\n}",
      "startLine": 152,
      "endLine": 196,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/EventSelection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@16-28",
      "type": "function_declaration",
      "name": "ParagraphInput",
      "text": "function ParagraphInput({\n  fontVariant,\n  message\n}: {\n  message: string\n  fontVariant?: HtmlFontVariant\n}) {\n  return (\n    <TextComponent element=\"p\" variant={fontVariant ?? 'reg16'}>\n      <span dangerouslySetInnerHTML={{ __html: message }} />\n    </TextComponent>\n  )\n}",
      "startLine": 16,
      "endLine": 28,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Paragraph.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@51-162",
      "type": "function_declaration",
      "name": "useEventFormNavigation",
      "text": "function useEventFormNavigation() {\n  const intl = useIntl()\n  const navigate = useNavigate()\n\n  const events = useEvents()\n  const { getRemoteDrafts } = useDrafts()\n  const remoteDrafts = getRemoteDrafts()\n  const deleteEvent = events.deleteEvent.useMutation()\n\n  const [modal, openModal] = useModal()\n\n  function goToHome() {\n    navigate(ROUTES.V2.path)\n  }\n\n  async function exit(event: EventIndex) {\n    const exitConfirm = await openModal<boolean | null>((close) => (\n      <ResponsiveModal\n        autoHeight\n        actions={[\n          <Button\n            key=\"cancel_save_without_exit\"\n            id=\"cancel_save_without_exit\"\n            type=\"tertiary\"\n            onClick={() => {\n              close(null)\n            }}\n          >\n            {intl.formatMessage(modalMessages.cancel)}\n          </Button>,\n          <Button\n            key=\"confirm_save_without_exit\"\n            id=\"confirm_save_without_exit\"\n            type=\"primary\"\n            onClick={() => {\n              close(true)\n            }}\n          >\n            {intl.formatMessage(modalMessages.confirm)}\n          </Button>\n        ]}\n        handleClose={() => close(null)}\n        responsive={false}\n        show={true}\n        title={intl.formatMessage(modalMessages.exitWithoutSavingTitle)}\n      >\n        <Stack>\n          <Text color=\"grey500\" element=\"p\" variant=\"reg16\">\n            {intl.formatMessage(modalMessages.exitWithoutSavingDescription)}\n          </Text>\n        </Stack>\n      </ResponsiveModal>\n    ))\n\n    if (!exitConfirm) {\n      return\n    }\n    const hasDrafts = remoteDrafts.find((draft) => draft.eventId === event.id)\n    if (isUndeclaredDraft(event.status) && !hasDrafts) {\n      deleteEvent.mutate({ eventId: event.id })\n    }\n\n    goToHome()\n  }\n\n  async function deleteDeclaration(eventId: string) {\n    const deleteConfirm = await openModal<boolean | null>((close) => (\n      <ResponsiveModal\n        autoHeight\n        actions={[\n          <Button\n            key=\"cancel_delete\"\n            id=\"cancel_delete\"\n            type=\"tertiary\"\n            onClick={() => {\n              close(null)\n            }}\n          >\n            {intl.formatMessage(modalMessages.cancel)}\n          </Button>,\n          <Button\n            key=\"confirm_delete\"\n            id=\"confirm_delete\"\n            type=\"primary\"\n            onClick={() => {\n              close(true)\n            }}\n          >\n            {intl.formatMessage(modalMessages.confirm)}\n          </Button>\n        ]}\n        handleClose={() => close(null)}\n        responsive={false}\n        show={true}\n        title={intl.formatMessage(modalMessages.deleteDeclarationTitle)}\n      >\n        <Stack>\n          <Text color=\"grey500\" element=\"p\" variant=\"reg16\">\n            {intl.formatMessage(modalMessages.deleteDeclarationDescription)}\n          </Text>\n        </Stack>\n      </ResponsiveModal>\n    ))\n\n    if (deleteConfirm) {\n      deleteEvent.mutate({ eventId })\n      goToHome()\n    }\n  }\n\n  return { exit, modal, goToHome, deleteDeclaration }\n}",
      "startLine": 51,
      "endLine": 162,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEventFormNavigation.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@62-64",
      "type": "function_declaration",
      "name": "goToHome",
      "text": "function goToHome() {\n    navigate(ROUTES.V2.path)\n  }",
      "startLine": 62,
      "endLine": 64,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEventFormNavigation.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@66-114",
      "type": "function_declaration",
      "name": "exit",
      "text": "async function exit(event: EventIndex) {\n    const exitConfirm = await openModal<boolean | null>((close) => (\n      <ResponsiveModal\n        autoHeight\n        actions={[\n          <Button\n            key=\"cancel_save_without_exit\"\n            id=\"cancel_save_without_exit\"\n            type=\"tertiary\"\n            onClick={() => {\n              close(null)\n            }}\n          >\n            {intl.formatMessage(modalMessages.cancel)}\n          </Button>,\n          <Button\n            key=\"confirm_save_without_exit\"\n            id=\"confirm_save_without_exit\"\n            type=\"primary\"\n            onClick={() => {\n              close(true)\n            }}\n          >\n            {intl.formatMessage(modalMessages.confirm)}\n          </Button>\n        ]}\n        handleClose={() => close(null)}\n        responsive={false}\n        show={true}\n        title={intl.formatMessage(modalMessages.exitWithoutSavingTitle)}\n      >\n        <Stack>\n          <Text color=\"grey500\" element=\"p\" variant=\"reg16\">\n            {intl.formatMessage(modalMessages.exitWithoutSavingDescription)}\n          </Text>\n        </Stack>\n      </ResponsiveModal>\n    ))\n\n    if (!exitConfirm) {\n      return\n    }\n    const hasDrafts = remoteDrafts.find((draft) => draft.eventId === event.id)\n    if (isUndeclaredDraft(event.status) && !hasDrafts) {\n      deleteEvent.mutate({ eventId: event.id })\n    }\n\n    goToHome()\n  }",
      "startLine": 66,
      "endLine": 114,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEventFormNavigation.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@116-159",
      "type": "function_declaration",
      "name": "deleteDeclaration",
      "text": "async function deleteDeclaration(eventId: string) {\n    const deleteConfirm = await openModal<boolean | null>((close) => (\n      <ResponsiveModal\n        autoHeight\n        actions={[\n          <Button\n            key=\"cancel_delete\"\n            id=\"cancel_delete\"\n            type=\"tertiary\"\n            onClick={() => {\n              close(null)\n            }}\n          >\n            {intl.formatMessage(modalMessages.cancel)}\n          </Button>,\n          <Button\n            key=\"confirm_delete\"\n            id=\"confirm_delete\"\n            type=\"primary\"\n            onClick={() => {\n              close(true)\n            }}\n          >\n            {intl.formatMessage(modalMessages.confirm)}\n          </Button>\n        ]}\n        handleClose={() => close(null)}\n        responsive={false}\n        show={true}\n        title={intl.formatMessage(modalMessages.deleteDeclarationTitle)}\n      >\n        <Stack>\n          <Text color=\"grey500\" element=\"p\" variant=\"reg16\">\n            {intl.formatMessage(modalMessages.deleteDeclarationDescription)}\n          </Text>\n        </Stack>\n      </ResponsiveModal>\n    ))\n\n    if (deleteConfirm) {\n      deleteEvent.mutate({ eventId })\n      goToHome()\n    }\n  }",
      "startLine": 116,
      "endLine": 159,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEventFormNavigation.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@25-59",
      "type": "function_declaration",
      "name": "NumberInput",
      "text": "function NumberInput({ value, disabled, ...props }: NumberInputProps) {\n  const [inputValue, setInputValue] = React.useState(\n    value && isNaN(value) ? undefined : value\n  )\n\n  const allowOnlyPositive = props.min !== undefined && props.min >= 0\n\n  return (\n    <TextInputComponent\n      type={'number'}\n      {...props}\n      data-testid={`number__${props.id}`}\n      isDisabled={disabled}\n      value={inputValue}\n      onBlur={(e) => {\n        props.onChange(inputValue)\n        props.onBlur?.(e)\n      }}\n      onChange={(e) => {\n        // Parse the input value as a floating-point number to allow decimal values.\n        // If the parsed value is NaN (e.g., when the input is cleared), set inputValue to undefined.\n        // Otherwise, update inputValue with the parsed number.\n        const updatedValue = parseFloat(e.target.value)\n        isNaN(updatedValue)\n          ? setInputValue(undefined)\n          : setInputValue(updatedValue)\n      }}\n      onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (allowOnlyPositive && e.key === '-') {\n          e.preventDefault()\n        }\n      }}\n    />\n  )\n}",
      "startLine": 25,
      "endLine": 59,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Number.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@24-68",
      "type": "function_declaration",
      "name": "getFieldFromDataEntry",
      "text": "function getFieldFromDataEntry({\n  intl,\n  formData,\n  entry\n}: {\n  intl: IntlShape\n  formData: EventState\n  entry: { value: TranslationConfig | string; label: TranslationConfig }\n}) {\n  const { label, value: rawValue } = entry\n\n  // Resolve value if it's a message descriptor\n  const formattedValue =\n    typeof rawValue === 'object' &&\n    'id' in rawValue &&\n    'defaultMessage' in rawValue\n      ? intl.formatMessage(rawValue)\n      : rawValue\n\n  let resolvedValue = formattedValue\n\n  // Match placeholders like {someKey}\n  const placeholders = formattedValue.match(/{([^}]+)}/g)\n  if (placeholders) {\n    placeholders.forEach((placeholder) => {\n      const key = placeholder.replace(/{|}/g, '')\n      const replacement = formData[key]\n\n      if (replacement == null) {\n        throw new Error(`Could not resolve placeholder: ${placeholder}`)\n      }\n\n      resolvedValue = resolvedValue.replace(placeholder, replacement.toString())\n    })\n  }\n\n  return {\n    value: resolvedValue,\n    config: {\n      type: FieldType.TEXT,\n      id: label.id,\n      label\n    }\n  }\n}",
      "startLine": 24,
      "endLine": 68,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Data.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@101-158",
      "type": "function_declaration",
      "name": "DataInput",
      "text": "function DataInput({\n  configuration,\n  label,\n  formData,\n  declarationFields\n}: FieldProps<'DATA'> & {\n  formData: EventState\n  declarationFields: Inferred[]\n}) {\n  const intl = useIntl()\n  const { subtitle, data } = configuration\n  const title = label.defaultMessage ? intl.formatMessage(label) : ''\n\n  const fields = data.map((entry) => {\n    if ('fieldId' in entry) {\n      return {\n        value: formData[entry.fieldId],\n        config: declarationFields.find((f) => f.id === entry.fieldId)\n      }\n    }\n\n    return getFieldFromDataEntry({\n      intl,\n      formData,\n      entry\n    })\n  })\n\n  return (\n    <Container>\n      {title && <label>{title}</label>}\n      {subtitle && <Subtitle>{intl.formatMessage(subtitle)}</Subtitle>}\n      <dl>\n        {fields\n          // We don't want to display fields that are conditionally hidden in the original form configuration\n          .filter(({ config }) => config && isFieldVisible(config, formData))\n          .map(({ config, value }) => {\n            if (!config) {\n              return null\n            }\n\n            return (\n              <React.Fragment key={config.id}>\n                <dt>{intl.formatMessage(config.label)}</dt>\n                <dd>\n                  <Output\n                    field={config}\n                    showPreviouslyMissingValuesAsChanged={false}\n                    value={value}\n                  />\n                </dd>\n              </React.Fragment>\n            )\n          })}\n      </dl>\n    </Container>\n  )\n}",
      "startLine": 101,
      "endLine": 158,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Data.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@21-49",
      "type": "function_declaration",
      "name": "SelectInput",
      "text": "function SelectInput({\n  onChange,\n  value,\n  ...props\n}: Omit<FieldProps<'SELECT'>, 'label'> & {\n  onChange: (newValue: string) => void\n  value?: string\n  label?: TranslationConfig\n} & { 'data-testid'?: string }) {\n  const intl = useIntl()\n  const { options } = props\n  const selectedOption = options.find((option) => option.value === value)\n  const formattedOptions = options.map((option: SelectOption) => ({\n    value: option.value,\n    label: intl.formatMessage(option.label)\n  }))\n\n  const inputValue = selectedOption?.value ?? ''\n\n  return (\n    <SelectComponent\n      {...props}\n      data-testid={props['data-testid'] || `select__${props.id}`}\n      options={formattedOptions}\n      value={inputValue}\n      onChange={onChange}\n    />\n  )\n}",
      "startLine": 21,
      "endLine": 49,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Select.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@51-62",
      "type": "function_declaration",
      "name": "SelectOutput",
      "text": "function SelectOutput({\n  value,\n  options\n}: {\n  value: string | undefined\n  options: SelectOption[]\n}) {\n  const intl = useIntl()\n  const selectedOption = options.find((option) => option.value === value)\n\n  return selectedOption ? intl.formatMessage(selectedOption.label) : ''\n}",
      "startLine": 51,
      "endLine": 62,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Select.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@64-76",
      "type": "function_declaration",
      "name": "stringify",
      "text": "function stringify(intl: IntlShape, value: string, fieldConfig: SelectField) {\n  const option = fieldConfig.options.find((opt) => opt.value === value)\n\n  if (!option) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `Could not find option with value ${value} for field ${fieldConfig.id}`\n    )\n    return value\n  }\n\n  return intl.formatMessage(option.label)\n}",
      "startLine": 64,
      "endLine": 76,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Select.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@15-17",
      "type": "function_declaration",
      "name": "PageHeaderInput",
      "text": "function PageHeaderInput({ children }: { children: React.ReactNode }) {\n  return <SubHeader>{children}</SubHeader>\n}",
      "startLine": 15,
      "endLine": 17,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/PageHeader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@17-36",
      "type": "function_declaration",
      "name": "SelectCountryInput",
      "text": "function SelectCountryInput({\n  value,\n  onChange,\n  ...props\n}: FieldProps<'COUNTRY'> & {\n  onChange: (val: string | undefined) => void\n  value?: string\n}) {\n  return (\n    <Select.Input\n      {...props}\n      // @Todo ensure countries are of the same type\n      data-testid={`location__${props.id}`}\n      options={countries as SelectOption[]}\n      type=\"SELECT\"\n      value={value}\n      onChange={onChange}\n    />\n  )\n}",
      "startLine": 17,
      "endLine": 36,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/SelectCountry.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@38-43",
      "type": "function_declaration",
      "name": "SelectCountryOutput",
      "text": "function SelectCountryOutput({ value }: { value: string | undefined }) {\n  const intl = useIntl()\n  const selectedCountry = countries.find((country) => country.value === value)\n\n  return selectedCountry ? intl.formatMessage(selectedCountry.label) : ''\n}",
      "startLine": 38,
      "endLine": 43,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/SelectCountry.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@45-48",
      "type": "function_declaration",
      "name": "stringify",
      "text": "function stringify(intl: IntlShape, value: string) {\n  const selectedCountry = countries.find((country) => country.value === value)\n  return selectedCountry ? intl.formatMessage(selectedCountry.label) : ''\n}",
      "startLine": 45,
      "endLine": 48,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/SelectCountry.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@31-70",
      "type": "function_declaration",
      "name": "DateInput",
      "text": "function DateInput({\n  onChange,\n  value = '',\n  ...props\n}: DateFieldProps & {\n  onChange: (newValue: string) => void\n  value: string\n}) {\n  /**\n   * Component library returns '--' for empty dates when input has been touched.\n   * We limit the behavior to this component, while still allowing partial values. (e.g. '2021-01-')\n   */\n  const cleanEmpty = (val: string) => (val === EMPTY_DATE ? '' : val)\n  const cleanOnChange = (val: string) => onChange(cleanEmpty(val))\n\n  return (\n    <DateFieldComponent\n      {...props}\n      data-testid={`${props.id}`}\n      value={value}\n      onBlur={(e) => {\n        const segmentType = String(e.target.id.split('-').pop())\n        const val = e.target.value\n        const dateSegmentVals = value.split('-')\n\n        // Add possibly missing leading 0 for days and months\n        if (segmentType === 'dd' && val.length === 1) {\n          cleanOnChange(`${dateSegmentVals[0]}-${dateSegmentVals[1]}-0${val}`)\n        }\n\n        if (segmentType === 'mm' && val.length === 1) {\n          cleanOnChange(`${dateSegmentVals[0]}-0${val}-${dateSegmentVals[2]}`)\n        }\n\n        return props.onBlur && props.onBlur(e)\n      }}\n      onChange={cleanOnChange}\n    />\n  )\n}",
      "startLine": 31,
      "endLine": 70,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/DateField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@84-100",
      "type": "function_declaration",
      "name": "formatDateRangeLabel",
      "text": "function formatDateRangeLabel(\n  intl: IntlShape,\n  rangeStart: string | undefined,\n  rangeEnd: string | undefined\n) {\n  if (!rangeStart || !rangeEnd) {\n    return\n  }\n  const dateStartLocale =\n    rangeStart && format(new Date(rangeStart), 'MMMM yyyy')\n  const dateEndLocale = rangeEnd && format(new Date(rangeEnd), 'MMMM yyyy')\n\n  return intl.formatMessage(messages.dateRangePickerCheckboxLabel, {\n    rangeStart: dateStartLocale,\n    rangeEnd: dateEndLocale\n  })\n}",
      "startLine": 84,
      "endLine": 100,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/DateRangeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@102-122",
      "type": "function_declaration",
      "name": "extractDateValueFromProps",
      "text": "function extractDateValueFromProps(value?: DateRangeFieldValue) {\n  const dateValue = DateRangeFieldValue.safeParse(value)\n  if (dateValue.success) {\n    if (Array.isArray(dateValue.data)) {\n      const [rangeStart, rangeEnd] = dateValue.data\n      return { exact: '', rangeStart, rangeEnd, isDateRangeActive: true }\n    }\n    return {\n      exact: dateValue.data,\n      rangeStart: undefined,\n      rangeEnd: undefined,\n      isDateRangeActive: false\n    }\n  }\n  return {\n    exact: '',\n    rangeStart: undefined,\n    rangeEnd: undefined,\n    isDateRangeActive: false\n  }\n}",
      "startLine": 102,
      "endLine": 122,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/DateRangeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@124-248",
      "type": "function_declaration",
      "name": "DateRangeInput",
      "text": "function DateRangeInput({\n  onChange,\n  value,\n  ...props\n}: DateFieldProps & {\n  onChange: (newValue: DateRangeFieldValue) => void\n  value?: DateRangeFieldValue\n}) {\n  const intl = useIntl()\n  const [dateValue, setDateValue] = useState<IDateRangePickerValue>(\n    extractDateValueFromProps(value)\n  )\n  /**\n   * Component library returns '--' for empty dates when input has been touched.\n   * We limit the behavior to this component, while still allowing partial values. (e.g. '2021-01-')\n   */\n  const cleanEmpty = (val: string) => (val === EMPTY_DATE ? '' : val)\n  const cleanOnChange = (val: string) => onChange(cleanEmpty(val))\n  const [modalVisible, setModalVisible] = useState<boolean>(false)\n\n  const handleLinkOnClick = () => {\n    setModalVisible(true)\n  }\n\n  const handleExactDateChange = (val: string) => {\n    cleanOnChange(val)\n    setDateValue({ ...dateValue, exact: val })\n  }\n\n  const handleDateRangeChange = ({ startDate, endDate }: IDateRange) => {\n    const rangeStart = startDate && format(new Date(startDate), 'yyyy-MM-dd')\n    const rangeEnd = endDate && format(new Date(endDate), 'yyyy-MM-dd')\n    if (rangeStart && rangeEnd) {\n      onChange([rangeStart, rangeEnd])\n      setDateValue((d) => ({\n        ...d,\n        rangeStart,\n        rangeEnd,\n        isDateRangeActive: true\n      }))\n    }\n  }\n\n  const handleDateRangeActiveChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setDateValue((d) => ({\n      ...d,\n      isDateRangeActive: event.target.checked\n    }))\n  }\n\n  const dateRangeLabel =\n    formatDateRangeLabel(intl, dateValue.rangeStart, dateValue.rangeEnd) ||\n    intl.formatMessage(messages.exactDateUnknown)\n\n  return (\n    <DateRangePickerContainer>\n      <DateFieldComponent\n        {...props}\n        data-testid={`${props.id}`}\n        disabled={dateValue.isDateRangeActive}\n        value={dateValue.exact}\n        onBlur={(e) => {\n          const segmentType = String(e.target.id.split('-').pop())\n          const val = e.target.value\n          const dateSegmentVals = dateValue.exact\n            ? dateValue.exact.split('-')\n            : val\n\n          // Add possibly missing leading 0 for days and months\n          if (segmentType === 'dd' && val.length === 1) {\n            cleanOnChange(`${dateSegmentVals[0]}-${dateSegmentVals[1]}-0${val}`)\n          }\n\n          if (segmentType === 'mm' && val.length === 1) {\n            cleanOnChange(`${dateSegmentVals[0]}-0${val}-${dateSegmentVals[2]}`)\n          }\n\n          return props.onBlur && props.onBlur(e)\n        }}\n        onChange={handleExactDateChange}\n      />\n\n      <DateRangeBody>\n        {dateValue.isDateRangeActive && (\n          <Checkbox\n            label={dateRangeLabel || ''}\n            name={props.id + 'date_range_toggle'}\n            selected={dateValue.isDateRangeActive}\n            value={''}\n            onChange={handleDateRangeActiveChange}\n          />\n        )}\n\n        <NoShrinkLink\n          id={props.id + '-date_range_button'}\n          onClick={handleLinkOnClick}\n        >\n          {dateValue.isDateRangeActive\n            ? intl.formatMessage(messages.edit)\n            : intl.formatMessage(messages.exactDateUnknown)}\n        </NoShrinkLink>\n\n        {modalVisible && (\n          <DateRangePicker\n            closeModalFromHOC={() => setModalVisible(false)}\n            endDate={\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n              (dateValue.rangeEnd && new Date(dateValue.rangeEnd)) ||\n              new Date(Date.now())\n            }\n            startDate={\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n              (dateValue.rangeStart && new Date(dateValue.rangeStart)) ||\n              startOfMonth(subYears(new Date(Date.now()), 1))\n            }\n            usedInsideHOC={true}\n            onDatesChange={handleDateRangeChange}\n          />\n        )}\n      </DateRangeBody>\n    </DateRangePickerContainer>\n  )\n}",
      "startLine": 124,
      "endLine": 248,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/DateRangeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@250-268",
      "type": "function_declaration",
      "name": "DateRangeOutput",
      "text": "function DateRangeOutput({ value }: { value?: string | [string, string] }) {\n  const intl = useIntl()\n  const parsed = DateRangeFieldValue.safeParse(value)\n\n  if (parsed.success) {\n    if (Array.isArray(parsed.data)) {\n      const dateRangeLabel =\n        formatDateRangeLabel(intl, parsed.data[0], parsed.data[1]) ||\n        intl.formatMessage(messages.exactDateUnknown)\n\n      return dateRangeLabel\n    }\n    if (typeof parsed.data === 'string') {\n      return parsed.data\n    }\n  }\n\n  return value ?? ''\n}",
      "startLine": 250,
      "endLine": 268,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/DateRangeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@25-60",
      "type": "function_declaration",
      "name": "RadioGroupInput",
      "text": "function RadioGroupInput({\n  onChange,\n  value,\n  options,\n  configuration,\n  ...props\n}: FieldProps<'RADIO_GROUP'> & {\n  onChange: (val: string | undefined) => void\n  value?: string\n}) {\n  const intl = useIntl()\n\n  const selectedOption = options.find((option) => option.value === value)\n  const formattedOptions = options.map((option: SelectOption) => ({\n    value: option.value,\n    label: intl.formatMessage(option.label)\n  }))\n\n  const inputValue = selectedOption?.value ?? ''\n\n  return (\n    <RadioGroupComponent\n      {...props}\n      data-testid={props.id}\n      name={props.id}\n      options={formattedOptions}\n      size={\n        configuration?.styles?.size === 'NORMAL'\n          ? RadioSize.NORMAL\n          : RadioSize.LARGE\n      }\n      value={inputValue}\n      onChange={onChange}\n    />\n  )\n}",
      "startLine": 25,
      "endLine": 60,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/RadioGroup.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@62-73",
      "type": "function_declaration",
      "name": "RadioGroupOutput",
      "text": "function RadioGroupOutput({\n  value,\n  options\n}: {\n  value: Stringifiable\n  options: SelectOption[]\n}) {\n  const intl = useIntl()\n  const selectedOption = options.find((option) => option.value === value)\n\n  return selectedOption ? intl.formatMessage(selectedOption.label) : ''\n}",
      "startLine": 62,
      "endLine": 73,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/RadioGroup.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@75-91",
      "type": "function_declaration",
      "name": "stringify",
      "text": "function stringify(\n  intl: IntlShape,\n  value: string,\n  fieldConfig: RadioGroupField\n) {\n  const option = fieldConfig.options.find((opt) => opt.value === value)\n\n  if (!option) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `Could not find option with value ${value} for field ${fieldConfig.id}`\n    )\n    return value\n  }\n\n  return intl.formatMessage(option.label)\n}",
      "startLine": 75,
      "endLine": 91,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/RadioGroup.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@70-75",
      "type": "function_declaration",
      "name": "isDomesticAddress",
      "text": "function isDomesticAddress() {\n  return and(\n    not(createFieldCondition('country').isUndefined()),\n    createFieldCondition('addressType').isEqualTo(AddressType.DOMESTIC)\n  )\n}",
      "startLine": 70,
      "endLine": 75,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Address.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@77-82",
      "type": "function_declaration",
      "name": "isInternationalAddress",
      "text": "function isInternationalAddress() {\n  return and(\n    not(createFieldCondition('country').isUndefined()),\n    createFieldCondition('addressType').isEqualTo(AddressType.INTERNATIONAL)\n  )\n}",
      "startLine": 77,
      "endLine": 82,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Address.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@16-32",
      "type": "function_declaration",
      "name": "BulletListInput",
      "text": "function BulletListInput({\n  id,\n  items,\n  configuration\n}: FieldProps<'BULLET_LIST'>) {\n  const intl = useIntl()\n  const formattedItmes = items.map((item: MessageDescriptor) =>\n    intl.formatMessage(item)\n  )\n  return (\n    <BulletListComponent\n      font={configuration.styles?.fontVariant ?? 'reg16'}\n      id={id}\n      items={formattedItmes}\n    />\n  )\n}",
      "startLine": 16,
      "endLine": 32,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/BulletList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@21-38",
      "type": "function_declaration",
      "name": "useAdminLocations",
      "text": "function useAdminLocations(partOf: string) {\n  const locationMap = useSelector(getAdminStructureLocations)\n\n  const locations = Object.values(locationMap)\n\n  const filteredLocations = locations.filter(\n    (location) => location.partOf === 'Location/' + partOf\n  )\n\n  return filteredLocations.map((location) => ({\n    value: location.id,\n    label: {\n      id: 'v2.location.' + location.id,\n      description: 'Label for location: ' + location.name,\n      defaultMessage: location.name\n    }\n  }))\n}",
      "startLine": 21,
      "endLine": 38,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/AdministrativeArea.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@40-62",
      "type": "function_declaration",
      "name": "AdministrativeAreaInput",
      "text": "function AdministrativeAreaInput({\n  onChange,\n  value,\n  partOf,\n  ...props\n}: FieldProps<'ADMINISTRATIVE_AREA'> & {\n  onChange: (val: string | undefined) => void\n  partOf: string | null\n  value?: string\n}) {\n  const options = useAdminLocations(partOf ?? '0')\n\n  return (\n    <Select.Input\n      {...props}\n      data-testid={`location__${props.id}`}\n      options={options}\n      type=\"SELECT\"\n      value={value}\n      onChange={onChange}\n    />\n  )\n}",
      "startLine": 40,
      "endLine": 62,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/AdministrativeArea.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@64-73",
      "type": "function_declaration",
      "name": "AdministrativeAreaOutput",
      "text": "function AdministrativeAreaOutput({ value }: { value: Stringifiable }) {\n  const { getLocations } = useLocations()\n  const [locations] = getLocations.useSuspenseQuery()\n\n  const location = value.toString()\n    ? locations.find((l) => l.id === value.toString())\n    : null\n\n  return location ? location.name : ''\n}",
      "startLine": 64,
      "endLine": 73,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/AdministrativeArea.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@75-80",
      "type": "function_declaration",
      "name": "stringify",
      "text": "function stringify(locations: Location[], value: string) {\n  const location = locations.find((l) => l.id === value)\n\n  const name = location?.name\n  return name ?? EMPTY_TOKEN\n}",
      "startLine": 75,
      "endLine": 80,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/AdministrativeArea.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@29-45",
      "type": "function_declaration",
      "name": "useAdministrativeAreas",
      "text": "function useAdministrativeAreas(\n  searchableResource: ('locations' | 'facilities' | 'offices')[]\n) {\n  const offlineCountryConfig = useSelector(getOfflineData)\n  const intl = useIntl()\n  const locationList = generateLocations(\n    searchableResource.reduce((locations, resource) => {\n      return {\n        ...locations,\n        ...getListOfLocations(offlineCountryConfig, resource)\n      }\n    }, {}),\n    intl\n  )\n\n  return locationList\n}",
      "startLine": 29,
      "endLine": 45,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/LocationSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@78-85",
      "type": "method_definition",
      "name": "if",
      "text": "if (!value) {\n    return {\n      location: '',\n      district: '',\n      province: '',\n      country: ''\n    }\n  }",
      "startLine": 78,
      "endLine": 85,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/LocationSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@24-52",
      "type": "function_declaration",
      "name": "TextInput",
      "text": "function TextInput({\n  value,\n  maxLength,\n  disabled,\n  type,\n  ...props\n}: TextInputProps) {\n  const [inputValue, setInputValue] = React.useState<string>(value ?? '')\n\n  React.useEffect(() => {\n    setInputValue(value ?? '')\n  }, [value])\n\n  return (\n    <TextInputComponent\n      {...props}\n      data-testid={`text__${props.id}`}\n      isDisabled={disabled}\n      maxLength={maxLength}\n      type={type ?? 'text'}\n      value={inputValue}\n      onBlur={(e) => {\n        props.onChange(inputValue)\n        props.onBlur?.(e)\n      }}\n      onChange={(e) => setInputValue(e.target.value)}\n    />\n  )\n}",
      "startLine": 24,
      "endLine": 52,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/registered-fields/Text.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@25-56",
      "type": "function_declaration",
      "name": "ReadonlyView",
      "text": "function ReadonlyView() {\n  const { eventId } = useTypedParams(ROUTES.V2.EVENTS.DECLARE.REVIEW)\n  const events = useEvents()\n  const [event] = events.getEvent.useSuspenseQuery(eventId)\n\n  const { getRemoteDrafts } = useDrafts()\n  const drafts = getRemoteDrafts()\n  const eventStateWithDrafts = useMemo(\n    () => getCurrentEventStateWithDrafts(event, drafts),\n    [drafts, event]\n  )\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n  const { formatMessage } = useIntlFormatMessageWithFlattenedParams()\n  return (\n    <FormLayout route={ROUTES.V2.EVENTS.DECLARE}>\n      <ReviewComponent.Body\n        readonlyMode\n        form={eventStateWithDrafts.declaration}\n        formConfig={configuration.declaration}\n        title={formatMessage(\n          configuration.title,\n          eventStateWithDrafts.declaration\n        )}\n        onEdit={noop}\n      >\n        <></>\n      </ReviewComponent.Body>\n    </FormLayout>\n  )\n}",
      "startLine": 25,
      "endLine": 56,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/ReadOnlyView.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@35-111",
      "type": "function_declaration",
      "name": "getFileOptions",
      "text": "function getFileOptions(\n  form: EventState,\n  formConfig: FormConfig,\n  intl: IntlShape\n): Option<DocumentViewerOptionValue>[] {\n  const fileFields = formConfig.pages\n    .flatMap(({ fields }) => fields)\n    .filter(\n      (field) =>\n        field.type === FieldType.FILE ||\n        field.type === FieldType.FILE_WITH_OPTIONS\n    )\n\n  const selectableOptions = fileFields.reduce<\n    Option<DocumentViewerOptionValue>[]\n  >((options, fieldConfig) => {\n    const formValue = form[fieldConfig.id]\n\n    if (!formValue) {\n      return options\n    }\n\n    const field = { config: fieldConfig, value: formValue }\n    const fieldLabel = intl.formatMessage(field.config.label)\n\n    if (isFileFieldType(field)) {\n      const filename = field.config.configuration.fileName\n        ? intl.formatMessage(field.config.configuration.fileName)\n        : undefined\n\n      const label = filename ? `${fieldLabel} (${filename})` : fieldLabel\n\n      return [\n        ...options,\n        {\n          value: {\n            filename: field.value.filename,\n            url: getFullUrl(field.value.filename),\n            id: field.config.id\n          },\n          label\n        }\n      ]\n    }\n\n    if (isFileFieldWithOptionType(field)) {\n      const fieldOptions = field.value\n        .map((formVal) => {\n          const fieldOption = field.config.options.find(\n            ({ value }) => value === formVal.option\n          )\n\n          if (!fieldOption) {\n            return null\n          }\n\n          const optionLabel = intl.formatMessage(fieldOption.label)\n\n          return {\n            value: {\n              filename: formVal.filename,\n              url: getFullUrl(formVal.filename),\n              id: `${field.config.id}-${formVal.option}`\n            },\n            label: `${fieldLabel} (${optionLabel})`\n          }\n        })\n        .filter((val) => !isNil(val))\n\n      return [...options, ...fieldOptions]\n    }\n\n    return options\n  }, [])\n\n  return selectableOptions\n}",
      "startLine": 35,
      "endLine": 111,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/DocumentViewer.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@144-183",
      "type": "function_declaration",
      "name": "DocumentViewer",
      "text": "function DocumentViewer({\n  form,\n  formConfig,\n  onEdit,\n  showInMobile,\n  disabled\n}: {\n  formConfig: FormConfig\n  form: EventState\n  onEdit: () => void\n  showInMobile?: boolean\n  disabled?: boolean\n}) {\n  const intl = useIntl()\n\n  const fileOptions = getFileOptions(form, formConfig, intl)\n\n  return (\n    <ResponsiveDocumentViewer showInMobile={!!showInMobile}>\n      <DocumentViewerComponent id=\"document_section\" options={fileOptions}>\n        {fileOptions.length === 0 && (\n          <ZeroDocument id={`zero_document`}>\n            {intl.formatMessage(reviewMessages.zeroDocumentsTextForAnySection)}\n            {!disabled && (\n              <Link\n                id=\"edit-document\"\n                onClick={(e) => {\n                  e.stopPropagation()\n                  onEdit()\n                }}\n              >\n                {intl.formatMessage(reviewMessages.editDocuments)}\n              </Link>\n            )}\n          </ZeroDocument>\n        )}\n      </DocumentViewerComponent>\n    </ResponsiveDocumentViewer>\n  )\n}",
      "startLine": 144,
      "endLine": 183,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/DocumentViewer.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@29-151",
      "type": "function_declaration",
      "name": "Pages",
      "text": "function Pages({\n  form,\n  showReviewButton,\n  formPages,\n  onPageChange,\n  onSubmit,\n  pageId,\n  continueButtonText,\n  setFormData,\n  eventConfig,\n  declaration,\n  validateBeforeNextPage = false\n}: {\n  form: EventState\n  setFormData: (dec: EventState) => void\n  pageId: string\n  showReviewButton?: boolean\n  formPages: PageConfig[]\n  onPageChange: (nextPageId: string) => void\n  onSubmit: () => void\n  continueButtonText?: string\n  eventConfig?: EventConfig\n  declaration?: EventState\n  validateBeforeNextPage?: boolean\n}) {\n  const intl = useIntl()\n  const visiblePages = formPages.filter((page) => isPageVisible(page, form))\n  const pageIdx = visiblePages.findIndex((p) => p.id === pageId)\n  const page = pageIdx === -1 ? visiblePages[0] : visiblePages[pageIdx]\n  const [validateAllFields, setValidateAllFields] = useState(false)\n\n  useEffect(() => {\n    // If page changes, scroll to the top of the page using the anchor element ID\n    document.getElementById(MAIN_CONTENT_ANCHOR_ID)?.scrollTo({ top: 0 })\n  }, [pageId])\n\n  function switchToNextPage() {\n    // When switching to next page, reset the validateAllFields state to false.\n    // Otherwise we would be seeing validation errors right away on the next page.\n    setValidateAllFields(false)\n\n    const nextPageIdx = pageIdx + 1\n    const nextPage =\n      nextPageIdx < visiblePages.length ? visiblePages[nextPageIdx] : undefined\n\n    // If there is a next page on the form available, navigate to it.\n    // Otherwise, submit the form.\n    return nextPage ? onPageChange(nextPage.id) : onSubmit()\n  }\n\n  function onNextPage() {\n    // If we are in validateBeforeNextPage mode, we need to validate all fields before moving to the next page.\n    // In this case, the actual switching of the page is done on the 'onAllFieldsValidated' callback.\n    if (validateBeforeNextPage) {\n      setValidateAllFields(true)\n      return\n    }\n\n    switchToNextPage()\n  }\n\n  function onPreviousPage() {\n    const previousPageIdx = pageIdx - 1\n    const previousPage =\n      previousPageIdx >= 0 ? visiblePages[previousPageIdx] : undefined\n\n    if (previousPage) {\n      setValidateAllFields(false)\n      return onPageChange(previousPage.id)\n    }\n  }\n\n  const wizardProps = {\n    currentPage: pageIdx,\n    pageTitle: intl.formatMessage(page.title),\n    showReviewButton,\n    onNextPage,\n    onPreviousPage,\n    onSubmit\n  }\n\n  const fields = (\n    <FormFieldGenerator\n      eventConfig={eventConfig}\n      fields={page.fields}\n      id=\"locationForm\"\n      // As initial values we use both the provided declaration data (previously saved to the event)\n      // and the form data (which is currently being edited).\n      initialValues={{ ...declaration, ...form }}\n      validateAllFields={validateAllFields}\n      onAllFieldsValidated={(success) => {\n        setValidateAllFields(false)\n        if (success) {\n          switchToNextPage()\n        }\n      }}\n      onChange={(values) => setFormData(values)}\n    />\n  )\n\n  if (page.type === PageTypes.enum.VERIFICATION) {\n    return (\n      <VerificationWizard\n        {...wizardProps}\n        pageConfig={page}\n        onVerifyAction={(val: boolean) => {\n          setFormData({\n            ...form,\n            [page.id]: val\n          })\n        }}\n      >\n        {fields}\n      </VerificationWizard>\n    )\n  }\n\n  return (\n    <FormWizard {...wizardProps} continueButtonText={continueButtonText}>\n      {fields}\n    </FormWizard>\n  )\n}",
      "startLine": 29,
      "endLine": 151,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@65-77",
      "type": "function_declaration",
      "name": "switchToNextPage",
      "text": "function switchToNextPage() {\n    // When switching to next page, reset the validateAllFields state to false.\n    // Otherwise we would be seeing validation errors right away on the next page.\n    setValidateAllFields(false)\n\n    const nextPageIdx = pageIdx + 1\n    const nextPage =\n      nextPageIdx < visiblePages.length ? visiblePages[nextPageIdx] : undefined\n\n    // If there is a next page on the form available, navigate to it.\n    // Otherwise, submit the form.\n    return nextPage ? onPageChange(nextPage.id) : onSubmit()\n  }",
      "startLine": 65,
      "endLine": 77,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@79-88",
      "type": "function_declaration",
      "name": "onNextPage",
      "text": "function onNextPage() {\n    // If we are in validateBeforeNextPage mode, we need to validate all fields before moving to the next page.\n    // In this case, the actual switching of the page is done on the 'onAllFieldsValidated' callback.\n    if (validateBeforeNextPage) {\n      setValidateAllFields(true)\n      return\n    }\n\n    switchToNextPage()\n  }",
      "startLine": 79,
      "endLine": 88,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@90-99",
      "type": "function_declaration",
      "name": "onPreviousPage",
      "text": "function onPreviousPage() {\n    const previousPageIdx = pageIdx - 1\n    const previousPage =\n      previousPageIdx >= 0 ? visiblePages[previousPageIdx] : undefined\n\n    if (previousPage) {\n      setValidateAllFields(false)\n      return onPageChange(previousPage.id)\n    }\n  }",
      "startLine": 90,
      "endLine": 99,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@146-162",
      "type": "function_declaration",
      "name": "handleDeclaration",
      "text": "async function handleDeclaration() {\n      await openModal<boolean | null>((close) => {\n        return (\n          <Review.ActionModal.Accept\n            action=\"Declare\"\n            close={close}\n            copy={{\n              description: generateTranslationConfig('description'),\n              title: generateTranslationConfig('title'),\n              onCancel: generateTranslationConfig('onCancel'),\n              onConfirm: generateTranslationConfig('onConfirm'),\n              eventLabel: tennisClubMembershipEvent.label\n            }}\n          />\n        )\n      })\n    }",
      "startLine": 146,
      "endLine": 162,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Review.stories.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@164-168",
      "type": "function_declaration",
      "name": "handleRejection",
      "text": "async function handleRejection() {\n      await openModal<RejectionState | null>((close) => (\n        <Review.ActionModal.Reject close={close} />\n      ))\n    }",
      "startLine": 164,
      "endLine": 168,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Review.stories.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@170-176",
      "type": "function_declaration",
      "name": "handleEdit",
      "text": "async function handleEdit() {\n      await openModal<boolean | null>((close) => (\n        <Review.EditModal close={close}></Review.EditModal>\n      ))\n\n      return\n    }",
      "startLine": 170,
      "endLine": 176,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Review.stories.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@232-236",
      "type": "function_declaration",
      "name": "handleRejection",
      "text": "async function handleRejection() {\n      await openModal<RejectionState | null>((close) => (\n        <Review.ActionModal.Reject close={close} />\n      ))\n    }",
      "startLine": 232,
      "endLine": 236,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Review.stories.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@279-283",
      "type": "function_declaration",
      "name": "handleRejection",
      "text": "async function handleRejection() {\n      await openModal<RejectionState | null>((close) => (\n        <Review.ActionModal.Reject close={close} />\n      ))\n    }",
      "startLine": 279,
      "endLine": 283,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Review.stories.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@81-227",
      "type": "function_declaration",
      "name": "DeclarationActionComponent",
      "text": "function DeclarationActionComponent({ children, actionType }: Props) {\n  const params = useTypedParams(ROUTES.V2.EVENTS.DECLARE.PAGES)\n\n  const { getEvent } = useEvents()\n\n  const { setLocalDraft, getLocalDraftOrDefault, getRemoteDrafts } = useDrafts()\n\n  const [event] = getEvent.useSuspenseQuery(params.eventId)\n\n  const drafts = getRemoteDrafts()\n  const activeDraft = findActiveDrafts(event, drafts)[0]\n  const localDraft = getLocalDraftOrDefault(\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    activeDraft ||\n      createEmptyDraft(params.eventId, createTemporaryId(), actionType)\n  )\n\n  /*\n   * Keep the local draft updated as per the form changes\n   */\n  const formValues = useEventFormData((state) => state.formValues)\n  const annotation = useActionAnnotation((state) => state.annotation)\n  const clearForm = useEventFormData((state) => state.clear)\n  const clearAnnotation = useActionAnnotation((state) => state.clear)\n\n  useEffect(() => {\n    if (!formValues || !annotation) {\n      return\n    }\n\n    setLocalDraft({\n      ...localDraft,\n      eventId: event.id,\n      action: {\n        ...localDraft.action,\n        declaration: formValues,\n        annotation\n      }\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formValues, annotation])\n\n  /*\n   * Initialize the form state\n   */\n  const setFormValues = useEventFormData((state) => state.setFormValues)\n  const setAnnotation = useActionAnnotation((state) => state.setAnnotation)\n\n  const eventDrafts = drafts\n    .filter((d) => d.eventId === event.id)\n    .concat({\n      ...localDraft,\n      /*\n       * Force the local draft always to be the latest\n       * This is to prevent a situation where the local draft gets created,\n       * then a CREATE action request finishes in the background and is stored with a later\n       * timestamp\n       */\n      createdAt: new Date().toISOString(),\n      /*\n       * If params.eventId changes (from tmp id to concrete id) then change the local draft id\n       */\n      eventId: event.id,\n      action: {\n        ...localDraft.action,\n        createdAt: new Date().toISOString()\n      }\n    })\n\n  const eventStateWithDrafts = useMemo(\n    () => getCurrentEventStateWithDrafts(event, eventDrafts),\n    [eventDrafts, event]\n  )\n\n  const actionAnnotation = useMemo(() => {\n    return getActionAnnotation({\n      event,\n      actionType,\n      drafts: eventDrafts\n    })\n  }, [eventDrafts, event, actionType])\n\n  const previousActionAnnotation = useMemo(() => {\n    const previousActionType = getPreviousDeclarationActionType(\n      event.actions,\n      actionType\n    )\n\n    if (!previousActionType) {\n      return {}\n    }\n\n    const prevActionAnnotation = getActionAnnotation({\n      event,\n      actionType: previousActionType\n    })\n\n    // If we found annotation data from the previous action, use that.\n    if (Object.keys(prevActionAnnotation).length) {\n      return prevActionAnnotation\n    }\n\n    // As a fallback, lets see if there is a notify action annotation and use that.\n    return getActionAnnotation({\n      event,\n      actionType: ActionType.NOTIFY\n    })\n  }, [event, actionType])\n\n  useEffect(() => {\n    // Use the form values from the zustand state, so that filled form state is not lost\n    // If user e.g. enters the 'screen lock' flow while filling form.\n    // Then use form values from drafts.\n    const initialFormValues = deepMerge(\n      formValues || {},\n      eventStateWithDrafts.declaration\n    )\n\n    setFormValues(initialFormValues)\n\n    const initialAnnotation = deepMerge(\n      deepMerge(annotation || {}, previousActionAnnotation),\n      actionAnnotation\n    )\n\n    setAnnotation(initialAnnotation)\n\n    return () => {\n      /*\n       * When user leaves the action, remove all\n       * staged drafts the user has for this event id and type\n       */\n      setLocalDraft(null)\n      clearForm()\n      clearAnnotation()\n    }\n\n    /*\n     * This is fine to only run once on mount and unmount as\n     * At the point of this code being run, there absolutely must be an event that has already been\n     * fetched of which data can be used to initialise the form\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <NavigationStack>{children}</NavigationStack>\n}",
      "startLine": 81,
      "endLine": 227,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Action/DeclarationAction.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@145-213",
      "type": "function_declaration",
      "name": "Output",
      "text": "function Output({\n  field,\n  value,\n  previousValue,\n  showPreviouslyMissingValuesAsChanged = true\n}: {\n  field: FieldConfig\n  value?: FieldValue\n  previousValue?: FieldValue\n  showPreviouslyMissingValuesAsChanged: boolean\n}) {\n  // Explicitly check for undefined, so that e.g. number 0 is considered a value\n  const hasValue = value !== undefined\n\n  if (!hasValue) {\n    if (previousValue) {\n      return ValueOutput({ config: field, value: previousValue })\n    }\n\n    return ValueOutput({ config: field, value: '' })\n  }\n\n  const hasPreviousValue = previousValue !== undefined\n\n  // Note, checking for previousValue !== value is not enough, as we have composite fields.\n  if (hasPreviousValue && !_.isEqual(previousValue, value)) {\n    const valueOutput = ValueOutput({\n      config: field,\n      value\n    })\n\n    if (valueOutput === null) {\n      return null\n    }\n\n    const previousValueOutput = ValueOutput({\n      config: field,\n      value: previousValue\n    })\n\n    return (\n      <>\n        {previousValueOutput !== null && (\n          <>\n            <Deleted>\n              <ValueOutput config={field} value={previousValue} />\n            </Deleted>\n            <br />\n          </>\n        )}\n        {valueOutput}\n      </>\n    )\n  }\n\n  if (!hasPreviousValue && showPreviouslyMissingValuesAsChanged) {\n    return (\n      <>\n        <Deleted>\n          <ValueOutput config={{ ...field, required: true }} value=\"-\" />\n        </Deleted>\n        <br />\n        <ValueOutput config={field} value={value} />\n      </>\n    )\n  }\n\n  return ValueOutput({ config: field, value })\n}",
      "startLine": 145,
      "endLine": 213,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Output.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@248-270",
      "type": "function_declaration",
      "name": "ReviewHeader",
      "text": "function ReviewHeader({ title }: { title: string }) {\n  const countryLogoFile = useSelector(getCountryLogoFile)\n  const intl = useIntl()\n\n  return (\n    <HeaderContainer>\n      <HeaderContent>\n        {countryLogoFile && <CountryLogo size=\"small\" src={countryLogoFile} />}\n        <Stack\n          alignItems=\"flex-start\"\n          direction=\"column\"\n          gap={6}\n          justify-content=\"flex-start\"\n        >\n          <TitleContainer id={`header_title`}>\n            {intl.formatMessage(reviewMessages.govtName)}\n          </TitleContainer>\n          <SubjectContainer id={`header_subject`}>{title}</SubjectContainer>\n        </Stack>\n      </HeaderContent>\n    </HeaderContainer>\n  )\n}",
      "startLine": 248,
      "endLine": 270,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/components/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@19-23",
      "type": "function_declaration",
      "name": "useEventConfigurations",
      "text": "function useEventConfigurations() {\n  const trpc = useTRPC()\n  const config = useSuspenseQuery(trpc.event.config.get.queryOptions()).data\n  return config\n}",
      "startLine": 19,
      "endLine": 23,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEventConfiguration.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-32",
      "type": "function_declaration",
      "name": "useEventConfiguration",
      "text": "function useEventConfiguration(eventIdentifier: string): {\n  eventConfiguration: EventConfig\n}",
      "startLine": 30,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEventConfiguration.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@80-106",
      "type": "function_declaration",
      "name": "SetAnnotationDraft",
      "text": "function SetAnnotationDraft({ eventId }: { eventId: string }) {\n  const generator = testDataGenerator()\n  const drafts = useDrafts()\n  const draft = generator.event.draft({\n    eventId,\n    actionType: ActionType.PRINT_CERTIFICATE\n  })\n\n  useEffect(() => {\n    drafts.setLocalDraft({\n      ...draft,\n      action: {\n        ...draft.action,\n        annotation: {\n          [CERT_TEMPLATE_ID]: 'tennis-club-membership-certified-certificate',\n          'collector.requesterId': 'INFORMANT',\n          'collector.identity.verify': true,\n          templateId: 'v2.tennis-club-membership-certified-certificate'\n        }\n      }\n    })\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <Outlet />\n}",
      "startLine": 80,
      "endLine": 106,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/print-certificate/PrintCertificate.stories.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@32-41",
      "type": "function_declaration",
      "name": "getPrintCertificatePages",
      "text": "function getPrintCertificatePages(configuration: EventConfig) {\n  const action = configuration.actions.find(\n    (a) => a.type === ActionType.PRINT_CERTIFICATE\n  )\n\n  return getOrThrow(\n    action?.printForm.pages,\n    `${ActionType.PRINT_CERTIFICATE} action does not have print form set.`\n  )\n}",
      "startLine": 32,
      "endLine": 41,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/print-certificate/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@43-130",
      "type": "function_declaration",
      "name": "Pages",
      "text": "function Pages() {\n  const { eventId, pageId } = useTypedParams(\n    ROUTES.V2.EVENTS.PRINT_CERTIFICATE.PAGES\n  )\n  const [searchParams] = useTypedSearchParams(\n    ROUTES.V2.EVENTS.PRINT_CERTIFICATE.PAGES\n  )\n  const navigate = useNavigate()\n  const { modal } = useEventFormNavigation()\n  const { setAnnotation, getAnnotation } = useActionAnnotation()\n  const annotation = getAnnotation()\n  const events = useEvents()\n  const event = events.getEventState.useSuspenseQuery(eventId)\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n  const certTemplateFieldConfig = useCertificateTemplateSelectorFieldConfig(\n    event.type\n  )\n\n  const formPages = getPrintCertificatePages(configuration)\n\n  const currentPageId =\n    formPages.find((p) => p.id === pageId)?.id || formPages[0]?.id\n\n  if (!currentPageId) {\n    throw new Error('Form does not have any pages')\n  }\n\n  useEffect(() => {\n    if (pageId !== currentPageId) {\n      navigate(\n        ROUTES.V2.EVENTS.PRINT_CERTIFICATE.PAGES.buildPath({\n          eventId,\n          pageId: currentPageId\n        }),\n        { replace: true }\n      )\n    }\n  }, [pageId, currentPageId, navigate, eventId])\n\n  return (\n    <FormLayout\n      appbarIcon={<Print />}\n      route={ROUTES.V2.EVENTS.PRINT_CERTIFICATE}\n    >\n      {modal}\n      <PagesComponent\n        declaration={event.declaration}\n        eventConfig={configuration}\n        form={annotation}\n        formPages={formPages.map((page) => {\n          if (formPages[0].id === page.id) {\n            page = {\n              ...page,\n              fields: [\n                // hard coded certificate template selector form field\n                certTemplateFieldConfig,\n                ...page.fields\n              ]\n            }\n          }\n          return page\n        })}\n        pageId={currentPageId}\n        setFormData={(data) => setAnnotation(data)}\n        showReviewButton={searchParams.from === 'review'}\n        validateBeforeNextPage={true}\n        onPageChange={(nextPageId: string) => {\n          return navigate(\n            ROUTES.V2.EVENTS.PRINT_CERTIFICATE.PAGES.buildPath({\n              eventId,\n              pageId: nextPageId\n            })\n          )\n        }}\n        onSubmit={() => {\n          navigate(\n            ROUTES.V2.EVENTS.PRINT_CERTIFICATE.REVIEW.buildPath(\n              { eventId },\n              { templateId: String(annotation[CERT_TEMPLATE_ID]) }\n            )\n          )\n        }}\n      />\n    </FormLayout>\n  )\n}",
      "startLine": 43,
      "endLine": 130,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/print-certificate/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@174-183",
      "type": "function_declaration",
      "name": "isMessageDescriptor",
      "text": "function isMessageDescriptor(obj: unknown): obj is MessageDescriptor {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'id' in obj &&\n    'defaultMessage' in obj &&\n    typeof (obj as MessageDescriptor).id === 'string' &&\n    typeof (obj as MessageDescriptor).defaultMessage === 'string'\n  )\n}",
      "startLine": 174,
      "endLine": 183,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/print-certificate/pdfUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@185-216",
      "type": "function_declaration",
      "name": "formatAllNonStringValues",
      "text": "function formatAllNonStringValues(\n  templateData: EventState,\n  intl: IntlShape\n): EventState {\n  const formattedData: EventState = {}\n\n  for (const key of Object.keys(templateData)) {\n    const value = templateData[key]\n\n    if (isMessageDescriptor(value)) {\n      formattedData[key] = intl.formatMessage(value)\n    } else if (Array.isArray(value)) {\n      // Address field: country label is a MessageDescriptor but others are strings\n      formattedData[key] = value\n        .filter(Boolean)\n        .map((item) =>\n          isMessageDescriptor(item) ? intl.formatMessage(item) : item\n        )\n        .join(', ')\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    } else if (typeof value === 'object' && value !== null) {\n      formattedData[key] = formatAllNonStringValues(\n        value satisfies EventState,\n        intl\n      ) as FieldValue\n    } else {\n      formattedData[key] = String(value)\n    }\n  }\n\n  return formattedData\n}",
      "startLine": 185,
      "endLine": 216,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/print-certificate/pdfUtils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@291-332",
      "type": "method_definition",
      "name": "registerHelper",
      "text": "registerHelper('$lookup', $lookup)\n\n  /**\n   * Handlebars helper: $intl\n   *\n   * Usage example in SVG template:\n   *   <tspan>{{ $intl 'constants' (lookup $declaration \"child.gender\") }}</tspan>\n   *\n   * This helper dynamically constructs a translation key by joining multiple string parts\n   * (e.g., 'constants.male') and uses `intl.formatMessage` to fetch the localized translation.\n   *\n   * In the example above, `\"child.gender\"` resolves to a value like `\"male\"` which forms\n   * part of the translation key: `constants.male`.\n   *\n   * - If any of the parts is undefined (e.g., gender not provided), it returns an empty string to prevent rendering issues.\n   * - If the translation for the constructed ID is missing, it falls back to showing: 'Missing translation for [id]'.\n   *\n   * This is especially useful in templates where dynamic values (like gender, marital status, etc.)\n   * need to be translated using i18n keys constructed from user-provided data.\n   */\n  Handlebars.registerHelper(\n    '$intl',\n\n    function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      ...args: [...(string | undefined)[], Handlebars.HelperOptions]\n    ) {\n      // If even one of the parts is undefined, then return empty string\n      const idParts = args.slice(0, -1)\n      if (idParts.some((part) => part === undefined)) {\n        return ''\n      }\n\n      const id = idParts.join('.')\n\n      return intl.formatMessage({\n        id,\n        defaultMessage: 'Missing translation for ' + id\n      })\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    }",
      "startLine": 291,
      "endLine": 332,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "comment",
        "ERROR",
        "statement_block"
      ],
      "depth": 34,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/print-certificate/pdfUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@132-141",
      "type": "function_declaration",
      "name": "getPrintForm",
      "text": "function getPrintForm(configuration: EventConfig) {\n  const actionConfig = configuration.actions.find(\n    (a) => a.type === ActionType.PRINT_CERTIFICATE\n  )\n\n  return getOrThrow(\n    actionConfig?.printForm,\n    `No form found for action: ${ActionType.PRINT_CERTIFICATE}`\n  )\n}",
      "startLine": 132,
      "endLine": 141,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/print-certificate/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@143-337",
      "type": "function_declaration",
      "name": "Review",
      "text": "function Review() {\n  const { eventId } = useTypedParams(ROUTES.V2.EVENTS.PRINT_CERTIFICATE.REVIEW)\n  const [{ templateId }] = useTypedSearchParams(\n    ROUTES.V2.EVENTS.PRINT_CERTIFICATE.REVIEW\n  )\n\n  const { getAnnotation } = useActionAnnotation()\n  const annotation = getAnnotation()\n\n  if (!templateId) {\n    throw new Error('Please select a template from the previous step')\n  }\n  const intl = useIntl()\n  const navigate = useNavigate()\n  const isOnline = useOnlineStatus()\n  const [modal, openModal] = useModal()\n\n  const { getEvent, onlineActions } = useEvents()\n  const [fullEvent] = getEvent.useSuspenseQuery(eventId)\n\n  const actions = getAcceptedActions(fullEvent)\n  const userIds = getUserIdsFromActions(actions)\n  const { getUsers } = useUsers()\n  const [users] = getUsers.useSuspenseQuery(userIds)\n\n  const { getLocations } = useLocations()\n  const [locations] = getLocations.useSuspenseQuery()\n\n  const { certificateTemplates, language } = useAppConfig()\n  const certificateConfig = certificateTemplates.find(\n    (template) => template.id === templateId\n  )\n  const { eventConfiguration } = useEventConfiguration(fullEvent.type)\n  const formConfig = getPrintForm(eventConfiguration)\n\n  const { svgCode, handleCertify } = usePrintableCertificate({\n    event: fullEvent,\n    config: eventConfiguration,\n    locations,\n    users,\n    certificateConfig,\n    language\n  })\n\n  /**\n   * If there are validation errors in the form, redirect to the\n   * print certificate form page, since the user should not be able to\n   * review/print the certificate if there are validation errors.\n   */\n  const validationErrorExist = validationErrorsInActionFormExist({\n    formConfig,\n    form: annotation\n  })\n\n  if (validationErrorExist) {\n    // eslint-disable-next-line no-console\n    console.warn('Form is not properly filled. Redirecting to the beginning...')\n    return (\n      <Navigate\n        to={ROUTES.V2.EVENTS.PRINT_CERTIFICATE.buildPath({ eventId })}\n      />\n    )\n  }\n\n  if (!svgCode) {\n    return <Spinner id=\"review-certificate-loading\" />\n  }\n\n  const handleCorrection = () =>\n    navigate(ROUTES.V2.EVENTS.REQUEST_CORRECTION.buildPath({ eventId }))\n\n  const handlePrint = async () => {\n    const confirmed = await openModal<boolean>((close) => (\n      <ResponsiveModal\n        actions={[\n          <Button\n            key=\"close-modal\"\n            id=\"close-modal\"\n            type=\"tertiary\"\n            onClick={() => {\n              close(false)\n            }}\n          >\n            {intl.formatMessage(messages.cancel)}\n          </Button>,\n          <Button\n            key=\"print-certificate\"\n            id=\"print-certificate\"\n            type=\"primary\"\n            onClick={() => close(true)}\n          >\n            {intl.formatMessage(messages.print)}\n          </Button>\n        ]}\n        contentHeight={100}\n        handleClose={() => close(false)}\n        id=\"confirm-print-modal\"\n        show={true}\n        title={intl.formatMessage(messages.printAndIssueModalTitle)}\n      >\n        {intl.formatMessage(messages.printAndIssueModalBody)}\n      </ResponsiveModal>\n    ))\n\n    if (confirmed) {\n      try {\n        await onlineActions.printCertificate.mutateAsync({\n          fullEvent,\n          eventId: fullEvent.id,\n          declaration: {},\n          annotation: { ...annotation, templateId },\n          transactionId: uuid(),\n          type: ActionType.PRINT_CERTIFICATE\n        })\n\n        await handleCertify(fullEvent)\n        navigate(ROUTES.V2.EVENTS.OVERVIEW.buildPath({ eventId }))\n      } catch (error) {\n        // TODO: add notification alert\n        // eslint-disable-next-line no-console\n        console.error(error)\n      }\n    }\n  }\n\n  return (\n    <FormLayout\n      appbarIcon={<Print />}\n      route={ROUTES.V2.EVENTS.PRINT_CERTIFICATE}\n    >\n      <Frame.LayoutCentered>\n        <Stack direction=\"column\">\n          <Box>\n            <CertificateContainer\n              dangerouslySetInnerHTML={{ __html: svgCode }}\n              id=\"print\"\n            />\n          </Box>\n\n          {!isOnline && (\n            <ReactTooltip effect=\"solid\" id=\"no-connection\" place=\"top\">\n              <TooltipMessage>\n                {intl.formatMessage(messages.onlineOnly)}\n              </TooltipMessage>\n            </ReactTooltip>\n          )}\n\n          <Content\n            bottomActionButtons={[\n              <ProtectedComponent\n                key=\"edit-record\"\n                scopes={[\n                  SCOPES.RECORD_REGISTRATION_REQUEST_CORRECTION,\n                  SCOPES.RECORD_REGISTRATION_CORRECT\n                ]}\n              >\n                <Button\n                  fullWidth\n                  size=\"large\"\n                  type=\"negative\"\n                  onClick={handleCorrection}\n                >\n                  <Icon name=\"X\" size=\"medium\" />\n                  {intl.formatMessage(messages.makeCorrection)}\n                </Button>\n              </ProtectedComponent>,\n              <TooltipContainer\n                key=\"confirm-and-print\"\n                data-tip\n                data-for=\"no-connection\"\n              >\n                <Button\n                  fullWidth\n                  disabled={!isOnline}\n                  id=\"confirm-print\"\n                  size=\"large\"\n                  type=\"positive\"\n                  onClick={handlePrint}\n                >\n                  <Icon name=\"Check\" size=\"medium\" />\n                  {intl.formatMessage(messages.confirmPrint)}\n                </Button>\n              </TooltipContainer>\n            ]}\n            bottomActionDirection=\"row\"\n            title={intl.formatMessage(messages.printTitle)}\n          >\n            {modal}\n            {intl.formatMessage(messages.printDescription)}\n          </Content>\n        </Stack>\n      </Frame.LayoutCentered>\n    </FormLayout>\n  )\n}",
      "startLine": 143,
      "endLine": 337,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/print-certificate/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@33-104",
      "type": "function_declaration",
      "name": "Pages",
      "text": "function Pages() {\n  const events = useEvents()\n  const { eventId, pageId } = useTypedParams(ROUTES.V2.EVENTS.VALIDATE.PAGES)\n  const [searchParams] = useTypedSearchParams(ROUTES.V2.EVENTS.VALIDATE.PAGES)\n  const setFormValues = useEventFormData((state) => state.setFormValues)\n  const { formValues: form } = useSubscribeEventFormData()\n  const navigate = useNavigate()\n  const drafts = useDrafts()\n  const { modal, goToHome } = useEventFormNavigation()\n  const { saveAndExitModal, handleSaveAndExit } = useSaveAndExitModal()\n\n  const event = events.getEventState.useSuspenseQuery(eventId)\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n\n  const formPages = getDeclarationPages(configuration)\n\n  const currentPageId =\n    formPages.find((p) => p.id === pageId)?.id || formPages[0]?.id\n\n  if (!currentPageId) {\n    throw new Error('Form does not have any pages')\n  }\n\n  useEffect(() => {\n    if (pageId !== currentPageId) {\n      navigate(\n        ROUTES.V2.EVENTS.VALIDATE.PAGES.buildPath({\n          eventId,\n          pageId: currentPageId\n        }),\n        { replace: true }\n      )\n    }\n  }, [pageId, currentPageId, navigate, eventId])\n\n  return (\n    <FormLayout\n      route={ROUTES.V2.EVENTS.VALIDATE}\n      onSaveAndExit={async () =>\n        handleSaveAndExit(() => {\n          drafts.submitLocalDraft()\n          goToHome()\n        })\n      }\n    >\n      {modal}\n      <PagesComponent\n        declaration={event.declaration}\n        eventConfig={configuration}\n        form={form}\n        formPages={formPages}\n        pageId={currentPageId}\n        setFormData={(data) => setFormValues(data)}\n        showReviewButton={searchParams.from === 'review'}\n        onPageChange={(nextPageId: string) =>\n          navigate(\n            ROUTES.V2.EVENTS.VALIDATE.PAGES.buildPath({\n              eventId,\n              pageId: nextPageId\n            })\n          )\n        }\n        onSubmit={() =>\n          navigate(ROUTES.V2.EVENTS.VALIDATE.REVIEW.buildPath({ eventId }))\n        }\n      />\n      {saveAndExitModal}\n    </FormLayout>\n  )\n}",
      "startLine": 33,
      "endLine": 104,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/validate/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@49-216",
      "type": "function_declaration",
      "name": "Review",
      "text": "function Review() {\n  const { eventId } = useTypedParams(ROUTES.V2.EVENTS.VALIDATE)\n  const events = useEvents()\n  const drafts = useDrafts()\n  const [modal, openModal] = useModal()\n  const navigate = useNavigate()\n  const { goToHome } = useEventFormNavigation()\n\n  const [event] = events.getEvent.useSuspenseQuery(eventId)\n\n  const { setAnnotation, getAnnotation } = useActionAnnotation()\n\n  const { saveAndExitModal, handleSaveAndExit } = useSaveAndExitModal()\n\n  const previousAnnotation = getActionAnnotation({\n    event,\n    actionType: ActionType.VALIDATE\n  })\n\n  const annotation = getAnnotation(previousAnnotation)\n\n  const { eventConfiguration: config } = useEventConfiguration(event.type)\n\n  const formConfig = getDeclaration(config)\n  const reviewConfig = getActionReview(config, ActionType.VALIDATE)\n  const { formatMessage } = useIntlFormatMessageWithFlattenedParams()\n\n  const getFormValues = useEventFormData((state) => state.getFormValues)\n\n  const currentEventState = getCurrentEventState(event)\n  const previousFormValues = currentEventState.declaration\n  const form = getFormValues()\n\n  const scopes = useSelector(getScope) ?? undefined\n\n  const reviewActionConfiguration = useReviewActionConfig({\n    formConfig,\n    declaration: form,\n    annotation,\n    scopes,\n    reviewFields: reviewConfig.fields\n  })\n\n  async function handleEdit({\n    pageId,\n    fieldId,\n    confirmation\n  }: {\n    pageId: string\n    fieldId?: string\n    confirmation?: boolean\n  }) {\n    const confirmedEdit =\n      confirmation ||\n      (await openModal<boolean | null>((close) => (\n        <ReviewComponent.EditModal close={close} />\n      )))\n\n    if (confirmedEdit) {\n      navigate(\n        ROUTES.V2.EVENTS.VALIDATE.PAGES.buildPath(\n          { pageId, eventId },\n          {\n            from: 'review'\n          },\n          fieldId ? makeFormFieldIdFormikCompatible(fieldId) : undefined\n        )\n      )\n    }\n    return\n  }\n\n  async function handleValidation() {\n    const confirmedValidation = await openModal<boolean | null>((close) => {\n      if (reviewActionConfiguration.messages.modal === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\n          'Tried to render validate modal without message definitions.'\n        )\n        return null\n      }\n\n      return (\n        <ReviewComponent.ActionModal.Accept\n          action=\"Validate\"\n          close={close}\n          copy={{\n            ...reviewActionConfiguration.messages.modal,\n            eventLabel: config.label\n          }}\n        />\n      )\n    })\n\n    if (confirmedValidation) {\n      reviewActionConfiguration.onConfirm(eventId)\n\n      goToHome()\n    }\n  }\n\n  async function handleRejection() {\n    const confirmedRejection = await openModal<RejectionState | null>(\n      (close) => <ReviewComponent.ActionModal.Reject close={close} />\n    )\n    if (confirmedRejection) {\n      const { rejectAction, message, isDuplicate } = confirmedRejection\n\n      if (rejectAction === REJECT_ACTIONS.SEND_FOR_UPDATE) {\n        events.actions.reject.mutate({\n          eventId,\n          declaration: {},\n          transactionId: uuid(),\n          annotation: { message }\n        })\n      }\n\n      if (rejectAction === REJECT_ACTIONS.ARCHIVE) {\n        events.actions.archive.mutate({\n          eventId,\n          declaration: {},\n          transactionId: uuid(),\n          annotation: { message, isDuplicate }\n        })\n      }\n\n      goToHome()\n    }\n  }\n\n  return (\n    <FormLayout\n      route={ROUTES.V2.EVENTS.VALIDATE}\n      onSaveAndExit={async () =>\n        handleSaveAndExit(() => {\n          drafts.submitLocalDraft()\n          goToHome()\n        })\n      }\n    >\n      <ReviewComponent.Body\n        annotation={annotation}\n        form={form}\n        formConfig={formConfig}\n        previousFormValues={previousFormValues}\n        reviewFields={reviewConfig.fields}\n        title={formatMessage(reviewConfig.title, form)}\n        onAnnotationChange={(values) => setAnnotation(values)}\n        onEdit={handleEdit}\n      >\n        <ReviewComponent.Actions\n          icon={reviewActionConfiguration.icon}\n          incomplete={reviewActionConfiguration.incomplete}\n          messages={reviewActionConfiguration.messages}\n          primaryButtonType={reviewActionConfiguration.buttonType}\n          onConfirm={handleValidation}\n          onReject={\n            currentEventState.status === EventStatus.REJECTED\n              ? undefined\n              : handleRejection\n          }\n        />\n        {modal}\n      </ReviewComponent.Body>\n      {saveAndExitModal}\n    </FormLayout>\n  )\n}",
      "startLine": 49,
      "endLine": 216,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/validate/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@92-119",
      "type": "function_declaration",
      "name": "handleEdit",
      "text": "async function handleEdit({\n    pageId,\n    fieldId,\n    confirmation\n  }: {\n    pageId: string\n    fieldId?: string\n    confirmation?: boolean\n  }) {\n    const confirmedEdit =\n      confirmation ||\n      (await openModal<boolean | null>((close) => (\n        <ReviewComponent.EditModal close={close} />\n      )))\n\n    if (confirmedEdit) {\n      navigate(\n        ROUTES.V2.EVENTS.VALIDATE.PAGES.buildPath(\n          { pageId, eventId },\n          {\n            from: 'review'\n          },\n          fieldId ? makeFormFieldIdFormikCompatible(fieldId) : undefined\n        )\n      )\n    }\n    return\n  }",
      "startLine": 92,
      "endLine": 119,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/validate/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@121-148",
      "type": "function_declaration",
      "name": "handleValidation",
      "text": "async function handleValidation() {\n    const confirmedValidation = await openModal<boolean | null>((close) => {\n      if (reviewActionConfiguration.messages.modal === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\n          'Tried to render validate modal without message definitions.'\n        )\n        return null\n      }\n\n      return (\n        <ReviewComponent.ActionModal.Accept\n          action=\"Validate\"\n          close={close}\n          copy={{\n            ...reviewActionConfiguration.messages.modal,\n            eventLabel: config.label\n          }}\n        />\n      )\n    })\n\n    if (confirmedValidation) {\n      reviewActionConfiguration.onConfirm(eventId)\n\n      goToHome()\n    }\n  }",
      "startLine": 121,
      "endLine": 148,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/validate/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@150-177",
      "type": "function_declaration",
      "name": "handleRejection",
      "text": "async function handleRejection() {\n    const confirmedRejection = await openModal<RejectionState | null>(\n      (close) => <ReviewComponent.ActionModal.Reject close={close} />\n    )\n    if (confirmedRejection) {\n      const { rejectAction, message, isDuplicate } = confirmedRejection\n\n      if (rejectAction === REJECT_ACTIONS.SEND_FOR_UPDATE) {\n        events.actions.reject.mutate({\n          eventId,\n          declaration: {},\n          transactionId: uuid(),\n          annotation: { message }\n        })\n      }\n\n      if (rejectAction === REJECT_ACTIONS.ARCHIVE) {\n        events.actions.archive.mutate({\n          eventId,\n          declaration: {},\n          transactionId: uuid(),\n          annotation: { message, isDuplicate }\n        })\n      }\n\n      goToHome()\n    }\n  }",
      "startLine": 150,
      "endLine": 177,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/validate/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@31-127",
      "type": "function_declaration",
      "name": "Pages",
      "text": "function Pages() {\n  const { eventId, pageId } = useTypedParams(ROUTES.V2.EVENTS.DECLARE.PAGES)\n  const [searchParams] = useTypedSearchParams(ROUTES.V2.EVENTS.DECLARE.PAGES)\n  const events = useEvents()\n  const navigate = useNavigate()\n  const drafts = useDrafts()\n  const { modal, goToHome } = useEventFormNavigation()\n  const { saveAndExitModal, handleSaveAndExit } = useSaveAndExitModal()\n  const { getFormValues, setFormValues } = useEventFormData()\n  const formValues = getFormValues()\n  const event = events.getEventState.useSuspenseQuery(eventId)\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n  const declarationPages = getDeclarationPages(configuration)\n\n  const currentPageId =\n    declarationPages.find((p) => p.id === pageId)?.id || declarationPages[0]?.id\n\n  if (!currentPageId) {\n    throw new Error('Form does not have any pages')\n  }\n\n  useEffect(() => {\n    if (pageId !== currentPageId) {\n      navigate(\n        ROUTES.V2.EVENTS.DECLARE.PAGES.buildPath(\n          {\n            eventId,\n            pageId: currentPageId\n          },\n          searchParams\n        ),\n        { replace: true }\n      )\n    }\n  }, [pageId, currentPageId, navigate, eventId, searchParams])\n\n  /*\n   * If the event had a temporary ID and the record got persisted while the user\n   * was on the declare page, we need to navigate to the event with the canonical\n   * ID.\n   */\n  useEffect(() => {\n    const hasTemporaryId = isTemporaryId(event.id)\n\n    if (eventId !== event.id && !hasTemporaryId) {\n      navigate(\n        ROUTES.V2.EVENTS.DECLARE.PAGES.buildPath(\n          {\n            eventId: event.id,\n            pageId: currentPageId\n          },\n          searchParams\n        )\n      )\n    }\n  }, [currentPageId, event.id, eventId, navigate, searchParams])\n\n  return (\n    <FormLayout\n      route={ROUTES.V2.EVENTS.DECLARE}\n      onSaveAndExit={async () =>\n        handleSaveAndExit(() => {\n          drafts.submitLocalDraft()\n          goToHome()\n        })\n      }\n    >\n      {modal}\n      <PagesComponent\n        declaration={event.declaration}\n        eventConfig={configuration}\n        form={formValues}\n        formPages={declarationPages}\n        pageId={currentPageId}\n        setFormData={(data) => setFormValues(data)}\n        showReviewButton={searchParams.from === 'review'}\n        onPageChange={(nextPageId: string) =>\n          navigate(\n            ROUTES.V2.EVENTS.DECLARE.PAGES.buildPath(\n              {\n                eventId,\n                pageId: nextPageId\n              },\n              searchParams\n            )\n          )\n        }\n        onSubmit={() =>\n          navigate(ROUTES.V2.EVENTS.DECLARE.REVIEW.buildPath({ eventId }))\n        }\n      />\n      {saveAndExitModal}\n    </FormLayout>\n  )\n}",
      "startLine": 31,
      "endLine": 127,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/declare/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@39-162",
      "type": "function_declaration",
      "name": "Review",
      "text": "function Review() {\n  const { eventId } = useTypedParams(ROUTES.V2.EVENTS.DECLARE.REVIEW)\n  const events = useEvents()\n  const drafts = useDrafts()\n  const navigate = useNavigate()\n  const [modal, openModal] = useModal()\n  const { formatMessage } = useIntlFormatMessageWithFlattenedParams()\n  const { goToHome } = useEventFormNavigation()\n  const { saveAndExitModal, handleSaveAndExit } = useSaveAndExitModal()\n\n  const event = events.getEventState.useSuspenseQuery(eventId)\n\n  const { eventConfiguration: config } = useEventConfiguration(event.type)\n\n  const formConfig = getDeclaration(config)\n  const reviewConfig = getActionReview(config, ActionType.DECLARE)\n\n  const form = useEventFormData((state) => state.getFormValues())\n\n  const { setAnnotation, getAnnotation } = useActionAnnotation()\n  const annotation = getAnnotation()\n\n  const scopes = useSelector(getScope) ?? undefined\n\n  const reviewActionConfiguration = useReviewActionConfig({\n    formConfig,\n    declaration: form,\n    annotation,\n    scopes,\n    reviewFields: reviewConfig.fields\n  })\n\n  async function handleEdit({\n    pageId,\n    fieldId,\n    confirmation\n  }: {\n    pageId: string\n    fieldId?: string\n    confirmation?: boolean\n  }) {\n    const confirmedEdit =\n      confirmation ||\n      (await openModal<boolean | null>((close) => (\n        <ReviewComponent.EditModal close={close}></ReviewComponent.EditModal>\n      )))\n\n    if (confirmedEdit) {\n      navigate(\n        ROUTES.V2.EVENTS.DECLARE.PAGES.buildPath(\n          { pageId, eventId },\n          {\n            from: 'review'\n          },\n          fieldId ? makeFormFieldIdFormikCompatible(fieldId) : undefined\n        )\n      )\n    }\n\n    return\n  }\n\n  async function handleDeclaration() {\n    const confirmedDeclaration = await openModal<boolean | null>((close) => {\n      if (reviewActionConfiguration.messages.modal === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\n          'Tried to render declare modal without message definitions.'\n        )\n        return null\n      }\n\n      return (\n        <ReviewComponent.ActionModal.Accept\n          action=\"Declare\"\n          close={close}\n          copy={{\n            ...reviewActionConfiguration.messages.modal,\n            eventLabel: config.label\n          }}\n        />\n      )\n    })\n\n    if (confirmedDeclaration) {\n      reviewActionConfiguration.onConfirm(eventId)\n\n      goToHome()\n    }\n  }\n\n  return (\n    <FormLayout\n      route={ROUTES.V2.EVENTS.DECLARE}\n      onSaveAndExit={async () =>\n        handleSaveAndExit(() => {\n          drafts.submitLocalDraft()\n          goToHome()\n        })\n      }\n    >\n      <ReviewComponent.Body\n        annotation={annotation}\n        form={form}\n        formConfig={formConfig}\n        reviewFields={reviewConfig.fields}\n        title={formatMessage(reviewConfig.title, form)}\n        onAnnotationChange={(values) => setAnnotation(values)}\n        onEdit={handleEdit}\n      >\n        <ReviewComponent.Actions\n          canSendIncomplete={scopes?.includes(SCOPES.RECORD_SUBMIT_INCOMPLETE)}\n          icon={reviewActionConfiguration.icon}\n          incomplete={reviewActionConfiguration.incomplete}\n          messages={reviewActionConfiguration.messages}\n          primaryButtonType={reviewActionConfiguration.buttonType}\n          onConfirm={handleDeclaration}\n        />\n      </ReviewComponent.Body>\n      {modal}\n      {saveAndExitModal}\n    </FormLayout>\n  )\n}",
      "startLine": 39,
      "endLine": 162,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/declare/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@71-99",
      "type": "function_declaration",
      "name": "handleEdit",
      "text": "async function handleEdit({\n    pageId,\n    fieldId,\n    confirmation\n  }: {\n    pageId: string\n    fieldId?: string\n    confirmation?: boolean\n  }) {\n    const confirmedEdit =\n      confirmation ||\n      (await openModal<boolean | null>((close) => (\n        <ReviewComponent.EditModal close={close}></ReviewComponent.EditModal>\n      )))\n\n    if (confirmedEdit) {\n      navigate(\n        ROUTES.V2.EVENTS.DECLARE.PAGES.buildPath(\n          { pageId, eventId },\n          {\n            from: 'review'\n          },\n          fieldId ? makeFormFieldIdFormikCompatible(fieldId) : undefined\n        )\n      )\n    }\n\n    return\n  }",
      "startLine": 71,
      "endLine": 99,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/declare/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@101-128",
      "type": "function_declaration",
      "name": "handleDeclaration",
      "text": "async function handleDeclaration() {\n    const confirmedDeclaration = await openModal<boolean | null>((close) => {\n      if (reviewActionConfiguration.messages.modal === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\n          'Tried to render declare modal without message definitions.'\n        )\n        return null\n      }\n\n      return (\n        <ReviewComponent.ActionModal.Accept\n          action=\"Declare\"\n          close={close}\n          copy={{\n            ...reviewActionConfiguration.messages.modal,\n            eventLabel: config.label\n          }}\n        />\n      )\n    })\n\n    if (confirmedDeclaration) {\n      reviewActionConfiguration.onConfirm(eventId)\n\n      goToHome()\n    }\n  }",
      "startLine": 101,
      "endLine": 128,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/declare/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@34-126",
      "type": "function_declaration",
      "name": "AdditionalDetails",
      "text": "function AdditionalDetails() {\n  const navigate = useNavigate()\n\n  const { eventId, pageId } = useTypedParams(\n    ROUTES.V2.EVENTS.REQUEST_CORRECTION.ADDITIONAL_DETAILS\n  )\n  const events = useEvents()\n  const annotation = useActionAnnotation((state) => state.getAnnotation())\n  const setAnnotation = useActionAnnotation((state) => state.setAnnotation)\n\n  const event = events.getEventState.useSuspenseQuery(eventId)\n\n  const intl = useIntl()\n\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n\n  const actionConfiguration = configuration.actions.find(\n    (action) => action.type === ActionType.REQUEST_CORRECTION\n  )\n\n  if (!actionConfiguration) {\n    throw new Error(\n      `User got to a request correction flow without configuration defined for this action. Event ID: ${eventId}, Page ID: ${pageId}, Action Type: ${ActionType.REQUEST_CORRECTION}`\n    )\n  }\n\n  const formPages = actionConfiguration.additionalDetailsForm\n\n  const currentPageId =\n    formPages.find((p) => p.id === pageId)?.id || formPages[0]?.id\n\n  React.useEffect(() => {\n    if (!currentPageId) {\n      navigate(\n        ROUTES.V2.EVENTS.REQUEST_CORRECTION.ADDITIONAL_DETAILS.buildPath({\n          eventId: event.id,\n          pageId: formPages[0]?.id\n        })\n      )\n    }\n  }, [currentPageId, navigate, event.id, pageId, formPages])\n\n  if (!currentPageId) {\n    return null\n  }\n\n  return (\n    <>\n      <ActionPageLight\n        hideBackground\n        goBack={() => navigate(-1)}\n        goHome={() =>\n          navigate(\n            generateGoToHomeTabUrl({\n              tabId: WORKQUEUE_TABS.readyForReview\n            })\n          )\n        }\n        id=\"corrector_form\"\n        title={intl.formatMessage(messages.title)}\n      >\n        <PagesComponent\n          // @TODO: Use subscription if needed\n          continueButtonText={intl.formatMessage(buttonMessages.continueButton)}\n          declaration={event.declaration}\n          eventConfig={configuration}\n          form={annotation}\n          formPages={formPages}\n          pageId={currentPageId}\n          setFormData={(data) => setAnnotation(data)}\n          showReviewButton={false}\n          onPageChange={(nextPageId: string) => {\n            return navigate(\n              ROUTES.V2.EVENTS.REQUEST_CORRECTION.ADDITIONAL_DETAILS.buildPath({\n                eventId: event.id,\n                pageId: nextPageId\n              })\n            )\n          }}\n          onSubmit={() => {\n            return navigate(\n              ROUTES.V2.EVENTS.REQUEST_CORRECTION.SUMMARY.buildPath({\n                eventId: event.id\n              })\n            )\n          }}\n        />\n      </ActionPageLight>\n    </>\n  )\n}",
      "startLine": 34,
      "endLine": 126,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/correct/request/AdditionalDetails/AdditionalDetails.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@27-90",
      "type": "function_declaration",
      "name": "Pages",
      "text": "function Pages() {\n  const { eventId, pageId } = useTypedParams(ROUTES.V2.EVENTS.REGISTER.PAGES)\n  const [searchParams] = useTypedSearchParams(ROUTES.V2.EVENTS.REGISTER.PAGES)\n  const setFormValues = useEventFormData((state) => state.setFormValues)\n  const form = useEventFormData((state) => state.getFormValues())\n  const navigate = useNavigate()\n  const events = useEvents()\n  const { modal } = useEventFormNavigation()\n\n  const event = events.getEventState.useSuspenseQuery(eventId)\n\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n\n  const formPages = getDeclarationPages(configuration)\n\n  const currentPageId =\n    formPages.find((p) => p.id === pageId)?.id || formPages[0]?.id\n\n  if (!currentPageId) {\n    throw new Error('Form does not have any pages')\n  }\n\n  useEffect(() => {\n    if (pageId !== currentPageId) {\n      navigate(\n        ROUTES.V2.EVENTS.REQUEST_CORRECTION.PAGES.buildPath({\n          eventId,\n          pageId: currentPageId\n        }),\n        { replace: true }\n      )\n    }\n  }, [pageId, currentPageId, navigate, eventId])\n\n  return (\n    <FormLayout route={ROUTES.V2.EVENTS.REQUEST_CORRECTION}>\n      {modal}\n      <PagesComponent\n        declaration={event.declaration}\n        eventConfig={configuration}\n        form={form}\n        formPages={formPages}\n        pageId={currentPageId}\n        setFormData={(data) => setFormValues(data)}\n        showReviewButton={searchParams.from === 'review'}\n        onPageChange={(nextPageId: string) =>\n          navigate(\n            ROUTES.V2.EVENTS.REQUEST_CORRECTION.PAGES.buildPath({\n              eventId,\n              pageId: nextPageId\n            })\n          )\n        }\n        onSubmit={() =>\n          navigate(\n            ROUTES.V2.EVENTS.REQUEST_CORRECTION.REVIEW.buildPath({ eventId })\n          )\n        }\n      />\n    </FormLayout>\n  )\n}",
      "startLine": 27,
      "endLine": 90,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/correct/request/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@48-53",
      "type": "function_declaration",
      "name": "shouldBeShownAsAValue",
      "text": "function shouldBeShownAsAValue(field: FieldConfig) {\n  if (field.type === 'PAGE_HEADER' || field.type === 'PARAGRAPH') {\n    return false\n  }\n  return true\n}",
      "startLine": 48,
      "endLine": 53,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/correct/request/Summary/Summary.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@55-82",
      "type": "function_declaration",
      "name": "ContinueButton",
      "text": "function ContinueButton({\n  onClick,\n  disabled = false,\n  scopes\n}: {\n  disabled?: boolean\n  onClick: () => void\n  scopes: Scope[] | null\n}) {\n  const intl = useIntl()\n\n  return (\n    <Button\n      key=\"make_correction\"\n      disabled={disabled}\n      id=\"make_correction\"\n      size=\"large\"\n      type=\"positive\"\n      onClick={onClick}\n    >\n      <Check />\n\n      {scopes?.includes(SCOPES.RECORD_REGISTRATION_CORRECT)\n        ? intl.formatMessage(buttonMessages.makeCorrection)\n        : intl.formatMessage(buttonMessages.sendForApproval)}\n    </Button>\n  )\n}",
      "startLine": 55,
      "endLine": 82,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/correct/request/Summary/Summary.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@29-122",
      "type": "function_declaration",
      "name": "Review",
      "text": "function Review() {\n  const { eventId } = useTypedParams(ROUTES.V2.EVENTS.REQUEST_CORRECTION.REVIEW)\n  const events = useEvents()\n  const intl = useIntl()\n  const [modal, openModal] = useModal()\n  const navigate = useNavigate()\n\n  const event = events.getEventState.useSuspenseQuery(eventId)\n\n  const { eventConfiguration: config } = useEventConfiguration(event.type)\n  const formConfig = getDeclaration(config)\n\n  const getFormValues = useEventFormData((state) => state.getFormValues)\n\n  const form = getFormValues()\n\n  async function handleEdit({\n    pageId,\n    fieldId,\n    confirmation\n  }: {\n    pageId: string\n    fieldId?: string\n    confirmation?: boolean\n  }) {\n    const confirmedEdit =\n      confirmation ||\n      (await openModal<boolean | null>((close) => (\n        <ReviewComponent.EditModal close={close} />\n      )))\n\n    if (confirmedEdit) {\n      navigate(\n        ROUTES.V2.EVENTS.REQUEST_CORRECTION.PAGES.buildPath(\n          { pageId, eventId },\n          {\n            from: 'review'\n          },\n          fieldId ? makeFormFieldIdFormikCompatible(fieldId) : undefined\n        )\n      )\n    }\n    return\n  }\n\n  const previousFormValues = event.declaration\n  const valuesHaveChanged = Object.entries(form).some(\n    ([key, value]) => previousFormValues[key] !== value\n  )\n  const intlWithData = useIntlFormatMessageWithFlattenedParams()\n\n  const actionConfig = config.actions.find(\n    (action) => action.type === ActionType.REQUEST_CORRECTION\n  )\n\n  if (!actionConfig) {\n    throw new Error(\n      `Action config for ${ActionType.REQUEST_CORRECTION} was not found. This should never happen`\n    )\n  }\n\n  return (\n    <FormLayout route={ROUTES.V2.EVENTS.REGISTER}>\n      <ReviewComponent.Body\n        form={form}\n        formConfig={formConfig}\n        previousFormValues={previousFormValues}\n        title={intlWithData.formatMessage(\n          actionConfig.label,\n          previousFormValues\n        )}\n        onEdit={handleEdit}\n      >\n        <PrimaryButton\n          key=\"continue_button\"\n          disabled={!valuesHaveChanged}\n          id=\"continue_button\"\n          onClick={() => {\n            navigate(\n              ROUTES.V2.EVENTS.REQUEST_CORRECTION.ADDITIONAL_DETAILS_INDEX.buildPath(\n                {\n                  eventId\n                }\n              )\n            )\n          }}\n        >\n          {intl.formatMessage(buttonMessages.continueButton)}\n        </PrimaryButton>\n        {modal}\n      </ReviewComponent.Body>\n    </FormLayout>\n  )\n}",
      "startLine": 29,
      "endLine": 122,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/correct/request/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@45-72",
      "type": "function_declaration",
      "name": "handleEdit",
      "text": "async function handleEdit({\n    pageId,\n    fieldId,\n    confirmation\n  }: {\n    pageId: string\n    fieldId?: string\n    confirmation?: boolean\n  }) {\n    const confirmedEdit =\n      confirmation ||\n      (await openModal<boolean | null>((close) => (\n        <ReviewComponent.EditModal close={close} />\n      )))\n\n    if (confirmedEdit) {\n      navigate(\n        ROUTES.V2.EVENTS.REQUEST_CORRECTION.PAGES.buildPath(\n          { pageId, eventId },\n          {\n            from: 'review'\n          },\n          fieldId ? makeFormFieldIdFormikCompatible(fieldId) : undefined\n        )\n      )\n    }\n    return\n  }",
      "startLine": 45,
      "endLine": 72,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/correct/request/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@34-123",
      "type": "function_declaration",
      "name": "Onboarding",
      "text": "function Onboarding() {\n  const navigate = useNavigate()\n\n  const { eventId, pageId } = useTypedParams(\n    ROUTES.V2.EVENTS.REQUEST_CORRECTION.ONBOARDING\n  )\n  const events = useEvents()\n  const annotation = useActionAnnotation((state) => state.getAnnotation())\n  const setAnnotation = useActionAnnotation((state) => state.setAnnotation)\n\n  const event = events.getEventState.useSuspenseQuery(eventId)\n\n  const intl = useIntl()\n\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n\n  const actionConfiguration = configuration.actions.find(\n    (action) => action.type === ActionType.REQUEST_CORRECTION\n  )\n\n  if (!actionConfiguration) {\n    throw new Error(\n      `User got to a request correction flow without configuration defined for action type: ${ActionType.REQUEST_CORRECTION}, eventId: ${eventId}, pageId: ${pageId}`\n    )\n  }\n\n  const formPages = actionConfiguration.onboardingForm\n\n  const currentPageId =\n    formPages.find((p) => p.id === pageId)?.id || formPages[0]?.id\n\n  React.useEffect(() => {\n    if (!currentPageId) {\n      navigate(\n        ROUTES.V2.EVENTS.REQUEST_CORRECTION.REVIEW.buildPath({\n          eventId: event.id\n        })\n      )\n    }\n  }, [currentPageId, navigate, event.id])\n\n  if (!currentPageId) {\n    return null\n  }\n\n  return (\n    <ActionPageLight\n      hideBackground\n      goBack={() => navigate(-1)}\n      goHome={() =>\n        navigate(\n          generateGoToHomeTabUrl({\n            tabId: WORKQUEUE_TABS.readyForReview\n          })\n        )\n      }\n      id=\"corrector_form\"\n      title={intl.formatMessage(messages.title)}\n    >\n      <PagesComponent\n        // @TODO: Use subscription if needed\n        continueButtonText={intl.formatMessage(buttonMessages.continueButton)}\n        declaration={event.declaration}\n        eventConfig={configuration}\n        form={annotation}\n        formPages={formPages}\n        pageId={currentPageId}\n        setFormData={(data) => setAnnotation(data)}\n        showReviewButton={false}\n        onPageChange={(nextPageId: string) => {\n          return navigate(\n            ROUTES.V2.EVENTS.REQUEST_CORRECTION.ONBOARDING.buildPath({\n              eventId: event.id,\n              pageId: nextPageId\n            })\n          )\n        }}\n        onSubmit={() => {\n          return navigate(\n            ROUTES.V2.EVENTS.REQUEST_CORRECTION.REVIEW.buildPath({\n              eventId: event.id\n            })\n          )\n        }}\n      />\n    </ActionPageLight>\n  )\n}",
      "startLine": 34,
      "endLine": 123,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/correct/request/Onboarding/Onboarding.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@41-53",
      "type": "function_declaration",
      "name": "FormClear",
      "text": "function FormClear() {\n  const drafts = useDrafts()\n  useEffect(() => {\n    drafts.setLocalDraft(\n      testDataGenerator().event.draft({\n        eventId: tennisClubMembershipEventDocument.id,\n        actionType: ActionType.REQUEST_CORRECTION\n      })\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  return <Outlet />\n}",
      "startLine": 41,
      "endLine": 53,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/correct/request/CorrectionRequest.stories.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@19-35",
      "type": "function_declaration",
      "name": "DeleteEvent",
      "text": "function DeleteEvent() {\n  const { eventId } = useTypedParams(ROUTES.V2.EVENTS.DELETE)\n  const navigate = useNavigate()\n  const events = useEvents()\n  const deleteEvent = events.deleteEvent.useMutation()\n\n  useEffect(() => {\n    deleteEvent.mutate({ eventId })\n    navigate(ROUTES.V2.path)\n    // If you add deleteEvent to the dependencies, it will cause the delete\n    // to be called >1 times. This is because the deleteEvent contains updating data fields describing\n    // the state of the request\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <div />\n}",
      "startLine": 19,
      "endLine": 35,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/delete/index.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@32-102",
      "type": "function_declaration",
      "name": "Pages",
      "text": "function Pages() {\n  const events = useEvents()\n  const { eventId, pageId } = useTypedParams(ROUTES.V2.EVENTS.REGISTER.PAGES)\n  const [searchParams] = useTypedSearchParams(ROUTES.V2.EVENTS.REGISTER.PAGES)\n  const setFormValues = useEventFormData((state) => state.setFormValues)\n  const { formValues: form } = useSubscribeEventFormData()\n  const { saveAndExitModal, handleSaveAndExit } = useSaveAndExitModal()\n  const navigate = useNavigate()\n  const drafts = useDrafts()\n  const { modal, goToHome } = useEventFormNavigation()\n  const event = events.getEventState.useSuspenseQuery(eventId)\n  const { eventConfiguration: configuration } = useEventConfiguration(\n    event.type\n  )\n\n  const declarationPages = getDeclarationPages(configuration)\n\n  const currentPageId =\n    declarationPages.find((p) => p.id === pageId)?.id || declarationPages[0]?.id\n\n  if (!currentPageId) {\n    throw new Error('Form does not have any pages')\n  }\n\n  useEffect(() => {\n    if (pageId !== currentPageId) {\n      navigate(\n        ROUTES.V2.EVENTS.REGISTER.PAGES.buildPath({\n          eventId,\n          pageId: currentPageId\n        }),\n        { replace: true }\n      )\n    }\n  }, [pageId, currentPageId, navigate, eventId])\n\n  return (\n    <FormLayout\n      route={ROUTES.V2.EVENTS.REGISTER}\n      onSaveAndExit={async () =>\n        handleSaveAndExit(() => {\n          drafts.submitLocalDraft()\n          goToHome()\n        })\n      }\n    >\n      {modal}\n      <PagesComponent\n        declaration={event.declaration}\n        eventConfig={configuration}\n        form={form}\n        formPages={declarationPages}\n        pageId={currentPageId}\n        setFormData={(data) => setFormValues(data)}\n        showReviewButton={searchParams.from === 'review'}\n        onPageChange={(nextPageId: string) =>\n          navigate(\n            ROUTES.V2.EVENTS.REGISTER.PAGES.buildPath({\n              eventId,\n              pageId: nextPageId\n            })\n          )\n        }\n        onSubmit={() =>\n          navigate(ROUTES.V2.EVENTS.REGISTER.REVIEW.buildPath({ eventId }))\n        }\n      />\n      {saveAndExitModal}\n    </FormLayout>\n  )\n}",
      "startLine": 32,
      "endLine": 102,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/register/Pages.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@45-49",
      "type": "function_declaration",
      "name": "getTranslations",
      "text": "function getTranslations(hasErrors: boolean) {\n  const state = hasErrors ? 'incomplete' : ('complete' as const)\n\n  return reviewMessages[state].register\n}",
      "startLine": 45,
      "endLine": 49,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/register/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@55-221",
      "type": "function_declaration",
      "name": "Review",
      "text": "function Review() {\n  const { eventId } = useTypedParams(ROUTES.V2.EVENTS.REGISTER)\n  const events = useEvents()\n  const drafts = useDrafts()\n  const [modal, openModal] = useModal()\n  const navigate = useNavigate()\n  const { goToHome } = useEventFormNavigation()\n  const { saveAndExitModal, handleSaveAndExit } = useSaveAndExitModal()\n  const { formatMessage } = useIntlFormatMessageWithFlattenedParams()\n\n  const registerMutation = events.actions.register\n\n  const [event] = events.getEvent.useSuspenseQuery(eventId)\n\n  const previousAnnotation = getActionAnnotation({\n    event,\n    actionType: ActionType.REGISTER\n  })\n\n  const { setAnnotation, getAnnotation } = useActionAnnotation()\n  const annotation = getAnnotation(previousAnnotation)\n\n  const { eventConfiguration: config } = useEventConfiguration(event.type)\n\n  const formConfig = getDeclaration(config)\n  const reviewConfig = getActionReview(config, ActionType.REGISTER)\n\n  const getFormValues = useEventFormData((state) => state.getFormValues)\n  const currentEventState = getCurrentEventState(event)\n  const previousFormValues = currentEventState.declaration\n  const form = getFormValues()\n\n  const incomplete = validationErrorsInActionFormExist({\n    formConfig,\n    form,\n    annotation,\n    reviewFields: reviewConfig.fields\n  })\n\n  const messages = getTranslations(incomplete)\n\n  async function handleEdit({\n    pageId,\n    fieldId,\n    confirmation\n  }: {\n    pageId: string\n    fieldId?: string\n    confirmation?: boolean\n  }) {\n    const confirmedEdit =\n      confirmation ||\n      (await openModal<boolean | null>((close) => (\n        <ReviewComponent.EditModal close={close} />\n      )))\n\n    if (confirmedEdit) {\n      navigate(\n        ROUTES.V2.EVENTS.REGISTER.PAGES.buildPath(\n          { pageId, eventId },\n          {\n            from: 'review'\n          },\n          fieldId ? makeFormFieldIdFormikCompatible(fieldId) : undefined\n        )\n      )\n    }\n    return\n  }\n\n  async function handleRegistration() {\n    const confirmedRegistration = await openModal<boolean | null>((close) => {\n      if (messages.modal === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\n          'Tried to render register modal without message definitions.'\n        )\n        return\n      }\n\n      return (\n        <ReviewComponent.ActionModal.Accept\n          action=\"Register\"\n          close={close}\n          copy={{ ...messages.modal, eventLabel: config.label }}\n        />\n      )\n    })\n    if (confirmedRegistration) {\n      registerMutation.mutate({\n        eventId,\n        declaration: form,\n        transactionId: uuid(),\n        annotation\n      })\n\n      goToHome()\n    }\n  }\n\n  async function handleRejection() {\n    const confirmedRejection = await openModal<RejectionState | null>(\n      (close) => <ReviewComponent.ActionModal.Reject close={close} />\n    )\n    if (confirmedRejection) {\n      const { rejectAction, message, isDuplicate } = confirmedRejection\n\n      if (rejectAction === REJECT_ACTIONS.SEND_FOR_UPDATE) {\n        events.actions.reject.mutate({\n          eventId,\n          declaration: {},\n          transactionId: uuid(),\n          annotation: { message }\n        })\n      }\n\n      if (rejectAction === REJECT_ACTIONS.ARCHIVE) {\n        events.actions.archive.mutate({\n          eventId,\n          declaration: {},\n          transactionId: uuid(),\n          annotation: { message, isDuplicate }\n        })\n      }\n\n      goToHome()\n    }\n  }\n\n  return (\n    <FormLayout\n      route={ROUTES.V2.EVENTS.REGISTER}\n      onSaveAndExit={async () =>\n        handleSaveAndExit(() => {\n          drafts.submitLocalDraft()\n          goToHome()\n        })\n      }\n    >\n      <ReviewComponent.Body\n        annotation={annotation}\n        form={form}\n        formConfig={formConfig}\n        previousFormValues={previousFormValues}\n        reviewFields={reviewConfig.fields}\n        title={formatMessage(reviewConfig.title, form)}\n        onAnnotationChange={(values) => setAnnotation(values)}\n        onEdit={handleEdit}\n      >\n        <ReviewComponent.Actions\n          icon=\"Check\"\n          incomplete={incomplete}\n          messages={messages}\n          primaryButtonType=\"positive\"\n          onConfirm={handleRegistration}\n          onReject={\n            currentEventState.status === EventStatus.REJECTED\n              ? undefined\n              : handleRejection\n          }\n        />\n        {modal}\n      </ReviewComponent.Body>\n      {saveAndExitModal}\n    </FormLayout>\n  )\n}",
      "startLine": 55,
      "endLine": 221,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/register/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@96-123",
      "type": "function_declaration",
      "name": "handleEdit",
      "text": "async function handleEdit({\n    pageId,\n    fieldId,\n    confirmation\n  }: {\n    pageId: string\n    fieldId?: string\n    confirmation?: boolean\n  }) {\n    const confirmedEdit =\n      confirmation ||\n      (await openModal<boolean | null>((close) => (\n        <ReviewComponent.EditModal close={close} />\n      )))\n\n    if (confirmedEdit) {\n      navigate(\n        ROUTES.V2.EVENTS.REGISTER.PAGES.buildPath(\n          { pageId, eventId },\n          {\n            from: 'review'\n          },\n          fieldId ? makeFormFieldIdFormikCompatible(fieldId) : undefined\n        )\n      )\n    }\n    return\n  }",
      "startLine": 96,
      "endLine": 123,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/register/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@125-153",
      "type": "function_declaration",
      "name": "handleRegistration",
      "text": "async function handleRegistration() {\n    const confirmedRegistration = await openModal<boolean | null>((close) => {\n      if (messages.modal === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\n          'Tried to render register modal without message definitions.'\n        )\n        return\n      }\n\n      return (\n        <ReviewComponent.ActionModal.Accept\n          action=\"Register\"\n          close={close}\n          copy={{ ...messages.modal, eventLabel: config.label }}\n        />\n      )\n    })\n    if (confirmedRegistration) {\n      registerMutation.mutate({\n        eventId,\n        declaration: form,\n        transactionId: uuid(),\n        annotation\n      })\n\n      goToHome()\n    }\n  }",
      "startLine": 125,
      "endLine": 153,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/register/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@155-182",
      "type": "function_declaration",
      "name": "handleRejection",
      "text": "async function handleRejection() {\n    const confirmedRejection = await openModal<RejectionState | null>(\n      (close) => <ReviewComponent.ActionModal.Reject close={close} />\n    )\n    if (confirmedRejection) {\n      const { rejectAction, message, isDuplicate } = confirmedRejection\n\n      if (rejectAction === REJECT_ACTIONS.SEND_FOR_UPDATE) {\n        events.actions.reject.mutate({\n          eventId,\n          declaration: {},\n          transactionId: uuid(),\n          annotation: { message }\n        })\n      }\n\n      if (rejectAction === REJECT_ACTIONS.ARCHIVE) {\n        events.actions.archive.mutate({\n          eventId,\n          declaration: {},\n          transactionId: uuid(),\n          annotation: { message, isDuplicate }\n        })\n      }\n\n      goToHome()\n    }\n  }",
      "startLine": 155,
      "endLine": 182,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/actions/register/Review.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@19-44",
      "type": "function_declaration",
      "name": "useEventTitle",
      "text": "function useEventTitle() {\n  const intl = useIntlFormatMessageWithFlattenedParams()\n\n  function getEventTitle(\n    eventConfiguration: EventConfig,\n    eventIndex: EventIndex\n  ) {\n    const formattedTitle = intl.formatMessage(\n      eventConfiguration.title,\n      flattenEventIndex(eventIndex)\n    )\n\n    const fallbackTitle = eventConfiguration.fallbackTitle\n      ? intl.formatMessage(eventConfiguration.fallbackTitle)\n      : null\n\n    const useFallbackTitle = formattedTitle.trim() === ''\n\n    return {\n      useFallbackTitle,\n      title: useFallbackTitle ? fallbackTitle : formattedTitle\n    }\n  }\n\n  return { getEventTitle }\n}",
      "startLine": 19,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/useEventTitle.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-41",
      "type": "function_declaration",
      "name": "getEventTitle",
      "text": "function getEventTitle(\n    eventConfiguration: EventConfig,\n    eventIndex: EventIndex\n  ) {\n    const formattedTitle = intl.formatMessage(\n      eventConfiguration.title,\n      flattenEventIndex(eventIndex)\n    )\n\n    const fallbackTitle = eventConfiguration.fallbackTitle\n      ? intl.formatMessage(eventConfiguration.fallbackTitle)\n      : null\n\n    const useFallbackTitle = formattedTitle.trim() === ''\n\n    return {\n      useFallbackTitle,\n      title: useFallbackTitle ? fallbackTitle : formattedTitle\n    }\n  }",
      "startLine": 22,
      "endLine": 41,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/useEventTitle.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@57-98",
      "type": "function_declaration",
      "name": "useOutbox",
      "text": "function useOutbox() {\n  const trpc = useTRPC()\n  const eventListQuery = useQuery({\n    ...trpc.event.list.queryOptions(),\n    queryKey: trpc.event.list.queryKey()\n  })\n\n  const eventsList = eventListQuery.data ?? []\n\n  const eventFromDeclareActions = filterOutboxEventsWithMutation(\n    eventsList,\n    trpc.event.actions.declare.request,\n    (event, parameters) => {\n      return event.id === parameters.eventId\n    }\n  )\n\n  const eventFromValidateActions = filterOutboxEventsWithMutation(\n    eventsList,\n    trpc.event.actions.validate.request,\n    (event, parameters) => {\n      return event.id === parameters.eventId\n    }\n  )\n\n  const eventFromRegisterActions = filterOutboxEventsWithMutation(\n    eventsList,\n    trpc.event.actions.register.request,\n    (event, parameters) => {\n      return event.id === parameters.eventId\n    }\n  )\n\n  return eventFromDeclareActions\n    .concat(eventFromDeclareActions)\n    .concat(eventFromValidateActions)\n    .concat(eventFromRegisterActions)\n    .filter(\n      /* uniqueById */\n      (e, i, arr) => arr.findIndex((a) => a.id === e.id) === i\n    )\n}",
      "startLine": 57,
      "endLine": 98,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/outbox.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@30-47",
      "type": "method_definition",
      "name": "return",
      "text": "return async (params) => {\n    const { eventId } = params\n\n    if (!isTemporaryId(eventId)) {\n      return canonicalMutationFn({ ...params, eventId: eventId })\n    }\n\n    const localVersion = findLocalEventData(eventId)\n    if (!localVersion || isTemporaryId(localVersion.id)) {\n      throw new Error('Event that has not been stored yet cannot be deleted')\n    }\n\n    return canonicalMutationFn({\n      ...params,\n      eventId: localVersion.id,\n      eventType: localVersion.type\n    })\n  }",
      "startLine": 30,
      "endLine": 47,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@101-113",
      "type": "function_declaration",
      "name": "useCreateEvent",
      "text": "function useCreateEvent() {\n  const trpc = useTRPC()\n  const options = trpc.event.create.mutationOptions<EventInput>()\n\n  const overrides = queryClient.getMutationDefaults(\n    trpcOptionsProxy.event.create.mutationKey()\n  )\n\n  return useMutation({\n    ...options,\n    ...overrides\n  })\n}",
      "startLine": 101,
      "endLine": 113,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/create.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@49-77",
      "type": "function_declaration",
      "name": "useGetEvents",
      "text": "function useGetEvents() {\n  const trpc = useTRPC()\n  return {\n    useQuery: () => {\n      // Skip the queryFn defined by tRPC and use our own default defined above\n      const { queryFn, ...options } = trpc.event.list.queryOptions()\n\n      return useQuery({\n        ...options,\n        queryKey: trpc.event.list.queryKey()\n      })\n    },\n    useSuspenseQuery: () => {\n      const eventConfig = useEventConfigurations()\n      // Skip the queryFn defined by tRPC and use our own default defined above\n      const { queryFn, ...options } = trpc.event.list.queryOptions()\n\n      return [\n        useSuspenseQuery({\n          ...options,\n          queryKey: trpc.event.list.queryKey(),\n          meta: {\n            eventConfig\n          }\n        }).data\n      ]\n    }\n  }\n}",
      "startLine": 49,
      "endLine": 77,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/list.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-54",
      "type": "function_declaration",
      "name": "updateEventOptimistically",
      "text": "function updateEventOptimistically<T extends ActionInput>(\n  actionType: typeof ActionType.DECLARE\n) {\n  return (variables: T) => {\n    const localEvent = queryClient.getQueryData(\n      trpcOptionsProxy.event.get.queryKey(variables.eventId)\n    )\n    if (!localEvent) {\n      return\n    }\n    const optimisticEvent: EventDocument = {\n      ...localEvent,\n      actions: [\n        ...localEvent.actions,\n        {\n          id: createTemporaryId(),\n          type: actionType,\n          declaration: variables.declaration,\n          createdAt: new Date().toISOString(),\n          createdBy: '@todo',\n          createdAtLocation: '@todo',\n          status: ActionStatus.Requested\n        }\n      ]\n    }\n\n    setEventListData((eventIndices) =>\n      eventIndices\n        ?.filter((ei) => ei.id !== optimisticEvent.id)\n        .concat(getCurrentEventState(optimisticEvent))\n    )\n  }\n}",
      "startLine": 22,
      "endLine": 54,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/actions/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-26",
      "type": "function_declaration",
      "name": "findLocalEventData",
      "text": "function findLocalEventData(eventId: string) {\n  return queryClient.getQueryData(\n    trpcOptionsProxy.event.get.queryKey(eventId)\n  ) as EventDocument | undefined\n}",
      "startLine": 22,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/api.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-34",
      "type": "function_declaration",
      "name": "removeUndefinedKeys",
      "text": "function removeUndefinedKeys(data: EventState) {\n  return Object.fromEntries(\n    Object.entries(data).filter(([, value]) => value !== undefined)\n  )\n}",
      "startLine": 30,
      "endLine": 34,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useActionAnnotation.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@41-101",
      "type": "function_declaration",
      "name": "AdvancedSearch",
      "text": "function AdvancedSearch() {\n  const intl = useIntl()\n  const allEvents = useEventConfigurations()\n\n  const searchParams = SearchQueryParams.parse(parse(window.location.search))\n\n  const advancedSearchEvents = allEvents.filter(\n    (event) => event.advancedSearch.length > 0\n  )\n\n  const formTabSections = advancedSearchEvents.map((a) => ({\n    id: a.id,\n    title: intl.formatMessage(a.label)\n  })) satisfies IFormTabProps['sections']\n\n  const selectedTabId =\n    formTabSections.find((tab) => tab.id === searchParams.eventType)?.id ??\n    formTabSections[0]?.id\n\n  const [activeTabId, setActiveTabId] = useState<string>(selectedTabId)\n\n  const currentEvent = allEvents.find((e) => e.id === activeTabId)\n  if (!currentEvent) {\n    return null\n  }\n\n  const currentTabSections = currentEvent.advancedSearch\n\n  const filteredSearchParams = parseFieldSearchParams(\n    currentEvent,\n    searchParams\n  )\n\n  const handleTabClick = (tabId: string) => {\n    setActiveTabId(tabId)\n  }\n  return (\n    <>\n      <Content\n        size={ContentSize.SMALL}\n        subtitle={intl.formatMessage(messages.advancedSearchInstruction)}\n        tabBarContent={\n          <FormTabs\n            activeTabId={activeTabId}\n            sections={formTabSections}\n            onTabClick={handleTabClick}\n          />\n        }\n        title={intl.formatMessage(messages.advancedSearch)}\n        titleColor={'copy'}\n      >\n        {currentTabSections.length > 0 && (\n          <TabSearch\n            currentEvent={currentEvent}\n            fieldValues={filteredSearchParams}\n          />\n        )}\n      </Content>\n    </>\n  )\n}",
      "startLine": 41,
      "endLine": 101,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/AdvancedSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@47-49",
      "type": "function_declaration",
      "name": "retryUnlessConflict",
      "text": "function retryUnlessConflict(_: unknown, error: TRPCClientError<AppRouter>) {\n  return error.data?.httpStatus !== 409\n}",
      "startLine": 47,
      "endLine": 49,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/actions/action.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@51-55",
      "type": "function_declaration",
      "name": "errorToastOnConflict",
      "text": "function errorToastOnConflict(error: TRPCClientError<AppRouter>) {\n  if (error.data?.httpStatus === 409) {\n    toast.error(ToastKey.NOT_ASSIGNED_ERROR)\n  }\n}",
      "startLine": 51,
      "endLine": 55,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/actions/action.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@254-330",
      "type": "function_declaration",
      "name": "any",
      "text": "function useEventAction<P extends DecorateMutationProcedure<any>>(\n  trpcProcedure: P\n) {\n  const eventConfigurations = useEventConfigurations()\n\n  const allOptions = {\n    ...trpcProcedure.mutationOptions(),\n    ...queryClient.getMutationDefaults(trpcProcedure.mutationKey())\n  }\n\n  // mutationFn will be removed at this stage to ensure it has been specified in a serializable manner under /procedures. This ensures early error detection\n  // without explicitly testing offline functionality.\n  const { mutationFn, ...mutationOptions } = allOptions\n\n  const actionType = mutationOptions.meta?.actionType as ActionType | undefined\n\n  if (!actionType) {\n    throw new Error(\n      `No event action type found. This should never happen, ${JSON.stringify(\n        mutationOptions\n      )}`\n    )\n  }\n\n  const mutation = useMutation({\n    ...mutationOptions\n  })\n\n  type ActionMutationInput = inferInput<P> & { fullEvent?: EventDocument }\n\n  function getMutationPayload(params: ActionMutationInput) {\n    const { eventId } = params\n    const localEvent = findLocalEventData(eventId)\n    const eventConfiguration = eventConfigurations.find(\n      (event) => event.id === localEvent?.type\n    )\n\n    if (!eventConfiguration) {\n      throw new Error('Event configuration not found')\n    }\n\n    // Let's find the action configuration. For NOTIFY action, we can use the DECLARE action configuration.\n    const actionConfiguration = eventConfiguration.actions.find((action) =>\n      actionType === ActionType.NOTIFY\n        ? action.type === ActionType.DECLARE\n        : action.type === actionType\n    )\n\n    const originalDeclaration = params.fullEvent\n      ? getCurrentEventState(params.fullEvent).declaration\n      : {}\n\n    const annotation = actionConfiguration\n      ? omitHiddenAnnotationFields(\n          actionConfiguration,\n          params.annotation,\n          originalDeclaration\n        )\n      : {}\n\n    return {\n      ...params,\n      declaration: omitHiddenPaginatedFields(\n        eventConfiguration.declaration,\n        params.declaration\n      ),\n      annotation\n    }\n  }\n\n  return {\n    mutate: (params: ActionMutationInput) =>\n      mutation.mutate(getMutationPayload(params)),\n    mutateAsync: async (params: ActionMutationInput) =>\n      mutation.mutateAsync(getMutationPayload(params))\n  }\n}",
      "startLine": 254,
      "endLine": 330,
      "parentType": "export_statement",
      "childrenTypes": [
        "ERROR",
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/actions/action.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@284-322",
      "type": "function_declaration",
      "name": "getMutationPayload",
      "text": "function getMutationPayload(params: ActionMutationInput) {\n    const { eventId } = params\n    const localEvent = findLocalEventData(eventId)\n    const eventConfiguration = eventConfigurations.find(\n      (event) => event.id === localEvent?.type\n    )\n\n    if (!eventConfiguration) {\n      throw new Error('Event configuration not found')\n    }\n\n    // Let's find the action configuration. For NOTIFY action, we can use the DECLARE action configuration.\n    const actionConfiguration = eventConfiguration.actions.find((action) =>\n      actionType === ActionType.NOTIFY\n        ? action.type === ActionType.DECLARE\n        : action.type === actionType\n    )\n\n    const originalDeclaration = params.fullEvent\n      ? getCurrentEventState(params.fullEvent).declaration\n      : {}\n\n    const annotation = actionConfiguration\n      ? omitHiddenAnnotationFields(\n          actionConfiguration,\n          params.annotation,\n          originalDeclaration\n        )\n      : {}\n\n    return {\n      ...params,\n      declaration: omitHiddenPaginatedFields(\n        eventConfiguration.declaration,\n        params.declaration\n      ),\n      annotation\n    }\n  }",
      "startLine": 284,
      "endLine": 322,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/actions/action.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@332-357",
      "type": "function_declaration",
      "name": "useEventCustomAction",
      "text": "function useEventCustomAction(mutationKey: string[]) {\n  const eventConfigurations = useEventConfigurations()\n  const mutation = useMutation(queryClient.getMutationDefaults(mutationKey))\n\n  return {\n    mutate: (params: customApi.OnDeclareParams) => {\n      const localEvent = findLocalEventData(params.eventId)\n\n      const eventConfiguration = eventConfigurations.find(\n        (event) => event.id === localEvent?.type\n      )\n\n      if (!eventConfiguration) {\n        throw new Error('Event configuration not found')\n      }\n\n      return mutation.mutate({\n        ...params,\n        declaration: omitHiddenPaginatedFields(\n          eventConfiguration.declaration,\n          params.declaration\n        )\n      })\n    }\n  }\n}",
      "startLine": 332,
      "endLine": 357,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/actions/action.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@66-82",
      "type": "function_declaration",
      "name": "useGetEvent",
      "text": "function useGetEvent() {\n  const trpc = useTRPC()\n  return {\n    useQuery: (id: string, enabled?: boolean) => {\n      const eventConfig = useEventConfigurations()\n      // Skip the queryFn defined by tRPC and use our own default defined above\n      const { queryFn, ...options } = trpc.event.get.queryOptions(id)\n\n      return useQuery({\n        ...options,\n        enabled: enabled || true,\n        queryKey: trpc.event.get.queryKey(id),\n        meta: {\n          eventConfig\n        }\n      })\n    },",
      "startLine": 66,
      "endLine": 82,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/get.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@105-126",
      "type": "function_declaration",
      "name": "useGetEventState",
      "text": "function useGetEventState() {\n  const getEvent = useGetEvent()\n\n  return {\n    useQuery: (id: string) => {\n      const response = getEvent.useQuery(id)\n      const eventState = response.data\n        ? getCurrentEventState(response.data)\n        : undefined\n\n      return {\n        ...response,\n        declaration: eventState\n      }\n    },\n    useSuspenseQuery: (id: string): EventIndex => {\n      const [eventDocument] = getEvent.useSuspenseQuery(id)\n\n      return getCurrentEventState(eventDocument)\n    }\n  }\n}",
      "startLine": 105,
      "endLine": 126,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEvents/procedures/get.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-31",
      "type": "function_declaration",
      "name": "removeUndefinedKeys",
      "text": "function removeUndefinedKeys(data: EventState) {\n  return Object.fromEntries(\n    Object.entries(data).filter(([, value]) => value !== undefined)\n  )\n}",
      "startLine": 27,
      "endLine": 31,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/useEventFormData.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@126-128",
      "type": "function_declaration",
      "name": "isEventFieldId",
      "text": "function isEventFieldId(id: string): id is EventFieldId {\n  return Object.values(EventFieldId.enum).includes(id as EventFieldId)\n}",
      "startLine": 126,
      "endLine": 128,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-77",
      "type": "function_declaration",
      "name": "enhanceFieldWithSearchFieldConfig",
      "text": "function enhanceFieldWithSearchFieldConfig(\n  field: Inferred,\n  searchField: SearchField\n): Inferred {\n  if (field.type === FieldType.DATE && searchField.config.type === 'range') {\n    return {\n      ...field,\n      validation: [],\n      type: FieldType.DATE_RANGE,\n      defaultValue: undefined\n    }\n  }\n  return field\n}",
      "startLine": 64,
      "endLine": 77,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/TabSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@79-97",
      "type": "function_declaration",
      "name": "enhanceEventFieldsWithSearchFieldConfig",
      "text": "function enhanceEventFieldsWithSearchFieldConfig(event: EventConfig) {\n  return {\n    ...event,\n    declaration: {\n      ...event.declaration,\n      pages: event.declaration.pages.map((page) => ({\n        ...page,\n        fields: page.fields.map((field) => {\n          const searchField = event.advancedSearch\n            .flatMap((x) => x.fields)\n            .find((f) => f.fieldId === field.id)\n          return searchField\n            ? enhanceFieldWithSearchFieldConfig(field, searchField)\n            : field\n        })\n      }))\n    }\n  }\n}",
      "startLine": 79,
      "endLine": 97,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/TabSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@99-135",
      "type": "function_declaration",
      "name": "SearchSectionForm",
      "text": "function SearchSectionForm({\n  section,\n  handleFieldChange,\n  fieldValues\n}: {\n  section: {\n    title: TranslationConfig\n    isExpanded: boolean\n    fields: FieldConfig[]\n  }\n  handleFieldChange: (fieldId: string, value: FieldValue) => void\n  fieldValues?: EventState\n}) {\n  const intl = useIntl()\n\n  return (\n    <Accordion\n      key={section.title.id}\n      expand={section.isExpanded}\n      label={intl.formatMessage(section.title)}\n      labelForHideAction={intl.formatMessage(messages.hide)}\n      labelForShowAction={intl.formatMessage(messages.show)}\n      name={section.title.id}\n    >\n      <FormFieldGenerator\n        fields={section.fields}\n        id={section.title.id}\n        initialValues={fieldValues}\n        onChange={(updatedValues) => {\n          Object.entries(updatedValues).forEach(([fieldId, value]) =>\n            handleFieldChange(fieldId, value)\n          )\n        }}\n      />\n    </Accordion>\n  )\n}",
      "startLine": 99,
      "endLine": 135,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/TabSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@137-174",
      "type": "function_declaration",
      "name": "buildSearchSections",
      "text": "function buildSearchSections({\n  enhancedEvent,\n  fieldValues\n}: {\n  enhancedEvent: EventConfig\n  fieldValues?: EventState\n}) {\n  const allUniqueFields = getAllUniqueFields(enhancedEvent)\n\n  return enhancedEvent.advancedSearch.map((section) => {\n    const metadataFields = getDefaultSearchFields(section)\n\n    const matchingFields = allUniqueFields.filter((f) =>\n      section.fields.some((searchField) => searchField.fieldId === f.id)\n    )\n\n    const combinedFields = [...metadataFields, ...matchingFields]\n\n    const modifiedFields = combinedFields.map((f) => {\n      const fieldSearchConfig = section.fields.find((a) => a.fieldId === f.id)\n      return {\n        ...f,\n        required: false as const,\n        conditionals: fieldSearchConfig?.conditionals ?? f.conditionals\n      }\n    })\n\n    const isExpanded =\n      modifiedFields.find((f) => fieldValues?.hasOwnProperty(f.id)) !==\n      undefined\n\n    return {\n      title: section.title,\n      isExpanded,\n      fields: modifiedFields\n    }\n  })\n}",
      "startLine": 137,
      "endLine": 174,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/TabSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@176-254",
      "type": "function_declaration",
      "name": "TabSearch",
      "text": "function TabSearch({\n  currentEvent,\n  fieldValues\n}: {\n  currentEvent: EventConfig\n  fieldValues?: EventState\n}) {\n  const intl = useIntl()\n  const navigate = useNavigate()\n\n  const [formValues, setFormValues] = React.useState<EventState>(\n    fieldValues ?? {}\n  )\n\n  const prevEventId = React.useRef(currentEvent.id)\n\n  React.useEffect(() => {\n    if (prevEventId.current !== currentEvent.id) {\n      setFormValues({})\n      prevEventId.current = currentEvent.id\n    }\n  }, [currentEvent])\n\n  const enhancedEvent = enhanceEventFieldsWithSearchFieldConfig(currentEvent)\n\n  const sections = buildSearchSections({\n    enhancedEvent,\n    fieldValues\n  })\n\n  const handleFieldChange = (fieldId: string, value: FieldValue) => {\n    setFormValues((prev) => ({\n      ...prev,\n      [fieldId]: value\n    }))\n  }\n\n  const errors = flattenFieldErrors(\n    getAdvancedSearchFieldErrors(enhancedEvent, formValues)\n  )\n\n  const nonEmptyValues = filterEmptyValues(formValues)\n\n  const handleSearch = () => {\n    const searchParams = stringify(nonEmptyValues)\n    const path = ROUTES.V2.SEARCH_RESULT.buildPath({\n      eventType: enhancedEvent.id\n    })\n    navigate(`${path}?${searchParams.toString()}`)\n  }\n\n  const hasEnoughParams =\n    Object.keys(nonEmptyValues).length >= MIN_PARAMS_TO_SEARCH\n\n  return (\n    <>\n      {sections.map((section) => (\n        <SearchSectionForm\n          key={section.title.id}\n          fieldValues={fieldValues}\n          handleFieldChange={handleFieldChange}\n          section={section}\n        />\n      ))}\n      <SearchButton\n        key=\"search\"\n        fullWidth\n        disabled={!hasEnoughParams || errors.length > 0}\n        id=\"search\"\n        size=\"large\"\n        type=\"primary\"\n        onClick={handleSearch}\n      >\n        <Icon name=\"MagnifyingGlass\" />\n        {intl.formatMessage(messages.search)}\n      </SearchButton>\n    </>\n  )\n}",
      "startLine": 176,
      "endLine": 254,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/TabSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@21-27",
      "type": "function_declaration",
      "name": "cacheUsers",
      "text": "async function cacheUsers(userIds: string[]) {\n  const users = await trpcClient.user.list.query(userIds)\n\n  for (const user of users) {\n    queryClient.setQueryData(trpcOptionsProxy.user.get.queryKey(user.id), user)\n  }\n}",
      "startLine": 21,
      "endLine": 27,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/users/cache.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-34",
      "type": "function_declaration",
      "name": "cacheUsersFromEventDocument",
      "text": "async function cacheUsersFromEventDocument(\n  eventDocument: EventDocument\n) {\n  const userIds = findUserIdsFromDocument(eventDocument)\n  await cacheUsers(userIds)\n}",
      "startLine": 29,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/users/cache.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@36-41",
      "type": "function_declaration",
      "name": "cacheUsersFromEventIndices",
      "text": "async function cacheUsersFromEventIndices(eventIndices: EventIndex[]) {\n  const userIds = uniq(\n    flatten(eventIndices.map((eventIndex) => findUserIdsFromIndex(eventIndex)))\n  )\n  await cacheUsers(userIds)\n}",
      "startLine": 36,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/users/cache.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-21",
      "type": "function_declaration",
      "name": "findUserIdsFromDocument",
      "text": "function findUserIdsFromDocument(eventDocument: EventDocument) {\n  return _.uniq(\n    eventDocument.actions\n      .map((action) => ('createdBy' in action ? action.createdBy : undefined))\n      .filter((maybeUserId): maybeUserId is string => Boolean(maybeUserId))\n  )\n}",
      "startLine": 15,
      "endLine": 21,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/users/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-29",
      "type": "function_declaration",
      "name": "findUserIdsFromIndex",
      "text": "function findUserIdsFromIndex(eventIndex: EventIndex) {\n  return _.uniq(\n    [eventIndex.assignedTo, eventIndex.createdBy, eventIndex.updatedBy].filter(\n      (maybeUserId): maybeUserId is string => Boolean(maybeUserId)\n    )\n  )\n}",
      "startLine": 23,
      "endLine": 29,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/users/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@76-142",
      "type": "function_declaration",
      "name": "changeSortedColumn",
      "text": "function changeSortedColumn(\n  columnName: string,\n  presentSortedCol: (typeof COLUMNS)[keyof typeof COLUMNS],\n  presentSortOrder: (typeof SORT_ORDER)[keyof typeof SORT_ORDER]\n) {\n  let newSortedCol: (typeof COLUMNS)[keyof typeof COLUMNS]\n  let newSortOrder: (typeof SORT_ORDER)[keyof typeof SORT_ORDER] =\n    SORT_ORDER.ASCENDING\n\n  switch (columnName) {\n    case COLUMNS.ICON_WITH_NAME:\n      newSortedCol = COLUMNS.NAME\n      break\n    case COLUMNS.NAME:\n      newSortedCol = COLUMNS.NAME\n      break\n    case COLUMNS.EVENT:\n      newSortedCol = COLUMNS.EVENT\n      break\n    case COLUMNS.DATE_OF_EVENT:\n      newSortedCol = COLUMNS.DATE_OF_EVENT\n      break\n    case COLUMNS.SENT_FOR_REVIEW:\n      newSortedCol = COLUMNS.SENT_FOR_REVIEW\n      break\n    case COLUMNS.SENT_FOR_UPDATES:\n      newSortedCol = COLUMNS.SENT_FOR_UPDATES\n      break\n    case COLUMNS.SENT_FOR_APPROVAL:\n      newSortedCol = COLUMNS.SENT_FOR_APPROVAL\n      break\n    case COLUMNS.REGISTERED:\n      newSortedCol = COLUMNS.REGISTERED\n      break\n    case COLUMNS.SENT_FOR_VALIDATION:\n      newSortedCol = COLUMNS.SENT_FOR_VALIDATION\n      break\n    case COLUMNS.NOTIFICATION_SENT:\n      newSortedCol = COLUMNS.NOTIFICATION_SENT\n      break\n    case COLUMNS.LAST_UPDATED:\n      newSortedCol = COLUMNS.LAST_UPDATED\n      break\n    case COLUMNS.TRACKING_ID:\n      newSortedCol = COLUMNS.TRACKING_ID\n      break\n    case COLUMNS.REGISTRATION_NO:\n      newSortedCol = COLUMNS.REGISTRATION_NO\n      break\n    default:\n      newSortedCol = COLUMNS.NONE\n  }\n\n  if (newSortedCol === presentSortedCol) {\n    if (presentSortOrder === SORT_ORDER.ASCENDING) {\n      newSortOrder = SORT_ORDER.DESCENDING\n    } else {\n      newSortOrder = SORT_ORDER.ASCENDING\n      newSortedCol = COLUMNS.NONE\n    }\n  }\n\n  return {\n    newSortedCol: newSortedCol,\n    newSortOrder: newSortOrder\n  }\n}",
      "startLine": 76,
      "endLine": 142,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@259-274",
      "type": "function_declaration",
      "name": "getDefaultColumns",
      "text": "function getDefaultColumns(): Array<Column> {\n    return workqueueConfig.defaultColumns.map(\n      (column): Column => ({\n        label:\n          column in defaultColumns\n            ? intl.formatMessage(\n                defaultColumns[column as keyof typeof defaultColumns].label\n              )\n            : '',\n        width: 25,\n        key: column,\n        sortFunction: onColumnClick,\n        isSorted: sortedCol === column\n      })\n    )\n  }",
      "startLine": 259,
      "endLine": 274,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@278-298",
      "type": "function_declaration",
      "name": "getColumns",
      "text": "function getColumns(): Array<Column> {\n    if (windowWidth > theme.grid.breakpoints.lg) {\n      return workqueueConfig.columns.map((column) => ({\n        label: intl.formatMessage(column.label),\n        width: 35,\n        key: column.id,\n        sortFunction: onColumnClick,\n        isSorted: sortedCol === column.id\n      }))\n    } else {\n      return workqueueConfig.columns\n        .map((column) => ({\n          label: intl.formatMessage(column.label),\n          width: 35,\n          key: column.id,\n          sortFunction: onColumnClick,\n          isSorted: sortedCol === column.id\n        }))\n        .slice(0, 2)\n    }\n  }",
      "startLine": 278,
      "endLine": 298,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@54-56",
      "type": "method_definition",
      "name": "if",
      "text": "if (!path) {\n    return ''\n  }",
      "startLine": 54,
      "endLine": 56,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/events/AdvancedSearch/SearchCriteriaPanel.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@84-105",
      "type": "function_declaration",
      "name": "changeSortedColumn",
      "text": "function changeSortedColumn(\n  columnName: string,\n  presentSortedCol: string,\n  presentSortOrder: SORT_ORDER\n) {\n  const initialSortOrder = SORT_ORDER.ASCENDING\n  const isInitialSortOrder = presentSortOrder === initialSortOrder\n  const isSameColumn = columnName === presentSortedCol\n\n  function toggle() {\n    if (isSameColumn) {\n      return isInitialSortOrder ? SORT_ORDER.DESCENDING : SORT_ORDER.ASCENDING\n    }\n\n    return initialSortOrder\n  }\n\n  return {\n    newSortedCol: columnName,\n    newSortOrder: toggle()\n  }\n}",
      "startLine": 84,
      "endLine": 105,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/Workqueue.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@93-99",
      "type": "function_declaration",
      "name": "toggle",
      "text": "function toggle() {\n    if (isSameColumn) {\n      return isInitialSortOrder ? SORT_ORDER.DESCENDING : SORT_ORDER.ASCENDING\n    }\n\n    return initialSortOrder\n  }",
      "startLine": 93,
      "endLine": 99,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/Workqueue.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@110-323",
      "type": "function_declaration",
      "name": "Workqueue",
      "text": "function Workqueue({\n  events,\n  workqueueConfig,\n  limit,\n  offset,\n  eventConfigs\n}: {\n  events: EventIndex[]\n  workqueueConfig: RootWorkqueueConfig\n  limit: number\n  offset: number\n  eventConfigs: EventConfig[]\n}) {\n  const intl = useIntl()\n  const theme = useTheme()\n  const { getOutbox } = useEvents()\n  const { getRemoteDrafts } = useDrafts()\n  const outbox = getOutbox()\n  const drafts = getRemoteDrafts()\n  const navigate = useNavigate()\n  const { width } = useWindowSize()\n  const [currentPageNumber, setCurrentPageNumber] = React.useState(1)\n  const [sortedCol, setSortedCol] = useState('modifiedAt')\n  const [sortOrder, setSortOrder] = useState(SORT_ORDER.DESCENDING)\n  const { getEventTitle } = useEventTitle()\n\n  const validEvents = orderBy(\n    events.filter((event) => eventConfigs.some((e) => e.id === event.type)),\n    ['updatedAt'],\n    ['desc']\n  )\n\n  if (validEvents.length !== events.length) {\n    // eslint-disable-next-line\n    console.log('Fields without proper configuration found. Ignoring them')\n  }\n\n  const workqueue = validEvents\n    .slice((currentPageNumber - 1) * limit, currentPageNumber * limit)\n    .filter((event) => eventConfigs.some((e) => e.id === event.type))\n    /*\n     * Apply pending drafts to the event index.\n     * This is necessary to show the most up to date information in the workqueue.\n     */\n    .map((event) =>\n      deepDropNulls(\n        applyDraftsToEventIndex(\n          event,\n          drafts.filter((d) => d.eventId === event.id)\n        )\n      )\n    )\n    .map((event) => {\n      /** We already filtered invalid events, this should never happen. */\n      const eventConfig = getOrThrow(\n        eventConfigs.find((e) => e.id === event.type),\n        `Could not find event config for ${event.id}`\n      )\n\n      const isInOutbox = outbox.some(\n        (outboxEvent) => outboxEvent.id === event.id\n      )\n      const isInDrafts = drafts\n        .filter((draft) => draft.createdAt > event.updatedAt)\n        .some((draft) => draft.eventId === event.id)\n\n      const getEventStatus = () => {\n        if (isInOutbox) {\n          return 'OUTBOX'\n        }\n        if (isInDrafts) {\n          return 'DRAFT'\n        }\n\n        return event.status\n      }\n\n      const { useFallbackTitle, title } = getEventTitle(eventConfig, event)\n      const titleColumnId = workqueueConfig.columns[0].id\n      const TitleColumn =\n        width > theme.grid.breakpoints.lg ? (\n          <IconWithName name={title} status={getEventStatus()} />\n        ) : (\n          <IconWithNameEvent\n            event={intl.formatMessage(eventConfig.label)}\n            name={title}\n            status={getEventStatus()}\n          />\n        )\n\n      return {\n        ...flattenEventIndex(event),\n        event: intl.formatMessage(eventConfig.label),\n        createdAt: formattedDuration(new Date(event.createdAt)),\n        modifiedAt: formattedDuration(new Date(event.updatedAt)),\n\n        status: intl.formatMessage(\n          {\n            id: 'v2.events.status',\n            defaultMessage:\n              '{status, select, OUTBOX {Syncing..} CREATED {Draft} VALIDATED {Validated} DRAFT {Draft} DECLARED {Declared} REGISTERED {Registered} CERTIFIED {Certified} REJECTED {Requires update} ARCHIVED {Archived} MARKED_AS_DUPLICATE {Marked as a duplicate} NOTIFIED {In progress} other {Unknown}}'\n          },\n          {\n            status: getEventStatus()\n          }\n        ),\n        [titleColumnId]: isInOutbox ? (\n          TitleColumn\n        ) : (\n          <TextButton\n            color={useFallbackTitle ? 'red' : 'primary'}\n            onClick={() => {\n              return navigate(\n                ROUTES.V2.EVENTS.OVERVIEW.buildPath({\n                  eventId: event.id\n                })\n              )\n            }}\n          >\n            {TitleColumn}\n          </TextButton>\n        )\n      }\n    })\n\n  function onColumnClick(columnName: string) {\n    const { newSortedCol, newSortOrder } = changeSortedColumn(\n      columnName,\n      sortedCol,\n      sortOrder\n    )\n    setSortedCol(newSortedCol)\n    setSortOrder(newSortOrder)\n  }\n\n  function getDefaultColumns(): Array<Column> {\n    return workqueueConfig.defaultColumns.map(\n      (column: string): Column => ({\n        label:\n          column in defaultColumns\n            ? intl.formatMessage(\n                defaultColumns[column as keyof typeof defaultColumns].label\n              )\n            : '',\n        width: 25,\n        key: column,\n        sortFunction: onColumnClick,\n        isSorted: sortedCol === column\n      })\n    )\n  }\n\n  // @TODO: separate types for action button vs other columns\n  function getColumns(): Array<Column> {\n    const configuredColumns: Array<Column> = workqueueConfig.columns.map(\n      (column: WorkQueueColumnConfig) => ({\n        label: intl.formatMessage(column.label),\n        width: 35,\n        key: column.id,\n        sortFunction: onColumnClick,\n        isSorted: sortedCol === column.id\n      })\n    )\n\n    const allColumns = configuredColumns.concat(getDefaultColumns())\n\n    if (width > theme.grid.breakpoints.lg) {\n      return allColumns\n    } else {\n      return allColumns.slice(0, 1)\n    }\n  }\n\n  const totalPages = validEvents.length\n    ? Math.ceil(validEvents.length / limit)\n    : 0\n\n  const isShowPagination = totalPages > 1\n  return (\n    <WQContentWrapper\n      error={false}\n      isMobileSize={width < theme.grid.breakpoints.lg}\n      isShowPagination={isShowPagination}\n      loading={false} // @TODO: Handle these on top level\n      noContent={workqueue.length === 0}\n      noResultText={'No results'}\n      paginationId={currentPageNumber}\n      title={intl.formatMessage(workqueueConfig.title)}\n      totalPages={totalPages}\n      onPageChange={(page) => setCurrentPageNumber(page)}\n    >\n      <ReactTooltip id=\"validateTooltip\">\n        <ToolTipContainer>\n          {intl.formatMessage(messages.empty)}\n        </ToolTipContainer>\n      </ReactTooltip>\n      <WorkqueueComponent\n        columns={getColumns()}\n        content={orderBy(workqueue, sortedCol, sortOrder)}\n        hideLastBorder={!isShowPagination}\n        loading={false} // @TODO: Handle these on top level\n        sortOrder={sortOrder}\n      />\n      <FabContainer>\n        <Link to={ROUTES.V2.EVENTS.CREATE.path}>\n          <FloatingActionButton\n            icon={() => <PlusTransparentWhite />}\n            id=\"new_event_declaration\"\n          />\n        </Link>\n      </FabContainer>\n    </WQContentWrapper>\n  )\n}",
      "startLine": 110,
      "endLine": 323,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/Workqueue.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@235-243",
      "type": "function_declaration",
      "name": "onColumnClick",
      "text": "function onColumnClick(columnName: string) {\n    const { newSortedCol, newSortOrder } = changeSortedColumn(\n      columnName,\n      sortedCol,\n      sortOrder\n    )\n    setSortedCol(newSortedCol)\n    setSortOrder(newSortOrder)\n  }",
      "startLine": 235,
      "endLine": 243,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/Workqueue.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@245-260",
      "type": "function_declaration",
      "name": "getDefaultColumns",
      "text": "function getDefaultColumns(): Array<Column> {\n    return workqueueConfig.defaultColumns.map(\n      (column: string): Column => ({\n        label:\n          column in defaultColumns\n            ? intl.formatMessage(\n                defaultColumns[column as keyof typeof defaultColumns].label\n              )\n            : '',\n        width: 25,\n        key: column,\n        sortFunction: onColumnClick,\n        isSorted: sortedCol === column\n      })\n    )\n  }",
      "startLine": 245,
      "endLine": 260,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/Workqueue.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@263-281",
      "type": "function_declaration",
      "name": "getColumns",
      "text": "function getColumns(): Array<Column> {\n    const configuredColumns: Array<Column> = workqueueConfig.columns.map(\n      (column: WorkQueueColumnConfig) => ({\n        label: intl.formatMessage(column.label),\n        width: 35,\n        key: column.id,\n        sortFunction: onColumnClick,\n        isSorted: sortedCol === column.id\n      })\n    )\n\n    const allColumns = configuredColumns.concat(getDefaultColumns())\n\n    if (width > theme.grid.breakpoints.lg) {\n      return allColumns\n    } else {\n      return allColumns.slice(0, 1)\n    }\n  }",
      "startLine": 263,
      "endLine": 281,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/Workqueue.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@325-350",
      "type": "function_declaration",
      "name": "WorkqueueContainer",
      "text": "function WorkqueueContainer() {\n  const { slug: workqueueSlug } = useTypedParams(ROUTES.V2.WORKQUEUES.WORKQUEUE)\n  const [searchParams] = useTypedSearchParams(ROUTES.V2.WORKQUEUES.WORKQUEUE)\n  const { getEvents } = useEvents()\n  const eventConfigs = useEventConfigurations()\n\n  const workqueueConfig =\n    workqueueSlug in workqueues\n      ? workqueues[workqueueSlug as keyof typeof workqueues]\n      : null\n\n  if (!workqueueConfig) {\n    return null\n  }\n\n  const [events] = getEvents.useSuspenseQuery()\n\n  return (\n    <Workqueue\n      events={events}\n      workqueueConfig={workqueueConfig}\n      {...searchParams}\n      eventConfigs={eventConfigs}\n    />\n  )\n}",
      "startLine": 325,
      "endLine": 350,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/Workqueue.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@53-106",
      "type": "function_declaration",
      "name": "EventOverview",
      "text": "function EventOverview({\n  event,\n  onAction\n}: {\n  event: EventDocument\n  onAction: () => void\n}) {\n  const { eventConfiguration } = useEventConfiguration(event.type)\n  const eventIndex = getCurrentEventState(event)\n  const { trackingId, status } = eventIndex\n  const { getRemoteDrafts } = useDrafts()\n  const drafts = getRemoteDrafts()\n  const eventWithDrafts = getCurrentEventStateWithDrafts(event, drafts)\n  const { getUser } = useEventOverviewContext()\n  const intl = useIntl()\n\n  const assignedTo = eventIndex.assignedTo\n    ? getUsersFullName(getUser(eventIndex.assignedTo).name, intl.locale)\n    : null\n\n  const { flags, legalStatuses, ...flattenedEventIndex } = {\n    ...flattenEventIndex(eventWithDrafts),\n    // @TODO: Ask why these are defined outside of flatten index?\n    'event.trackingId': trackingId,\n    'event.status': status,\n    // @TODO: Go through different interfaces and ensure this is unified. (e.g. does print certificate and event overview use the same interface?)\n    'event.registrationNumber':\n      eventIndex.legalStatuses.REGISTERED?.registrationNumber, // This should never be overridden by the draft.\n    'event.assignedTo': assignedTo\n  }\n\n  const { getEventTitle } = useEventTitle()\n  const { title } = getEventTitle(eventConfiguration, eventWithDrafts)\n\n  const actions = getAcceptedActions(event)\n\n  return (\n    <Content\n      icon={() => <IconWithName name={''} status={status} />}\n      size={ContentSize.LARGE}\n      title={title}\n      titleColor={event.id ? 'copy' : 'grey600'}\n      topActionButtons={[\n        <ActionMenu key={event.id} eventId={event.id} onAction={onAction} />\n      ]}\n    >\n      <EventSummary\n        event={flattenedEventIndex}\n        eventConfiguration={eventConfiguration}\n      />\n      <EventHistory history={actions} />\n    </Content>\n  )\n}",
      "startLine": 53,
      "endLine": 106,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/EventOverview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@108-131",
      "type": "function_declaration",
      "name": "EventOverviewContainer",
      "text": "function EventOverviewContainer() {\n  const params = useTypedParams(ROUTES.V2.EVENTS.OVERVIEW)\n  const { getEvent } = useEvents()\n  const { getUsers } = useUsers()\n\n  // Suspense query is not used here because we want to refetch when an event action is performed\n  const getEventQuery = getEvent.useQuery(params.eventId)\n  const fullEvent = getEventQuery.data\n\n  if (!fullEvent) {\n    return\n  }\n\n  const activeActions = getAcceptedActions(fullEvent)\n  const userIds = getUserIdsFromActions(activeActions)\n  const [users] = getUsers.useSuspenseQuery(userIds)\n  const locations = useSelector(getLocations)\n\n  return (\n    <EventOverviewProvider locations={locations} users={users}>\n      <EventOverview event={fullEvent} onAction={getEventQuery.refetch} />\n    </EventOverviewProvider>\n  )\n}",
      "startLine": 108,
      "endLine": 131,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/EventOverview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@122-153",
      "type": "function_declaration",
      "name": "getMockEvent",
      "text": "function getMockEvent(\n  actions: (keyof typeof mockActions)[],\n  role: UserRoles\n): EventDocument {\n  const userId =\n    // eslint-disable-next-line no-nested-ternary\n    role === UserRoles.LOCAL_REGISTRAR\n      ? generator.user.id.localRegistrar\n      : role === UserRoles.FIELD_AGENT\n        ? generator.user.id.fieldAgent\n        : generator.user.id.registrationAgent\n  return {\n    type: 'tennis-club-membership',\n    id: 'b4c52c54-f6eb-45ee-be70-142838f8c8d4',\n    createdAt: '2025-04-18T08:34:20.711Z',\n    updatedAt: '2025-04-18T10:40:59.442Z',\n    trackingId: '75HT9J',\n    actions: actions\n      .filter((action) => Object.keys(mockActions).includes(action))\n      .map((action) => {\n        const mockAction = mockActions[action]\n        if (\n          mockAction.type === ActionType.ASSIGN &&\n          action === AssignmentStatus.ASSIGNED_TO_SELF\n        ) {\n          mockAction.assignedTo = userId\n        }\n\n        return mockAction\n      })\n  }\n}",
      "startLine": 122,
      "endLine": 153,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/components/ActionMenuStories/ActionMenu.common.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@30-50",
      "type": "function_declaration",
      "name": "getAssignmentActions",
      "text": "function getAssignmentActions(\n  assignmentStatus: keyof typeof AssignmentStatus,\n  mayUnassignOthers: boolean\n) {\n  if (assignmentStatus === AssignmentStatus.UNASSIGNED) {\n    return [ActionType.ASSIGN]\n  }\n\n  if (\n    assignmentStatus === AssignmentStatus.ASSIGNED_TO_OTHERS &&\n    mayUnassignOthers\n  ) {\n    return [ActionType.UNASSIGN]\n  }\n\n  if (assignmentStatus === AssignmentStatus.ASSIGNED_TO_SELF) {\n    return [ActionType.UNASSIGN]\n  }\n\n  return []\n}",
      "startLine": 30,
      "endLine": 50,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/components/useActionMenuItems.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@56-100",
      "type": "function_declaration",
      "name": "getUserActionsByStatus",
      "text": "function getUserActionsByStatus(\n  status: EventStatus,\n  assignmentActions: ActionType[],\n  userScopes: Scope[]\n): ActionType[] {\n  switch (status) {\n    case EventStatus.CREATED: {\n      return [ActionType.READ, ActionType.DECLARE, ActionType.DELETE]\n    }\n    case EventStatus.NOTIFIED:\n    case EventStatus.DECLARED: {\n      return [...assignmentActions, ActionType.READ, ActionType.VALIDATE]\n    }\n    case EventStatus.VALIDATED: {\n      return [...assignmentActions, ActionType.READ, ActionType.REGISTER]\n    }\n    case EventStatus.CERTIFIED:\n    case EventStatus.REGISTERED: {\n      return [\n        ...assignmentActions,\n        ActionType.READ,\n        ActionType.PRINT_CERTIFICATE,\n        ActionType.REQUEST_CORRECTION\n      ]\n    }\n    case EventStatus.REJECTED: {\n      const validateScopes = ACTION_ALLOWED_SCOPES[ActionType.VALIDATE]\n      const canValidate = hasAnyOfScopes(userScopes, validateScopes)\n\n      /**\n       * Show 'higher' action when the user has the required scopes.\n       */\n      const declarationAction = canValidate\n        ? ActionType.VALIDATE\n        : ActionType.DECLARE\n\n      return [...assignmentActions, ActionType.READ, declarationAction]\n    }\n\n    case EventStatus.ARCHIVED:\n      return [...assignmentActions, ActionType.READ]\n    default:\n      return [ActionType.READ]\n  }\n}",
      "startLine": 56,
      "endLine": 100,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/components/useActionMenuItems.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-46",
      "type": "function_declaration",
      "name": "UserAvatar",
      "text": "function UserAvatar({\n  names,\n  avatar,\n  locale\n}: {\n  names: ResolvedUser['name']\n  avatar?: Maybe<Avatar>\n  locale: string\n}) {\n  const name = getUsersFullName(names, locale)\n\n  return (\n    <NameAvatar>\n      <AvatarSmall avatar={avatar} name={name} />\n      <span>{name}</span>\n    </NameAvatar>\n  )\n}",
      "startLine": 29,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/components/EventHistory/UserAvatar.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@114-181",
      "type": "function_declaration",
      "name": "EventSummary",
      "text": "function EventSummary({\n  event,\n  eventConfiguration\n}: {\n  event: Record<string, FieldValue | null>\n  eventConfiguration: EventConfig\n}) {\n  const intl = useIntlFormatMessageWithFlattenedParams()\n  const { summary, label } = eventConfiguration\n  const defaultFields = getDefaultFields(label)\n  const summaryPageFields = [...defaultFields, ...summary.fields]\n  const declarationFields = getDeclarationFields(eventConfiguration)\n\n  const fields = summaryPageFields.map((field) => {\n    if (field.conditionals && !areConditionsMet(field.conditionals, event)) {\n      return null\n    }\n\n    if ('fieldId' in field) {\n      const config = declarationFields.find((f) => f.id === field.fieldId)\n      const value = event[field.fieldId] ?? undefined\n\n      if (!config) {\n        return null\n      }\n\n      return {\n        id: field.fieldId,\n        // If a custom label is configured, use it. Otherwise, by default, use the label from the original form field.\n        label: field.label ?? config.label,\n        emptyValueMessage: field.emptyValueMessage,\n        value: Output({\n          field: config,\n          showPreviouslyMissingValuesAsChanged: false,\n          value\n        })\n      }\n    }\n\n    return {\n      id: field.id,\n      label: field.label,\n      emptyValueMessage: field.emptyValueMessage,\n      value: intl.formatMessage(field.value, event)\n    }\n  })\n\n  return (\n    <>\n      <Summary id=\"summary\">\n        {fields\n          .filter((f): f is NonNullable<typeof f> => f !== null)\n          .map((field) => (\n            <Summary.Row\n              key={field.id}\n              data-testid={field.id}\n              label={intl.formatMessage(field.label)}\n              placeholder={\n                field.emptyValueMessage &&\n                intl.formatMessage(field.emptyValueMessage)\n              }\n              value={field.value}\n            />\n          ))}\n      </Summary>\n    </>\n  )\n}",
      "startLine": 114,
      "endLine": 181,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/components/EventSummary.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@21-39",
      "type": "function_declaration",
      "name": "getFileNames",
      "text": "function getFileNames(actions: ActionDocument[]): string[] {\n  return actions.flatMap((action) =>\n    Object.values(action.declaration).flatMap((value) => {\n      // Handle single file field\n      const fileParsed = FileFieldValue.safeParse(value)\n      if (fileParsed.success) {\n        return [fileParsed.data.filename]\n      }\n\n      // Handle multiple file field (file with options)\n      const fileOptionParsed = FileFieldWithOptionValue.safeParse(value)\n      if (fileOptionParsed.success) {\n        return fileOptionParsed.data.map((val) => val.filename)\n      }\n\n      return []\n    })\n  )\n}",
      "startLine": 21,
      "endLine": 39,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/cache.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@41-46",
      "type": "function_declaration",
      "name": "cacheFiles",
      "text": "async function cacheFiles(eventDocument: EventDocument) {\n  const actions = getAcceptedActions(eventDocument)\n  const fileNames = getFileNames(actions)\n\n  return Promise.all(fileNames.map(async (filename) => precacheFile(filename)))\n}",
      "startLine": 41,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/cache.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@48-53",
      "type": "function_declaration",
      "name": "removeCachedFiles",
      "text": "async function removeCachedFiles(eventDocument: EventDocument) {\n  const actions = getAcceptedActions(eventDocument)\n  const fileNames = getFileNames(actions)\n\n  return Promise.all(fileNames.map(removeCached))\n}",
      "startLine": 48,
      "endLine": 53,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/cache.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-56",
      "type": "function_declaration",
      "name": "prepareComments",
      "text": "function prepareComments(action: ActionType, annotation: ActionUpdate) {\n  const comments: { comment: string }[] = []\n\n  if (action === ActionType.REJECT && typeof annotation.message === 'string') {\n    comments.push({ comment: annotation.message })\n  }\n  if (action === ActionType.ARCHIVE && typeof annotation.message === 'string') {\n    comments.push({ comment: annotation.message })\n  }\n  return comments\n}",
      "startLine": 46,
      "endLine": 56,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/components/EventHistory/EventHistoryModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@63-128",
      "type": "function_declaration",
      "name": "EventHistoryModal",
      "text": "function EventHistoryModal({\n  history,\n  user,\n  close\n}: {\n  history: ActionDocument\n  user: ResolvedUser\n  close: () => void\n}) {\n  const intl = useIntl()\n\n  const userName = getUsersFullName(user.name, intl.locale)\n  const title = intl.formatMessage(eventHistoryStatusMessage, {\n    status: history.type\n  })\n\n  const commentsColumn = [\n    {\n      key: 'comment',\n      label: intl.formatMessage(messages.comment),\n      width: 100\n    }\n  ]\n\n  const content = prepareComments(history.type, history.annotation ?? {})\n\n  return (\n    <ResponsiveModal\n      autoHeight\n      actions={[]}\n      handleClose={close}\n      responsive={true}\n      show={true}\n      title={title}\n      width={1024}\n    >\n      <Stack>\n        <Text color=\"grey500\" element=\"p\" variant=\"reg19\">\n          {joinValues(\n            [\n              userName,\n              format(\n                new Date(history.createdAt),\n                intl.formatMessage(messages['event.history.modal.timeFormat'])\n              )\n            ],\n            ' — '\n          )}\n        </Text>\n      </Stack>\n      {content.length > 0 && (\n        <Table columns={commentsColumn} content={content} noResultText=\" \" />\n      )}\n      {history.type === ActionType.ARCHIVE &&\n        history.annotation?.isDuplicate && (\n          <p>\n            <Pill\n              label={intl.formatMessage(messages.markAsDuplicate)}\n              size=\"small\"\n              type=\"inactive\"\n            />\n          </p>\n        )}\n    </ResponsiveModal>\n  )\n}",
      "startLine": 63,
      "endLine": 128,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/workqueues/EventOverview/components/EventHistory/EventHistoryModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@28-65",
      "type": "function_declaration",
      "name": "registerOnDeclare",
      "text": "async function registerOnDeclare({\n  eventId,\n  declaration,\n  annotation\n}: {\n  eventId: string\n  declaration: EventState\n  annotation?: EventState\n}) {\n  await trpcClient.event.actions.declare.request.mutate({\n    declaration,\n    annotation,\n    eventId,\n    transactionId: getUUID(),\n    keepAssignment: true\n  })\n\n  // update is a patch, no need to send again.\n  await trpcClient.event.actions.validate.request.mutate({\n    declaration: {},\n    annotation,\n    eventId,\n    transactionId: getUUID(),\n    duplicates: [],\n    keepAssignment: true\n  })\n\n  const latestResponse = await trpcClient.event.actions.register.request.mutate(\n    {\n      declaration: {},\n      annotation,\n      eventId,\n      transactionId: getUUID()\n    }\n  )\n\n  return latestResponse\n}",
      "startLine": 28,
      "endLine": 65,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/custom-api/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@65-71",
      "type": "function_declaration",
      "name": "withPostfix",
      "text": "function withPostfix(str: string, postfix: string) {\n  if (str.endsWith(postfix)) {\n    return str\n  }\n\n  return str + postfix\n}",
      "startLine": 65,
      "endLine": 71,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/useFileUpload.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@73-80",
      "type": "function_declaration",
      "name": "getFullUrl",
      "text": "function getFullUrl(filename: string) {\n  const minioURL = window.config.MINIO_URL\n  if (minioURL && typeof minioURL === 'string') {\n    return new URL(filename, withPostfix(minioURL, '/')).toString()\n  }\n\n  throw new Error('MINIO_URL is not defined')\n}",
      "startLine": 73,
      "endLine": 80,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/useFileUpload.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@82-93",
      "type": "function_declaration",
      "name": "getPresignedUrl",
      "text": "async function getPresignedUrl(fileUri: string) {\n  const url = `/api/presigned-url/` + fileUri\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${getToken()}`\n    }\n  })\n\n  const res = await response.json()\n  return res\n}",
      "startLine": 82,
      "endLine": 93,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/useFileUpload.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@95-114",
      "type": "function_declaration",
      "name": "cacheFile",
      "text": "async function cacheFile(filename: string, file: File) {\n  const temporaryBlob = new Blob([file], { type: file.type })\n  const cacheKeys = await caches.keys()\n\n  const cacheKey = cacheKeys.find((key) => key.startsWith(CACHE_NAME))\n\n  if (!cacheKey) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `Cache ${CACHE_NAME} not found. Is service worker running properly?`\n    )\n    return\n  }\n\n  const cache = await caches.open(cacheKey)\n  return cache.put(\n    getFullUrl(filename),\n    new Response(temporaryBlob, { headers: { 'Content-Type': file.type } })\n  )\n}",
      "startLine": 95,
      "endLine": 114,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/useFileUpload.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@116-130",
      "type": "function_declaration",
      "name": "removeCached",
      "text": "async function removeCached(filename: string) {\n  const cacheKeys = await caches.keys()\n  const cacheKey = cacheKeys.find((key) => key.startsWith(CACHE_NAME))\n\n  if (!cacheKey) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `Cache ${CACHE_NAME} not found. Is service worker running properly?`\n    )\n    return\n  }\n\n  const cache = await caches.open(cacheKey)\n  return cache.delete(getFullUrl(filename))\n}",
      "startLine": 116,
      "endLine": 130,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/useFileUpload.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@132-138",
      "type": "function_declaration",
      "name": "precacheFile",
      "text": "async function precacheFile(filename: string) {\n  const presignedUrl = (await getPresignedUrl(filename)).presignedURL\n  const response = await fetch(presignedUrl)\n  const blob = await response.blob()\n  const file = new File([blob], filename, { type: blob.type })\n  await cacheFile(filename, file)\n}",
      "startLine": 132,
      "endLine": 138,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/useFileUpload.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@160-210",
      "type": "function_declaration",
      "name": "useFileUpload",
      "text": "function useFileUpload(fieldId: string, options: Options = {}) {\n  const upload = useMutation({\n    mutationFn: uploadFile,\n    mutationKey: [UPLOAD_MUTATION_KEY, fieldId],\n    onMutate: async ({ file, transactionId, id }) => {\n      const extension = file.name.split('.').pop()\n      const temporaryUrl = `${transactionId}.${extension}`\n\n      await cacheFile(temporaryUrl, file)\n\n      options.onSuccess?.({\n        ...file,\n        originalFilename: file.name,\n        type: file.type,\n        filename: temporaryUrl,\n        id\n      })\n    }\n  })\n\n  const del = useMutation({\n    mutationFn: deleteFile,\n    mutationKey: [DELETE_MUTATION_KEY, fieldId],\n    onSuccess: (data, { filename }) => {\n      void removeCached(filename)\n    }\n  })\n\n  return {\n    getFullUrl,\n    deleteFile: (filename: string) => {\n      return del.mutate({ filename })\n    },\n    /**\n     * Uploads a file with an optional identifier.\n     *\n     * @param {File} file - The file to be uploaded.\n     * @param {string} [id='default'] - An optional identifier for the file.\n     * This allows the caller to track the file when its upload completes.\n     *\n     * @returns {Promise} A promise representing the upload operation.\n     */\n    uploadFile: (file: File, id = 'default') => {\n      return upload.mutate({\n        file,\n        transactionId: uuid(),\n        id\n      })\n    }\n  }\n}",
      "startLine": 160,
      "endLine": 210,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/features/files/useFileUpload.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@75-115",
      "type": "function_declaration",
      "name": "useUsers",
      "text": "function useUsers() {\n  const trpc = useTRPC()\n  return {\n    getUser: {\n      useQuery: (id: string) => {\n        const { queryFn, ...options } = trpc.user.get.queryOptions(id)\n        return useQuery({\n          ...options,\n          queryKey: trpc.user.get.queryKey(id)\n        })\n      },\n      useSuspenseQuery: (id: string) => {\n        const { queryFn, ...options } = trpc.user.get.queryOptions(id)\n        return [\n          useSuspenseQuery({\n            ...options,\n            queryKey: trpc.user.get.queryKey(id)\n          }).data\n        ]\n      }\n    },\n    getUsers: {\n      useQuery: (ids: string[]) => {\n        const { queryFn, ...options } = trpc.user.list.queryOptions(ids)\n        return useQuery({\n          ...options,\n          queryKey: trpc.user.list.queryKey(ids)\n        })\n      },\n      useSuspenseQuery: (ids: string[]) => {\n        const { queryFn, ...options } = trpc.user.list.queryOptions(ids)\n        return [\n          useSuspenseQuery({\n            ...options,\n            queryKey: trpc.user.list.queryKey(ids)\n          }).data\n        ]\n      }\n    }\n  }\n}",
      "startLine": 75,
      "endLine": 115,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/hooks/useUsers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-34",
      "type": "function_declaration",
      "name": "useModal",
      "text": "function useModal() {\n  const [modalNode, setModalNode] = useState<ReactNode>(null)\n\n  async function openModal<ModalResult>(\n    modalFactory: ModalFactory<ModalResult>\n  ) {\n    return new Promise<ModalResult>((resolve) => {\n      function close(value: ModalResult) {\n        resolve(value)\n        setModalNode(null)\n      }\n\n      setModalNode(modalFactory(close))\n    })\n  }\n\n  return [modalNode, openModal] as const\n}",
      "startLine": 17,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/hooks/useModal.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-24",
      "type": "function_declaration",
      "name": "useLocations",
      "text": "function useLocations() {\n  const trpc = useTRPC()\n  return {\n    getLocations: {\n      useSuspenseQuery: () => {\n        return [useSuspenseQuery(trpc.locations.get.queryOptions()).data]\n      }\n    }\n  }\n}",
      "startLine": 15,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/hooks/useLocations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-40",
      "type": "function_declaration",
      "name": "useUserAddress",
      "text": "function useUserAddress() {\n  const userDetails = useSelector(getUserDetails)\n  const locations = useSelector(getLocations)\n\n  const primaryOfficeId = userDetails?.primaryOffice.id\n\n  if (primaryOfficeId) {\n    const primaryOfficeLocation = locations[primaryOfficeId]\n\n    const districtId = primaryOfficeLocation?.partOf.split('/')[1]\n    const district = districtId ? locations[districtId] : undefined\n\n    const provinceId = district?.partOf.split('/')[1]\n\n    return {\n      district: districtId ?? '',\n      province: provinceId ?? ''\n    }\n  }\n\n  return {\n    district: '',\n    province: ''\n  }\n}",
      "startLine": 16,
      "endLine": 40,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/hooks/useUserAddress.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@45-72",
      "type": "function_declaration",
      "name": "stringifySimpleField",
      "text": "function stringifySimpleField(intl: IntlShape, locations: Location[]) {\n  return (fieldConfig: FieldConfig, value: FieldValue) => {\n    const field = { config: fieldConfig, value }\n    if (\n      isLocationFieldType(field) ||\n      isAdministrativeAreaFieldType(field) ||\n      isFacilityFieldType(field) ||\n      isOfficeFieldType(field)\n    ) {\n      // Since all of the above field types are actually locations\n      return AdministrativeArea.stringify(locations, field.value)\n    }\n\n    if (isRadioGroupFieldType(field)) {\n      return RadioGroup.stringify(intl, field.value, field.config)\n    }\n\n    if (isCountryFieldType(field)) {\n      return Country.stringify(intl, field.value)\n    }\n\n    if (isSelectFieldType(field)) {\n      return Select.stringify(intl, field.value, field.config)\n    }\n\n    return !value ? '' : value.toString()\n  }\n}",
      "startLine": 45,
      "endLine": 72,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/hooks/useFormDataStringifier.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@116-122",
      "type": "function_declaration",
      "name": "useFormDataStringifier",
      "text": "function useFormDataStringifier() {\n  const intl = useIntl()\n  const { getLocations } = useLocations()\n  const [locations] = getLocations.useSuspenseQuery()\n\n  return getFormDataStringifier(intl, locations)\n}",
      "startLine": 116,
      "endLine": 122,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/hooks/useFormDataStringifier.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@31-56",
      "type": "function_declaration",
      "name": "replaceMinioUrlWithBase64",
      "text": "async function replaceMinioUrlWithBase64(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  declaration: Record<string, any>,\n  config: EventConfig\n) {\n  const fileFieldIds = config.declaration.pages\n    .flatMap((page) => page.fields)\n    .filter((field) => field.type === FieldType.FILE)\n    .map((field) => field.id)\n\n  for (const fieldId of fileFieldIds) {\n    const fieldValue = declaration[fieldId]\n    if (\n      fieldValue &&\n      typeof fieldValue === 'object' &&\n      'filename' in fieldValue &&\n      isMinioUrl(fieldValue.filename)\n    ) {\n      declaration[fieldId].filename = await fetchImageAsBase64(\n        // this should be a presigned minio url\n        fieldValue.filename\n      )\n    }\n  }\n  return declaration\n}",
      "startLine": 31,
      "endLine": 56,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/hooks/usePrintableCertificate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-16",
      "type": "function_declaration",
      "name": "noop",
      "text": "function noop() {\n  return _.noop()\n}",
      "startLine": 14,
      "endLine": 16,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/v2-events/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@172-176",
      "type": "function_declaration",
      "name": "isMetaTypeField",
      "text": "function isMetaTypeField(field: IFormField): boolean {\n  return (\n    isFieldHttp(field) || isFieldLinkButton(field) || isFieldIDReader(field)\n  )\n}",
      "startLine": 172,
      "endLine": 176,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/transformer/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@177-236",
      "type": "function_declaration",
      "name": "getChangedValues",
      "text": "function getChangedValues(\n  formDefinition: IForm,\n  declaration: IDeclaration,\n  offlineCountryConfig: IOfflineData,\n  userDetails: UserDetails | null\n) {\n  const draftData = declaration.data\n  const originalDraftData = declaration.originalData || {}\n  const changedValues: CorrectionValueInput[] = []\n\n  if (!formDefinition.sections) {\n    throw new Error('Sections are missing in form definition')\n  }\n\n  formDefinition.sections.forEach((section) => {\n    if (!draftData[section.id]) {\n      return\n    }\n\n    getVisibleSectionGroupsBasedOnConditions(\n      section,\n      draftData[section.id],\n      draftData\n    ).forEach((groupDef) => {\n      groupDef.fields.forEach((fieldDef) => {\n        const conditionalActions: string[] = getConditionalActionsForField(\n          fieldDef,\n          draftData[section.id],\n          offlineCountryConfig,\n          draftData,\n          userDetails\n        )\n\n        originalDraftData[section.id] ??= {}\n\n        if (\n          (!conditionalActions.includes('hide') ||\n            fieldDef.name === 'detailsExist') &&\n          !isMetaTypeField(fieldDef) &&\n          hasFieldChanged(\n            fieldDef,\n            draftData[section.id],\n            originalDraftData[section.id]\n          )\n        ) {\n          changedValues.push(\n            ...toCorrectionValue(\n              section,\n              fieldDef,\n              draftData,\n              originalDraftData\n            )\n          )\n        }\n      })\n    })\n  })\n\n  return changedValues\n}",
      "startLine": 177,
      "endLine": 236,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/transformer/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@491-506",
      "type": "function_declaration",
      "name": "getPotentialDuplicateIds",
      "text": "function getPotentialDuplicateIds(\n  eventRegistration: EventRegistration | EventSearchSet | null\n) {\n  const duplicates = eventRegistration?.registration?.duplicates\n  if (duplicates && duplicates[0] && typeof duplicates[0] === 'object') {\n    return (eventRegistration?.registration?.duplicates as DuplicatesInfo[])\n      .filter(\n        (duplicate): duplicate is IDuplicates => !!duplicate.compositionId\n      )\n      .map(({ compositionId }) => compositionId)\n  } else if (duplicates && typeof duplicates[0] === 'string') {\n    return (eventRegistration?.registration?.duplicates as string[]).filter(\n      (duplicate): duplicate is string => !!duplicate\n    )\n  }\n}",
      "startLine": 491,
      "endLine": 506,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/transformer/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-52",
      "type": "function_declaration",
      "name": "formatUrl",
      "text": "function formatUrl(url: string, props: { [key: string]: string }) {\n  const formattedUrl = Object.keys(props).reduce(\n    (str, key) => str.replace(`:${key}`, props[key]),\n    url\n  )\n  return formattedUrl.endsWith('?') ? formattedUrl.slice(0, -1) : formattedUrl\n}",
      "startLine": 46,
      "endLine": 52,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/navigation/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@77-99",
      "type": "function_declaration",
      "name": "generatePerformanceHomeUrl",
      "text": "function generatePerformanceHomeUrl({\n  timeStart = new Date(\n    startOfMonth(subMonths(new Date(Date.now()), 11)).setHours(0, 0, 0, 0)\n  ),\n  timeEnd = new Date(new Date(Date.now()).setHours(23, 59, 59, 999)),\n  event,\n  locationId\n}: {\n  timeStart?: Date\n  timeEnd?: Date\n  event?: EventType\n  locationId?: string\n}) {\n  return {\n    pathname: PERFORMANCE_HOME,\n    search: stringify({\n      locationId,\n      event,\n      timeStart: timeStart.toISOString(),\n      timeEnd: timeEnd.toISOString()\n    })\n  }\n}",
      "startLine": 77,
      "endLine": 99,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/navigation/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@151-160",
      "type": "function_declaration",
      "name": "searchUsers",
      "text": "async function searchUsers(primaryOfficeId: string) {\n  return (\n    client &&\n    client.query({\n      query: SEARCH_USERS,\n      variables: { primaryOfficeId },\n      fetchPolicy: 'no-cache'\n    })\n  )\n}",
      "startLine": 151,
      "endLine": 160,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/user/queries.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@171-180",
      "type": "function_declaration",
      "name": "verifyPasswordById",
      "text": "async function verifyPasswordById(id: string, password: string) {\n  return (\n    client &&\n    client.query({\n      query: VERIFY_PASSWORD_BY_ID,\n      variables: { id, password },\n      fetchPolicy: 'no-cache'\n    })\n  )\n}",
      "startLine": 171,
      "endLine": 180,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/user/queries.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-37",
      "type": "function_declaration",
      "name": "resendInvite",
      "text": "async function resendInvite(\n  userId: string,\n  refetchQueries: InternalRefetchQueriesInclude\n) {\n  return (\n    client &&\n    client.mutate({\n      mutation: RESEND_SMS_INVITE,\n      variables: { userId },\n      refetchQueries\n    })\n  )\n}",
      "startLine": 25,
      "endLine": 37,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/user/mutations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-55",
      "type": "function_declaration",
      "name": "sendResetPasswordInvite",
      "text": "async function sendResetPasswordInvite(\n  userId: string,\n  refetchQueries: InternalRefetchQueriesInclude\n) {\n  return (\n    client &&\n    client.mutate({\n      mutation: RESET_PASSWORD_INVITE,\n      variables: { userId },\n      refetchQueries\n    })\n  )\n}",
      "startLine": 43,
      "endLine": 55,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/user/mutations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@57-69",
      "type": "function_declaration",
      "name": "usernameReminderSend",
      "text": "async function usernameReminderSend(\n  userId: string,\n  refetchQueries: InternalRefetchQueriesInclude\n) {\n  return (\n    client &&\n    client.mutate({\n      mutation: USERNAME_REMINDER,\n      variables: { userId },\n      refetchQueries\n    })\n  )\n}",
      "startLine": 57,
      "endLine": 69,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/user/mutations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-15",
      "type": "function_declaration",
      "name": "selectWorkqueuePagination",
      "text": "function selectWorkqueuePagination(store: IStoreState) {\n  return store.workqueueState.pagination\n}",
      "startLine": 13,
      "endLine": 15,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/workqueue/selectors.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@84-93",
      "type": "function_declaration",
      "name": "modifyUserFormData",
      "text": "function modifyUserFormData(\n  data: IFormSectionData\n): IUserFormDataModifyAction {\n  return {\n    type: MODIFY_USER_FORM_DATA,\n    payload: {\n      data\n    }\n  }\n}",
      "startLine": 84,
      "endLine": 93,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/user/userReducer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@270-272",
      "type": "method_definition",
      "name": "if",
      "text": "if (!('role' in values)) {\n    return values\n  }",
      "startLine": 270,
      "endLine": 272,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/user/userReducer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@288-489",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case offlineActions.READY:\n      return loop(\n        {\n          ...state,\n          userAuditForm,\n          loadingRoles: true\n        },\n        Cmd.run(fetchRoles, {\n          successActionCreator: ([loggedInUserScopes, roles]) =>\n            rolesLoaded(loggedInUserScopes, roles),\n          args: [Cmd.getState]\n        })\n      )\n\n    case MODIFY_USER_FORM_DATA: {\n      const formData = action.payload.data\n      return {\n        ...state,\n        userFormData: withScopes(formData, state.userRoles)\n      }\n    }\n\n    case CLEAR_USER_FORM_DATA:\n      return {\n        ...initialState,\n        userForm: state.userForm,\n        userRoles: state.userRoles\n      }\n\n    case SUBMIT_USER_FORM_DATA:\n      const { client, mutation, variables, isUpdate } = action.payload\n      const token = getToken()\n      const tokenPayload = getTokenPayload(token)\n      const userDetails = variables.user\n      const isSelfUpdate = userDetails.id === tokenPayload?.sub\n      const commandList: (RunCmd<Action> | ActionCmd<Action>)[] = [\n        Cmd.run(\n          () =>\n            client.mutate({\n              mutation,\n              variables,\n              refetchQueries: [\n                { query: SEARCH_USERS, variables: { count: 10, skip: 0 } }\n              ]\n            }),\n          {\n            successActionCreator: () =>\n              submitSuccess(isUpdate, action.payload.onSuccess),\n            failActionCreator: submitFail\n          }\n        )\n      ]\n      if (isSelfUpdate) {\n        commandList.push(\n          Cmd.action(modifyUserDetails({ mobile: userDetails.mobile }))\n        )\n      }\n      return loop(\n        { ...state, submitting: true },\n        Cmd.list<UserFormAction>(commandList)\n      )\n\n    case SUBMIT_USER_FORM_DATA_SUCCESS:\n      const list = Cmd.list<\n        | ReturnType<typeof clearUserFormData>\n        | ReturnType<typeof showSubmitFormSuccessToast>\n      >([\n        Cmd.action(\n          showSubmitFormSuccessToast(\n            action.payload.isUpdate\n              ? TOAST_MESSAGES.UPDATE_SUCCESS\n              : TOAST_MESSAGES.SUCCESS\n          )\n        ),\n        Cmd.run(action.payload.onSuccess),\n        Cmd.action(clearUserFormData())\n      ])\n\n      return loop({ ...state, submitting: false, submissionError: false }, list)\n\n    case SUBMIT_USER_FORM_DATA_FAIL:\n      const { errorData } = action.payload\n      const duplicateErrorFromGQL = errorData?.graphQLErrors?.find(\n        (gqlErr) =>\n          gqlErr.extensions.invalidArgs?.duplicateNotificationMethodError\n      )\n\n      if (duplicateErrorFromGQL) {\n        const duplicateError =\n          duplicateErrorFromGQL.extensions.invalidArgs\n            .duplicateNotificationMethodError\n\n        if (duplicateError.field && duplicateError.field === 'email') {\n          return loop(\n            { ...state, submitting: false, submissionError: false },\n            Cmd.action(\n              showCreateUserDuplicateEmailErrorToast(\n                TOAST_MESSAGES.FAIL,\n                duplicateError.conflictingValue\n              )\n            )\n          )\n        } else if (duplicateError.field && duplicateError.field === 'mobile') {\n          return loop(\n            { ...state, submitting: false, submissionError: false },\n            Cmd.action(\n              showCreateUserErrorToast(\n                TOAST_MESSAGES.FAIL,\n                duplicateError.conflictingValue\n              )\n            )\n          )\n        }\n      }\n      return loop(\n        { ...state, submitting: false, submissionError: true },\n        Cmd.action(showSubmitFormErrorToast(TOAST_MESSAGES.FAIL))\n      )\n\n    case ROLES_LOADED:\n      const { loggedInUserScopes, userRoles } = action.payload\n\n      const creatableRoleIds =\n        findScope(loggedInUserScopes, 'user.create')?.options?.role ?? []\n\n      const editableRoleIds =\n        findScope(loggedInUserScopes, 'user.edit')?.options?.role ?? []\n\n      const allowedRoleIds = [...creatableRoleIds, ...editableRoleIds]\n\n      const form = deserializeForm(getCreateUserForm(), validators)\n\n      const modifiedForm = modifyFormField(\n        form,\n        'user',\n        'user-view-group',\n        'role',\n        (field: IFormField) => {\n          if (field.type === 'SELECT_WITH_OPTIONS') {\n            return {\n              ...field,\n              options: userRoles\n                .filter(({ id }) => allowedRoleIds.includes(id))\n                .map((role) => ({\n                  value: role.id,\n                  label: role.label\n                }))\n            }\n          }\n          return field\n        }\n      )\n\n      return {\n        ...state,\n        userForm: modifiedForm,\n        userRoles,\n        loadingRoles: false\n      }\n    case FETCH_USER_DATA:\n      const {\n        client: userClient,\n        variables: { userId }\n      } = (action as IFetchAndStoreUserData).payload\n      return loop(\n        state,\n        Cmd.run(\n          () =>\n            userClient.query({\n              query: GET_USER,\n              variables: { userId },\n              fetchPolicy: 'no-cache'\n            }),\n          {\n            successActionCreator: storeUserFormData,\n            failActionCreator: () =>\n              showSubmitFormErrorToast(TOAST_MESSAGES.FAIL)\n          }\n        )\n      )\n\n    case STORE_USER_FORM_DATA:\n      const { queryData } = action.payload\n      const formData = gqlToDraftTransformer(\n        { sections: state.userForm.sections },\n        {\n          [UserSection.User]: {\n            ...queryData.data.getUser\n          }\n        }\n      )\n\n      return {\n        ...state,\n        userFormData: withScopes(formData.user, state.userRoles),\n        userDetailsStored: true\n      }\n\n    default:\n      return state\n  }",
      "startLine": 288,
      "endLine": 489,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/user/userReducer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@430-527",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case UPDATE_REGISTRAR_WORKQUEUE:\n      const {\n        printTab,\n        reviewTab,\n        sentForReviewTab,\n        approvalTab,\n        inProgressTab,\n        externalValidationTab,\n        rejectTab,\n        notificationTab,\n        issueTab\n      } = state.pagination\n\n      const { pageSize } = action.payload\n\n      const paginationParams: IWorkqueuePaginationParams = {\n        ...action.payload,\n        inProgressSkip: Math.max(inProgressTab - 1, 0) * pageSize,\n        healthSystemSkip: Math.max(notificationTab - 1, 0) * pageSize,\n        reviewSkip: Math.max(reviewTab - 1, 0) * pageSize,\n        rejectSkip: Math.max(rejectTab - 1, 0) * pageSize,\n        sentForReviewSkip: Math.max(sentForReviewTab - 1, 0) * pageSize,\n        approvalSkip: Math.max(approvalTab - 1, 0) * pageSize,\n        externalValidationSkip:\n          Math.max(externalValidationTab - 1, 0) * pageSize,\n        printSkip: Math.max(printTab - 1, 0) * pageSize,\n        issueSkip: Math.max(issueTab - 1, 0) * pageSize\n      }\n\n      return loop(\n        {\n          ...state,\n          workqueue: {\n            ...state.workqueue,\n            loading: true\n          }\n        },\n        Cmd.run(writeRegistrarWorkqueueByUser, {\n          successActionCreator: updateRegistrarWorkqueueSuccessActionCreator,\n          failActionCreator: updateRegistrarWorkqueueFailActionCreator,\n          args: [Cmd.getState, paginationParams]\n        })\n      )\n\n    case USER_DETAILS_AVAILABLE:\n      return loop(\n        {\n          ...state\n        },\n        Cmd.run<\n          IGetWorkqueueOfCurrentUserFailedAction,\n          IGetWorkqueueOfCurrentUserSuccessAction\n        >(getWorkqueueOfCurrentUser, {\n          successActionCreator: getCurrentUserWorkqueuSuccess,\n          failActionCreator: getCurrentUserWorkqueueFailed,\n          args: []\n        })\n      )\n\n    case GET_WORKQUEUE_SUCCESS:\n      if (action.payload) {\n        const workqueue = JSON.parse(action.payload) as IWorkqueue\n        return {\n          ...state,\n          workqueue\n        }\n      }\n      return state\n\n    case UPDATE_REGISTRAR_WORKQUEUE_SUCCESS:\n      if (action.payload) {\n        const workqueue = JSON.parse(action.payload) as IWorkqueue\n        return loop(\n          {\n            ...state,\n            workqueue\n          },\n          Cmd.run(getFilteredDeclarations, {\n            successActionCreator: RemoveUnassignedDeclarationsActionCreator,\n            args: [workqueue, Cmd.getState]\n          })\n        )\n      }\n      return state\n\n    case UPDATE_WORKQUEUE_PAGINATION:\n      return {\n        ...state,\n        pagination: {\n          ...state.pagination,\n          ...action.payload\n        }\n      }\n\n    default:\n      return state\n  }",
      "startLine": 430,
      "endLine": 527,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/workqueue/reducer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@50-52",
      "type": "method_definition",
      "name": "if",
      "text": "if (!token) {\n    return null\n  }",
      "startLine": 50,
      "endLine": 52,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 19,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/authUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@85-99",
      "type": "function_declaration",
      "name": "generateLocationName",
      "text": "function generateLocationName(\n  location: ILocation | undefined,\n  intl: IntlShape\n) {\n  // when health institution in place of delivery is set null in birth registration form\n  if (!location) {\n    return ''\n  }\n  let name = getLocalizedLocationName(intl, location)\n  location.jurisdictionType &&\n    (name += ` ${\n      intl.formatMessage(locationMessages[location.jurisdictionType]) || ''\n    }`.trimEnd())\n  return name\n}",
      "startLine": 85,
      "endLine": 99,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/locationUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@101-117",
      "type": "function_declaration",
      "name": "generateFullLocation",
      "text": "function generateFullLocation(\n  districtId: string,\n  stateId: string,\n  countryCode: string,\n  resources: IOfflineData,\n  intl: IntlShape\n) {\n  const district = districtId && resources.locations[districtId]\n  const state = stateId && resources.locations[stateId]\n  const country =\n    countryCode && intl.formatMessage(countryMessages[countryCode])\n  let location = ''\n  if (district) location = district.name + ', '\n  if (state) location = location + state.name + ', '\n  location = location + country\n  return location\n}",
      "startLine": 101,
      "endLine": 117,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/locationUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@119-157",
      "type": "function_declaration",
      "name": "generateSearchableLocations",
      "text": "function generateSearchableLocations(\n  locations: ILocation[],\n  offlineLocations: { [key: string]: ILocation },\n  intl: IntlShape,\n  officeId?: UUID\n) {\n  const filteredLocations = officeId\n    ? getAssociatedLocationsAndOffices(officeId, locations)\n    : locations\n\n  const generated: ISearchLocation[] = filteredLocations.map(\n    (location: ILocation) => {\n      let locationName = generateLocationName(location, intl)\n\n      if (\n        location.partOf &&\n        location.partOf !== 'Location/0' &&\n        location.type !== 'CRVS_OFFICE'\n      ) {\n        const locRef = location.partOf.split('/')[1]\n        let parent\n        if (\n          (parent =\n            offlineLocations[locRef] &&\n            generateLocationName(offlineLocations[locRef], intl))\n        ) {\n          locationName += `, ${parent}`\n        }\n      }\n\n      return {\n        id: location.id,\n        searchableText: getLocalizedLocationName(intl, location),\n        displayLabel: locationName\n      }\n    }\n  )\n  return generated\n}",
      "startLine": 119,
      "endLine": 157,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/locationUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@159-172",
      "type": "function_declaration",
      "name": "generateLocations",
      "text": "function generateLocations(\n  locations: { [key: string]: ILocation },\n  intl: IntlShape,\n  filter?: (location: ILocation) => boolean,\n  officeId?: UUID\n) {\n  let locationArray = Object.values(locations)\n\n  if (filter) {\n    locationArray = locationArray.filter(filter)\n  }\n\n  return generateSearchableLocations(locationArray, locations, intl, officeId)\n}",
      "startLine": 159,
      "endLine": 172,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/locationUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@174-185",
      "type": "function_declaration",
      "name": "getJurisidictionType",
      "text": "function getJurisidictionType(\n  locations: { [key: string]: ILocation },\n  locationId: string\n): string {\n  const relevantLocation = locations[locationId]\n\n  if (!relevantLocation) {\n    throw new Error(`Location ${locationId} not found`)\n  }\n\n  return relevantLocation.jurisdictionType as string\n}",
      "startLine": 174,
      "endLine": 185,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/locationUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@189-229",
      "type": "function_declaration",
      "name": "getLocationNameMapOfFacility",
      "text": "function getLocationNameMapOfFacility(\n  facilityLocation: ILocation,\n  offlineLocations: Record<string, ILocation>,\n  countryAsString?: boolean\n): Record<string, LocationName> {\n  let location: ILocation = facilityLocation\n  let continueLoop = true\n  const map: Record<string, LocationName> = { facility: location.name }\n  while (location.partOf && continueLoop) {\n    const parent = location.partOf.split('/')[1]\n    if (parent === '0') {\n      continueLoop = false\n      map.country = countryAsString\n        ? (countries.find(({ value }) => value === window.config.COUNTRY)?.label\n            .defaultMessage as string)\n        : (countries.find(({ value }) => value === window.config.COUNTRY)\n            ?.label as MessageDescriptor)\n    } else {\n      location = offlineLocations[parent]\n      map[location.jurisdictionType?.toLowerCase() as string] = location.name\n    }\n  }\n  return map\n}\n\nexport function getLocalizedLocationName(intl: IntlShape, location: ILocation) {\n  if (intl.locale === getDefaultLanguage()) {\n    return location.name\n  } else {\n    return location.alias?.toString()\n  }\n}\n\ntype LocationHierarchy = {\n  state?: string\n  district?: string\n  locationLevel3?: string\n  locationLevel4?: string\n  locationLevel5?: string\n  country?: string\n}",
      "startLine": 189,
      "endLine": 229,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/locationUtils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@197-210",
      "type": "method_definition",
      "name": "while",
      "text": "while (location.partOf && continueLoop) {\n    const parent = location.partOf.split('/')[1]\n    if (parent === '0') {\n      continueLoop = false\n      map.country = countryAsString\n        ? (countries.find(({ value }) => value === window.config.COUNTRY)?.label\n            .defaultMessage as string)\n        : (countries.find(({ value }) => value === window.config.COUNTRY)\n            ?.label as MessageDescriptor)\n    } else {\n      location = offlineLocations[parent]\n      map[location.jurisdictionType?.toLowerCase() as string] = location.name\n    }\n  }",
      "startLine": 197,
      "endLine": 210,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/locationUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@235-253",
      "type": "function_declaration",
      "name": "getLocationHierarchy",
      "text": "function getLocationHierarchy(\n  locationId: string,\n  locations: Record<string, AdminStructure | undefined>,\n  hierarchy: LocationHierarchy = {\n    country: countries.find(({ value }) => value === window.config.COUNTRY)\n      ?.label.defaultMessage as string\n  }\n): LocationHierarchy {\n  const parentLocation = locations[locationId]\n  if (!parentLocation) {\n    return hierarchy\n  }\n  const { id, jurisdictionType, partOf } = parentLocation\n\n  return getLocationHierarchy(partOf.split('/').at(1)!, locations, {\n    ...hierarchy,\n    [camelCasedJurisdictionType(jurisdictionType)]: id\n  })\n}",
      "startLine": 235,
      "endLine": 253,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/locationUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@18-30",
      "type": "function_declaration",
      "name": "ApolloProvider",
      "text": "function ApolloProvider(\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  props: Omit<ApolloProviderProps<any>, 'client'> & {\n    client: ApolloClient<NormalizedCacheObject> | null\n  }\n) {\n  const { client, children } = props\n  return client ? (\n    <ApolloClientProvider client={client}>{children}</ApolloClientProvider>\n  ) : (\n    <></>\n  )\n}",
      "startLine": 18,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/ApolloProvider.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@33-50",
      "type": "function_declaration",
      "name": "isValidPlainDate",
      "text": "function isValidPlainDate(rawDate: unknown): rawDate is PlainDate {\n  if (typeof rawDate !== 'string') {\n    return false\n  }\n  const [yyyy, mm, dd] = rawDate.split('-')\n  if (\n    !dd ||\n    !mm ||\n    !yyyy ||\n    dd.length === 0 ||\n    mm.length === 0 ||\n    yyyy.length < 4 ||\n    !isValid(new Date(rawDate))\n  ) {\n    return false\n  }\n  return true\n}",
      "startLine": 33,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/date-formatting.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@52-56",
      "type": "function_declaration",
      "name": "plainDateToLocalDate",
      "text": "function plainDateToLocalDate(plainDate: PlainDate) {\n  const rawDate = plainDate as unknown as `${number}-${number}-${number}`\n  const [yyyy, mm, dd] = rawDate.split('-')\n  return new Date(Number(yyyy), Number(mm) - 1, Number(dd))\n}",
      "startLine": 52,
      "endLine": 56,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/date-formatting.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@58-66",
      "type": "function_declaration",
      "name": "formatPlainDate",
      "text": "function formatPlainDate(\n  plainDate: PlainDate,\n  formatString = 'dd MMMM yyyy'\n) {\n  const localDate = plainDateToLocalDate(plainDate)\n  return format(localDate, formatString, {\n    locale: locales[window.__localeId__]\n  })\n}",
      "startLine": 58,
      "endLine": 66,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/date-formatting.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@109-120",
      "type": "function_declaration",
      "name": "formatDate",
      "text": "function formatDate(\n  date: Date | number,\n  formatStr = 'PP',\n  locale?: string\n) {\n  if (!isValid(date)) {\n    return ''\n  }\n  return format(date, formatStr, {\n    locale: locales[locale ?? window.__localeId__]\n  })\n}",
      "startLine": 109,
      "endLine": 120,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/date-formatting.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-29",
      "type": "function_declaration",
      "name": "getUserLocation",
      "text": "function getUserLocation(userDetails: UserDetails) {\n  if (!userDetails.primaryOffice) {\n    throw Error('The user has no primary office')\n  }\n\n  return userDetails.primaryOffice\n}",
      "startLine": 23,
      "endLine": 29,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/userUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@31-33",
      "type": "function_declaration",
      "name": "storeUserDetails",
      "text": "async function storeUserDetails(userDetails: UserDetails) {\n  storage.setItem(USER_DETAILS, JSON.stringify(userDetails))\n}",
      "startLine": 31,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/userUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-36",
      "type": "function_declaration",
      "name": "removeUserDetails",
      "text": "async function removeUserDetails() {\n  storage.removeItem(USER_DETAILS)\n}",
      "startLine": 34,
      "endLine": 36,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/userUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-47",
      "type": "function_declaration",
      "name": "getIndividualNameObj",
      "text": "function getIndividualNameObj(\n  individualNameArr: Array<HumanName | null>,\n  language: string\n) {\n  return (\n    individualNameArr.find((name: HumanName | null) => {\n      return name && name.use === language ? true : false\n    }) || individualNameArr[0]\n  )\n}",
      "startLine": 38,
      "endLine": 47,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/userUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@49-56",
      "type": "function_declaration",
      "name": "getUserName",
      "text": "function getUserName(userDetails: UserDetails | null) {\n  return (\n    (userDetails &&\n      userDetails.name &&\n      createNamesMap(userDetails.name)[LANG_EN]) ||\n    ''\n  )\n}",
      "startLine": 49,
      "endLine": 56,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/userUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@58-62",
      "type": "function_declaration",
      "name": "useAuthentication",
      "text": "function useAuthentication() {\n  return useSelector<IStoreState, ITokenPayload | null>(\n    (state) => state.profile.tokenPayload\n  )\n}",
      "startLine": 58,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/userUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-69",
      "type": "function_declaration",
      "name": "useUserName",
      "text": "function useUserName() {\n  return useSelector<IStoreState, string>((state) => {\n    const { userDetails } = state.profile\n    return getUserName(userDetails)\n  })\n}",
      "startLine": 64,
      "endLine": 69,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/userUtils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@35-38",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(timeout: number = DEFAULT_TIMEOUT) {\n    super()\n    this.timeout = timeout\n  }",
      "startLine": 35,
      "endLine": 38,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/timeoutLink.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@137-142",
      "type": "function_declaration",
      "name": "init",
      "text": "async function init() {\n      const { client, persistor } = await createPersistentClient(store)\n      setPersistor(persistor)\n      setClient(client)\n      clearOldCacheEntries(client.cache)\n    }",
      "startLine": 137,
      "endLine": 142,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/apolloClient.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@86-120",
      "type": "function_declaration",
      "name": "getCroppedImage",
      "text": "async function getCroppedImage(imageSrc: IImage, croppedArea: Area) {\n  const image: HTMLImageElement = await createImage(imageSrc.data)\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) {\n    return null\n  }\n\n  canvas.width = image.width\n  canvas.height = image.height\n\n  ctx.drawImage(image, 0, 0)\n\n  // croppedAreaPixels values are bounding box relative\n  // extract the cropped image using these values\n  const data = ctx.getImageData(\n    croppedArea.x,\n    croppedArea.y,\n    croppedArea.width,\n    croppedArea.height\n  )\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = croppedArea.width\n  canvas.height = croppedArea.height\n\n  // paste generated image at the top left corner\n  ctx.putImageData(data, 0, 0)\n\n  return {\n    type: 'image/jpeg',\n    data: canvas.toDataURL('image/jpeg')\n  }\n}",
      "startLine": 86,
      "endLine": 120,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/imageUtils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@253-255",
      "type": "method_definition",
      "name": "catch",
      "text": "catch (error) {\n    return {}\n  }",
      "startLine": 253,
      "endLine": 255,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/referenceApi.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-26",
      "type": "function_declaration",
      "name": "generateName",
      "text": "function generateName(name: HumanName) {\n  return [name.firstNames, name.middleName, name.familyName]\n    .filter(Boolean)\n    .join(' ')\n    .trim()\n}",
      "startLine": 21,
      "endLine": 26,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/data-formatting.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@72-74",
      "type": "method_definition",
      "name": "if",
      "text": "if (strArrayA.length !== strArrayB.length) {\n    return strArrayA\n  }",
      "startLine": 72,
      "endLine": 74,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/data-formatting.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@61-94",
      "type": "class_declaration",
      "name": "PersistLink",
      "text": "class PersistLink extends ApolloLink {\n  public directive = 'persist'\n\n  /**\n   * Link query requester.\n   */\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  request = (operation: any, forward: any) => {\n    const { query, paths } = extractPersistDirectivePaths(\n      operation.query,\n      this.directive\n    )\n    // Replace query with one without @persist directives.\n    operation.query = query\n\n    // Remove requesting __persist fields.\n    operation.query = visit(operation.query, {\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      Field: ({ name: { value: name } }: any): any => {\n        if (name === '__persist') {\n          return null\n        }\n      }\n    })\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    return forward(operation).map((result: any) => {\n      if (result.data) {\n        result.data = attachPersists(paths, result.data)\n      }\n\n      return result\n    })\n  }\n}",
      "startLine": 61,
      "endLine": 94,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/persistence/persistLink.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@95-111",
      "type": "method_definition",
      "name": "if",
      "text": "if (fragmentPersistPaths[name]) {\n          let fieldPath = ancestors\n            .filter(({ kind }: any) => kind === 'Field')\n            .map(({ name: { value: name } }: any) => name)\n\n          fieldPath = fieldPath.concat(fragmentPersistPaths[name])\n\n          const fragment = name\n          let parent = fragmentPaths[fragment][0]\n\n          while (parent && parent !== '$ROOT' && fragmentPaths[parent]) {\n            fieldPath = fragmentPaths[parent].slice(1).concat(fieldPath)\n            parent = fragmentPaths[parent][0]\n          }\n\n          paths.push(fieldPath)\n        }",
      "startLine": 95,
      "endLine": 111,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/persistence/transform.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-76",
      "type": "function_declaration",
      "name": "getQueriesToPrefetch",
      "text": "function getQueriesToPrefetch(\n  locationId: string,\n  officeSelected: boolean\n): QueryOptions[] {\n  const defaultTimeStart = new Date(\n    startOfMonth(subMonths(new Date(Date.now()), 11)).setHours(0, 0, 0, 0)\n  )\n  const defaultTimeEnd = new Date(\n    new Date(Date.now()).setHours(23, 59, 59, 999)\n  )\n\n  return [\n    {\n      query: PERFORMANCE_STATS,\n      variables: {\n        event: 'birth',\n        locationId,\n        status: [\n          'IN_PROGRESS',\n          'DECLARED',\n          'REJECTED',\n          'VALIDATED',\n          'WAITING_VALIDATION',\n          'REGISTERED'\n        ],\n        populationYear: new Date().getFullYear(),\n        officeSelected\n      },\n      fetchPolicy: 'network-only'\n    },\n    {\n      query: PERFORMANCE_METRICS,\n      variables: {\n        event: 'BIRTH',\n        locationId,\n        timeStart: defaultTimeStart,\n        timeEnd: defaultTimeEnd\n      },\n      fetchPolicy: 'network-only'\n    },\n    {\n      query: CORRECTION_TOTALS,\n      variables: {\n        event: 'BIRTH',\n        locationId,\n        timeStart: defaultTimeStart,\n        timeEnd: defaultTimeEnd\n      },\n      fetchPolicy: 'network-only'\n    }\n  ]\n}",
      "startLine": 25,
      "endLine": 76,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/persistence/persistenceMiddleware.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-432",
      "type": "function_declaration",
      "name": "getListOfLocations",
      "text": "function getListOfLocations(\n  resource: IOfflineData,\n  resourceType: Extract<\n    keyof IOfflineData,\n    'facilities' | 'locations' | 'offices'\n  >\n) {\n  return resource[resourceType]\n}\n\n// @TODO: Importing from forms breaks the tests. Basically the references are not resolved correctly\n// and @opencrvs/client/src/forms causes recursion in this branch.\n// https://github.com/vitest-dev/vitest/issues/546\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\ntype IFormFieldValue = any\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\ntype IFormData = any\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\ntype IFormSectionData = any\n/**\n * NOTE! When amending validators in this file, remember to also update country configuration typings to reflect the changes\n */\n\nexport interface IValidationResult {\n  message: MessageDescriptor\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  props?: { [key: string]: any }\n}\n\nexport type RangeValidation = (\n  min: number,\n  max: number\n) => (value: IFormFieldValue) => IValidationResult | undefined\n\nexport type MaxLengthValidation = (\n  customisation: number\n) => (value: IFormFieldValue) => IValidationResult | undefined\n\nexport type Validation = (\n  value: IFormFieldValue,\n  drafts?: IFormData,\n  offlineCountryConfig?: IOfflineData,\n  form?: IFormSectionData\n) => IValidationResult | undefined\n\n/*  eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport type ValidationInitializer = (...value: any[]) => Validation\n\nexport const isAValidPhoneNumberFormat = (value: string): boolean => {\n  const pattern = window.config.PHONE_NUMBER_PATTERN\n  return new RegExp(pattern).test(value)\n}\n\nexport const isAValidEmailAddressFormat = (value: string): boolean => {\n  return validateEmail(value)\n}\n\nexport const isAValidDateFormat = (value: string): boolean => {\n  const dateFormatRegex = '^\\\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$'\n  const dateRegex = new RegExp(dateFormatRegex)\n\n  if (!dateRegex.test(value)) {\n    return false\n  }\n\n  const pad = (n: number) => {\n    return (str: string) => {\n      while (str.length < n) {\n        str = '0' + str\n      }\n      return str\n    }\n  }\n\n  const valueISOString = value.split(/-/g).map(pad(2)).join('-')\n\n  const givenDate = new Date(valueISOString)\n\n  return givenDate.toISOString().slice(0, 10) === valueISOString\n}\n\nexport const requiredBasic: Validation = (value: IFormFieldValue) =>\n  value ? undefined : { message: messages.requiredBasic }\n\nexport const requiredSymbol: Validation = (value: IFormFieldValue) =>\n  value ? undefined : { message: messages.requiredSymbol }\n\nexport const required =\n  (message: MessageDescriptor = messages.required): Validation =>\n  (value: IFormFieldValue) => {\n    if (typeof value === 'string') {\n      return value !== '' ? undefined : { message }\n    }\n    if (Array.isArray(value)) {\n      return value.length > 0 ? undefined : { message }\n    }\n    return value !== undefined && value !== null ? undefined : { message }\n  }\n\nexport const minLength = (min: number) => (value: string) => {\n  return value && value.length < min\n    ? { message: messages.minLength, props: { min } }\n    : undefined\n}\n\nexport const validLength = (length: number) => (value: IFormFieldValue) => {\n  return value && value.toString().length === length\n    ? undefined\n    : {\n        message: messages.validNationalId,\n        props: { validLength: length }\n      }\n}\n\nconst isLessOrEqual = (value: string, max: number) => {\n  return value && value.toString().length <= max\n}\n\nexport const maxLength: MaxLengthValidation =\n  (max: number) => (value: IFormFieldValue) => {\n    return isLessOrEqual(value as string, max)\n      ? undefined\n      : { message: messages.maxLength, props: { max } }\n  }\n\nconst isNumber = (value: string): boolean => !value || !isNaN(Number(value))\n\nconst isRegexpMatched = (value: string, regexp: string): boolean =>\n  !value || value.match(regexp) !== null\n\nexport const blockAlphaNumericDot: Validation = (value: IFormFieldValue) => {\n  const cast = value as string\n  return isRegexpMatched(cast, REGEXP_BLOCK_ALPHA_NUMERIC_DOT)\n    ? undefined\n    : { message: messages.blockAlphaNumericDot }\n}\n\nexport const nonDecimalPointNumber: Validation = (value: IFormFieldValue) => {\n  const cast = value as string\n  if (cast) {\n    return !isRegexpMatched(cast.toString(), REGEXP_DECIMAL_POINT_NUMBER)\n      ? undefined\n      : { message: messages.nonDecimalPointNumber }\n  }\n}\n\nexport const numeric: Validation = (value: IFormFieldValue) => {\n  const cast = value as string\n  return isNumber(cast) ? undefined : { message: messages.numberRequired }\n}\n\nexport const facilityMustBeSelected: Validation = (\n  value: IFormFieldValue,\n  drafts,\n  offlineCountryConfig\n) => {\n  const locationsList = getListOfLocations(\n    offlineCountryConfig as IOfflineData,\n    'facilities'\n  )\n  const isValid = !value || locationsList[value as string]\n  return isValid ? undefined : { message: messages.facilityMustBeSelected }\n}\n\nexport const officeMustBeSelected: Validation = (\n  value: IFormFieldValue,\n  drafts,\n  offlineCountryConfig\n) => {\n  const locationsList = getListOfLocations(\n    offlineCountryConfig as IOfflineData,\n    'offices'\n  )\n  const isValid = !value || locationsList[value as string]\n  return isValid ? undefined : { message: messages.officeMustBeSelected }\n}\n\nexport const phoneNumberFormat: Validation = (value: IFormFieldValue) => {\n  const cast = value as string\n  const trimmedValue = cast === undefined || cast === null ? '' : cast.trim()\n\n  if (!trimmedValue) {\n    return undefined\n  }\n\n  return isAValidPhoneNumberFormat(trimmedValue)\n    ? undefined\n    : {\n        message: messages.phoneNumberFormat\n      }\n}\n\nexport const emailAddressFormat: Validation = (value: IFormFieldValue) => {\n  const cast = value as string\n  if (cast === '') {\n    return\n  }\n\n  return cast && isAValidEmailAddressFormat(cast)\n    ? undefined\n    : {\n        message: messages.emailAddressFormat\n      }\n}\n\nexport const dateFormat: Validation = (value: IFormFieldValue) => {\n  const cast = value as string\n  return cast && isAValidDateFormat(cast)\n    ? undefined\n    : {\n        message: messages.dateFormat\n      }\n}\n\nexport const isDateNotInFuture = (date: string) => {\n  return new Date(date) <= new Date(Date.now())\n}\n\nexport const isDateNotPastLimit = (date: string, limit: Date) => {\n  return new Date(date) >= limit\n}\n\nexport const isDateNotBeforeBirth = (date: string, drafts: IFormData) => {\n  const birthDate = drafts?.deceased?.birthDate as string\n  return birthDate ? new Date(date) >= new Date(birthDate) : true\n}\n\nexport const isDateNotAfterBirthEvent = (date: string, drafts?: IFormData) => {\n  const dateOfBirth = drafts?.child?.childBirthDate as string\n  return dateOfBirth ? new Date(date) <= new Date(dateOfBirth) : true\n}\n\nexport const isDateNotAfterDeath = (date: string, drafts?: IFormData) => {\n  const deathDate = drafts?.deathEvent?.deathDate as string\n  return deathDate\n    ? new Date(date).setHours(0, 0, 0, 0) <=\n        new Date(deathDate).setHours(0, 0, 0, 0)\n    : true\n}\n\nexport const isDateAfter = (first: string, second: string) => {\n  return new Date(first) >= new Date(second)\n}\n\nexport const minAgeGapExist = (\n  first: string,\n  second: string,\n  minAgeGap: number\n): boolean => {\n  const diff =\n    (new Date(first).getTime() - new Date(second).getTime()) /\n    (1000 * 60 * 60 * 24) /\n    365\n  return diff >= minAgeGap\n}\n\nexport const isAgeInYearsBetween =\n  (min: number, max?: number): Validation =>\n  (value: IFormFieldValue) => {\n    const dateFormat = /^\\d{4}-(0?[1-9]|1[0-2])-(0?[1-9]|[12]\\d|3[01])$/\n    if (value && dateFormat.test(value.toString())) {\n      max = max || 120 // defaulting to 120 years as max if max is not provided\n      const today = new Date()\n      const dateOfBirth = new Date(value.toString())\n      const ageFromDateOfBirth = today.getFullYear() - dateOfBirth.getFullYear()\n\n      const ageIsWithinRange =\n        ageFromDateOfBirth >= min && ageFromDateOfBirth <= max\n      if (ageIsWithinRange) return undefined\n\n      return {\n        message: messages.isAgeInYearsBetween,\n        props: { min, max }\n      }\n    }\n    return undefined\n  }\n\nexport const isValidBirthDate: Validation = (\n  value: IFormFieldValue,\n  drafts?\n) => {\n  const cast = value as string\n  return !cast\n    ? { message: messages.required }\n    : cast &&\n        isDateNotInFuture(cast) &&\n        isAValidDateFormat(cast) &&\n        isDateNotAfterBirthEvent(cast, drafts as IFormData)\n      ? isDateNotAfterDeath(cast, drafts as IFormData)\n        ? undefined\n        : {\n            message: messages.isDateNotAfterDeath\n          }\n      : {\n          message: messages.isValidBirthDate\n        }\n}\n\nexport const isValidChildBirthDate: Validation = (value: IFormFieldValue) => {\n  const childBirthDate = value as string\n  const pastDateLimit = new Date(1900, 0, 1)\n  return !childBirthDate\n    ? { message: messages.required }\n    : childBirthDate &&\n        isAValidDateFormat(childBirthDate) &&\n        isDateNotInFuture(childBirthDate) &&\n        isDateNotPastLimit(childBirthDate, pastDateLimit)\n      ? undefined\n      : { message: messages.isValidBirthDate }\n}\n\nexport const isValidParentsBirthDate =\n  (minAgeGap: number, isAge?: boolean): Validation =>\n  (value: IFormFieldValue, drafts) => {\n    const parentsBirthDate = isAge\n      ? convertAgeToDate(value as string)\n      : (value as string)\n    const childBirthDate =\n      drafts && drafts.child && (drafts.child.childBirthDate as string)\n\n    return parentsBirthDate &&\n      isAValidDateFormat(parentsBirthDate) &&\n      isDateNotInFuture(parentsBirthDate)\n      ? childBirthDate\n        ? minAgeGapExist(childBirthDate, parentsBirthDate, minAgeGap)\n          ? undefined\n          : {\n              message: messages.isValidBirthDate\n            }\n        : undefined\n      : {\n          message: messages.isValidBirthDate\n        }\n  }\n\nexport const checkBirthDate =\n  (marriageDate: string): Validation =>\n  (value: IFormFieldValue) => {\n    const cast = value as string\n    if (!isAValidDateFormat(cast)) {\n      return {\n        message: messages.dateFormat\n      }\n    }\n\n    const bDate = new Date(cast)\n    // didn't call `isDateNotInFuture(value)`, because no need to call `new Date(value)` twice\n    if (bDate > new Date()) {\n      return {\n        message: messages.dateFormat\n      }\n    }\n\n    if (!marriageDate || !isAValidDateFormat(marriageDate)) {\n      return undefined\n    }\n\n    return bDate < new Date(marriageDate)\n      ? undefined\n      : {\n          message: messages.dobEarlierThanDom\n        }\n  }\n\nconst getBirthDate = (\n  isExactDateOfBirthUnknown: boolean,\n  date: string,\n  age: string\n) => (isExactDateOfBirthUnknown ? convertAgeToDate(age) : date)\n\nexport const checkMarriageDate =\n  (minAge: number): Validation =>\n  (value: IFormFieldValue, drafts) => {\n    const cast = value as string\n    if (!isAValidDateFormat(cast)) {\n      return {\n        message: messages.dateFormat\n      }\n    }\n\n    const mDate = new Date(cast)\n    // didn't call `isDateNotInFuture(value)`, because no need to call `new Date(value)` twice\n    if (mDate > new Date()) {\n      return {\n        message: messages.dateFormat\n      }\n    }\n\n    const groomDOB =\n      drafts &&\n      drafts.groom &&\n      getBirthDate(\n        Boolean(drafts.groom.exactDateOfBirthUnknown),\n        String(drafts.groom.groomBirthDate),\n        String(drafts.groom.ageOfIndividualInYears)\n      )\n    const brideDOB =\n      drafts &&\n      drafts.bride &&\n      getBirthDate(\n        Boolean(drafts.bride.exactDateOfBirthUnknown),\n        String(drafts.bride.brideBirthDate),\n        String(drafts.bride.ageOfIndividualInYears)\n      )\n\n    if (!groomDOB || !brideDOB) {\n      return undefined\n    }",
      "startLine": 24,
      "endLine": 432,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/validate.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@114-116",
      "type": "method_definition",
      "name": "if",
      "text": "if (typeof value === 'string') {\n      return value !== '' ? undefined : { message }\n    }",
      "startLine": 114,
      "endLine": 116,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 26,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/validate.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@117-119",
      "type": "method_definition",
      "name": "if",
      "text": "if (Array.isArray(value)) {\n      return value.length > 0 ? undefined : { message }\n    }",
      "startLine": 117,
      "endLine": 119,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 26,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/validate.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@24-27",
      "type": "method_definition",
      "name": "if",
      "text": "if (error.response) {\n      // Request was made but server responded with something\n      // other than 2xx\n    }",
      "startLine": 24,
      "endLine": 27,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/authApi.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@257-264",
      "type": "function_declaration",
      "name": "isDeclarationInReadyToReviewStatus",
      "text": "function isDeclarationInReadyToReviewStatus(\n  submissionStatus: string | undefined\n) {\n  return !includes(\n    [SUBMISSION_STATUS.DRAFT, SUBMISSION_STATUS.REJECTED, undefined],\n    submissionStatus\n  )\n}",
      "startLine": 257,
      "endLine": 264,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/draftUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@12-33",
      "type": "function_declaration",
      "name": "isMobileDevice",
      "text": "function isMobileDevice() {\n  const IS_MOBILE = true\n  const IS_DESKTOP = false\n\n  if (\n    navigator.userAgent.match(/Android/i) ||\n    navigator.userAgent.match(/webOS/i) ||\n    navigator.userAgent.match(/iPhone/i) ||\n    navigator.userAgent.match(/iPad/i) ||\n    navigator.userAgent.match(/iPod/i) ||\n    navigator.userAgent.match(/BlackBerry/i) ||\n    navigator.userAgent.match(/Windows Phone/i)\n  ) {\n    return IS_MOBILE\n  }\n\n  if (window.outerWidth < 1033) {\n    return IS_MOBILE\n  }\n\n  return IS_DESKTOP\n}",
      "startLine": 12,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/commonUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@35-41",
      "type": "function_declaration",
      "name": "isBase64FileString",
      "text": "function isBase64FileString(str: string) {\n  if (str === '' || str.trim() === '') {\n    return false\n  }\n  const strSplit = str.split(':')\n  return strSplit.length > 0 && strSplit[0] === 'data'\n}",
      "startLine": 35,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/utils/commonUtils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@85-92",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: IFullProps) {\n    super(props)\n    this.state = {\n      data: {},\n      enableSendForUpdateBtn: false,\n      enableArchiveBtn: false\n    }\n  }",
      "startLine": 85,
      "endLine": 92,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/review/RejectRegistrationForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@18-28",
      "type": "function_declaration",
      "name": "TimeMounted",
      "text": "function TimeMounted(props: IProps) {\n  const [startTime] = useState(new Date())\n  const onUnmountRef = useRef(props.onUnmount)\n\n  useEffect(() => {\n    const onUnmount = onUnmountRef.current\n    return () => onUnmount(new Date().getTime() - startTime.getTime())\n  }, [startTime])\n\n  return <>{props.children}</>\n}",
      "startLine": 18,
      "endLine": 28,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/TimeMounted.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@69-194",
      "type": "function_declaration",
      "name": "SignatureUploader",
      "text": "function SignatureUploader({\n  value: signatureData,\n  onChange,\n  modalTitle,\n  maxSizeMb = 2,\n  allowedFileFormats = ['image/png'],\n  ...props\n}: SignatureUploaderProps) {\n  const [signatureDialogOpen, setSignatureDialogOpen] = useState(false)\n  const [signatureValue, setSignatureValue] = useState(EMPTY_STRING)\n  const [signatureError, setSignatureError] = useState(EMPTY_STRING)\n  const intl = useIntl()\n\n  const requiredError =\n    props.required &&\n    !Boolean(signatureData) &&\n    intl.formatMessage(validationMessages.required)\n\n  const error = signatureError || requiredError\n\n  function apply() {\n    setSignatureDialogOpen(false)\n    setSignatureError('')\n    onChange(signatureValue)\n  }\n\n  return (\n    <>\n      {!signatureData && (\n        <>\n          <Stack gap={8}>\n            <Button\n              type=\"secondary\"\n              size=\"medium\"\n              onClick={() => setSignatureDialogOpen(true)}\n              disabled={props.disabled}\n            >\n              <Icon name=\"Pen\" />\n              {intl.formatMessage(messages.signatureOpenSignatureInput)}\n            </Button>\n            <ImageUploader\n              {...props}\n              onChange={async (file) => {\n                const fileSizeMB = file.size / (1024 * 1024) // convert bytes to megabytes\n                if (fileSizeMB > maxSizeMb) {\n                  setSignatureError(\n                    intl.formatMessage(formMessages.fileSizeError)\n                  )\n                  return\n                }\n                if (\n                  !allowedFileFormats.some((format) =>\n                    file.type.includes(format)\n                  )\n                ) {\n                  const formattedFileTypesOfSignatures = allowedFileFormats.map(\n                    (val) => val.split('/')[1]\n                  )\n                  setSignatureError(\n                    intl.formatMessage(formMessages.fileUploadError, {\n                      type: formattedFileTypesOfSignatures.join(', ')\n                    })\n                  )\n                  return\n                }\n                onChange((await getBase64String(file)).toString())\n                setSignatureError('')\n              }}\n            >\n              {intl.formatMessage(buttonMessages.upload)}\n            </ImageUploader>\n          </Stack>\n        </>\n      )}\n      {signatureData && (\n        <SignaturePreview alt={modalTitle} src={signatureData} />\n      )}\n      {signatureData && (\n        <Button\n          type=\"tertiary\"\n          size=\"medium\"\n          onClick={() => {\n            onChange('')\n            setSignatureValue('')\n          }}\n        >\n          {intl.formatMessage(messages.signatureDelete)}\n        </Button>\n      )}\n      {error && <InputError id={`${props.name}_error`}>{error}</InputError>}\n      <ResponsiveModal\n        id={`${props.id}_modal`}\n        title={modalTitle}\n        autoHeight={true}\n        titleHeightAuto={true}\n        width={600}\n        show={signatureDialogOpen}\n        actions={[\n          <Button\n            key=\"cancel\"\n            id=\"modal_cancel\"\n            type=\"tertiary\"\n            onClick={() => setSignatureDialogOpen(false)}\n          >\n            {intl.formatMessage(buttonMessages.cancel)}\n          </Button>,\n          <Button\n            key=\"apply\"\n            id=\"apply_change\"\n            type=\"positive\"\n            disabled={!Boolean(signatureValue)}\n            onClick={apply}\n          >\n            {intl.formatMessage(buttonMessages.apply)}\n          </Button>\n        ]}\n        handleClose={() => setSignatureDialogOpen(false)}\n      >\n        <SignatureDescription>\n          {intl.formatMessage(messages.signatureInputDescription)}\n        </SignatureDescription>\n        <SignCanvas value={signatureData} onChange={setSignatureValue} />\n      </ResponsiveModal>\n    </>\n  )\n}",
      "startLine": 69,
      "endLine": 194,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/SignatureField/SignatureUploader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@89-93",
      "type": "function_declaration",
      "name": "apply",
      "text": "function apply() {\n    setSignatureDialogOpen(false)\n    setSignatureError('')\n    onChange(signatureValue)\n  }",
      "startLine": 89,
      "endLine": 93,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/SignatureField/SignatureUploader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@209-213",
      "type": "function_declaration",
      "name": "handleResize",
      "text": "function handleResize() {\n      if (canvasContainerRef.current) {\n        setCanvasWidth(canvasContainerRef.current.offsetWidth)\n      }\n    }",
      "startLine": 209,
      "endLine": 213,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/SignatureField/SignatureUploader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@171-183",
      "type": "function_declaration",
      "name": "handleSelectFocus",
      "text": "function handleSelectFocus(id: string, isSearchable: boolean) {\n  if (isMobileDevice() && isSearchable) {\n    setTimeout(() => {\n      const inputElement = document.getElementById(`${id}-form-input`)\n\n      if (inputElement) {\n        inputElement.scrollIntoView({\n          behavior: 'smooth'\n        })\n      }\n    }, 20)\n  }\n}",
      "startLine": 171,
      "endLine": 183,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/FormFieldGenerator.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@875-894",
      "type": "method_definition",
      "name": "componentDidUpdate",
      "text": "componentDidUpdate(prevProps: Props) {\n    const userChangedForm = !isEqual(this.props.values, prevProps.values)\n    const sectionChanged = prevProps.id !== this.props.id\n\n    if (userChangedForm) {\n      prevProps.onChange(this.props.values)\n    }\n\n    if (sectionChanged) {\n      prevProps.resetForm()\n      if (this.props.setAllFieldsDirty) {\n        this.showValidationErrors(this.props.fields)\n      } else if (\n        this.props.fieldsToShowValidationErrors &&\n        this.props.fieldsToShowValidationErrors.length > 0\n      ) {\n        this.showValidationErrors(this.props.fieldsToShowValidationErrors)\n      }\n    }\n  }",
      "startLine": 875,
      "endLine": 894,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/FormFieldGenerator.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@896-926",
      "type": "method_definition",
      "name": "componentDidMount",
      "text": "async componentDidMount() {\n    if (this.props.setAllFieldsDirty) {\n      this.showValidationErrors(this.props.fields)\n    }\n\n    if (this.props.onSetTouched) {\n      this.props.onSetTouched(this.props.setTouched)\n    }\n\n    if (window.location.hash) {\n      setTimeout(() => {\n        const newScroll = document.documentElement.scrollTop - 100\n        window.scrollTo(0, newScroll)\n\n        const focusedElementId = window.location.hash.replace('#', '')\n        let focusedElement = document.querySelector(\n          `input[id*=\"${focusedElementId}\"]`\n        ) as HTMLElement\n        if (focusedElement === null) {\n          // Handling for Select\n          focusedElement = document.querySelector(\n            `${window.location.hash} input`\n          ) as HTMLElement\n          focusedElement && focusedElement.focus()\n        } else {\n          // Handling for Input\n          focusedElement && focusedElement.focus()\n        }\n      }, 0)\n    }\n  }",
      "startLine": 896,
      "endLine": 926,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/FormFieldGenerator.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@20-35",
      "type": "function_declaration",
      "name": "Authenticated",
      "text": "function Authenticated() {\n  const intl = useIntl()\n  return (\n    <Pill\n      type=\"active\"\n      size=\"small\"\n      pillTheme=\"dark\"\n      label={\n        <>\n          <StyledIcon name=\"Fingerprint\" size=\"small\" />\n          {intl.formatMessage(messages.authenticated.title)}\n        </>\n      }\n    />\n  )\n}",
      "startLine": 20,
      "endLine": 35,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/IDVerification/VerificationPill.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@37-52",
      "type": "function_declaration",
      "name": "Verified",
      "text": "function Verified() {\n  const intl = useIntl()\n  return (\n    <Pill\n      type=\"default\"\n      size=\"small\"\n      pillTheme=\"dark\"\n      label={\n        <>\n          <StyledIcon name=\"CircleWavyCheck\" size=\"small\" />\n          {intl.formatMessage(messages.verified.title)}\n        </>\n      }\n    />\n  )\n}",
      "startLine": 37,
      "endLine": 52,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/IDVerification/VerificationPill.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@54-69",
      "type": "function_declaration",
      "name": "Failed",
      "text": "function Failed() {\n  const intl = useIntl()\n  return (\n    <Pill\n      type=\"inactive\"\n      size=\"small\"\n      pillTheme=\"dark\"\n      label={\n        <>\n          <StyledIcon name=\"X\" size=\"small\" />\n          {intl.formatMessage(messages.failed.title)}\n        </>\n      }\n    />\n  )\n}",
      "startLine": 54,
      "endLine": 69,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/IDVerification/VerificationPill.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@71-86",
      "type": "function_declaration",
      "name": "FailedFetchIdDetails",
      "text": "function FailedFetchIdDetails() {\n  const intl = useIntl()\n  return (\n    <Pill\n      type=\"inactive\"\n      size=\"small\"\n      pillTheme=\"dark\"\n      label={\n        <>\n          <StyledIcon name=\"X\" size=\"small\" />\n          {intl.formatMessage(messages.failedFetchIdDetails.title)}\n        </>\n      }\n    />\n  )\n}",
      "startLine": 71,
      "endLine": 86,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/IDVerification/VerificationPill.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@65-70",
      "type": "method_definition",
      "name": "if",
      "text": "if (data || error) {\n      // remove query parameters from the URL after successful or failed callback request\n      const url = new URL(window.location.href)\n      url.search = '' // Remove all query parameters\n      window.history.replaceState({}, document.title, url)\n    }",
      "startLine": 65,
      "endLine": 70,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/LinkButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@89-96",
      "type": "function_declaration",
      "name": "checkParamsPresentInURL",
      "text": "function checkParamsPresentInURL() {\n      for (const [key, value] of Object.entries(params)) {\n        if (urlParams.get(key) !== value) {\n          return false\n        }\n      }\n      return true\n    }",
      "startLine": 89,
      "endLine": 96,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/LinkButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@24-36",
      "type": "function_declaration",
      "name": "FormLoader",
      "text": "function FormLoader(props: FormLoaderProps) {\n  const { loadingText, id } = props\n  return (\n    <Container>\n      <Loader\n        id={id}\n        loadingText={loadingText}\n        marginPercent={5}\n        flexDirection=\"column-reverse\"\n      />\n    </Container>\n  )\n}",
      "startLine": 24,
      "endLine": 36,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/FormLoader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@20-25",
      "type": "function_declaration",
      "name": "evalTemplateString",
      "text": "function evalTemplateString(\n  str: string,\n  ...evalParams: [IFormSectionData, IOfflineData, IFormData, UserDetails | null]\n) {\n  return evalExpressionInFieldDefinition(`\\`${str}\\``, ...evalParams)\n}",
      "startLine": 20,
      "endLine": 25,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/http.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-38",
      "type": "function_declaration",
      "name": "transformRequestBody",
      "text": "function transformRequestBody(\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  body: Record<string, any>,\n  ...evalParams: [IFormSectionData, IOfflineData, IFormData, UserDetails | null]\n) {\n  return Object.fromEntries(\n    Object.entries(body).map(([key, value]) => [\n      key,\n      evalTemplateString(value, ...evalParams)\n    ])\n  )\n}",
      "startLine": 27,
      "endLine": 38,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/http.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@39-68",
      "type": "function_declaration",
      "name": "transformHttpFieldIntoRequest",
      "text": "function transformHttpFieldIntoRequest(\n  field: IHttpFormField,\n  ...evalParams: [IFormSectionData, IOfflineData, IFormData, UserDetails | null]\n) {\n  const { options: requestOptions } = field\n  const baseUrl = window.location.origin\n  const url = new URL(requestOptions.url, baseUrl)\n  const authHeader = {\n    Authorization: `Bearer ${getToken()}`\n  }\n  if (requestOptions.params) {\n    Object.keys(requestOptions.params).forEach((key) => {\n      url.searchParams.append(\n        key,\n        evalTemplateString(requestOptions.params![key], ...evalParams)\n      )\n    })\n  }\n  const request = new Request(url.toString(), {\n    headers: {\n      ...requestOptions.headers,\n      ...authHeader\n    },\n    body: requestOptions.body\n      ? JSON.stringify(transformRequestBody(requestOptions.body, ...evalParams))\n      : null,\n    method: requestOptions.method\n  })\n  return fetch(request)\n}",
      "startLine": 39,
      "endLine": 68,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/http.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@70-90",
      "type": "function_declaration",
      "name": "httpErrorResponseValidator",
      "text": "function httpErrorResponseValidator(httpFieldName: string): Validation {\n  return function (\n    _: unknown,\n    __: unknown,\n    ___: unknown,\n    form?: IFormSectionData\n  ) {\n    const errorInHttpField = get(\n      form,\n      `${httpFieldName}.error.message`\n    )?.toString()\n    if (errorInHttpField) {\n      return {\n        message: {\n          id: 'httpError',\n          defaultMessage: errorInHttpField\n        }\n      }\n    }\n  }\n}",
      "startLine": 70,
      "endLine": 90,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/http.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@101-114",
      "type": "class_declaration",
      "name": "HttpError",
      "text": "class HttpError extends Error {\n  statusCode: number\n  constructor({\n    statusCode,\n    message\n  }: {\n    statusCode: number\n    message: string\n  }) {\n    super()\n    this.statusCode = statusCode\n    this.message = message\n  }\n}",
      "startLine": 101,
      "endLine": 114,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/http.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@103-113",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor({\n    statusCode,\n    message\n  }: {\n    statusCode: number\n    message: string\n  }) {\n    super()\n    this.statusCode = statusCode\n    this.message = message\n  }",
      "startLine": 103,
      "endLine": 113,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/http.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@36-77",
      "type": "function_declaration",
      "name": "ButtonField",
      "text": "function ButtonField(props: ButtonFieldProps) {\n  const {\n    fieldDefinition,\n    fields,\n    setFieldValue,\n    setFieldTouched,\n    values,\n    draftData,\n    ...buttonProps\n  } = props\n  const { icon, loadingLabel, buttonLabel } = fieldDefinition\n  const offlineCountryConfig = useSelector(getOfflineData)\n  const userDetails = useSelector(getUserDetails)\n  // safe to assume that the trigger is always there because of the form validation in config\n  const trigger = fields.find(\n    (f) => f.name === fieldDefinition.options.trigger\n  )!\n  const onChange: Parameters<typeof useHttp>[1] = ({\n    data,\n    error,\n    loading,\n    isCompleted\n  }) => {\n    if (isCompleted) {\n      /**\n       * Form can have buttons having the same triggers. For example, if a button works as an id\n       * generator and is required, then it prevents the user in review page to submit the declaration\n       * without clicking it, which is fine. But if a problem occurs in the id generating server, then\n       * the user can never submit the form and the flow is blocked forever. To avoid this scenario and\n       * to keep the user experience smooth, a conditional button with the exact same trigger and with identical\n       * appearance of the generator button is shown with the error message that trigger gets after the request.\n       * This button is not required.\n       * The UX is shown in the screen capture: https://github.com/opencrvs/opencrvs-core/pull/7822#issue-2608396705\n       */\n      const fieldsHavingSameTrigger = fields.filter(\n        (f) => isFieldButton(f) && f.options.trigger === trigger.name\n      )\n\n      fieldsHavingSameTrigger.forEach((f) => setFieldTouched(f.name))\n    }\n    setFieldValue(trigger.name, { loading, data, error } as IFormFieldValue)\n  }",
      "startLine": 36,
      "endLine": 77,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/Button.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@59-75",
      "type": "method_definition",
      "name": "if",
      "text": "if (isCompleted) {\n      /**\n       * Form can have buttons having the same triggers. For example, if a button works as an id\n       * generator and is required, then it prevents the user in review page to submit the declaration\n       * without clicking it, which is fine. But if a problem occurs in the id generating server, then\n       * the user can never submit the form and the flow is blocked forever. To avoid this scenario and\n       * to keep the user experience smooth, a conditional button with the exact same trigger and with identical\n       * appearance of the generator button is shown with the error message that trigger gets after the request.\n       * This button is not required.\n       * The UX is shown in the screen capture: https://github.com/opencrvs/opencrvs-core/pull/7822#issue-2608396705\n       */\n      const fieldsHavingSameTrigger = fields.filter(\n        (f) => isFieldButton(f) && f.options.trigger === trigger.name\n      )\n\n      fieldsHavingSameTrigger.forEach((f) => setFieldTouched(f.name))\n    }",
      "startLine": 59,
      "endLine": 75,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/Button.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@36-57",
      "type": "function_declaration",
      "name": "RouteComponentProps",
      "text": "function withRouter<ComponentProps extends RouteComponentProps>(\n  Component: React.ComponentType<ComponentProps>\n) {\n  function ComponentWithRouterProp(props: Omit<ComponentProps, 'router'>) {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n\n    /**\n     * For backwards compatibility, match is added to the router prop.\n     */\n    const match = { params }\n    return (\n      <Component\n        {...(props as ComponentProps)}\n        router={{ location, navigate, params, match }}\n      />\n    )\n  }\n\n  return ComponentWithRouterProp\n}",
      "startLine": 36,
      "endLine": 57,
      "parentType": "export_statement",
      "childrenTypes": [
        "ERROR",
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/WithRouterProps.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@39-54",
      "type": "function_declaration",
      "name": "ComponentWithRouterProp",
      "text": "function ComponentWithRouterProp(props: Omit<ComponentProps, 'router'>) {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n\n    /**\n     * For backwards compatibility, match is added to the router prop.\n     */\n    const match = { params }\n    return (\n      <Component\n        {...(props as ComponentProps)}\n        router={{ location, navigate, params, match }}\n      />\n    )\n  }",
      "startLine": 39,
      "endLine": 54,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/WithRouterProps.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@55-100",
      "type": "function_declaration",
      "name": "DateRangePickerForFormFieldComponent",
      "text": "function DateRangePickerForFormFieldComponent(props: IDateRangePickerProps) {\n  const { intl } = props\n  const [modalVisible, setModalVisible] = useState<boolean>(false)\n\n  const handleLinkOnClick = () => {\n    setModalVisible(true)\n  }\n\n  const handleExactDateChange = (val: string) => {\n    props.onChange({ ...props.value, exact: val })\n  }\n\n  const handleDateRangeChange = ({ startDate, endDate }: IDateRange) => {\n    props.onChange({\n      ...props.value,\n      rangeStart: startDate?.toISOString(),\n      rangeEnd: endDate?.toISOString(),\n      isDateRangeActive: true\n    })\n  }\n\n  const handleDateRangeActiveChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    props.onChange({\n      ...props.value,\n      isDateRangeActive: event.target.checked\n    })\n  }\n\n  const formatDateRangeLabel = (\n    rangeStart: string | undefined,\n    rangeEnd: string | undefined\n  ) => {\n    if (!rangeStart || !rangeEnd) {\n      return\n    }\n    const dateStartLocale =\n      rangeStart && format(new Date(rangeStart), 'MMMM yyyy')\n    const dateEndLocale = rangeEnd && format(new Date(rangeEnd), 'MMMM yyyy')\n\n    return intl.formatMessage(messages.dateRangePickerCheckboxLabel, {\n      rangeStart: dateStartLocale,\n      rangeEnd: dateEndLocale\n    })\n  }",
      "startLine": 55,
      "endLine": 100,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DateRangePickerForFormField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@408-437",
      "type": "function_declaration",
      "name": "updateDateField",
      "text": "async function updateDateField(\n    wrapper: ReactWrapper,\n    id: string,\n    dateValue: Date\n  ) {\n    const dayInput = wrapper.find(`input#${id}-dd`).hostNodes()\n    const monthInput = wrapper.find(`input#${id}-mm`).hostNodes()\n    const yearInput = wrapper.find(`input#${id}-yyyy`).hostNodes()\n\n    dayInput.simulate('focus')\n    dayInput.simulate('change', {\n      target: { id: `${id}-dd`, value: dateValue.getDay().toString() }\n    })\n    dayInput.simulate('blur')\n\n    monthInput.simulate('focus')\n    monthInput.simulate('change', {\n      target: { id: `${id}-mm`, value: (dateValue.getMonth() + 1).toString() }\n    })\n    monthInput.simulate('blur')\n\n    yearInput.simulate('focus')\n    yearInput.simulate('change', {\n      target: { id: `${id}-yyyy`, value: dateValue.getFullYear().toString() }\n    })\n    yearInput.simulate('blur')\n\n    await flushPromises()\n    component.update()\n  }",
      "startLine": 408,
      "endLine": 437,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/form/FormFieldGenerator.test.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@73-98",
      "type": "method_definition",
      "name": "componentDidUpdate",
      "text": "componentDidUpdate(prevProps: IFullProps) {\n    const hash = this.props.router.location?.hash\n    const hashChanged = hash && hash !== prevProps.router.location.hash\n    const appName = this.props.offlineData\n      ? this.props.offlineData.config.APPLICATION_NAME\n      : ''\n    if (appName) document.title = appName\n    if (hashChanged) {\n      // Push onto callback queue so it runs after the DOM is updated,\n      // this is required when navigating from a different page so that\n      // the element is rendered on the page before trying to getElementById.\n      setTimeout(() => {\n        const id = hash.replace('#', '')\n        const element = document.getElementById(id)\n        if (element) {\n          element.scrollIntoView()\n        }\n      }, 0)\n    }\n    if (this.props.loadingError && isNavigatorOnline()) {\n      this.props.showConfigurationErrorNotification()\n    }\n    if (prevProps.loadingError && !this.props.loadingError) {\n      this.props.hideConfigurationErrorNotification()\n    }\n  }",
      "startLine": 73,
      "endLine": 98,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 15,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/Page.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@179-186",
      "type": "method_definition",
      "name": "if",
      "text": "if (!assignment) {\n      const assign = await openModal<boolean>((close) => (\n        <AssignModal close={close} />\n      ))\n      if (assign) {\n        download()\n      }\n    }",
      "startLine": 179,
      "endLine": 186,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/interface/DownloadButton.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@189-202",
      "type": "method_definition",
      "name": "stopPropagation",
      "text": "stopPropagation()\n  }\n\n  if (status && LOADING_STATUSES.includes(status)) {\n    return (\n      <StatusIndicator\n        isLoading={true}\n        className={className}\n        id={`${id}-download-loading`}\n      >\n        <Spinner id={`action-loading-${id}`} size={24} />\n      </StatusIndicator>\n    )\n  }",
      "startLine": 189,
      "endLine": 202,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/interface/DownloadButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@128-134",
      "type": "function_declaration",
      "name": "LegendDot",
      "text": "function LegendDot(props: React.HTMLAttributes<SVGElement>) {\n  return (\n    <svg width={10} height={10} viewBox=\"0 0 10 10\" fill=\"none\" {...props}>\n      <rect width={10} height={10} rx={5} fill={props.color} />\n    </svg>\n  )\n}",
      "startLine": 128,
      "endLine": 134,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/charts/RegRatesLineChart.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@24-30",
      "type": "function_declaration",
      "name": "LoadingSpinner",
      "text": "function LoadingSpinner() {\n  return (\n    <SpinnerWrapper>\n      <Spinner id=\"draft_write_loading\" />\n    </SpinnerWrapper>\n  )\n}",
      "startLine": 24,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DraftLoadingSpinner.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@129-140",
      "type": "function_declaration",
      "name": "toggleBodyScroll",
      "text": "function toggleBodyScroll() {\n      const body = document.querySelector('body') as HTMLBodyElement\n      if (modalVisible) {\n        body.style.overflow = 'hidden'\n        const searchInput = document.getElementById('locationSearchInput')\n        if (searchInput) {\n          searchInput.focus()\n        }\n      } else {\n        body.style.removeProperty('overflow')\n      }\n    }",
      "startLine": 129,
      "endLine": 140,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 17,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/LocationPicker.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@47-57",
      "type": "function_declaration",
      "name": "getMonthsShort",
      "text": "function getMonthsShort(locale = 'en') {\n  const months = []\n  for (let i = 0; i < 12; i++) {\n    months.push(\n      new Date(1970, i).toLocaleString(locale, {\n        month: 'short'\n      })\n    )\n  }\n  return months\n}",
      "startLine": 47,
      "endLine": 57,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DateRangePicker.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@87-89",
      "type": "function_declaration",
      "name": "isPresetNavButton",
      "text": "function isPresetNavButton(button: IPresetButton): button is IPresetNavButton {\n  return typeof (button as IActionObject).handler === 'function'\n}",
      "startLine": 87,
      "endLine": 89,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DateRangePicker.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@381-757",
      "type": "function_declaration",
      "name": "DateRangePickerComponent",
      "text": "function DateRangePickerComponent(props: IDateRangePickerProps) {\n  const [modalVisible, setModalVisible] = useState<boolean>(\n    props.usedInsideHOC ? true : false\n  )\n  const { intl } = props\n\n  window.__localeId__ = intl.locale\n  const startDateFromProps = props.startDate\n  const endDateFromProps = props.endDate\n\n  const [startDate, setStartDate] = useState<Date>(startDateFromProps)\n  const [endDate, setEndDate] = useState<Date>(endDateFromProps)\n\n  const [startDateNav, setStartDateNav] = useState<Date>(startDateFromProps)\n  const [endDateNav, setEndDateNav] = useState<Date>(endDateFromProps)\n\n  const todaysDate = new Date(Date.now())\n  const [presetOptions, updatePresetOptions] = useState<IPresetButton[]>([])\n  const [activeRoute, setActiveRoute] = useState<PATHS>(\n    props.usedInsideHOC ? START_MONTH : PRESET\n  )\n\n  const months = useMemo(() => {\n    return getMonthsShort(intl.locale)\n  }, [intl.locale])\n\n  useEffect(() => {\n    function generatePresetOptions(): IPresetButton[] {\n      const today = new Date(Date.now())\n      const currentYear = today.getFullYear()\n      const date30DaysBack = subDays(today, 30)\n\n      const date12MonthsBack = startOfMonth(subMonths(new Date(Date.now()), 11))\n\n      const lastYear = new Date(currentYear - 1, 0)\n      const last2Year = new Date(currentYear - 2, 0)\n      const last3Year = new Date(currentYear - 3, 0)\n\n      return [\n        {\n          key: 'last30Days',\n          label: intl.formatMessage(constantsMessages.last30Days),\n          startDate: date30DaysBack,\n          endDate: today\n        },\n        {\n          key: 'last12Months',\n          label: intl.formatMessage(constantsMessages.last12Months),\n          startDate: date12MonthsBack,\n          endDate: today\n        },\n        {\n          key: 'lastYear',\n          label: format(lastYear, 'yyyy'),\n          startDate: lastYear,\n          endDate: endOfYear(lastYear)\n        },\n        {\n          key: 'previousOfLastYear',\n          label: format(last2Year, 'yyyy'),\n          startDate: last2Year,\n          endDate: endOfYear(last2Year)\n        },\n        {\n          key: 'previousOfLast2Years',\n          label: format(last3Year, 'yyyy'),\n          startDate: last3Year,\n          endDate: endOfYear(last3Year)\n        },\n        {\n          key: 'customDateRangeNav',\n          label: intl.formatMessage(constantsMessages.customTimePeriod),\n          handler: () => setActiveRoute(START_MONTH)\n        }\n      ]\n    }\n\n    updatePresetOptions(generatePresetOptions())\n  }, [intl])\n\n  useEffect(() => {\n    function getDerivedStateFromProps() {\n      const body = document.querySelector('body') as HTMLBodyElement\n      if (!modalVisible) {\n        setStartDate(props.startDate)\n        setEndDate(props.endDate)\n        setStartDateNav(props.startDate)\n        setEndDateNav(props.endDate)\n        body.style.removeProperty('overflow')\n        setActiveRoute(PRESET)\n      } else {\n        body.style.overflow = 'auto'\n      }\n    }\n\n    getDerivedStateFromProps()\n  }, [modalVisible, props.endDate, props.startDate])\n\n  function MonthSelector({\n    id,\n    date,\n    label,\n    onSelectDate,\n    minDate,\n    maxDate,\n    hideSelectedMonthOnLabel,\n    selectedDate,\n    onNavigateDate\n  }: MonthSelectorProps) {\n    const limitDate = new Date(LIMIT_YEAR_PAST_RECORDS)\n    const year = date.getFullYear().toString()\n\n    return (\n      <MonthContainer id={id}>\n        <MonthSelectorHeader>\n          <LabelContainer>\n            {selectedDate && !hideSelectedMonthOnLabel\n              ? `${label}: ${format(selectedDate, 'MMMM yyyy')}`\n              : label}\n          </LabelContainer>\n          <NavigatorContainer>\n            <CircleButton\n              id={`${id}-prev`}\n              onClick={() => onNavigateDate(subYears(date, 1))}\n              disabled={isSameYear(date, limitDate)}\n            >\n              <ChevronLeft />\n            </CircleButton>\n            <YearLabelContainer id={`${id}-year-label`}>\n              {format(date, 'yyyy')}\n            </YearLabelContainer>\n            <CircleButton\n              id={`${id}-next`}\n              onClick={() => {\n                const nextDate = addYears(date, 1)\n                const finalDateNavigateTo = isAfter(nextDate, todaysDate)\n                  ? todaysDate\n                  : nextDate\n                onNavigateDate(finalDateNavigateTo)\n              }}\n              disabled={isSameYear(date, todaysDate)}\n            >\n              <ChevronRight />\n            </CircleButton>\n          </NavigatorContainer>\n        </MonthSelectorHeader>\n        <MonthButtonsContainer>\n          {months.map((month, index) => {\n            const monthDate = new Date(Number(year), index)\n            return (\n              <MonthButton\n                id={`${id}-${month.toLowerCase()}`}\n                key={index}\n                disabled={\n                  (minDate && isBefore(monthDate, minDate)) ||\n                  isAfter(monthDate, maxDate)\n                }\n                selected={\n                  isSameMonth(selectedDate, monthDate) &&\n                  isSameYear(selectedDate, monthDate)\n                }\n                onClick={() => {\n                  onSelectDate(monthDate)\n                }}\n              >\n                {month}\n              </MonthButton>\n            )\n          })}\n        </MonthButtonsContainer>\n      </MonthContainer>\n    )\n  }\n\n  function PresetSelector(props: PresetSelectorProps) {\n    return (\n      <PresetContainer id={props.id}>\n        {presetOptions.map((item) => {\n          return isPresetNavButton(item) ? (\n            <PresetRangeButton\n              id={item.key}\n              key={item.key}\n              onClick={item.handler}\n            >\n              {item.label}\n            </PresetRangeButton>\n          ) : (\n            <PresetRangeButton\n              id={item.key}\n              key={item.key}\n              selected={\n                isSameMonth(startDate, item.startDate) &&\n                isSameMonth(endDate, item.endDate)\n              }\n              onClick={() =>\n                props.onSelectPreset({\n                  startDate: item.startDate,\n                  endDate: item.endDate\n                })\n              }\n            >\n              {item.label}\n            </PresetRangeButton>\n          )\n        })}\n      </PresetContainer>\n    )\n  }\n\n  const selectedPresetFromProps = presetOptions.find(\n    (item) =>\n      !isPresetNavButton(item) &&\n      isSameMonth(startDateFromProps, item.startDate) &&\n      isSameMonth(endDateFromProps, item.endDate)\n  )\n\n  const routes: ROUTES = {\n    [PRESET]: {\n      renderComponent: () => (\n        <PresetSelector\n          id=\"preset-small\"\n          onSelectPreset={({ startDate, endDate }) => {\n            setStartDate(startDate)\n            setEndDate(endDate)\n\n            props.onDatesChange({\n              startDate: startDate,\n              endDate: endDate\n            })\n\n            setModalVisible(false)\n          }}\n        />\n      )\n    },\n    [START_MONTH]: {\n      renderComponent: () => (\n        <MonthSelector\n          id=\"start-date-small\"\n          date={startDateNav}\n          onNavigateDate={setStartDateNav}\n          label={intl.formatMessage(constantsMessages.from)}\n          onSelectDate={(date) => {\n            setStartDate(date)\n            setActiveRoute(END_MONTH)\n          }}\n          maxDate={todaysDate}\n          selectedDate={startDate}\n          hideSelectedMonthOnLabel\n        />\n      ),\n      hideHeader: true\n    },\n    [END_MONTH]: {\n      renderComponent: () => (\n        <MonthSelector\n          id=\"end-date-small\"\n          date={endDateNav}\n          onNavigateDate={setEndDateNav}\n          label={intl.formatMessage(constantsMessages.toCapitalized)}\n          selectedDate={endDate}\n          onSelectDate={(date) => {\n            props.onDatesChange({\n              startDate: startDate,\n              endDate: endOfDay(endOfMonth(date))\n            })\n            setModalVisible(false)\n            props.closeModalFromHOC && props.closeModalFromHOC()\n          }}\n          minDate={addDays(startDate, 1)}\n          maxDate={todaysDate}\n          hideSelectedMonthOnLabel\n        />\n      ),\n      hideHeader: true\n    }\n  }\n\n  return (\n    <div>\n      {!props.usedInsideHOC && (\n        <PickerButton\n          id=\"date-range-picker-action\"\n          onClick={() => setModalVisible(true)}\n        >\n          <ContentWrapper>\n            <span>\n              {selectedPresetFromProps\n                ? selectedPresetFromProps.label\n                : `${format(startDateFromProps, 'MMMM yyyy')} - ${format(\n                    endDateFromProps,\n                    'MMMM yyyy'\n                  )}`}\n            </span>\n            <Calendar />\n          </ContentWrapper>\n        </PickerButton>\n      )}\n      {modalVisible && (\n        <>\n          <ModalContainer className={props.className} id=\"picker-modal\">\n            <ModalHeader hide={routes[activeRoute].hideHeader}>\n              <TitleContent>\n                <CalendarGrey />\n                <span>{intl.formatMessage(constantsMessages.timePeriod)}</span>\n              </TitleContent>\n              <CircleButton\n                id=\"close-btn\"\n                type=\"button\"\n                onClick={() => {\n                  setModalVisible(false)\n                  props.closeModalFromHOC && props.closeModalFromHOC()\n                }}\n              >\n                <Cross color=\"currentColor\" />\n              </CircleButton>\n            </ModalHeader>\n            <ModalBody>\n              {!props.usedInsideHOC && (\n                <PresetSelector\n                  onSelectPreset={({ startDate, endDate }) => {\n                    setStartDateNav(startDate)\n                    setEndDateNav(endDate)\n                    setStartDate(startDate)\n                    setEndDate(endDate)\n                  }}\n                />\n              )}\n              <MonthSelector\n                date={startDateNav}\n                onNavigateDate={setStartDateNav}\n                label={intl.formatMessage(constantsMessages.from)}\n                selectedDate={startDate}\n                onSelectDate={setStartDate}\n                maxDate={subDays(endDate, 1)}\n              />\n              <MonthSelector\n                date={endDateNav}\n                onNavigateDate={setEndDateNav}\n                label={intl.formatMessage(constantsMessages.toCapitalized)}\n                selectedDate={endDate}\n                onSelectDate={setEndDate}\n                maxDate={todaysDate}\n              />\n            </ModalBody>\n            <ModalBodyMobile id=\"picker-modal-mobile\">\n              {routes[activeRoute].renderComponent()}\n            </ModalBodyMobile>\n            <ModalFooter>\n              <StyledPrimaryButton\n                id=\"date-range-confirm-action\"\n                onClick={() => {\n                  props.onDatesChange({\n                    startDate: startDate,\n                    endDate: endOfDay(endOfMonth(endDate))\n                  })\n                  setModalVisible(false)\n                  props.closeModalFromHOC && props.closeModalFromHOC()\n                }}\n                disabled={isAfter(startDate, endDate)}\n              >\n                {intl.formatMessage(buttonMessages.select)}\n              </StyledPrimaryButton>\n            </ModalFooter>\n          </ModalContainer>\n          <CancelableArea\n            id=\"cancelable-area\"\n            onClick={() => {\n              setModalVisible(false)\n              props.closeModalFromHOC && props.closeModalFromHOC()\n            }}\n          />\n        </>\n      )}\n    </div>\n  )\n}",
      "startLine": 381,
      "endLine": 757,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DateRangePicker.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@408-456",
      "type": "function_declaration",
      "name": "generatePresetOptions",
      "text": "function generatePresetOptions(): IPresetButton[] {\n      const today = new Date(Date.now())\n      const currentYear = today.getFullYear()\n      const date30DaysBack = subDays(today, 30)\n\n      const date12MonthsBack = startOfMonth(subMonths(new Date(Date.now()), 11))\n\n      const lastYear = new Date(currentYear - 1, 0)\n      const last2Year = new Date(currentYear - 2, 0)\n      const last3Year = new Date(currentYear - 3, 0)\n\n      return [\n        {\n          key: 'last30Days',\n          label: intl.formatMessage(constantsMessages.last30Days),\n          startDate: date30DaysBack,\n          endDate: today\n        },\n        {\n          key: 'last12Months',\n          label: intl.formatMessage(constantsMessages.last12Months),\n          startDate: date12MonthsBack,\n          endDate: today\n        },\n        {\n          key: 'lastYear',\n          label: format(lastYear, 'yyyy'),\n          startDate: lastYear,\n          endDate: endOfYear(lastYear)\n        },\n        {\n          key: 'previousOfLastYear',\n          label: format(last2Year, 'yyyy'),\n          startDate: last2Year,\n          endDate: endOfYear(last2Year)\n        },\n        {\n          key: 'previousOfLast2Years',\n          label: format(last3Year, 'yyyy'),\n          startDate: last3Year,\n          endDate: endOfYear(last3Year)\n        },\n        {\n          key: 'customDateRangeNav',\n          label: intl.formatMessage(constantsMessages.customTimePeriod),\n          handler: () => setActiveRoute(START_MONTH)\n        }\n      ]\n    }",
      "startLine": 408,
      "endLine": 456,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DateRangePicker.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@462-474",
      "type": "function_declaration",
      "name": "getDerivedStateFromProps",
      "text": "function getDerivedStateFromProps() {\n      const body = document.querySelector('body') as HTMLBodyElement\n      if (!modalVisible) {\n        setStartDate(props.startDate)\n        setEndDate(props.endDate)\n        setStartDateNav(props.startDate)\n        setEndDateNav(props.endDate)\n        body.style.removeProperty('overflow')\n        setActiveRoute(PRESET)\n      } else {\n        body.style.overflow = 'auto'\n      }\n    }",
      "startLine": 462,
      "endLine": 474,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DateRangePicker.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@479-553",
      "type": "function_declaration",
      "name": "MonthSelector",
      "text": "function MonthSelector({\n    id,\n    date,\n    label,\n    onSelectDate,\n    minDate,\n    maxDate,\n    hideSelectedMonthOnLabel,\n    selectedDate,\n    onNavigateDate\n  }: MonthSelectorProps) {\n    const limitDate = new Date(LIMIT_YEAR_PAST_RECORDS)\n    const year = date.getFullYear().toString()\n\n    return (\n      <MonthContainer id={id}>\n        <MonthSelectorHeader>\n          <LabelContainer>\n            {selectedDate && !hideSelectedMonthOnLabel\n              ? `${label}: ${format(selectedDate, 'MMMM yyyy')}`\n              : label}\n          </LabelContainer>\n          <NavigatorContainer>\n            <CircleButton\n              id={`${id}-prev`}\n              onClick={() => onNavigateDate(subYears(date, 1))}\n              disabled={isSameYear(date, limitDate)}\n            >\n              <ChevronLeft />\n            </CircleButton>\n            <YearLabelContainer id={`${id}-year-label`}>\n              {format(date, 'yyyy')}\n            </YearLabelContainer>\n            <CircleButton\n              id={`${id}-next`}\n              onClick={() => {\n                const nextDate = addYears(date, 1)\n                const finalDateNavigateTo = isAfter(nextDate, todaysDate)\n                  ? todaysDate\n                  : nextDate\n                onNavigateDate(finalDateNavigateTo)\n              }}\n              disabled={isSameYear(date, todaysDate)}\n            >\n              <ChevronRight />\n            </CircleButton>\n          </NavigatorContainer>\n        </MonthSelectorHeader>\n        <MonthButtonsContainer>\n          {months.map((month, index) => {\n            const monthDate = new Date(Number(year), index)\n            return (\n              <MonthButton\n                id={`${id}-${month.toLowerCase()}`}\n                key={index}\n                disabled={\n                  (minDate && isBefore(monthDate, minDate)) ||\n                  isAfter(monthDate, maxDate)\n                }\n                selected={\n                  isSameMonth(selectedDate, monthDate) &&\n                  isSameYear(selectedDate, monthDate)\n                }\n                onClick={() => {\n                  onSelectDate(monthDate)\n                }}\n              >\n                {month}\n              </MonthButton>\n            )\n          })}\n        </MonthButtonsContainer>\n      </MonthContainer>\n    )\n  }",
      "startLine": 479,
      "endLine": 553,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DateRangePicker.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@555-588",
      "type": "function_declaration",
      "name": "PresetSelector",
      "text": "function PresetSelector(props: PresetSelectorProps) {\n    return (\n      <PresetContainer id={props.id}>\n        {presetOptions.map((item) => {\n          return isPresetNavButton(item) ? (\n            <PresetRangeButton\n              id={item.key}\n              key={item.key}\n              onClick={item.handler}\n            >\n              {item.label}\n            </PresetRangeButton>\n          ) : (\n            <PresetRangeButton\n              id={item.key}\n              key={item.key}\n              selected={\n                isSameMonth(startDate, item.startDate) &&\n                isSameMonth(endDate, item.endDate)\n              }\n              onClick={() =>\n                props.onSelectPreset({\n                  startDate: item.startDate,\n                  endDate: item.endDate\n                })\n              }\n            >\n              {item.label}\n            </PresetRangeButton>\n          )\n        })}\n      </PresetContainer>\n    )\n  }",
      "startLine": 555,
      "endLine": 588,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/DateRangePicker.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@29-48",
      "type": "function_declaration",
      "name": "Avatar",
      "text": "function Avatar({ name, avatar, ...props }: IProps) {\n  const [error, setError] = React.useState<boolean>(false)\n\n  if (!error && (name || avatar)) {\n    return (\n      <AvatarImage\n        width={64}\n        height={64}\n        src={\n          avatar\n            ? avatar.data\n            : `${AVATAR_API}${encodeURIComponent(name!).replace(/%20/g, '+')}`\n        }\n        onError={() => setError(true)}\n        {...props}\n      />\n    )\n  }\n  return <DefaultAvatar {...props} />\n}",
      "startLine": 29,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/Avatar/Avatar.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@34-53",
      "type": "function_declaration",
      "name": "AvatarSmall",
      "text": "function AvatarSmall({ name, avatar, ...props }: IProps) {\n  const [error, setError] = React.useState<boolean>(false)\n\n  if (!error && (name || avatar)) {\n    return (\n      <AvatarImage\n        width={36}\n        height={36}\n        src={\n          avatar\n            ? avatar.data\n            : `${AVATAR_API}${encodeURIComponent(name!).replace(/%20/g, '+')}`\n        }\n        onError={() => setError(true)}\n        {...props}\n      />\n    )\n  }\n  return <DefaultAvatar {...props} />\n}",
      "startLine": 34,
      "endLine": 53,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/Avatar/AvatarSmall.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@29-48",
      "type": "function_declaration",
      "name": "AvatarLarge",
      "text": "function AvatarLarge({ name, avatar, ...props }: IProps) {\n  const [error, setError] = React.useState<boolean>(false)\n\n  if (!error && (name || avatar)) {\n    return (\n      <AvatarImage\n        width={104}\n        height={104}\n        src={\n          avatar\n            ? avatar.data\n            : `${AVATAR_API}${encodeURIComponent(name!).replace(/%20/g, '+')}`\n        }\n        onError={() => setError(true)}\n        {...props}\n      />\n    )\n  }\n  return <DefaultAvatar {...props} />\n}",
      "startLine": 29,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/Avatar/AvatarLarge.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@23-64",
      "type": "function_declaration",
      "name": "Hamburger",
      "text": "function Hamburger() {\n  const [showMenu, setShowMenu] = useState(false)\n  const userDetails = useSelector(getUserDetails)\n  const language = useSelector(getLanguage)\n  const intl = useIntl()\n  const toggleMenu = () => {\n    setShowMenu((prevState) => !prevState)\n  }\n  let name = ''\n  if (userDetails && userDetails.name) {\n    const nameObj = getIndividualNameObj(userDetails.name, language)\n    name = nameObj\n      ? `${String(nameObj.firstNames)} ${String(nameObj.familyName)}`\n      : ''\n  }\n\n  const role =\n    (userDetails?.role && intl.formatMessage(userDetails.role.label)) ?? ''\n\n  const avatar = <Avatar name={name} avatar={userDetails?.avatar} />\n\n  const userInfo = { name, role, avatar }\n\n  return (\n    <>\n      <Button type=\"icon\" size=\"medium\" onClick={toggleMenu}>\n        <Icon name=\"List\" size=\"medium\" color=\"primary\" />\n      </Button>\n      <ExpandingMenu\n        showMenu={showMenu}\n        menuCollapse={() => toggleMenu()}\n        navigation={() => (\n          <FixedNavigation\n            navigationWidth={320}\n            menuCollapse={() => toggleMenu()}\n            userInfo={userInfo}\n          />\n        )}\n      />\n    </>\n  )\n}",
      "startLine": 23,
      "endLine": 64,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/Header/Hamburger.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@64-77",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: Props) {\n    super(props)\n    this.state = {\n      loading: true,\n      secured: true,\n      pinExists: true,\n      pendingUser: false,\n      forgotPin: false,\n      passwordVerified: false\n    }\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.markAsSecured = this.markAsSecured.bind(this)\n    this.onIdle = this.onIdle.bind(this)\n  }",
      "startLine": 64,
      "endLine": 77,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/ProtectedPage.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@79-114",
      "type": "method_definition",
      "name": "componentDidMount",
      "text": "async componentDidMount() {\n    const mountedOn = Date.now()\n    const newState = { ...this.state }\n\n    if (await storage.getItem(SCREEN_LOCK)) {\n      newState.secured = false\n    } else {\n      newState.secured = true\n    }\n    if (await this.getPIN()) {\n      newState.pinExists = true\n    } else {\n      newState.pinExists = false\n    }\n    const userDetails: UserDetails = JSON.parse(\n      (await storage.getItem(USER_DETAILS)) || '{}'\n    )\n    if (userDetails && userDetails.status && userDetails.status === 'pending') {\n      newState.pendingUser = true\n    }\n\n    newState.loading = false\n    const timeSinceMount = Date.now() - mountedOn\n    const progress = document.getElementById('progress')\n    if (progress != null) progress.style.width = '100%'\n    setTimeout(\n      () => {\n        this.setState(newState)\n      },\n      import.meta.env.PROD ? Math.max(200, 2000 - timeSinceMount) : 0\n    )\n\n    setInterval(async () => {\n      if (!(await refreshToken())) this.props.redirectToAuthentication()\n    }, REFRESH_TOKEN_CHECK_MILLIS)\n  }",
      "startLine": 79,
      "endLine": 114,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/components/ProtectedPage.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@52-55",
      "type": "method_definition",
      "name": "if",
      "text": "if (error.response) {\n      // Request was made but server responded with something\n      // other than 2xx\n    }",
      "startLine": 52,
      "endLine": 55,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/profile/serviceApi.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@59-248",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case actions.REDIRECT_TO_AUTHENTICATION:\n      const shouldRedirectBack = action.payload.redirectBack\n      return loop(\n        {\n          ...state,\n          authenticated: false,\n          userDetailsFetched: false,\n          tokenPayload: null,\n          userDetails: null\n        },\n        Cmd.list([\n          Cmd.run(() => {\n            removeToken()\n          }),\n          Cmd.run(() => {\n            removeUserDetails()\n          }),\n          Cmd.run(\n            (getState: () => IStoreState) => {\n              if (shouldRedirectBack) {\n                const baseUrl = window.location.origin\n                const restUrl = window.location.href.replace(baseUrl, '')\n                const redirectToURL = new URL(\n                  restUrl === '/'\n                    ? `?lang=${getState().i18n.language}`\n                    : `?lang=${getState().i18n.language}&redirectTo=${restUrl}`,\n                  window.config.LOGIN_URL\n                ).toString()\n\n                window.location.assign(redirectToURL)\n              } else {\n                window.location.assign(\n                  `${window.config.LOGIN_URL}?lang=${getState().i18n.language}`\n                )\n              }\n            },\n            { args: [Cmd.getState] }\n          )\n        ])\n      )\n    case actions.CHECK_AUTH:\n      const token = getToken()\n\n      // Remove token and language from url if these exists\n      if (window.location.search.includes('token=')) {\n        window.history.replaceState(null, '', window.location.pathname)\n      }\n\n      const payload = getTokenPayload(token)\n\n      if (!payload) {\n        return loop(\n          {\n            ...state,\n            authenticated: false\n          },\n          Cmd.action(actions.redirectToAuthentication(true))\n        )\n      }\n\n      return loop(\n        {\n          ...state,\n          authenticated: true,\n          tokenPayload: payload\n        },\n        Cmd.list([\n          Cmd.run(() => {\n            if (isTokenStillValid(payload)) {\n              storeToken(token)\n            }\n          }),\n          Cmd.action(actions.setInitialUserDetails())\n        ])\n      )\n    case actions.SET_USER_DETAILS:\n      const result = action.payload\n      const data = result && result.data\n\n      if (data && data.getUser) {\n        const userDetails = data.getUser\n\n        return loop(\n          {\n            ...state,\n            userDetailsFetched: true,\n            userDetails\n          },\n          Cmd.list([\n            Cmd.run(() => storeUserDetails(userDetails)),\n            Cmd.action(actions.userDetailsAvailable(userDetails))\n          ])\n        )\n      } else {\n        return {\n          ...state,\n          userDetailsFetched: false\n        }\n      }\n    case actions.MODIFY_USER_DETAILS:\n      const modifiedDetails = action.payload\n      if (state.userDetails) {\n        return loop(\n          {\n            ...state,\n            userDetails: { ...state.userDetails, ...modifiedDetails }\n          },\n          Cmd.run(storeUserDetails, {\n            args: [{ ...state.userDetails, ...modifiedDetails }]\n          })\n        )\n      } else {\n        return {\n          ...state,\n          userDetailsFetched: false\n        }\n      }\n    case actions.SET_INITIAL_USER_DETAILS:\n      return loop(\n        {\n          ...state\n        },\n        Cmd.run<\n          actions.IGetStorageUserDetailsFailedAction,\n          actions.IGetStorageUserDetailsSuccessAction\n        >(storage.getItem, {\n          successActionCreator: actions.getStorageUserDetailsSuccess,\n          failActionCreator: actions.getStorageUserDetailsFailed,\n          args: [USER_DETAILS]\n        })\n      )\n    case actions.GET_USER_DETAILS_SUCCESS:\n      const userDetailsString = action.payload\n      const userDetailsCollection: UserDetails | null = JSON.parse(\n        userDetailsString ? userDetailsString : 'null'\n      )\n      // if the user detail cannot be found or they don't match the user specified in the token or the user has deprecated systemRole\n      if (\n        state.tokenPayload &&\n        (!userDetailsCollection ||\n          'systemRole' in userDetailsCollection ||\n          userDetailsCollection.userMgntUserID !== state.tokenPayload.sub)\n      ) {\n        return loop(\n          {\n            ...state,\n            userDetails: userDetailsCollection\n          },\n          Cmd.run(queries.fetchUserDetails, {\n            successActionCreator: actions.setUserDetails,\n            args: [state.tokenPayload.sub]\n          })\n        )\n      } else {\n        return loop(\n          {\n            ...state,\n            userDetails: userDetailsCollection\n          },\n          Cmd.action(actions.userDetailsAvailable(userDetailsCollection!))\n        )\n      }\n    case actions.SEND_VERIFY_CODE:\n      const { notificationEvent, phoneNumber, email } = action.payload\n      if (state.tokenPayload && notificationEvent && (phoneNumber || email)) {\n        return loop(\n          {\n            ...state\n          },\n          Cmd.run(serviceApi.sendVerifyCode, {\n            successActionCreator: actions.SendVerifyCodeSuccess,\n            args: [action.payload]\n          })\n        )\n      }\n      return state\n    case actions.SEND_VERIFY_CODE_COMPLETED:\n      const successPayload = action.payload\n      if (\n        state.tokenPayload &&\n        (!successPayload || successPayload.userId === state.tokenPayload.sub)\n      ) {\n        return { ...state, nonce: successPayload.nonce }\n      }\n      return state\n\n    default:\n      return state\n  }",
      "startLine": 59,
      "endLine": 248,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/profile/profileReducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@76-84",
      "type": "function_declaration",
      "name": "fetchUserDetails",
      "text": "async function fetchUserDetails(userId: string) {\n  return (\n    client &&\n    client.query({\n      query: FETCH_USER,\n      variables: { userId }\n    })\n  )\n}",
      "startLine": 76,
      "endLine": 84,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/profile/queries.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-21",
      "type": "function_declaration",
      "name": "initHandlebarHelpers",
      "text": "async function initHandlebarHelpers() {\n  handlebarHelpers = await referenceApi.importHandlebarHelpers()\n}",
      "startLine": 19,
      "endLine": 21,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/handlebarHelpers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-30",
      "type": "function_declaration",
      "name": "getHandlebarHelpers",
      "text": "function getHandlebarHelpers() {\n  if (!handlebarHelpers) {\n    throw new Error(\n      'Handlebar helpers were requested before initialization. This should never happen.'\n    )\n  }\n  return handlebarHelpers\n}",
      "startLine": 23,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/handlebarHelpers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-31",
      "type": "function_declaration",
      "name": "initValidators",
      "text": "async function initValidators() {\n  const countryConfigValidators = await referenceApi.importValidators()\n  validators = {\n    // Needs to be casted as any as there are non-validator functions in the import\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    ...(builtInValidators as Record<string, any>),\n    ...countryConfigValidators\n  }\n}",
      "startLine": 23,
      "endLine": 31,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/validators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-36",
      "type": "function_declaration",
      "name": "fetchRoles",
      "text": "async function fetchRoles(criteria = {}) {\n  return (\n    client &&\n    client.query({\n      query: getUserRolesQuery,\n      fetchPolicy: 'no-cache'\n    })\n  )\n}",
      "startLine": 28,
      "endLine": 36,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/user/query/queries.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@278-280",
      "type": "method_definition",
      "name": "if",
      "text": "if (!field.dynamicDefinitions.label) {\n    return undefined\n  }",
      "startLine": 278,
      "endLine": 280,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 25,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@290-292",
      "type": "method_definition",
      "name": "if",
      "text": "if (!field.dynamicDefinitions.helperText) {\n    return undefined\n  }",
      "startLine": 290,
      "endLine": 292,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 23,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@302-304",
      "type": "method_definition",
      "name": "if",
      "text": "if (!field.dynamicDefinitions.tooltip) {\n    return undefined\n  }",
      "startLine": 302,
      "endLine": 304,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 21,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@401-414",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n    field.type === SELECT_WITH_OPTIONS ||\n    field.type === DOCUMENT_UPLOADER_WITH_OPTION\n  ) {\n    if (field.optionCondition) {\n      // eslint-disable-next-line no-eval\n      const conditionEvaluator = eval(field.optionCondition!)\n      return field.options.filter((field) =>\n        conditionEvaluator({ field, values, declaration })\n      )\n    }\n\n    return field.options\n  }",
      "startLine": 401,
      "endLine": 414,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@480-487",
      "type": "method_definition",
      "name": "if",
      "text": "if (field.type === SELECT_WITH_DYNAMIC_OPTIONS) {\n    return getMemoisedFieldOptions(\n      _sectionName,\n      field,\n      values,\n      offlineCountryConfig\n    )\n  }",
      "startLine": 480,
      "endLine": 487,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@636-638",
      "type": "method_definition",
      "name": "if",
      "text": "if (!field.conditionals) {\n    return []\n  }",
      "startLine": 636,
      "endLine": 638,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@805-807",
      "type": "method_definition",
      "name": "if",
      "text": "if (isDateField(field, sectionData)) {\n    return fieldValue?.toString()\n  }",
      "startLine": 805,
      "endLine": 807,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 37,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-223",
      "type": "function_declaration",
      "name": "userSectionFormType",
      "text": "function userSectionFormType(): ISerializedFormSection {\n  return {\n    id: UserSection.User,\n    viewType: 'form',\n    name: userFormMessages.user,\n    title: userFormMessages.userFormTitle,\n    groups: [\n      {\n        id: 'registration-office',\n        preventContinueIfError: true,\n        title: userFormMessages.assignedRegistrationOffice,\n        conditionals: [\n          {\n            action: 'hide',\n            expression:\n              'values.skippedOfficeSelction && values.registrationOffice'\n          }\n        ],\n        fields: [\n          {\n            name: 'assignedRegistrationOffice',\n            type: FIELD_GROUP_TITLE,\n            label: userFormMessages.assignedRegistrationOfficeGroupTitle,\n            required: false,\n            hidden: true,\n            initialValue: '',\n            validator: []\n          },\n          {\n            name: 'registrationOffice',\n            type: LOCATION_SEARCH_INPUT,\n            label: userFormMessages.registrationOffice,\n            required: true,\n            initialValue: '',\n            searchableResource: ['offices'],\n            searchableType: ['CRVS_OFFICE'],\n            validator: [\n              {\n                operation: 'officeMustBeSelected'\n              }\n            ],\n            locationList: [],\n            mapping: {\n              mutation: {\n                operation: 'fieldNameTransformer',\n                parameters: ['primaryOffice']\n              },\n              query: {\n                operation: 'locationIDToFieldTransformer',\n                parameters: ['primaryOffice']\n              }\n            }\n          }\n        ]\n      },\n      {\n        id: 'user-view-group',\n        title: userFormMessages.userDetails,\n        fields: [\n          {\n            name: 'familyName',\n            type: TEXT,\n            label: userFormMessages.lastName,\n            required: true,\n            initialValue: '',\n            validator: [{ operation: 'englishOnlyNameFormat' }],\n            mapping: {\n              mutation: {\n                operation: 'fieldToNameTransformer',\n                parameters: ['en', 'familyName']\n              },\n              query: {\n                operation: 'nameToFieldTransformer',\n                parameters: ['en', 'familyName']\n              }\n            }\n          },\n          {\n            name: 'firstName',\n            type: TEXT,\n            label: userFormMessages.firstName,\n            required: true,\n            initialValue: '',\n            validator: [{ operation: 'englishOnlyNameFormat' }],\n            mapping: {\n              mutation: {\n                operation: 'fieldToNameTransformer',\n                parameters: ['en', 'firstNames']\n              },\n              query: {\n                operation: 'nameToFieldTransformer',\n                parameters: ['en', 'firstNames']\n              }\n            }\n          },\n          {\n            name: 'username',\n            type: TEXT,\n            label: userFormMessages.username,\n            previewGroup: 'userNameGroup',\n            required: false,\n            initialValue: '',\n            validator: [],\n            readonly: true,\n            hidden: true\n          },\n          {\n            name: 'phoneNumber',\n            type: TEXT,\n            label: userFormMessages.phoneNumber,\n            required: window.config.USER_NOTIFICATION_DELIVERY_METHOD === 'sms',\n            initialValue: '',\n            validator: [{ operation: 'phoneNumberFormat' }],\n            mapping: {\n              mutation: {\n                operation: 'msisdnTransformer',\n                parameters: ['user.mobile']\n              },\n              query: {\n                operation: 'localPhoneTransformer',\n                parameters: ['user.mobile']\n              }\n            }\n          },\n          {\n            name: 'email',\n            type: TEXT,\n            label: userFormMessages.email,\n            required:\n              window.config.USER_NOTIFICATION_DELIVERY_METHOD === 'email',\n            initialValue: '',\n            validator: [{ operation: 'emailAddressFormat' }]\n          },\n          {\n            name: 'seperator',\n            type: 'DIVIDER',\n            label: {\n              defaultMessage: ' ',\n              description: 'empty string',\n              id: 'form.field.label.empty'\n            },\n            initialValue: '',\n            ignoreBottomMargin: true,\n            validator: [],\n            conditionals: []\n          },\n          {\n            name: 'role',\n            type: SELECT_WITH_OPTIONS,\n            label: userFormMessages.role,\n            required: true,\n            initialValue: '',\n            validator: [],\n            options: [],\n            conditionals: []\n          },\n          {\n            name: 'device',\n            type: TEXT,\n            label: userFormMessages.userDevice,\n            required: false,\n            initialValue: '',\n            validator: []\n          }\n        ]\n      },\n      {\n        id: 'signature-attachment',\n        title: userFormMessages.userSignatureAttachmentTitle,\n        preventContinueIfError: true,\n        conditionals: [\n          {\n            action: 'hide',\n            expression:\n              \"!values.scopes?.includes('profile.electronic-signature')\"\n          }\n        ],\n        fields: [\n          {\n            name: 'attachmentTitle',\n            type: FIELD_GROUP_TITLE,\n            hidden: true,\n            label: userFormMessages.userAttachmentSection,\n            required: false,\n            initialValue: '',\n            validator: []\n          },\n          {\n            name: 'signature',\n            type: SIMPLE_DOCUMENT_UPLOADER,\n            label: userFormMessages.userAttachmentSection,\n            description: userFormMessages.userSignatureAttachmentDesc,\n            allowedDocType: ['image/png'],\n            initialValue: '',\n            required: true,\n            validator: []\n          }\n        ]\n      }\n    ]\n  }\n}",
      "startLine": 22,
      "endLine": 223,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/user/fieldDefinitions/createUser.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@242-246",
      "type": "function_declaration",
      "name": "getCreateUserForm",
      "text": "function getCreateUserForm() {\n  return {\n    sections: [userSectionFormType(), userSectionPreviewType]\n  }\n}",
      "startLine": 242,
      "endLine": 246,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/user/fieldDefinitions/createUser.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-20",
      "type": "function_declaration",
      "name": "getMotherDateOfBirthLabel",
      "text": "function getMotherDateOfBirthLabel(): MessageDescriptor {\n  return {\n    id: 'form.field.label.dateOfBirth',\n    defaultMessage: 'Date of birth',\n    description: 'Label for form field: Date of birth'\n  }\n}",
      "startLine": 14,
      "endLine": 20,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/messages.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-28",
      "type": "function_declaration",
      "name": "getFatherDateOfBirthLabel",
      "text": "function getFatherDateOfBirthLabel(): MessageDescriptor {\n  return {\n    id: 'form.field.label.dateOfBirth',\n    defaultMessage: 'Date of birth',\n    description: 'Label for form field: Date of birth'\n  }\n}",
      "startLine": 22,
      "endLine": 28,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/messages.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-36",
      "type": "function_declaration",
      "name": "getDateOfMarriageLabel",
      "text": "function getDateOfMarriageLabel(): MessageDescriptor {\n  return {\n    id: 'form.field.label.dateOfMarriage',\n    defaultMessage: 'Date of marriage',\n    description: 'Option for form field: Date of marriage'\n  }\n}",
      "startLine": 30,
      "endLine": 36,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/messages.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-47",
      "type": "function_declaration",
      "name": "identityHelperTextMapper",
      "text": "function identityHelperTextMapper(\n  code: string\n): MessageDescriptor | undefined {\n  switch (code) {\n    case 'NATIONAL_ID':\n      return formMessages.helperTextNID\n    default:\n      return undefined\n  }\n}",
      "startLine": 38,
      "endLine": 47,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/messages.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@49-68",
      "type": "function_declaration",
      "name": "identityNameMapper",
      "text": "function identityNameMapper(code: string): MessageDescriptor {\n  switch (code) {\n    case 'NATIONAL_ID':\n      return formMessages.iDTypeNationalID\n    case 'PASSPORT':\n      return formMessages.iDTypePassport\n    case 'DRIVING_LICENSE':\n      return formMessages.iDTypeDrivingLicense\n    case 'BIRTH_REGISTRATION_NUMBER':\n      return formMessages.iDTypeBRN\n    case 'DEATH_REGISTRATION_NUMBER':\n      return formMessages.iDTypeDRN\n    case 'REFUGEE_NUMBER':\n      return formMessages.iDTypeRefugeeNumber\n    case 'ALIEN_NUMBER':\n      return formMessages.iDTypeAlienNumber\n    default:\n      return formMessages.iD\n  }\n}",
      "startLine": 49,
      "endLine": 68,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/messages.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@70-79",
      "type": "function_declaration",
      "name": "identityTooltipMapper",
      "text": "function identityTooltipMapper(code: string): MessageDescriptor {\n  switch (code) {\n    case 'NATIONAL_ID':\n      return formMessages.tooltipNationalID\n    case 'BIRTH_REGISTRATION_NUMBER':\n      return formMessages.iDTypeBRN\n    default:\n      return formMessages.iD\n  }\n}",
      "startLine": 70,
      "endLine": 79,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/messages.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-25",
      "type": "function_declaration",
      "name": "isGraphQLTag",
      "text": "function isGraphQLTag(item: any) {\n  return typeof item === 'object' && item.kind && item.directives\n}",
      "startLine": 23,
      "endLine": 25,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/deserializer/deserializer.test.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@27-37",
      "type": "function_declaration",
      "name": "hasOperatorDescriptors",
      "text": "function hasOperatorDescriptors(form: IForm) {\n  return traverse(form).reduce(\n    function ([paths, found], item) {\n      if (typeof item === 'object' && item.operation && !isGraphQLTag(item)) {\n        return [[...paths, this.path.join('.')], true]\n      }\n      return [paths, found]\n    },\n    [[], false]\n  )\n}",
      "startLine": 27,
      "endLine": 37,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/deserializer/deserializer.test.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@25-31",
      "type": "function_declaration",
      "name": "initConditionals",
      "text": "async function initConditionals() {\n  const countryConfigConditionals = await referenceApi.importConditionals()\n  conditionals = {\n    ...builtInConditionals,\n    ...countryConfigConditionals\n  }\n}",
      "startLine": 25,
      "endLine": 31,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@95-97",
      "type": "function_declaration",
      "name": "isFactoryOperation",
      "text": "function isFactoryOperation(descriptor: any) {\n  return Boolean((descriptor as ValidationFactoryOperation).parameters)\n}",
      "startLine": 95,
      "endLine": 97,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/deserializer/deserializer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@99-103",
      "type": "function_declaration",
      "name": "hasTemplateOperator",
      "text": "function hasTemplateOperator(\n  descriptor: ITemplateDescriptor\n): descriptor is IQueryTemplateDescriptor {\n  return Boolean((descriptor as IQueryTemplateDescriptor).operation)\n}",
      "startLine": 99,
      "endLine": 103,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/deserializer/deserializer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@105-115",
      "type": "function_declaration",
      "name": "configurationError",
      "text": "function configurationError(\n  descriptor: { operation: string },\n  operationLabel: string\n) {\n  const error = `Cannot find a ${operationLabel} with a name ${descriptor.operation}.\n    This is a configuration error in your country specific resource package's form field definitions.`\n  /* eslint-disable no-console */\n  console.error(error)\n  /* eslint-enable no-console */\n  return new Error(error)\n}",
      "startLine": 105,
      "endLine": 115,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/deserializer/deserializer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@117-419",
      "type": "function_declaration",
      "name": "sectionQueryDescriptorToQueryFunction",
      "text": "function sectionQueryDescriptorToQueryFunction(\n  descriptor: IQueryDescriptor\n): IFormSectionQueryMapFunction {\n  const transformer: AnyFn<string> | AnyFactoryFn<string> =\n    queries[descriptor.operation as QueryFunctionExports]\n\n  if (!transformer) {\n    throw configurationError(descriptor, 'query transformer')\n  }\n\n  if (isFactoryOperation(descriptor)) {\n    const factory = transformer as AnyFactoryFn<string>\n    return factory(...descriptor.parameters)\n  }\n  return transformer\n}\n\nfunction sectionMutationDescriptorToMutationFunction(\n  descriptor: IMutationDescriptor\n): IFormSectionMutationMapFunction {\n  const transformer: AnyFn<string> | AnyFactoryFn<string> =\n    mutations[descriptor.operation as MutationFunctionExports]\n\n  if (!transformer) {\n    throw configurationError(descriptor, 'mutation transformer')\n  }\n\n  if (isFactoryOperation(descriptor)) {\n    const factory = transformer as AnyFactoryFn<string>\n    return factory(...descriptor.parameters)\n  }\n  return transformer\n}\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nfunction isOperation(param: any): param is IMutationDescriptor {\n  return typeof param === 'object' && param['operation']\n}\n\nfunction fieldQueryDescriptorToQueryFunction(\n  descriptor: IQueryDescriptor\n): IFormFieldQueryMapFunction {\n  const transformer: AnyFn<string> | AnyFactoryFn<string> =\n    queries[descriptor.operation as QueryFunctionExports]\n\n  if (!transformer) {\n    throw configurationError(descriptor, 'query transformer')\n  }\n\n  if (isFactoryOperation(descriptor)) {\n    const factory = transformer as AnyFactoryFn<string>\n\n    const potentiallyNestedOperations =\n      descriptor.parameters as Array<IQueryDescriptor>\n\n    const parameters = potentiallyNestedOperations.map((parameter) =>\n      isOperation(parameter)\n        ? fieldQueryDescriptorToQueryFunction(parameter)\n        : parameter\n    )\n\n    return factory(...parameters)\n  }\n  return transformer\n}\n\nfunction fieldTemplateDescriptorToQueryOperation(\n  descriptor: ITemplateDescriptor\n): IFormFieldTemplateMapOperation {\n  if (hasTemplateOperator(descriptor)) {\n    return [\n      descriptor.fieldName,\n      fieldQueryDescriptorToQueryFunction(descriptor)\n    ]\n  }\n  return [descriptor.fieldName]\n}\n\nfunction fieldMutationDescriptorToMutationFunction(\n  descriptor: IMutationDescriptor\n): IFormFieldMutationMapFunction {\n  const transformer: AnyFn<string> | AnyFactoryFn<string> =\n    mutations[descriptor.operation as MutationFunctionExports]\n\n  if (!transformer) {\n    throw configurationError(descriptor, 'mutation transformer')\n  }\n\n  if (isFactoryOperation(descriptor)) {\n    const factory = transformer as AnyFactoryFn<string>\n\n    const potentiallyNestedOperations =\n      descriptor.parameters as Array<IMutationDescriptor>\n\n    const parameters = potentiallyNestedOperations.map((parameter) =>\n      isOperation(parameter)\n        ? fieldMutationDescriptorToMutationFunction(parameter)\n        : parameter\n    )\n\n    return factory(...parameters)\n  }\n  return transformer\n}\n\nexport function fieldValidationDescriptorToValidationFunction(\n  descriptor: IValidatorDescriptor,\n  validators: Record<string, Validator>\n): Validation {\n  const validator: Validator =\n    validators[descriptor.operation as ValidatorFunctionExports]\n\n  if (!validator) {\n    throw configurationError(descriptor, 'validator')\n  }\n\n  if (isFactoryOperation(descriptor)) {\n    const factory = validator as AnyFn<Validation>\n    return factory(...descriptor.parameters)\n  }\n\n  return validator as Validation\n}\n\nfunction deserializeDynamicDefinitions(\n  descriptor: ISerializedDynamicFormFieldDefinitions,\n  validators: Record<string, Validator>\n): IDynamicFormFieldDefinitions {\n  return {\n    label: descriptor.label && {\n      dependency: descriptor.label.dependency,\n      labelMapper: labels[descriptor.label.labelMapper.operation]\n    },\n    helperText: descriptor.helperText && {\n      dependency: descriptor.helperText.dependency,\n      helperTextMapper: labels[descriptor.helperText.helperTextMapper.operation]\n    },\n    tooltip: descriptor.tooltip && {\n      dependency: descriptor.tooltip.dependency,\n      tooltipMapper: labels[descriptor.tooltip.tooltipMapper.operation]\n    },\n    unit: descriptor.unit && {\n      dependency: descriptor.unit.dependency,\n      unitMapper: labels[descriptor.unit.unitMapper.operation]\n    },\n    type:\n      descriptor.type &&\n      (descriptor.type.kind === 'static'\n        ? descriptor.type\n        : {\n            kind: 'dynamic',\n            dependency: descriptor.type.dependency,\n            typeMapper: identityTypeMapper[descriptor.type.typeMapper.operation]\n          }),\n    validator:\n      descriptor.validator &&\n      descriptor.validator.map((validatorDescriptor) => ({\n        dependencies: validatorDescriptor.dependencies,\n        validator: validators[\n          validatorDescriptor.validator.operation\n        ] as AnyFn<Validation>\n      }))\n  }\n}\n\nfunction deserializeQueryMap(queryMap: ISerializedQueryMap) {\n  return Object.keys(queryMap).reduce<IQueryMap>((deserialized, key) => {\n    return {\n      ...deserialized,\n      [key]: {\n        ...queryMap[key],\n        responseTransformer:\n          responseTransformers[queryMap[key].responseTransformer.operation],\n        query: graphQLQueries[queryMap[key].query.operation]\n      }\n    }\n  }, {})\n}\n\nfunction deserializeFormField(\n  field: SerializedFormField,\n  validators: Record<string, Validator>\n): IFormField {\n  const baseFields = {\n    ...field,\n    validator:\n      field.validator &&\n      field.validator.map((descriptor) =>\n        fieldValidationDescriptorToValidationFunction(descriptor, validators)\n      ),\n    mapping: field.mapping && {\n      query:\n        field.mapping.query &&\n        fieldQueryDescriptorToQueryFunction(field.mapping.query),\n      mutation:\n        field.mapping.mutation &&\n        fieldMutationDescriptorToMutationFunction(field.mapping.mutation),\n      template:\n        field.mapping.template &&\n        fieldTemplateDescriptorToQueryOperation(field.mapping.template)\n    }\n  }\n  if (field.type === FIELD_WITH_DYNAMIC_DEFINITIONS) {\n    return {\n      ...baseFields,\n      dynamicDefinitions: deserializeDynamicDefinitions(\n        field.dynamicDefinitions,\n        validators\n      )\n    } as IFormFieldWithDynamicDefinitions\n  }\n\n  if (field.type === RADIO_GROUP_WITH_NESTED_FIELDS) {\n    const deserializedNestedFields = Object.keys(field.nestedFields).reduce(\n      (fields, key) => {\n        return {\n          ...fields,\n          [key]: field.nestedFields[key].map((field) =>\n            deserializeFormField(field, validators)\n          )\n        }\n      },\n      {}\n    )\n    return {\n      ...baseFields,\n      nestedFields: deserializedNestedFields\n    } as IRadioGroupWithNestedFieldsFormField\n  }\n\n  if (field.type === SELECT_WITH_OPTIONS) {\n    return {\n      ...baseFields,\n      options:\n        !Array.isArray(field.options) && field.options.resource\n          ? // Dummy implementation for now as there's only one resource\n            countries\n          : field.options\n    } as ISelectFormFieldWithOptions\n  }\n\n  if (field.type === FETCH_BUTTON) {\n    return {\n      ...baseFields,\n      queryMap: deserializeQueryMap(field.queryMap)\n    } as ILoaderButton\n  }\n\n  return baseFields as Exclude<\n    IFormField,\n    IFormFieldWithDynamicDefinitions | ILoaderButton\n  >\n}\n\nexport function deserializeFormSection(\n  section: ISerializedFormSection,\n  validators: Record<string, Validator>\n): IFormSection {\n  const mapping = {\n    query:\n      section.mapping &&\n      section.mapping.query &&\n      sectionQueryDescriptorToQueryFunction(section.mapping.query),\n    mutation:\n      section.mapping &&\n      section.mapping.mutation &&\n      sectionMutationDescriptorToMutationFunction(section.mapping.mutation),\n    template:\n      section.mapping?.template &&\n      section.mapping.template.map(\n        ({ fieldName, ...query }) =>\n          [fieldName, sectionQueryDescriptorToQueryFunction(query)] as [\n            string,\n            IFormSectionQueryMapFunction\n          ]\n      )\n  }\n  const groups = section.groups.map((group) => ({\n    ...group,\n    fields: group.fields.map((field) => {\n      return deserializeFormField(field, validators)\n    })\n  }))\n\n  return {\n    ...section,\n    mapping,\n    groups\n  }\n}\n\nexport function deserializeForm(\n  form: ISerializedForm,\n  validators: Record<string, Validator>\n): IForm {\n  const sections = form.sections.map((section) =>\n    deserializeFormSection(section, validators)\n  )\n\n  return {\n    ...form,\n    sections\n  }\n}",
      "startLine": 117,
      "endLine": 419,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/deserializer/deserializer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@113-134",
      "type": "method_definition",
      "name": "if",
      "text": "if (field.type === RADIO_GROUP_WITH_NESTED_FIELDS) {\n      const parentValue =\n        values[field.name] && (values[field.name] as IFormSectionData).value\n      const nestedFieldDefinitions =\n        (parentValue && field.nestedFields[parentValue as string]) || []\n      return nestedFieldDefinitions.reduce((nestedErrors, nestedField) => {\n        const errors = this.forField(\n          nestedField,\n          (values[field.name] as IFormSectionData)\n            .nestedFields as IFormSectionData,\n          resource,\n          drafts,\n          user,\n          requiredErrorMessage\n        ).errors\n\n        return {\n          ...nestedErrors,\n          [nestedField.name]: errors\n        }\n      }, {})\n    }",
      "startLine": 113,
      "endLine": 134,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/validation.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-35",
      "type": "function_declaration",
      "name": "isInvalidDate",
      "text": "function isInvalidDate(date?: string) {\n  if (!date) return true\n  const regEx = /^\\d{4}-\\d{1,2}-\\d{1,2}$/\n  if (!date.match(regEx)) {\n    return true\n  }\n  return !validateDate(date)\n}",
      "startLine": 28,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/advancedSearch/fieldDefinitions/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@46-100",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case offlineActions.READY:\n    case offlineActions.FORMS_LOADED:\n      return loop(\n        state,\n        Cmd.run(\n          async () => {\n            await initValidators()\n            return action.payload\n          },\n          {\n            successActionCreator: offlineActions.CustomValidatorsSuccess\n          }\n        )\n      )\n    case offlineActions.CUSTOM_VALIDATORS_LOADED:\n      const { forms } = action.payload\n\n      const birth = deserializeForm(forms.birth, validators)\n      const death = deserializeForm(forms.death, validators)\n      const marriage = deserializeForm(forms.marriage, validators)\n\n      return {\n        ...state,\n        state: 'READY',\n        registerForm: {\n          birth: {\n            ...birth,\n            sections: [\n              ...birth.sections.filter(({ viewType }) =>\n                ['form', 'hidden', 'preview'].includes(viewType)\n              )\n            ]\n          },\n          death: {\n            ...death,\n            sections: [\n              ...death.sections.filter(({ viewType }) =>\n                ['form', 'hidden', 'preview'].includes(viewType)\n              )\n            ]\n          },\n          marriage: {\n            ...marriage,\n            sections: [\n              ...marriage.sections.filter(({ viewType }) =>\n                ['form', 'hidden', 'preview'].includes(viewType)\n              )\n            ]\n          }\n        }\n      }\n    default:\n      return state\n  }",
      "startLine": 46,
      "endLine": 100,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@1037-1111",
      "type": "function_declaration",
      "name": "getCertCollectorGroupForEvent",
      "text": "function getCertCollectorGroupForEvent(\n  declaration: IDeclaration,\n  certificates: ICertificateData[]\n): IFormSectionGroup {\n  const informant = (declaration.data.informant.otherInformantType ||\n    declaration.data.informant.informantType) as string\n\n  const defaultPrintCertOptions: IRadioOption[] = [\n    {\n      value: 'INFORMANT',\n      label: formMessages.certifyRecordToInformant,\n      param: {\n        informant: informant\n      }\n    },\n    { value: 'OTHER', label: formMessages.someoneElseCollector },\n    {\n      value: 'PRINT_IN_ADVANCE',\n      label: formMessages.certificatePrintInAdvance\n    }\n  ]\n\n  const finalOptions = getFilteredRadioOptions(\n    declaration,\n    informant,\n    defaultPrintCertOptions,\n    birthCertCollectorOptions,\n    marriageCertCollectorOptions\n  )\n  const certificateTemplateOptions =\n    certificates\n      .filter((x) => x.event === declaration.event)\n      .map((x) => ({ label: x.label, value: x.id })) || []\n  return {\n    id: 'certCollector',\n    title: certificateMessages.whoToCollect,\n    fields: [\n      {\n        name: 'certificateTemplateId',\n        type: 'SELECT_WITH_OPTIONS',\n        label: certificateMessages.certificateTemplateSelectLabel,\n        required: true,\n        validator: [\n          (value: IFormFieldValue) => {\n            return !value\n              ? {\n                  message: certificateMessages.certificateCollectorTemplateError\n                }\n              : undefined\n          }\n        ],\n        options: certificateTemplateOptions\n      },\n      {\n        name: 'type',\n        type: RADIO_GROUP,\n        size: RadioSize.LARGE,\n        label: certificateMessages.whoToCollect,\n        hideHeader: true,\n        required: true,\n        initialValue: '',\n        validator: [\n          (value: IFormFieldValue) => {\n            return !value\n              ? {\n                  message: certificateMessages.certificateCollectorError\n                }\n              : undefined\n          }\n        ],\n        options: finalOptions\n      }\n    ]\n  }\n}",
      "startLine": 1037,
      "endLine": 1111,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/collectorSection.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@1113-1128",
      "type": "function_declaration",
      "name": "getCertificateCollectorFormSection",
      "text": "function getCertificateCollectorFormSection(\n  declaration: IDeclaration,\n  certificates: ICertificateData[]\n): IFormSection {\n  return {\n    id: CertificateSection.Collector,\n    viewType: 'form',\n    name: certificateMessages.printCertificate,\n    title: certificateMessages.certificateCollectionTitle,\n    groups: [\n      getCertCollectorGroupForEvent(declaration, certificates),\n      otherCertCollectorFormGroup(declaration.event),\n      affidavitCertCollectorGroup\n    ]\n  }\n}",
      "startLine": 1113,
      "endLine": 1128,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/collectorSection.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@1130-1170",
      "type": "function_declaration",
      "name": "getIssueCertCollectorGroupForEvent",
      "text": "function getIssueCertCollectorGroupForEvent(\n  declaration: IDeclaration\n): IRadioGroupFormField[] {\n  const informant = (declaration.data.informant.otherInformantType ||\n    declaration.data.informant.informantType) as string\n\n  const defaultIssueFormOptions: IRadioOption[] = [\n    {\n      value: 'INFORMANT',\n      label: issueMessages.issueToInformant,\n      param: {\n        informant: informant\n      }\n    },\n    { value: 'OTHER', label: issueMessages.issueToSomeoneElse }\n  ]\n\n  const finalOptions = getFilteredRadioOptions(\n    declaration,\n    informant,\n    defaultIssueFormOptions,\n    birthIssueCollectorFormOptions,\n    marriageIssueCollectorFormOptions\n  )\n\n  const fields: IRadioGroupFormField[] = [\n    {\n      name: 'type',\n      type: RADIO_GROUP,\n      size: RadioSize.LARGE,\n      label: issueMessages.issueCertificate,\n      hideHeader: true,\n      required: true,\n      initialValue: '',\n      validator: [],\n      options: finalOptions\n    }\n  ]\n\n  return fields\n}",
      "startLine": 1130,
      "endLine": 1170,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/collectorSection.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1179-1188",
      "type": "method_definition",
      "name": "if",
      "text": "if (declaration.event === EventType.Birth) {\n    options.splice(1, 0, ...birthForm)\n\n    const rolesToCheck = ['MOTHER', 'FATHER']\n    for (const role of rolesToCheck) {\n      if (!Boolean(declaration.data[role.toLowerCase()]?.detailsExist)) {\n        options = options.filter((opt) => opt.value !== role)\n      }\n    }\n  }",
      "startLine": 1179,
      "endLine": 1188,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/certificate/fieldDefinitions/collectorSection.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-64",
      "type": "function_declaration",
      "name": "getDeathRegistrationSectionTransformer",
      "text": "function getDeathRegistrationSectionTransformer(\n  transformedData: IFormData,\n  /*  eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  queryData: any,\n  sectionId: string\n) {\n  if (!transformedData[sectionId]) {\n    transformedData[sectionId] = {}\n  }\n\n  if (queryData[sectionId].id) {\n    transformedData[sectionId]._fhirID = queryData[sectionId].id\n  }\n  if (queryData[sectionId].trackingId) {\n    transformedData[sectionId].trackingId = queryData[sectionId].trackingId\n  }\n\n  if (queryData[sectionId].registrationNumber) {\n    transformedData[sectionId].registrationNumber =\n      queryData[sectionId].registrationNumber\n  }\n\n  if (queryData[sectionId].type && queryData[sectionId].type === 'DEATH') {\n    transformedData[sectionId].type = EventType.Death\n  }\n\n  if (queryData[sectionId].status) {\n    transformStatusData(\n      transformedData,\n      queryData[sectionId].status as GQLRegWorkflow[],\n      sectionId\n    )\n  }\n\n  if (\n    Array.isArray(queryData[sectionId].certificates) &&\n    queryData[sectionId].certificates.length > 0\n  ) {\n    const currentCertificate =\n      queryData[sectionId].certificates[\n        queryData[sectionId].certificates.length - 1\n      ]\n    if (currentCertificate?.collector?.relationship === 'PRINT_IN_ADVANCE') {\n      transformedData[sectionId].certificates = [\n        { certificateTemplateId: currentCertificate.certificateTemplateId }\n      ]\n    }\n  }\n}",
      "startLine": 16,
      "endLine": 64,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/death/query/registration-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@30-32",
      "type": "method_definition",
      "name": "if",
      "text": "if (!draftData[sectionId] || !draftData[sectionId][field.name]) {\n      return transformedData\n    }",
      "startLine": 30,
      "endLine": 32,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/death/mutation/deceased-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-73",
      "type": "function_declaration",
      "name": "setDeathRegistrationSectionTransformer",
      "text": "function setDeathRegistrationSectionTransformer(\n  transformedData: TransformedData,\n  draftData: IFormData,\n  sectionId: string\n) {\n  if (draftData.registration) {\n    if (!transformedData.registration) {\n      transformedData.registration = {}\n    }\n    if (draftData.registration._fhirID) {\n      transformedData.registration._fhirID = draftData.registration._fhirID\n    }\n    if (draftData.registration.trackingId) {\n      transformedData.registration.trackingId =\n        draftData.registration.trackingId\n    }\n    if (draftData.registration.registrationNumber) {\n      transformedData.registration.registrationNumber =\n        draftData.registration.registrationNumber\n    }\n\n    if (!transformedData[sectionId].status) {\n      transformedData[sectionId].status = [\n        {\n          timestamp: new Date()\n        }\n      ]\n    }\n\n    if (draftData[sectionId].commentsOrNotes) {\n      if (!transformedData[sectionId].status[0].comments) {\n        transformedData[sectionId].status[0].comments = []\n      }\n      transformedData[sectionId].status[0].comments.push({\n        comment: draftData[sectionId].commentsOrNotes,\n        createdAt: new Date()\n      })\n    }\n\n    const certificates: ICertificate[] = draftData[sectionId]\n      .certificates as ICertificate[]\n    if (\n      Array.isArray(certificates) &&\n      certificates.length &&\n      !draftData[sectionId].correction\n    ) {\n      const updatedCertificates = transformCertificateData(\n        certificates.slice(-1)\n      )\n      transformedData[sectionId].certificates =\n        updatedCertificates.length > 0 &&\n        Object.keys(updatedCertificates[0]).length > 0 &&\n        updatedCertificates[0].collector // making sure we are not sending empty object as certificate\n          ? updatedCertificates\n          : []\n    }\n  }\n  return transformedData\n}",
      "startLine": 15,
      "endLine": 73,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/death/mutation/registration-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-52",
      "type": "function_declaration",
      "name": "getBirthRegistrationSectionTransformer",
      "text": "function getBirthRegistrationSectionTransformer(\n  transformedData: IFormData,\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  queryData: any,\n  sectionId: string\n) {\n  if (queryData[sectionId].trackingId) {\n    transformedData[sectionId].trackingId = queryData[sectionId].trackingId\n  }\n\n  if (queryData[sectionId].registrationNumber) {\n    transformedData[sectionId].registrationNumber =\n      queryData[sectionId].registrationNumber\n  }\n\n  if (queryData[sectionId].type && queryData[sectionId].type === 'BIRTH') {\n    transformedData[sectionId].type = EventType.Birth\n  }\n\n  if (queryData[sectionId].status) {\n    transformStatusData(transformedData, queryData[sectionId].status, sectionId)\n  }\n\n  if (\n    Array.isArray(queryData[sectionId].certificates) &&\n    queryData[sectionId].certificates.length > 0\n  ) {\n    const currentCertificate =\n      queryData[sectionId].certificates[\n        queryData[sectionId].certificates.length - 1\n      ]\n    if (currentCertificate?.collector?.relationship === 'PRINT_IN_ADVANCE') {\n      transformedData[sectionId].certificates = [\n        { certificateTemplateId: currentCertificate.certificateTemplateId }\n      ]\n    }\n  }\n}",
      "startLine": 15,
      "endLine": 52,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/birth/query/registration-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-63",
      "type": "function_declaration",
      "name": "setBirthRegistrationSectionTransformer",
      "text": "function setBirthRegistrationSectionTransformer(\n  transformedData: TransformedData,\n  draftData: IFormData,\n  sectionId: string\n) {\n  if (draftData[sectionId].trackingId) {\n    transformedData[sectionId].trackingId = draftData[sectionId].trackingId\n  }\n\n  if (draftData[sectionId].registrationNumber) {\n    transformedData[sectionId].registrationNumber =\n      draftData[sectionId].registrationNumber\n  }\n\n  if (!transformedData[sectionId].status) {\n    transformedData[sectionId].status = [\n      {\n        timestamp: new Date()\n      }\n    ]\n  }\n\n  if (draftData[sectionId].commentsOrNotes) {\n    if (!transformedData[sectionId].status[0].comments) {\n      transformedData[sectionId].status[0].comments = []\n    }\n    transformedData[sectionId].status[0].comments.push({\n      comment: draftData[sectionId].commentsOrNotes,\n      createdAt: new Date()\n    })\n  }\n\n  const certificates: ICertificate[] = draftData[sectionId]\n    .certificates as ICertificate[]\n  if (\n    Array.isArray(certificates) &&\n    certificates.length &&\n    !draftData[sectionId].correction\n  ) {\n    const updatedCertificates = transformCertificateData(certificates.slice(-1))\n    transformedData[sectionId].certificates =\n      updatedCertificates.length > 0 &&\n      Object.keys(updatedCertificates[0]).length > 0 &&\n      updatedCertificates[0].collector // making sure we are not sending empty object as certificate\n        ? updatedCertificates\n        : []\n  }\n  return transformedData\n}",
      "startLine": 15,
      "endLine": 63,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/birth/mutation/registration-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@31-33",
      "type": "method_definition",
      "name": "if",
      "text": "if (!draftData[sectionId] || !draftData[sectionId][field.name]) {\n      return transformedData\n    }",
      "startLine": 31,
      "endLine": 33,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/marriage/mutation/event-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-19",
      "type": "function_declaration",
      "name": "getMotherDateOfBirthLabel",
      "text": "function getMotherDateOfBirthLabel(): MessageDescriptor {\n  return {\n    id: 'form.field.label.dateOfBirth',\n    defaultMessage: 'Date of birth',\n    description: 'Label for form field: Date of birth'\n  }\n}",
      "startLine": 13,
      "endLine": 19,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/birth/staticLabel.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-27",
      "type": "function_declaration",
      "name": "getFatherDateOfBirthLabel",
      "text": "function getFatherDateOfBirthLabel(): MessageDescriptor {\n  return {\n    id: 'form.field.label.dateOfBirth',\n    defaultMessage: 'Date of birth',\n    description: 'Label for form field: Date of birth'\n  }\n}",
      "startLine": 21,
      "endLine": 27,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/birth/staticLabel.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-35",
      "type": "function_declaration",
      "name": "getDateOfMarriageLabel",
      "text": "function getDateOfMarriageLabel(): MessageDescriptor {\n  return {\n    id: 'form.field.label.dateOfMarriage',\n    defaultMessage: 'Date of marriage',\n    description: 'Option for form field: Date of marriage'\n  }\n}",
      "startLine": 29,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/birth/staticLabel.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-59",
      "type": "function_declaration",
      "name": "getMarriageRegistrationSectionTransformer",
      "text": "function getMarriageRegistrationSectionTransformer(\n  transformedData: IFormData,\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  queryData: any,\n  sectionId: string\n) {\n  if (queryData[sectionId].trackingId) {\n    transformedData[sectionId].trackingId = queryData[sectionId].trackingId\n  }\n\n  if (queryData[sectionId].id) {\n    transformedData[sectionId]._fhirID = queryData[sectionId].id\n  }\n\n  if (queryData[sectionId].registrationNumber) {\n    transformedData[sectionId].registrationNumber =\n      queryData[sectionId].registrationNumber\n  }\n\n  if (queryData[sectionId].type && queryData[sectionId].type === 'MARRIAGE') {\n    transformedData[sectionId].type = EventType.Marriage\n  }\n\n  if (queryData[sectionId].status) {\n    transformStatusData(\n      transformedData,\n      queryData[sectionId].status as GQLRegWorkflow[],\n      sectionId\n    )\n  }\n\n  if (\n    Array.isArray(queryData[sectionId].certificates) &&\n    queryData[sectionId].certificates.length > 0\n  ) {\n    const currentCertificate =\n      queryData[sectionId].certificates[\n        queryData[sectionId].certificates.length - 1\n      ]\n    if (currentCertificate?.collector?.relationship === 'PRINT_IN_ADVANCE') {\n      transformedData[sectionId].certificates = [currentCertificate]\n    }\n  }\n}",
      "startLine": 16,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/marriage/query/registration-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-72",
      "type": "function_declaration",
      "name": "setMarriageRegistrationSectionTransformer",
      "text": "function setMarriageRegistrationSectionTransformer(\n  transformedData: TransformedData,\n  draftData: IFormData,\n  sectionId: string\n) {\n  if (draftData.registration) {\n    if (!transformedData.registration) {\n      transformedData.registration = {}\n    }\n    if (draftData.registration._fhirID) {\n      transformedData.registration._fhirID = draftData.registration._fhirID\n    }\n    if (draftData.registration.trackingId) {\n      transformedData.registration.trackingId =\n        draftData.registration.trackingId\n    }\n    if (draftData.registration.registrationNumber) {\n      transformedData.registration.registrationNumber =\n        draftData.registration.registrationNumber\n    }\n\n    if (!transformedData[sectionId].status) {\n      transformedData[sectionId].status = [\n        {\n          timestamp: new Date()\n        }\n      ]\n    }\n\n    if (draftData[sectionId].commentsOrNotes) {\n      if (!transformedData[sectionId].status[0].comments) {\n        transformedData[sectionId].status[0].comments = []\n      }\n      transformedData[sectionId].status[0].comments.push({\n        comment: draftData[sectionId].commentsOrNotes,\n        createdAt: new Date()\n      })\n    }\n\n    const certificates: ICertificate[] = draftData[sectionId]\n      .certificates as ICertificate[]\n    if (\n      Array.isArray(certificates) &&\n      certificates.length &&\n      !draftData[sectionId].correction\n    ) {\n      const updatedCertificates = transformCertificateData(\n        certificates.slice(-1)\n      )\n      transformedData[sectionId].certificates =\n        updatedCertificates.length > 0 &&\n        Object.keys(updatedCertificates[0]).length > 0 &&\n        updatedCertificates[0].collector // making sure we are not sending empty object as certificate\n          ? updatedCertificates\n          : []\n    }\n  }\n  return transformedData\n}",
      "startLine": 14,
      "endLine": 72,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/event-specific-fields/marriage/mutation/registration-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-24",
      "type": "function_declaration",
      "name": "getInformantSectionTransformer",
      "text": "function getInformantSectionTransformer(\n  transformedData: IFormData,\n  /*  eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  queryData: any,\n  sectionId: string\n) {\n  if (queryData[sectionId]?._fhirIDPatient) {\n    transformedData[sectionId]._fhirIDPatient =\n      queryData[sectionId]._fhirIDPatient\n  }\n}",
      "startLine": 14,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/informant-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-63",
      "type": "function_declaration",
      "name": "transformStatusData",
      "text": "function transformStatusData(\n  transformedData: IFormData,\n  statusData: GQLRegWorkflow[],\n  sectionId: string\n) {\n  const registrationStatus =\n    statusData &&\n    statusData.find((status) => {\n      return status.type && status.type === 'REGISTERED'\n    })\n  transformedData[sectionId] = {\n    ...transformedData[sectionId],\n    commentsOrNotes:\n      (statusData &&\n        statusData[0] &&\n        statusData[0].comments &&\n        statusData[0].comments[0] &&\n        statusData[0].comments[0].comment) ||\n      ''\n  }\n\n  if (!registrationStatus) {\n    return transformedData\n  }\n  transformedData[sectionId] = {\n    ...transformedData[sectionId],\n    regStatus: {\n      type: registrationStatus.type || '',\n      statusDate: registrationStatus.timestamp,\n      officeName:\n        (registrationStatus.office && registrationStatus.office.name) || '',\n      officeAlias:\n        (registrationStatus.office &&\n          registrationStatus.office.alias &&\n          registrationStatus.office.alias.join(' ')) ||\n        '',\n      officeAddressLevel3:\n        (registrationStatus.office &&\n          registrationStatus.office.address &&\n          registrationStatus.office.address.district) ||\n        '',\n      officeAddressLevel4:\n        (registrationStatus.office &&\n          registrationStatus.office.address &&\n          registrationStatus.office.address.state) ||\n        ''\n    }\n  }\n  return transformedData\n}",
      "startLine": 14,
      "endLine": 63,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-31",
      "type": "function_declaration",
      "name": "emptyFatherSectionTransformer",
      "text": "function emptyFatherSectionTransformer(\n  transformedData: IFormData,\n  /*  eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  queryData: any,\n  sectionId: string\n) {\n  if (!queryData[sectionId]) {\n    transformedData[sectionId] = {\n      detailsExist: false,\n      primaryAddressSameAsOtherPrimary: true\n    }\n  } else {\n    transformedData[sectionId] = {\n      detailsExist: true,\n      ...transformedData[sectionId]\n    }\n  }\n  return transformedData\n}",
      "startLine": 13,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/father-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-31",
      "type": "function_declaration",
      "name": "emptySpouseSectionTransformer",
      "text": "function emptySpouseSectionTransformer(\n  transformedData: IFormData,\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  queryData: any,\n  sectionId: string\n) {\n  if (!queryData[sectionId]) {\n    transformedData[sectionId] = {\n      detailsExist: false,\n      primaryAddressSameAsOtherPrimary: true\n    }\n  } else {\n    transformedData[sectionId] = {\n      detailsExist: true,\n      ...transformedData[sectionId]\n    }\n  }\n  return transformedData\n}",
      "startLine": 13,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/spouse-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-30",
      "type": "function_declaration",
      "name": "emptyMotherSectionTransformer",
      "text": "function emptyMotherSectionTransformer(\n  transformedData: IFormData,\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  queryData: any,\n  sectionId: string\n) {\n  if (!queryData[sectionId]) {\n    transformedData[sectionId] = {\n      detailsExist: false\n    }\n  } else {\n    transformedData[sectionId] = {\n      detailsExist: true,\n      ...transformedData[sectionId]\n    }\n  }\n  return transformedData\n}",
      "startLine": 13,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/mother-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@229-231",
      "type": "method_definition",
      "name": "if",
      "text": "if (!_.history) {\n    return\n  }",
      "startLine": 229,
      "endLine": 231,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 22,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/registration-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@348-350",
      "type": "method_definition",
      "name": "if",
      "text": "if (!_.registration?.trackingId) {\n    return\n  }",
      "startLine": 348,
      "endLine": 350,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/registration-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-23",
      "type": "function_declaration",
      "name": "setInformantSectionTransformer",
      "text": "function setInformantSectionTransformer(\n  transformedData: TransformedData,\n  draftData: IFormData,\n  sectionId: string\n) {\n  if (draftData[sectionId]._fhirIDPatient) {\n    transformedData[sectionId]._fhirIDPatient =\n      draftData[sectionId]._fhirIDPatient\n  }\n}",
      "startLine": 14,
      "endLine": 23,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/mutation/informant-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-31",
      "type": "function_declaration",
      "name": "stripTypename",
      "text": "function stripTypename(obj: any): any {\n  if (Array.isArray(obj)) {\n    return obj.map(stripTypename)\n  } else if (obj !== null && typeof obj === 'object') {\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    const newObj: any = {}\n    for (const key in obj) {\n      if (key !== '__typename' && Object.hasOwn(obj, key)) {\n        newObj[key] = stripTypename(obj[key])\n      }\n    }\n    return newObj\n  }\n  return obj\n}",
      "startLine": 17,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/mutation/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-83",
      "type": "function_declaration",
      "name": "transformCertificateData",
      "text": "function transformCertificateData(certificates: ICertificate[]) {\n  const certificateData = stripTypename(certificates[0])\n\n  // Prepare the base certificate data\n  const updatedCertificates: ICertificate[] = [\n    {\n      ...omit(certificateData, 'collector')\n    }\n  ]\n\n  // for collector mapping\n  if (certificateData && certificateData.collector) {\n    let collector: GQLRelatedPersonInput = {}\n    if (certificateData.collector.type) {\n      collector.relationship = certificateData.collector.type as string\n    }\n    if (certificateData.collector.relationship) {\n      collector.otherRelationship = certificateData.collector\n        .relationship as string\n      collector = {\n        ...collector,\n        name: [\n          {\n            use: 'en',\n            firstNames: certificateData.collector.firstName as string,\n            familyName: certificateData.collector.lastName as string\n          }\n        ],\n        identifier: [\n          {\n            id: certificateData.collector.iD as string,\n            type: certificateData.collector.iDType as string\n          }\n        ]\n      }\n    }\n    if (certificateData.collector.affidavitFile) {\n      collector.affidavit = [\n        {\n          contentType: (certificateData.collector.affidavitFile as IFileValue)\n            .type,\n          data: (certificateData.collector.affidavitFile as IFileValue).data\n        }\n      ]\n    }\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    updatedCertificates[0].collector = collector as any\n  }\n\n  // Return the processed certificates array\n  return updatedCertificates\n}",
      "startLine": 32,
      "endLine": 83,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/mutation/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@155-157",
      "type": "method_definition",
      "name": "if",
      "text": "if (transformerMethod) {\n      transformerMethod(transformedData, queryData, sectionId, field)\n    }",
      "startLine": 155,
      "endLine": 157,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@164-179",
      "type": "function_declaration",
      "name": "arrayToFieldTransformer",
      "text": "function arrayToFieldTransformer(\n  transformedData: IFormData,\n  queryData: QueryData,\n  sectionId: SectionId,\n  field: IFormField\n) {\n  transformedData[sectionId] ??= {}\n  if (\n    queryData[sectionId] &&\n    queryData[sectionId][field.name] &&\n    queryData[sectionId][field.name][0]\n  ) {\n    transformedData[sectionId][field.name] = queryData[sectionId][field.name][0]\n  }\n  return transformedData\n}",
      "startLine": 164,
      "endLine": 179,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@346-353",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n      !queryData[fromSectionId] ||\n      !queryData[fromSectionId][\n        fromSectionField ? fromSectionField : field.name\n      ]\n    ) {\n      return transformedData\n    }",
      "startLine": 346,
      "endLine": 353,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@376-405",
      "type": "function_declaration",
      "name": "attachmentToFieldTransformer",
      "text": "function attachmentToFieldTransformer(\n  transformedData: IFormData,\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  queryData: any,\n  sectionId: string,\n  field: IFormField,\n  alternateSectionId: string\n) {\n  const selectedSectionId = alternateSectionId ? alternateSectionId : sectionId\n  const attachments: IAttachment[] = []\n\n  if (queryData[selectedSectionId].attachments) {\n    ;(queryData[selectedSectionId].attachments as GQLAttachment[])\n      .filter((attachment) => attachment.subject === field.extraValue)\n      .forEach((attachment) => {\n        attachments.push({\n          data: attachment.data,\n          uri: attachment.uri,\n          type: attachment.contentType,\n          optionValues: [attachment.subject, attachment.type],\n          title: attachment.subject,\n          description: attachment.type\n        } as IAttachment)\n      })\n  }\n  if (attachments) {\n    transformedData[sectionId][field.name] = attachments\n  }\n  return transformedData\n}",
      "startLine": 376,
      "endLine": 405,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@421-423",
      "type": "method_definition",
      "name": "if",
      "text": "if (!queryData.eventLocation || !queryData.eventLocation.address) {\n      return transformedData\n    }",
      "startLine": 421,
      "endLine": 423,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@607-609",
      "type": "method_definition",
      "name": "if",
      "text": "if (queryData && queryData[sectionId] && field && field.name) {\n    transformedData[sectionId][field.name] = queryData[sectionId][field.name]\n  }",
      "startLine": 607,
      "endLine": 609,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 27,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@840-842",
      "type": "method_definition",
      "name": "if",
      "text": "if (!transformedData[sectionId]) {\n      transformedData[sectionId] = {}\n    }",
      "startLine": 840,
      "endLine": 842,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 28,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@1024-1032",
      "type": "method_definition",
      "name": "if",
      "text": "if (queryData[sectionId]?.[field.name]) {\n    if (!transformedData[sectionId]) {\n      transformedData[sectionId] = {}\n    }\n    const nationalityName = countryAlpha3toAlpha2(\n      queryData[sectionId][field.name] && queryData[sectionId][field.name][0]\n    )\n    transformedData[sectionId][field.name] = nationalityName || 'UNKNOWN'\n  }",
      "startLine": 1024,
      "endLine": 1032,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 43,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/query/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@46-100",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case offlineActions.READY:\n    case offlineActions.FORMS_LOADED:\n      return loop(\n        state,\n        Cmd.run(\n          async () => {\n            await initValidators()\n            return action.payload\n          },\n          {\n            successActionCreator: offlineActions.CustomValidatorsSuccess\n          }\n        )\n      )\n    case offlineActions.CUSTOM_VALIDATORS_LOADED:\n      const { forms } = action.payload\n\n      const birth = deserializeForm(forms.birth, validators)\n      const death = deserializeForm(forms.death, validators)\n      const marriage = deserializeForm(forms.marriage, validators)\n\n      return {\n        ...state,\n        state: 'READY',\n        reviewForm: {\n          birth: {\n            ...birth,\n            sections: [\n              ...birth.sections.filter(({ viewType }) =>\n                ['form', 'hidden', 'review'].includes(viewType)\n              )\n            ]\n          },\n          death: {\n            ...death,\n            sections: [\n              ...death.sections.filter(({ viewType }) =>\n                ['form', 'hidden', 'review'].includes(viewType)\n              )\n            ]\n          },\n          marriage: {\n            ...marriage,\n            sections: [\n              ...marriage.sections.filter(({ viewType }) =>\n                ['form', 'hidden', 'review'].includes(viewType)\n              )\n            ]\n          }\n        }\n      }\n    default:\n      return state\n  }",
      "startLine": 46,
      "endLine": 100,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/reviewReducer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@36-38",
      "type": "method_definition",
      "name": "if",
      "text": "if (toSectionId && !transformedData[toSectionId]) {\n      transformedData[toSectionId] = {}\n    }",
      "startLine": 36,
      "endLine": 38,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/mutation/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-68",
      "type": "function_declaration",
      "name": "ignoreFieldTransformer",
      "text": "function ignoreFieldTransformer(\n  transformedData: TransformedData,\n  draftData: IFormData,\n  sectionId: string,\n  field: IFormField\n) {\n  /* do nothing */\n  return transformedData\n}",
      "startLine": 60,
      "endLine": 68,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/mutation/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@70-78",
      "type": "function_declaration",
      "name": "fieldToArrayTransformer",
      "text": "function fieldToArrayTransformer(\n  transformedData: TransformedData,\n  draftData: IFormData,\n  sectionId: string,\n  field: IFormField\n) {\n  transformedData[sectionId][field.name] = [draftData[sectionId][field.name]]\n  return transformedData\n}",
      "startLine": 70,
      "endLine": 78,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/forms/register/mappings/mutation/field-mappings.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-28",
      "type": "function_declaration",
      "name": "useRecord",
      "text": "function useRecord() {\n  const declarations = useSelector(\n    (state: IStoreState) => state.declarationsState.declarations\n  )\n\n  return useMemo(\n    () => ({\n      findById(id: string) {\n        return declarations.find((declaration) => declaration.id === id)\n      }\n    }),\n    [declarations]\n  )\n}",
      "startLine": 15,
      "endLine": 28,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useRecord.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@22-24",
      "type": "method_definition",
      "name": "findById",
      "text": "findById(id: string) {\n        return declarations.find((declaration) => declaration.id === id)\n      }",
      "startLine": 22,
      "endLine": 24,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useRecord.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-32",
      "type": "function_declaration",
      "name": "useModal",
      "text": "function useModal() {\n  const [modalNode, setModalNode] = useState<ReactNode>(null)\n\n  function openModal<ModalResult>(modalFactory: ModalFactory<ModalResult>) {\n    return new Promise<ModalResult>((resolve) => {\n      function close(value: ModalResult) {\n        resolve(value)\n        setModalNode(null)\n      }\n\n      setModalNode(modalFactory(close))\n    })\n  }\n\n  return [modalNode, openModal] as const\n}",
      "startLine": 17,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useModal.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-25",
      "type": "function_declaration",
      "name": "close",
      "text": "function close(value: ModalResult) {\n        resolve(value)\n        setModalNode(null)\n      }",
      "startLine": 22,
      "endLine": 25,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useModal.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@104-106",
      "type": "method_definition",
      "name": "if",
      "text": "if (!userPrimaryOffice?.id) {\n      return false\n    }",
      "startLine": 104,
      "endLine": 106,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useAuthorization.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@114-123",
      "type": "method_definition",
      "name": "isOfficeUnderJurisdiction",
      "text": "isOfficeUnderJurisdiction(\n        userPrimaryOffice.id,\n        user.primaryOffice.id,\n        locations,\n        offices\n      )\n    }\n    if (hasScope(SCOPES.USER_READ_ONLY_MY_AUDIT)) {\n      return user.id === currentUser?.id\n    }",
      "startLine": 114,
      "endLine": 123,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useAuthorization.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@131-133",
      "type": "method_definition",
      "name": "if",
      "text": "if (!userPrimaryOffice?.id) {\n      return false\n    }",
      "startLine": 131,
      "endLine": 133,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useAuthorization.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@134-136",
      "type": "method_definition",
      "name": "if",
      "text": "if (hasScope(SCOPES.USER_UPDATE)) {\n      return true\n    }",
      "startLine": 134,
      "endLine": 136,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useAuthorization.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@137-147",
      "type": "method_definition",
      "name": "if",
      "text": "if (hasScope(SCOPES.USER_UPDATE_MY_JURISDICTION)) {\n      if (roleScopes(user.role.id).includes(SCOPES.USER_UPDATE)) {\n        return false\n      }\n      return isOfficeUnderJurisdiction(\n        userPrimaryOffice.id,\n        user.primaryOffice.id,\n        locations,\n        offices\n      )\n    }",
      "startLine": 137,
      "endLine": 147,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useAuthorization.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@158-160",
      "type": "method_definition",
      "name": "if",
      "text": "if (!userPrimaryOffice?.id) {\n      return false\n    }",
      "startLine": 158,
      "endLine": 160,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useAuthorization.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@180-182",
      "type": "method_definition",
      "name": "if",
      "text": "if (!userPrimaryOffice?.id) {\n      return false\n    }",
      "startLine": 180,
      "endLine": 182,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/hooks/useAuthorization.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@55-58",
      "type": "function_declaration",
      "name": "userReconnectedToast",
      "text": "function userReconnectedToast() {\n  const action = actions.showUserReconnectedToast()\n  store.dispatch(action)\n}",
      "startLine": 55,
      "endLine": 58,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/index.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@102-277",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case actions.SESSION_EXPIRED:\n      return {\n        ...state,\n        sessionExpired: true\n      }\n    case actions.CONFIGURATION_ERROR:\n      return {\n        ...state,\n        configurationError: action.payload\n      }\n    case actions.SHOW_CONFIG_ERROR:\n      return {\n        ...state,\n        configurationErrorVisible: true\n      }\n    case actions.HIDE_CONFIG_ERROR:\n      return {\n        ...state,\n        configurationErrorVisible: false\n      }\n    case actions.TOGGLE_DRAFT_SAVED_NOTIFICATION:\n      return {\n        ...state,\n        saveDraftClicked: !state.saveDraftClicked\n      }\n    case actions.SHOW_SUBMIT_FORM_SUCCESS_TOAST:\n      return {\n        ...state,\n        submitFormSuccessToast: action.payload.data\n      }\n    case actions.HIDE_SUBMIT_FORM_SUCCESS_TOAST:\n      return {\n        ...state,\n        submitFormSuccessToast: null\n      }\n    case actions.SHOW_SUBMIT_FORM_ERROR_TOAST:\n      return {\n        ...state,\n        submitFormErrorToast: action.payload.data\n      }\n    case actions.SHOW_CREATE_USER_ERROR_TOAST:\n      const userCreateDuplicateMobileFailedToast = {\n        visible: true,\n        mobile: action.payload.mobile\n      }\n      return {\n        ...state,\n        userCreateDuplicateMobileFailedToast\n      }\n    case actions.SHOW_CREATE_USER_DUPLICATE_EMAIL_ERROR_TOAST:\n      const userCreateDuplicateEmailFailedToast = {\n        visible: true,\n        email: action.payload.email\n      }\n      return {\n        ...state,\n        userCreateDuplicateEmailFailedToast\n      }\n    case actions.SHOW_DOWNLOAD_DECLARATION_FAILED_TOAST:\n      return {\n        ...state,\n        downloadDeclarationFailedToast: true\n      }\n    case actions.HIDE_DOWNLOAD_DECLARATION_FAILED_TOAST:\n      return {\n        ...state,\n        downloadDeclarationFailedToast: false\n      }\n    case actions.HIDE_SUBMIT_FORM_ERROR_TOAST:\n      return {\n        ...state,\n        submitFormErrorToast: null\n      }\n    case actions.HIDE_CREATE_USER_ERROR_TOAST:\n      return {\n        ...state,\n        userCreateDuplicateMobileFailedToast: {\n          visible: false,\n          mobile: null\n        }\n      }\n    case actions.HIDE_CREATE_USER_DUPLICATE_EMAIL_ERROR_TOAST:\n      return {\n        ...state,\n        userCreateDuplicateEmailFailedToast: {\n          visible: false,\n          email: null\n        }\n      }\n    case actions.SHOW_USER_AUDIT_SUCCESS_TOAST:\n      const { userFullName, action: auditAction } = (\n        action as actions.ShowUserAuditSuccessToast\n      ).payload\n      return {\n        ...state,\n        userAuditSuccessToast: {\n          ...state.userAuditSuccessToast,\n          visible: true,\n          userFullName,\n          action: auditAction\n        }\n      }\n    case actions.HIDE_USER_AUDIT_SUCCESS_TOAST:\n      return {\n        ...state,\n        userAuditSuccessToast: {\n          ...state.userAuditSuccessToast,\n          visible: false\n        }\n      }\n    case actions.SHOW_PIN_UPDATE_SUCCESS:\n      return {\n        ...state,\n        showPINUpdateSuccess: true\n      }\n    case actions.HIDE_PIN_UPDATE_SUCCESS:\n      return {\n        ...state,\n        showPINUpdateSuccess: false\n      }\n    case actions.SHOW_DUPLICATE_RECORDS_TOAST:\n      return {\n        ...state,\n        showDuplicateRecordsToast: true,\n        duplicateTrackingId: action.payload.trackingId,\n        duplicateCompositionId: action.payload.compositionId\n      }\n    case actions.HIDE_DUPLICATE_RECORDS_TOAST:\n      return {\n        ...state,\n        showDuplicateRecordsToast: false,\n        duplicateTrackingId: null,\n        duplicateCompositionId: null\n      }\n    case actions.SHOW_UNASSIGNED:\n      return {\n        ...state,\n        unassignedModal: action.payload\n      }\n    case actions.SHOW_UNASSIGNED_DECLARATIONS:\n      return {\n        ...state,\n        unassignedDeclarations: action.payload\n      }\n    case actions.HIDE_UNASSIGNED_DECLARATIONS_TOAST:\n      return {\n        ...state,\n        unassignedDeclarations: []\n      }\n    case actions.HIDE_UNASSIGNED:\n      return {\n        ...state,\n        unassignedModal: null\n      }\n    case actions.SHOW_USER_RECONNECTED_TOAST:\n      return {\n        ...state,\n        userReconnectedToast: true\n      }\n    case actions.HIDE_USER_RECONNECTED_TOAST:\n      return {\n        ...state,\n        userReconnectedToast: false\n      }\n    case actions.TOGGLE_EMAIL_ALL_USERS_FEEDBACK_TOAST:\n      return {\n        ...state,\n        emailAllUsers: {\n          ...state.emailAllUsers,\n          ...action.payload\n        }\n      }\n    default:\n      return state\n  }",
      "startLine": 102,
      "endLine": 277,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/notification/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@137-139",
      "type": "function_declaration",
      "name": "saveOfflineData",
      "text": "async function saveOfflineData(offlineData: IOfflineData) {\n  return storage.setItem('offline', JSON.stringify(offlineData))\n}",
      "startLine": 137,
      "endLine": 139,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@141-168",
      "type": "function_declaration",
      "name": "loadSingleCertificate",
      "text": "async function loadSingleCertificate(certificate: ICertificateData) {\n  const { id } = certificate\n  const res = await fetch(certificate.svgUrl, {\n    headers: {\n      Authorization: getToken(),\n      'If-None-Match': certificate?.hash ?? ''\n    }\n  })\n  if (res.status === 304) {\n    return {\n      ...certificate,\n      svg: certificate.svg,\n      hash: certificate!.hash!\n    }\n  }\n  if (!res.ok) {\n    return Promise.reject(\n      new Error(`Fetching certificate with id: \"${id}\" failed`)\n    )\n  }\n  return res.text().then((svg) => {\n    return {\n      ...certificate,\n      svg,\n      hash: res.headers.get('etag')!\n    }\n  })\n}",
      "startLine": 141,
      "endLine": 168,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@170-176",
      "type": "function_declaration",
      "name": "loadCertificates",
      "text": "async function loadCertificates(\n  savedCertificates: IOfflineData['templates']['certificates']\n) {\n  return await Promise.all(\n    savedCertificates.map((cert) => loadSingleCertificate(cert))\n  )\n}",
      "startLine": 170,
      "endLine": 176,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@178-218",
      "type": "function_declaration",
      "name": "checkIfDone",
      "text": "function checkIfDone(\n  oldState: IOfflineDataState,\n  loopOrState: IOfflineDataState | Loop<IOfflineDataState, Action>\n) {\n  const loopWithState = liftState(loopOrState)\n  const newState = getModel(loopWithState)\n  const cmd = getCmd(loopWithState)\n  if (\n    isOfflineDataLoaded(newState.offlineData) &&\n    !oldState.offlineDataLoaded\n  ) {\n    return loop(\n      { ...newState, offlineDataLoaded: true },\n      Cmd.list([\n        ...(cmd ? [cmd] : []),\n        Cmd.run(saveOfflineData, { args: [newState.offlineData] }),\n        Cmd.action(actions.offlineDataReady(newState.offlineData))\n      ])\n    )\n  }\n\n  if (\n    /*\n     * Data was updated with a fresh version from offlineCountryConfig\n     */\n    isOfflineDataLoaded(oldState.offlineData) &&\n    isOfflineDataLoaded(newState.offlineData) &&\n    oldState.offlineData !== newState.offlineData\n  ) {\n    return loop(\n      newState,\n      Cmd.list([\n        ...(cmd ? [cmd] : []),\n        Cmd.run(saveOfflineData, { args: [newState.offlineData] }),\n        Cmd.action(actions.offlineDataUpdated(newState.offlineData))\n      ])\n    )\n  }\n\n  return loopWithState\n}",
      "startLine": 178,
      "endLine": 218,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@262-267",
      "type": "function_declaration",
      "name": "delay",
      "text": "function delay(cmd: RunCmd<any>, time: number) {\n  return Cmd.list(\n    [Cmd.run(() => new Promise((resolve) => setTimeout(resolve, time))), cmd],\n    { sequence: true }\n  )\n}",
      "startLine": 262,
      "endLine": 267,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@269-280",
      "type": "function_declaration",
      "name": "getDataLoadingCommands",
      "text": "function getDataLoadingCommands() {\n  return Cmd.list<actions.Action>([\n    FACILITIES_CMD,\n    LOCATIONS_CMD,\n    CONFIG_CMD,\n    CONDITIONALS_CMD,\n    VALIDATORS_CMD,\n    HANDLEBARS_CMD,\n    FORMS_CMD,\n    CONTENT_CMD\n  ])\n}",
      "startLine": 269,
      "endLine": 280,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@282-297",
      "type": "function_declaration",
      "name": "updateGlobalConfig",
      "text": "function updateGlobalConfig() {\n  return Cmd.run(() => {\n    // Replaces the script tag in site head with a fresh one\n    const currentConfigElement = Array.from(\n      document.querySelectorAll('script')\n    ).find(({ src }) => src.indexOf('config.js'))!\n    const head = document.getElementsByTagName('head')[0]\n    const newConfigElement = document.createElement('script')\n    newConfigElement.src = currentConfigElement.src.replace(\n      /\\?.*/,\n      '?cachebuster=' + Date.now()\n    )\n    head.appendChild(newConfigElement)\n    head.removeChild(currentConfigElement)\n  })\n}",
      "startLine": 282,
      "endLine": 297,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@303-305",
      "type": "function_declaration",
      "name": "errorIfDataNotLoaded",
      "text": "function errorIfDataNotLoaded(state: IOfflineDataState) {\n  return !isOfflineDataLoaded(state.offlineData)\n}",
      "startLine": 303,
      "endLine": 305,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@311-611",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    // ENTRYPOINT - called from profile reducer\n    case profileActions.USER_DETAILS_AVAILABLE: {\n      return loop(\n        { ...state, userDetails: action.payload },\n        Cmd.run(storage.getItem, {\n          args: ['offline'],\n          successActionCreator: actions.getOfflineDataSuccess,\n          // @todo this action isn't handled\n          failActionCreator: actions.getOfflineDataFailed\n        })\n      )\n    }\n    case actions.REFRESH_OFFLINE_DATA: {\n      return loop(\n        state,\n        Cmd.list([getDataLoadingCommands(), updateGlobalConfig()])\n      )\n    }\n    case actions.ANONYMOUS_USER_OFFLINE_CONFIG: {\n      return {\n        ...state,\n        offlineData: {\n          ...state.offlineData,\n          ...action.payload\n        }\n      }\n    }\n    case actions.GET_OFFLINE_DATA_SUCCESS: {\n      const offlineDataString = action.payload\n      const offlineData: IOfflineData = JSON.parse(\n        offlineDataString ? offlineDataString : '{}'\n      )\n\n      const dataLoadingCmds = getDataLoadingCommands()\n      const offlineDataLoaded = isOfflineDataLoaded(offlineData)\n      if (offlineDataLoaded) {\n        return loop(\n          {\n            ...state,\n            offlineData,\n            offlineDataLoaded\n          },\n          Cmd.list([\n            // Try loading data regardless as it might have been updated.\n            isNavigatorOnline() ? dataLoadingCmds : Cmd.none\n          ])\n        )\n      }\n      return loop(state, dataLoadingCmds)\n    }\n\n    case actions.UPDATE_OFFLINE_CONFIG: {\n      merge(window.config, action.payload.config)\n      const newOfflineData = {\n        ...state.offlineData,\n        config: action.payload.config\n      }\n\n      return loop(\n        {\n          ...state,\n          offlineData: newOfflineData\n        },\n        Cmd.run(saveOfflineData, { args: [newOfflineData] })\n      )\n    }\n    case actions.UPDATE_OFFLINE_SYSTEMS: {\n      const newOfflineData = {\n        ...state.offlineData,\n        systems: action.payload.systems\n      }\n\n      return loop(\n        {\n          ...state,\n          offlineData: newOfflineData\n        },\n        Cmd.run(saveOfflineData, { args: [newOfflineData] })\n      )\n    }\n\n    /*\n     * Configurations\n     */\n    case actions.APPLICATION_CONFIG_LOADED: {\n      const { certificates, config, systems } = action.payload\n      merge(window.config, config)\n\n      const newOfflineData = {\n        ...state.offlineData,\n        config,\n        systems,\n        templates: {\n          ...state.offlineData.templates,\n          certificates: (certificates as ICertificateData[]).map((x) => {\n            const baseUrl = window.location.origin\n            if (x.fonts) {\n              x.fonts = Object.fromEntries(\n                Object.entries(x.fonts).map(([fontFamily, fontStyles]) => [\n                  fontFamily,\n                  {\n                    normal: `${baseUrl}${fontStyles.normal}`,\n                    bold: `${baseUrl}${fontStyles.bold}`,\n                    italics: `${baseUrl}${fontStyles.italics}`,\n                    bolditalics: `${baseUrl}${fontStyles.bolditalics}`\n                  }\n                ])\n              )\n            }\n            return x\n          })\n        }\n      }\n\n      return loop(\n        {\n          ...state,\n          offlineDataLoaded: isOfflineDataLoaded(newOfflineData),\n          offlineData: newOfflineData\n        },\n        Cmd.run(loadCertificates, {\n          successActionCreator: actions.certificatesLoaded,\n          args: [newOfflineData.templates?.certificates]\n        })\n      )\n    }\n\n    case actions.CERTIFICATES_LOADED: {\n      const certificates = action.payload\n      return {\n        ...state,\n        offlineData: {\n          ...state.offlineData,\n          templates: {\n            ...state.offlineData.templates,\n            certificates\n          }\n        }\n      }\n    }\n\n    case actions.APPLICATION_CONFIG_FAILED: {\n      const payload = action.payload\n      if (payload.cause === 'VALIDATION_ERROR') {\n        return loop(\n          {\n            ...state,\n            loadingError: errorIfDataNotLoaded(state)\n          },\n          Cmd.action(\n            configurationErrorNotification(\n              payload.message + ' to load application configuration properly'\n            )\n          )\n        )\n      }\n      return loop(\n        {\n          ...state,\n          loadingError: errorIfDataNotLoaded(state)\n        },\n        delay(CONFIG_CMD, RETRY_TIMEOUT)\n      )\n    }\n\n    /*\n     * Definitions\n     */\n\n    case actions.CONTENT_LOADED: {\n      return {\n        ...state,\n        offlineData: {\n          ...state.offlineData,\n          languages: action.payload.languages\n        }\n      }\n    }\n    case actions.CONTENT_FAILED: {\n      return loop(\n        {\n          ...state,\n          loadingError: errorIfDataNotLoaded(state)\n        },\n        delay(CONTENT_CMD, RETRY_TIMEOUT)\n      )\n    }\n\n    /*\n     * Locations\n     */\n\n    case actions.LOCATIONS_LOADED: {\n      return {\n        ...state,\n        offlineData: {\n          ...state.offlineData,\n          locations: action.payload\n        }\n      }\n    }\n    case actions.LOCATIONS_FAILED: {\n      return loop(\n        {\n          ...state,\n          loadingError: errorIfDataNotLoaded(state)\n        },\n        delay(LOCATIONS_CMD, RETRY_TIMEOUT)\n      )\n    }\n\n    /*\n     * Forms\n     */\n\n    case actions.FORMS_LOADED: {\n      return {\n        ...state,\n        offlineData: {\n          ...state.offlineData,\n          forms: action.payload.forms\n        }\n      }\n    }\n    case actions.FORMS_FAILED: {\n      const payload = action.payload\n      if (payload.cause === 'VALIDATION_ERROR') {\n        return loop(\n          {\n            ...state,\n            loadingError: errorIfDataNotLoaded(state)\n          },\n          Cmd.action(configurationErrorNotification(payload.message))\n        )\n      }\n      return loop(\n        {\n          ...state,\n          loadingError: errorIfDataNotLoaded(state)\n        },\n        delay(FORMS_CMD, RETRY_TIMEOUT)\n      )\n    }\n\n    /*\n     * Facilities && Offices\n     */\n\n    case actions.FACILITIES_LOADED: {\n      const facilities = filterLocations(action.payload, 'HEALTH_FACILITY')\n\n      const offices = filterLocations(\n        action.payload,\n        'CRVS_OFFICE'\n        /*\n\n        // This is used to filter office locations available offline\n        // It was important in an older design and may become important again\n\n        {\n          locationLevel: 'id',\n          locationId: isNationalSystemAdmin(state.userDetails)\n            ? undefined\n            : state.userDetails &&\n              state.userDetails.primaryOffice &&\n              state.userDetails.primaryOffice.id\n        }*/\n      )\n      return {\n        ...state,\n        offlineData: {\n          ...state.offlineData,\n          facilities,\n          offices\n        }\n      }\n    }\n    case actions.FACILITIES_FAILED: {\n      return loop(\n        {\n          ...state,\n          loadingError: errorIfDataNotLoaded(state)\n        },\n        delay(FACILITIES_CMD, RETRY_TIMEOUT)\n      )\n    }\n\n    case actions.READY: {\n      const offlineDataLoaded = isOfflineDataLoaded(action.payload)\n      return {\n        ...state,\n        loadingError: false,\n        offlineData: action.payload,\n        offlineDataLoaded\n      }\n    }\n\n    default:\n      return state\n  }",
      "startLine": 311,
      "endLine": 611,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-31",
      "type": "function_declaration",
      "name": "printPDF",
      "text": "function printPDF(template: IPDFTemplate, declarationId: string) {\n  const pdf = pdfMake.createPdf(template.definition, undefined, template.fonts)\n  if (isMobileDevice()) {\n    pdf.download(`${declarationId}`)\n  } else {\n    pdf.print()\n  }\n}",
      "startLine": 24,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/pdfRenderer/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@104-109",
      "type": "function_declaration",
      "name": "selectApplicationName",
      "text": "function selectApplicationName(store: IStoreState) {\n  return (\n    getKey(store, 'offlineData').config?.APPLICATION_NAME ||\n    getKey(store, 'offlineData').anonymousConfig?.APPLICATION_NAME\n  )\n}",
      "startLine": 104,
      "endLine": 109,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/offline/selectors.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@95-101",
      "type": "function_declaration",
      "name": "updateDeclaration",
      "text": "function updateDeclaration(\n  dispatch: Dispatch,\n  declaration: IDeclaration\n) {\n  dispatch(modifyDeclaration(declaration))\n  dispatch(writeDeclaration(declaration))\n}",
      "startLine": 95,
      "endLine": 101,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/submissionMiddleware.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@103-106",
      "type": "function_declaration",
      "name": "updateWorkqueue",
      "text": "function updateWorkqueue(store: IStoreState, dispatch: Dispatch) {\n  const userId = store.offline.userDetails?.practitionerId\n  dispatch(updateRegistrarWorkqueue(userId, 10))\n}",
      "startLine": 103,
      "endLine": 106,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/submissionMiddleware.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@108-115",
      "type": "function_declaration",
      "name": "isCorrectionAction",
      "text": "function isCorrectionAction(action: SubmissionAction) {\n  return [\n    SubmissionAction.REQUEST_CORRECTION,\n    SubmissionAction.MAKE_CORRECTION,\n    SubmissionAction.APPROVE_CORRECTION,\n    SubmissionAction.REJECT_CORRECTION\n  ].includes(action)\n}",
      "startLine": 108,
      "endLine": 115,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/submissionMiddleware.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@117-119",
      "type": "function_declaration",
      "name": "isValidationAction",
      "text": "function isValidationAction(action: SubmissionAction) {\n  return [SubmissionAction.APPROVE_DECLARATION].includes(action)\n}",
      "startLine": 117,
      "endLine": 119,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/submissionMiddleware.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@121-123",
      "type": "function_declaration",
      "name": "isRegisterAction",
      "text": "function isRegisterAction(action: SubmissionAction) {\n  return [SubmissionAction.REGISTER_DECLARATION].includes(action)\n}",
      "startLine": 121,
      "endLine": 123,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/submissionMiddleware.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@125-144",
      "type": "function_declaration",
      "name": "removeDuplicatesFromCompositionAndElastic",
      "text": "async function removeDuplicatesFromCompositionAndElastic(\n  declaration: IDeclaration,\n  submissionAction: SubmissionAction\n) {\n  if (\n    declaration.isNotDuplicate &&\n    [\n      SubmissionAction.REGISTER_DECLARATION,\n      SubmissionAction.REJECT_DECLARATION,\n      SubmissionAction.APPROVE_DECLARATION\n    ].includes(submissionAction)\n  ) {\n    await client.mutate({\n      mutation: NOT_A_DUPLICATE,\n      variables: {\n        id: declaration.id\n      }\n    })\n  }\n}",
      "startLine": 125,
      "endLine": 144,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/submissionMiddleware.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-20",
      "type": "function_declaration",
      "name": "configStorage",
      "text": "function configStorage(dbName: string) {\n  localForage.config({\n    driver: localForage.INDEXEDDB,\n    name: dbName\n  })\n  validateApplicationVersion()\n}",
      "startLine": 14,
      "endLine": 20,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/storage.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-32",
      "type": "function_declaration",
      "name": "removeItem",
      "text": "async function removeItem(key: string) {\n  return await localForage.removeItem(key)\n}",
      "startLine": 30,
      "endLine": 32,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/storage.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@75-118",
      "type": "function_declaration",
      "name": "UserSetupPage",
      "text": "function UserSetupPage({ setupData, goToStep }: IOwnProps) {\n  const intl = useIntl()\n  const userDetails = useSelector((store: IStoreState) => getUserDetails(store))\n  const offlineCountryConfig = useSelector((store: IStoreState) =>\n    getOfflineData(store)\n  )\n\n  return (\n    <Frame\n      header={<AppBar title=\"OpenCRVS\" />}\n      skipToContentText=\"Skip to main content\"\n    >\n      <Frame.LayoutCentered id=\"user-setup-landing-page\">\n        <Box>\n          <LogoContainer>\n            <CountryLogo src={offlineCountryConfig.config.COUNTRY_LOGO.file} />\n          </LogoContainer>\n          <TitleHolder>\n            {intl.formatMessage(messages.userSetupWelcomeTitle, {\n              applicationName: offlineCountryConfig.config.APPLICATION_NAME\n            })}\n          </TitleHolder>\n          <InstructionHolder>\n            {intl.formatMessage(messages.userSetupIntroduction)}\n          </InstructionHolder>\n          <Button\n            id=\"user-setup-start-button\"\n            type=\"primary\"\n            size=\"large\"\n            fullWidth\n            onClick={() =>\n              goToStep(ProtectedAccoutStep.PASSWORD, {\n                ...setupData,\n                userId: (userDetails && userDetails.userMgntUserID) || ''\n              })\n            }\n          >\n            {intl.formatMessage(buttonMessages.start)}\n          </Button>\n        </Box>\n      </Frame.LayoutCentered>\n    </Frame>\n  )\n}",
      "startLine": 75,
      "endLine": 118,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/UserSetup/UserSetupPage.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@56-199",
      "type": "function_declaration",
      "name": "UserSetupReview",
      "text": "function UserSetupReview({ setupData, goToStep }: IProps) {\n  const intl = useIntl()\n  const [submitError, setSubmitError] = React.useState(false)\n  const userDetails = useSelector<IStoreState, UserDetails | null>(\n    getUserDetails\n  )\n  const englishName = getUserName(userDetails)\n  const mobile = (userDetails && (userDetails.mobile as string)) || ''\n  const email = (userDetails && (userDetails.email as string)) || ''\n  const role = userDetails && intl.formatMessage(userDetails.role.label)\n\n  const primaryOffice =\n    (userDetails &&\n      userDetails.primaryOffice &&\n      userDetails.primaryOffice.name) ||\n    ''\n\n  const answeredQuestions: IDataProps[] = []\n  setupData.securityQuestionAnswers &&\n    setupData.securityQuestionAnswers.forEach((e) => {\n      answeredQuestions.push({\n        id: `Question_${e.questionKey}`,\n        label: intl.formatMessage(userMessages[e.questionKey]),\n        value: e.answer,\n        action: {\n          id: `Question_Action_${e.questionKey}`,\n          label: intl.formatMessage(buttonMessages.change),\n          handler: () =>\n            goToStep(ProtectedAccoutStep.SECURITY_QUESTION, setupData)\n        }\n      })\n    })\n  const items = [\n    {\n      id: 'EnglishName',\n      label: intl.formatMessage(messages.labelEnglishName),\n      value: englishName,\n      action: {\n        label: intl.formatMessage(buttonMessages.change),\n        disabled: true\n      }\n    },\n    {\n      id: 'UserPhone',\n      label: intl.formatMessage(constantsMessages.labelPhone),\n      value: mobile,\n      action: {\n        label: intl.formatMessage(buttonMessages.change),\n        disabled: true\n      }\n    },\n    {\n      id: 'Email',\n      label: intl.formatMessage(constantsMessages.labelEmail),\n      value: email,\n      action: {\n        label: intl.formatMessage(buttonMessages.change),\n        disabled: true\n      }\n    },\n    {\n      id: 'RegisterOffice',\n      label: intl.formatMessage(messages.labelAssignedOffice),\n      value: primaryOffice\n    },\n    {\n      id: 'Role',\n      label: `${intl.formatMessage(constantsMessages.labelRole)}`,\n      value: role\n    },\n    ...answeredQuestions\n  ]\n\n  const onCompleted = () => {\n    goToStep(ProtectedAccoutStep.CONFIRMATION, setupData)\n  }\n  const onError = () => {\n    setSubmitError(true)\n  }\n  return (\n    <Mutation<SubmitActivateUserMutation, SubmitActivateUserMutationVariables>\n      mutation={activateUserMutation}\n      variables={{\n        userId: String(setupData.userId),\n        password: String(setupData.password),\n        securityQuestionAnswers:\n          setupData.securityQuestionAnswers as ISecurityQuestionAnswer[]\n      }}\n      onCompleted={() => onCompleted()}\n      onError={() => onError()}\n    >\n      {(submitActivateUser, { loading }) => {\n        return (\n          <ActionPageLight\n            title={intl.formatMessage(messages.userSetupRevieTitle)}\n            hideBackground\n            goBack={() => {\n              goToStep(ProtectedAccoutStep.SECURITY_QUESTION, setupData)\n            }}\n          >\n            {loading ? (\n              <Content>\n                <Loader\n                  id=\"setup_submit_waiting\"\n                  loadingText={intl.formatMessage(messages.waiting)}\n                />\n              </Content>\n            ) : (\n              <Content\n                title={intl.formatMessage(messages.userSetupReviewHeader)}\n                bottomActionButtons={[\n                  <Button\n                    key=\"confirm\"\n                    id=\"Confirm\"\n                    type=\"primary\"\n                    size=\"large\"\n                    fullWidth\n                    onClick={() => submitActivateUser()}\n                  >\n                    <Icon name=\"Check\" />\n                    {intl.formatMessage(buttonMessages.confirm)}\n                  </Button>\n                ]}\n              >\n                <GlobalError id=\"GlobalError\">\n                  {submitError && (\n                    <ErrorText>\n                      {intl.formatMessage(errorMessages.pleaseTryAgainError)}\n                    </ErrorText>\n                  )}\n                </GlobalError>\n                <div id=\"UserSetupData\">\n                  {items.map((item: IDataProps, index: number) => (\n                    <DataRow key={index} {...item} />\n                  ))}\n                </div>\n              </Content>\n            )}\n          </ActionPageLight>\n        )\n      }}\n    </Mutation>\n  )\n}",
      "startLine": 56,
      "endLine": 199,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/UserSetup/SetupReviewPage.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@93-101",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: IProps) {\n    super(props)\n\n    this.state = {\n      questionnaire: this.prepareQuestionnaire(),\n      refresher: Date.now(),\n      showError: false\n    }\n  }",
      "startLine": 93,
      "endLine": 101,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/UserSetup/SecurityQuestionView.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@1273-1947",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case STORE_DECLARATION:\n      return {\n        ...state,\n        declarations: state.declarations.concat(action.payload.declaration)\n      }\n    case DELETE_DECLARATION: {\n      const { declarationId, client: clientFromDeleteDeclaration } =\n        action.payload\n      return loop(\n        {\n          ...state,\n          declarations: state.declarations.map((declaration) =>\n            declaration.id === declarationId\n              ? { ...declaration, writingDraft: true }\n              : declaration\n          )\n        },\n        Cmd.run(deleteDeclarationByUser, {\n          successActionCreator: (id: string) =>\n            deleteDeclarationSuccess(id, clientFromDeleteDeclaration),\n          failActionCreator: deleteDeclarationFailed,\n          args: [state.userID, action.payload.declarationId, state]\n        })\n      )\n    }\n    case DELETE_DECLARATION_SUCCESS:\n      const declarationToDelete = state.declarations.find(\n        (declaration) => declaration.id === action.payload.declarationId\n      )\n      const declarationMinioUrls =\n        getMinioUrlsFromDeclaration(declarationToDelete)\n\n      postMinioUrlsToServiceWorker(declarationMinioUrls)\n\n      const declarationsWithoutDeleted = state.declarations.filter(\n        ({ id }) => id !== action.payload.declarationId\n      )\n\n      clearUnusedViewRecordCacheEntries(\n        action.payload.client.cache,\n        declarationsWithoutDeleted\n      )\n\n      return {\n        ...state,\n        declarations: declarationsWithoutDeleted\n      }\n    case MODIFY_DECLARATION:\n      const newDeclarations = [...state.declarations]\n      const currentDeclarationIndex = newDeclarations.findIndex(\n        (declaration) => declaration.id === action.payload.declaration.id\n      )\n      const modifiedDeclaration = { ...action.payload.declaration }\n\n      if (modifiedDeclaration.data?.informant?.relationship) {\n        modifiedDeclaration.data.informant.relationship = (\n          modifiedDeclaration.data.registration.informantType as FieldValueMap\n        )?.value\n      }\n\n      newDeclarations[currentDeclarationIndex] = {\n        ...newDeclarations[currentDeclarationIndex],\n        ...modifiedDeclaration\n      }\n\n      return {\n        ...state,\n        declarations: newDeclarations\n      }\n    case CLEAR_CORRECTION_AND_PRINT_CHANGES: {\n      const declarationIndex = state.declarations.findIndex(\n        (declaration) => declaration.id === action.payload.declarationId\n      )\n\n      const correction = state.declarations[declarationIndex]\n\n      const orignalAppliation: IDeclaration = {\n        ...correction,\n        data: {\n          ...correction?.originalData\n        }\n      }\n\n      return loop(\n        {\n          ...state,\n          declarations: state.declarations.map((declaration, index) => {\n            if (index === declarationIndex) {\n              return orignalAppliation\n            }\n            return declaration\n          })\n        },\n        Cmd.action(modifyDeclaration(orignalAppliation))\n      )\n    }\n\n    case WRITE_DECLARATION: {\n      const {\n        declaration: { id }\n      } = action.payload\n      return loop(\n        {\n          ...state,\n          declarations: state.declarations.map((stateDeclaration) =>\n            id === stateDeclaration.id\n              ? { ...stateDeclaration, writingDraft: true }\n              : stateDeclaration\n          )\n        },\n        Cmd.run(writeDeclarationByUser, {\n          successActionCreator: (declaration: IDeclaration) => {\n            if (action.payload.callback) {\n              action.payload.callback()\n            }\n            return writeDeclarationSuccess(declaration)\n          },\n          failActionCreator: writeDeclarationFailed,\n          args: [Cmd.getState, state.userID, action.payload.declaration]\n        })\n      )\n    }\n    case WRITE_DECLARATION_SUCCESS: {\n      const { declaration } = action.payload\n      return {\n        ...state,\n        declarations: state.declarations.map((stateDeclaration) =>\n          declaration.id === stateDeclaration.id\n            ? { ...declaration, writingDraft: false }\n            : stateDeclaration\n        )\n      }\n    }\n    case USER_DETAILS_AVAILABLE:\n      return loop(\n        {\n          ...state\n        },\n        Cmd.run<\n          IGetStorageDeclarationsFailedAction,\n          IGetStorageDeclarationsSuccessAction\n        >(getDeclarationsOfCurrentUser, {\n          successActionCreator: getStorageDeclarationsSuccess,\n          failActionCreator: getStorageDeclarationsFailed,\n          args: []\n        })\n      )\n    case GET_DECLARATIONS_SUCCESS:\n      if (action.payload) {\n        const userData = JSON.parse(action.payload) as IUserData\n        return {\n          ...state,\n          userID: userData.userID,\n          declarations: userData.declarations,\n          initialDeclarationsLoaded: true,\n          isWritingDraft: false\n        }\n      }\n      return {\n        ...state,\n        initialDeclarationsLoaded: true\n      }\n    case ENQUEUE_DOWNLOAD_DECLARATION:\n      const { declarations } = state\n      const { declaration, client } = action.payload\n      const downloadIsRunning = declarations.some(\n        (declaration) =>\n          declaration.downloadStatus === DOWNLOAD_STATUS.DOWNLOADING\n      )\n\n      const declarationIndex = declarations.findIndex(\n        (app) => declaration.id === app.id\n      )\n      let newDeclarationsAfterStartingDownload = Array.from(declarations)\n\n      // Download is running, so enqueue\n      if (downloadIsRunning) {\n        // Declaration is not in list\n        if (declarationIndex === -1) {\n          newDeclarationsAfterStartingDownload = declarations.concat([\n            declaration\n          ])\n        } else {\n          // Declaration is failed before, just make it ready to download\n          newDeclarationsAfterStartingDownload[declarationIndex] = declaration\n        }\n\n        // Download is running just return the state\n        return {\n          ...state,\n          declarations: newDeclarationsAfterStartingDownload\n        }\n      }\n      // Download is not running\n      else {\n        // Declaration is not in list, so push it\n        if (declarationIndex === -1) {\n          newDeclarationsAfterStartingDownload = declarations.concat([\n            {\n              ...declaration,\n              downloadStatus: DOWNLOAD_STATUS.DOWNLOADING\n            }\n          ])\n        }\n        // Declaration is in list make it downloading\n        else {\n          newDeclarationsAfterStartingDownload[declarationIndex] = {\n            ...declaration,\n            downloadStatus: DOWNLOAD_STATUS.DOWNLOADING\n          }\n        }\n      }\n\n      const newState = {\n        ...state,\n        declarations: newDeclarationsAfterStartingDownload\n      }\n\n      const { request, requestArgs } = createRequestForDeclaration(\n        declaration,\n        client\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      ) as any\n\n      return loop(\n        newState,\n        Cmd.run<IDownloadDeclarationFail, IDownloadDeclarationSuccess>(\n          requestWithStateWrapper,\n          {\n            args: [\n              request({ ...requestArgs, fetchPolicy: 'no-cache' }),\n              Cmd.getState,\n              client\n            ],\n            successActionCreator: downloadDeclarationSuccess,\n            failActionCreator: (err) =>\n              downloadDeclarationFail(\n                err,\n                {\n                  ...declaration,\n                  downloadStatus: DOWNLOAD_STATUS.DOWNLOADING\n                },\n                client\n              )\n          }\n        )\n      )\n    case DOWNLOAD_DECLARATION_SUCCESS:\n      const {\n        queryData,\n        form,\n        client: clientFromSuccess,\n        offlineData,\n        userDetails\n      } = action.payload\n\n      const downloadingDeclarationIndex = state.declarations.findIndex(\n        (declaration) =>\n          declaration.downloadStatus === DOWNLOAD_STATUS.DOWNLOADING\n      )\n      const newDeclarationsAfterDownload = Array.from(state.declarations)\n      const downloadingDeclaration =\n        newDeclarationsAfterDownload[downloadingDeclarationIndex]\n\n      const dataKey = getDataKey(downloadingDeclaration)\n      const eventData = queryData.data[dataKey as string]\n      const transData: IFormData = gqlToDraftTransformer(\n        form[downloadingDeclaration.event],\n        eventData,\n        offlineData,\n        userDetails\n      )\n      const downloadedAppStatus =\n        eventData &&\n        eventData.registration &&\n        eventData.registration.status &&\n        eventData.registration.status[0].type\n      const updateWorkqueue = () =>\n        updateRegistrarWorkqueue(userDetails?.practitionerId, 10)\n\n      newDeclarationsAfterDownload[downloadingDeclarationIndex] =\n        createReviewDeclaration(\n          downloadingDeclaration.id,\n          transData,\n          downloadingDeclaration.event,\n          downloadedAppStatus,\n          eventData?.registration?.duplicates?.filter(\n            (duplicate: IDuplicates) => !!duplicate\n          )\n        )\n      newDeclarationsAfterDownload[downloadingDeclarationIndex].downloadStatus =\n        DOWNLOAD_STATUS.DOWNLOADED\n\n      newDeclarationsAfterDownload[\n        downloadingDeclarationIndex\n      ].assignmentStatus = eventData?.registration?.assignment ?? null\n\n      const newStateAfterDownload = {\n        ...state,\n        declarations: newDeclarationsAfterDownload\n      }\n\n      // Check if there is more to download\n      const downloadQueueInprogress = state.declarations.filter(\n        (declaration) =>\n          declaration.downloadStatus === DOWNLOAD_STATUS.READY_TO_DOWNLOAD\n      )\n\n      // If not then, write to IndexedDB and return state\n      if (!downloadQueueInprogress.length) {\n        return loop(\n          newStateAfterDownload,\n          Cmd.list<IDownloadDeclarationFail | UpdateRegistrarWorkqueueAction>(\n            [\n              Cmd.run(writeDeclarationByUser, {\n                args: [\n                  Cmd.getState,\n                  state.userID,\n                  newDeclarationsAfterDownload[downloadingDeclarationIndex]\n                ],\n                failActionCreator: (err) =>\n                  downloadDeclarationFail(\n                    err,\n                    newDeclarationsAfterDownload[downloadingDeclarationIndex],\n                    clientFromSuccess\n                  )\n              }),\n              Cmd.action(updateWorkqueue())\n            ],\n            { sequence: true }\n          )\n        )\n      }\n\n      const declarationToDownload = downloadQueueInprogress[0]\n      declarationToDownload.downloadStatus = DOWNLOAD_STATUS.DOWNLOADING\n      const { request: nextRequest, requestArgs: nextRequestArgs } =\n        createRequestForDeclaration(\n          declarationToDownload,\n          clientFromSuccess\n          /*  eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        ) as any\n\n      // Return state, write to indexedDB and download the next ready to download declaration, all in sequence\n      return loop(\n        newStateAfterDownload,\n        Cmd.list<IDownloadDeclarationFail | UpdateRegistrarWorkqueueAction>(\n          [\n            Cmd.run(writeDeclarationByUser, {\n              args: [\n                Cmd.getState,\n                state.userID,\n                newDeclarationsAfterDownload[downloadingDeclarationIndex]\n              ],\n              failActionCreator: downloadDeclarationFail\n            }),\n            Cmd.action(updateWorkqueue()),\n            Cmd.run<IDownloadDeclarationFail, IDownloadDeclarationSuccess>(\n              requestWithStateWrapper,\n              {\n                args: [\n                  nextRequest({ ...nextRequestArgs, fetchPolicy: 'no-cache' }),\n                  Cmd.getState,\n                  clientFromSuccess\n                ],\n                successActionCreator: downloadDeclarationSuccess,\n                failActionCreator: (err) =>\n                  downloadDeclarationFail(\n                    err,\n                    newDeclarationsAfterDownload[downloadingDeclarationIndex],\n                    clientFromSuccess\n                  )\n              }\n            )\n          ],\n          { sequence: true }\n        )\n      )\n\n    case DOWNLOAD_DECLARATION_FAIL:\n      const {\n        declaration: erroredDeclaration,\n        error,\n        client: clientFromFail\n      } = action.payload\n      erroredDeclaration.downloadRetryAttempt =\n        (erroredDeclaration.downloadRetryAttempt || 0) + 1\n\n      const { request: retryRequest, requestArgs: retryRequestArgs } =\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        createRequestForDeclaration(erroredDeclaration, clientFromFail) as any\n\n      const declarationsAfterError = Array.from(state.declarations)\n      const erroredDeclarationIndex = declarationsAfterError.findIndex(\n        (declaration) =>\n          declaration.downloadStatus === DOWNLOAD_STATUS.DOWNLOADING\n      )\n\n      declarationsAfterError[erroredDeclarationIndex] = erroredDeclaration\n\n      // Retry download until limit reached\n      if (\n        erroredDeclaration.downloadRetryAttempt < DOWNLOAD_MAX_RETRY_ATTEMPT\n      ) {\n        return loop(\n          {\n            ...state,\n            declarations: declarationsAfterError\n          },\n          Cmd.run<IDownloadDeclarationFail, IDownloadDeclarationSuccess>(\n            requestWithStateWrapper,\n            {\n              args: [\n                retryRequest({ ...retryRequestArgs, fetchPolicy: 'no-cache' }),\n                Cmd.getState,\n                clientFromFail\n              ],\n              successActionCreator: downloadDeclarationSuccess,\n              failActionCreator: (err) =>\n                downloadDeclarationFail(err, erroredDeclaration, clientFromFail)\n            }\n          )\n        )\n      }\n\n      let status\n      if (error.networkError) {\n        status = DOWNLOAD_STATUS.FAILED_NETWORK\n      } else {\n        status = DOWNLOAD_STATUS.FAILED\n      }\n\n      erroredDeclaration.downloadStatus = status\n\n      declarationsAfterError[erroredDeclarationIndex] = erroredDeclaration\n\n      const downloadQueueFollowing = state.declarations.filter(\n        (declaration) =>\n          declaration.downloadStatus === DOWNLOAD_STATUS.READY_TO_DOWNLOAD\n      )\n\n      // If nothing more to download, return the state and write the declarations\n      if (!downloadQueueFollowing.length) {\n        return loop(\n          {\n            ...state,\n            declarations: declarationsAfterError\n          },\n          Cmd.list([\n            Cmd.action(showDownloadDeclarationFailedToast()),\n            Cmd.run(writeDeclarationByUser, {\n              args: [Cmd.getState, state.userID, erroredDeclaration]\n            })\n          ])\n        )\n      }\n\n      // If there are more to download in queue, start the next request\n      const nextDeclaration = downloadQueueFollowing[0]\n      const {\n        request: nextDeclarationRequest,\n        requestArgs: nextDeclarationRequestArgs\n        /*  eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      } = createRequestForDeclaration(nextDeclaration, clientFromFail) as any\n      return loop(\n        {\n          ...state,\n          declarations: declarationsAfterError\n        },\n        Cmd.list(\n          [\n            Cmd.run(writeDeclarationByUser, {\n              args: [Cmd.getState, state.userID, erroredDeclaration]\n            }),\n            Cmd.run(requestWithStateWrapper, {\n              args: [\n                nextDeclarationRequest({\n                  ...nextDeclarationRequestArgs,\n                  fetchPolicy: 'no-cache'\n                }),\n                Cmd.getState,\n                clientFromFail\n              ],\n              successActionCreator: downloadDeclarationSuccess,\n              failActionCreator: (err) =>\n                downloadDeclarationFail(err, nextDeclaration, clientFromFail)\n            })\n          ],\n          { sequence: true }\n        )\n      )\n\n    case ARCHIVE_DECLARATION:\n      if (action.payload) {\n        const declaration = state.declarations.find(\n          ({ id }) => id === action.payload.declarationId\n        )\n\n        if (!declaration) {\n          return state\n        }\n        const modifiedDeclaration: IDeclaration = {\n          ...declaration,\n          submissionStatus: SUBMISSION_STATUS.READY_TO_ARCHIVE,\n          action: SubmissionAction.ARCHIVE_DECLARATION,\n          payload: {\n            id: declaration.id,\n            reason: action.payload.reason || '',\n            comment: action.payload.comment || '',\n            duplicateTrackingId: action.payload.duplicateTrackingId || ''\n          }\n        }\n        return loop(state, Cmd.action(writeDeclaration(modifiedDeclaration)))\n      }\n      return state\n    case ENQUEUE_UNASSIGN_DECLARATION:\n      const queueIndex = state.declarations.findIndex(\n        ({ id }) => id === action.payload.id\n      )\n      const isQueueBusy = state.declarations.some((declaration) =>\n        [\n          DOWNLOAD_STATUS.READY_TO_UNASSIGN,\n          DOWNLOAD_STATUS.UNASSIGNING\n        ].includes(declaration.downloadStatus as DOWNLOAD_STATUS)\n      )\n      const updatedDeclarationsQueue = state.declarations\n      if (queueIndex === -1) {\n        // Not found locally, unassigning others declaration\n        updatedDeclarationsQueue.push({\n          id: action.payload.id,\n          downloadStatus: DOWNLOAD_STATUS.READY_TO_UNASSIGN\n        } as IDeclaration)\n      } else {\n        updatedDeclarationsQueue[queueIndex].downloadStatus =\n          DOWNLOAD_STATUS.READY_TO_UNASSIGN\n      }\n\n      return loop(\n        {\n          ...state,\n          declarations: updatedDeclarationsQueue\n        },\n        isQueueBusy\n          ? Cmd.none\n          : Cmd.action(\n              executeUnassignDeclaration(\n                action.payload.id,\n                action.payload.client,\n                action.payload.refetchQueries\n              )\n            )\n      )\n    case UNASSIGN_DECLARATION:\n      const unassignIndex = state.declarations.findIndex(\n        ({ id }) => id === action.payload.id\n      )\n      const updatedDeclarationsUnassign = state.declarations\n      updatedDeclarationsUnassign[unassignIndex].downloadStatus =\n        DOWNLOAD_STATUS.UNASSIGNING\n      return loop(\n        {\n          ...state,\n          declarations: updatedDeclarationsUnassign\n        },\n        Cmd.run(\n          async () => {\n            await action.payload.client.mutate({\n              mutation: MARK_EVENT_UNASSIGNED,\n              variables: { id: action.payload.id },\n              refetchQueries: action.payload.refetchQueries\n            })\n            return [\n              action.payload.id,\n              action.payload.client,\n              action.payload.refetchQueries\n            ]\n          },\n          {\n            successActionCreator: unassignDeclarationSuccess,\n            failActionCreator: (err: ApolloError) =>\n              unassignDeclarationFailed(\n                err,\n                action.payload.id,\n                action.payload.client,\n                action.payload.refetchQueries\n              )\n          }\n        )\n      )\n    case UNASSIGN_DECLARATION_SUCCESS:\n      const declarationNextToUnassign = state.declarations.find(\n        (declaration) =>\n          declaration.downloadStatus === DOWNLOAD_STATUS.READY_TO_UNASSIGN\n      )\n      return loop(\n        state,\n        Cmd.list<\n          | IDeleteDeclarationAction\n          | UpdateRegistrarWorkqueueAction\n          | IUnassignDeclaration\n        >(\n          [\n            Cmd.action(\n              deleteDeclaration(action.payload.id, action.payload.client)\n            ),\n            Cmd.action(updateRegistrarWorkqueue()),\n            declarationNextToUnassign\n              ? Cmd.action(\n                  executeUnassignDeclaration(\n                    declarationNextToUnassign.id,\n                    action.payload.client,\n                    action.payload.refetchQueries\n                  )\n                )\n              : Cmd.none\n          ],\n          { sequence: true }\n        )\n      )\n    case UNASSIGN_DECLARATION_FAILED: {\n      const error = action.payload.error\n      const declarationNextToUnassign = state.declarations.find(\n        (declaration) =>\n          declaration.downloadStatus === DOWNLOAD_STATUS.READY_TO_UNASSIGN\n      )\n      if (error.graphQLErrors[0]?.extensions.code === 'UNASSIGNED') {\n        return loop(\n          state,\n          Cmd.list<\n            | IDeleteDeclarationAction\n            | UpdateRegistrarWorkqueueAction\n            | IUnassignDeclaration\n          >(\n            [\n              Cmd.action(\n                deleteDeclaration(\n                  action.payload.declarationId,\n                  action.payload.client\n                )\n              ),\n              Cmd.action(updateRegistrarWorkqueue()),\n              declarationNextToUnassign\n                ? Cmd.action(\n                    executeUnassignDeclaration(\n                      declarationNextToUnassign.id,\n                      action.payload.client,\n                      action.payload.refetchQueries\n                    )\n                  )\n                : Cmd.none\n            ],\n            { sequence: true }\n          )\n        )\n      }\n      return state\n    }\n\n    case REMOVE_UNASSIGNED_DECLARATIONS:\n      const unassignedDeclarationTrackingIds =\n        action.payload.unassignedDeclarations.map(\n          (dec) => dec.data.registration.trackingId\n        ) as string[]\n\n      return loop(\n        {\n          ...state,\n          declarations: action.payload.currentlyDownloadedDeclarations\n        },\n        Cmd.action(showUnassignedDeclarations(unassignedDeclarationTrackingIds))\n      )\n    default:\n      return state\n  }",
      "startLine": 1273,
      "endLine": 1947,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@2020-2024",
      "type": "function_declaration",
      "name": "postMinioUrlsToServiceWorker",
      "text": "function postMinioUrlsToServiceWorker(minioUrls: string[]) {\n  navigator?.serviceWorker?.controller?.postMessage({\n    minioUrls: minioUrls\n  })\n}",
      "startLine": 2020,
      "endLine": 2024,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@2025-2035",
      "type": "function_declaration",
      "name": "getProcessingDeclarationIds",
      "text": "function getProcessingDeclarationIds(declarations: IDeclaration[]) {\n  return declarations\n    .filter(\n      (declaration) =>\n        declaration.submissionStatus &&\n        processingStates.includes(\n          declaration.submissionStatus as SUBMISSION_STATUS\n        )\n    )\n    .map((declaration) => declaration.id)\n}",
      "startLine": 2025,
      "endLine": 2035,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@2037-2082",
      "type": "function_declaration",
      "name": "filterProcessingDeclarationsFromQuery",
      "text": "function filterProcessingDeclarationsFromQuery(\n  queryData: IQueryData,\n  storedDeclarations: IDeclaration[]\n): IQueryData {\n  const processingDeclarationIds =\n    getProcessingDeclarationIds(storedDeclarations)\n\n  return {\n    inProgressTab: filterProcessingDeclarations(\n      queryData.inProgressTab,\n      processingDeclarationIds\n    ),\n    notificationTab: filterProcessingDeclarations(\n      queryData.notificationTab,\n      processingDeclarationIds\n    ),\n    reviewTab: filterProcessingDeclarations(\n      queryData.reviewTab,\n      processingDeclarationIds\n    ),\n    rejectTab: filterProcessingDeclarations(\n      queryData.rejectTab,\n      processingDeclarationIds\n    ),\n    sentForReviewTab: filterProcessingDeclarations(\n      queryData.sentForReviewTab,\n      processingDeclarationIds\n    ),\n    approvalTab: filterProcessingDeclarations(\n      queryData.approvalTab,\n      processingDeclarationIds\n    ),\n    printTab: filterProcessingDeclarations(\n      queryData.printTab,\n      processingDeclarationIds\n    ),\n    externalValidationTab: filterProcessingDeclarations(\n      queryData.externalValidationTab,\n      processingDeclarationIds\n    ),\n    issueTab: filterProcessingDeclarations(\n      queryData.issueTab,\n      processingDeclarationIds\n    )\n  }\n}",
      "startLine": 2037,
      "endLine": 2082,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/declarations/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-78",
      "type": "function_declaration",
      "name": "SetupConfirmationPage",
      "text": "function SetupConfirmationPage() {\n  const intl = useIntl()\n  const dispatch = useDispatch()\n  const offlineCountryConfig = useSelector((store: IStoreState) =>\n    getOfflineData(store)\n  )\n  React.useEffect(() => {\n    const removeItemFromStorage = async () => {\n      await storage.removeItem(USER_DETAILS)\n    }\n    removeItemFromStorage()\n  }, [])\n  return (\n    <Page>\n      <Container id=\"user-setup-complete-page\">\n        <Content size={ContentSize.LARGE}>\n          <LogoContainer>\n            <CountryLogo src={offlineCountryConfig.config.COUNTRY_LOGO.file} />\n          </LogoContainer>\n          <TitleHolder>\n            {intl.formatMessage(messages.setupCompleteTitle)}\n          </TitleHolder>\n          <InstructionHolder>\n            {intl.formatMessage(messages.userSetupInstruction)}\n          </InstructionHolder>\n          <LoginButton\n            id=\"setup-login-button\"\n            onClick={() => dispatch(redirectToAuthentication())}\n          >\n            {intl.formatMessage(buttonMessages.login)}\n          </LoginButton>\n        </Content>\n      </Container>\n    </Page>\n  )\n}",
      "startLine": 43,
      "endLine": 78,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/UserSetup/SetupConfirmationPage.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@66-235",
      "type": "function_declaration",
      "name": "CreatePassword",
      "text": "function CreatePassword({ setupData, goToStep }: IProps) {\n  const intl = useIntl()\n  const [newPassword, setNewPassword] = React.useState(EMPTY_STRING)\n  const [confirmPassword, setConfirmPassword] = React.useState(EMPTY_STRING)\n  const [validLength, setValidLength] = React.useState(false)\n  const [hasNumber, setHasNumber] = React.useState(false)\n  const [hasCases, setHasCases] = React.useState(false)\n  const [passwordMismatched, setPasswordMismatched] = React.useState(false)\n  const [passwordMatched, setPasswordMatched] = React.useState(false)\n  const [continuePressed, setContinuePressed] = React.useState(false)\n\n  const validateLength = (value: string) => {\n    setValidLength(value.length >= 12)\n  }\n  const validateNumber = (value: string) => {\n    setHasNumber(/\\d/.test(value))\n  }\n  const validateCases = (value: string) => {\n    setHasCases(/[a-z]/.test(value) && /[A-Z]/.test(value))\n  }\n  const checkPasswordStrength = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = event.target.value\n    setNewPassword(value)\n    setConfirmPassword(EMPTY_STRING)\n    setPasswordMatched(false)\n    setPasswordMismatched(false)\n    setContinuePressed(false)\n    validateLength(value)\n    validateNumber(value)\n    validateCases(value)\n  }\n  const matchPassword = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value\n    setConfirmPassword(value)\n    setPasswordMismatched(value.length > 0 && newPassword !== value)\n    setPasswordMatched(value.length > 0 && newPassword === value)\n    setContinuePressed(false)\n  }\n  const whatNext = () => {\n    setContinuePressed(true)\n    setPasswordMismatched(\n      newPassword.length > 0 && newPassword !== confirmPassword\n    )\n    if (passwordMatched && hasCases && hasNumber && validLength) {\n      setupData.password = newPassword\n      goToStep(ProtectedAccoutStep.SECURITY_QUESTION, {\n        ...setupData,\n        password: newPassword\n      })\n    }\n  }\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      event.preventDefault()\n      whatNext()\n    }\n  }\n\n  const continueActionButton = (\n    <PrimaryButton\n      id=\"Continue\"\n      onClick={whatNext}\n      disabled={!hasCases || !hasNumber || !validLength}\n    >\n      {intl.formatMessage(buttonMessages.continueButton)}\n    </PrimaryButton>\n  )\n\n  return (\n    <>\n      <ActionPageLight\n        title={intl.formatMessage(messages.newPassword)}\n        hideBackground\n        goBack={() => {\n          goToStep(ProtectedAccoutStep.LANDING, setupData)\n        }}\n      >\n        <Content\n          size={ContentSize.SMALL}\n          title={intl.formatMessage(messages.header)}\n          showTitleOnMobile\n          subtitle={intl.formatMessage(messages.instruction)}\n          bottomActionButtons={[continueActionButton]}\n        >\n          <GlobalError id=\"GlobalError\">\n            {continuePressed && passwordMismatched && (\n              <WarningMessage>\n                {intl.formatMessage(messages.mismatch)}\n              </WarningMessage>\n            )}\n            {continuePressed && newPassword.length === 0 && (\n              <WarningMessage>\n                {intl.formatMessage(messages.passwordRequired)}\n              </WarningMessage>\n            )}\n          </GlobalError>\n          <PasswordContents>\n            <InputField\n              id=\"newPassword\"\n              label={intl.formatMessage(messages.newPassword)}\n              touched={true}\n              required={false}\n              optionalLabel=\"\"\n            >\n              <TextInput\n                id=\"NewPassword\"\n                type=\"password\"\n                touched={true}\n                value={newPassword}\n                onChange={checkPasswordStrength}\n                onKeyDown={handleKeyDown}\n                error={continuePressed && newPassword.length === 0}\n              />\n            </InputField>\n            <ValidationRulesSection>\n              <div>{intl.formatMessage(messages.validationMsg)}</div>\n              <div>\n                {validLength && <TickOn />}\n                {!validLength && <TickOff />}\n                <span>\n                  {intl.formatMessage(messages.minLength, { min: 12 })}\n                </span>\n              </div>\n              <div>\n                {hasCases && <TickOn />}\n                {!hasCases && <TickOff />}\n                <span>{intl.formatMessage(messages.hasCases)}</span>\n              </div>\n              <div>\n                {hasNumber && <TickOn />}\n                {!hasNumber && <TickOff />}\n                <span>{intl.formatMessage(messages.hasNumber)}</span>\n              </div>\n            </ValidationRulesSection>\n\n            <InputField\n              id=\"newPassword\"\n              label={intl.formatMessage(messages.confirmPassword)}\n              touched={true}\n              required={false}\n              optionalLabel=\"\"\n            >\n              <TextInput\n                id=\"ConfirmPassword\"\n                type=\"password\"\n                touched={true}\n                error={continuePressed && passwordMismatched}\n                value={confirmPassword}\n                onChange={matchPassword}\n                onKeyDown={handleKeyDown}\n              />\n            </InputField>\n            {passwordMismatched && (\n              <PasswordMismatch>\n                {intl.formatMessage(messages.mismatch)}\n              </PasswordMismatch>\n            )}\n            {passwordMatched && (\n              <PasswordMatch>\n                {intl.formatMessage(messages.match)}\n              </PasswordMatch>\n            )}\n          </PasswordContents>\n        </Content>\n      </ActionPageLight>\n    </>\n  )\n}",
      "startLine": 66,
      "endLine": 235,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/UserSetup/CreatePassword.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@62-77",
      "type": "function_declaration",
      "name": "AdministrativeLevels",
      "text": "function AdministrativeLevels() {\n  const intl = useIntl()\n  const { locationId } = useParams<IRouteProps>()\n  const { canAccessOffice } = usePermissions()\n  const navigate = useNavigate()\n\n  const getNewLevel =\n    (currentlySelectedLocation?: string) =>\n    (store: IStoreState): IGetNewLevel => {\n      const location = currentlySelectedLocation ?? '0'\n      const locations = store.offline.offlineData.locations as {\n        [key: string]: ILocation\n      }\n      const offices = store.offline.offlineData.offices as {\n        [key: string]: ILocation\n      }",
      "startLine": 62,
      "endLine": 77,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Organisation/AdministrativeLevels.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@83-340",
      "type": "function_declaration",
      "name": "RequiresUpdateComponent",
      "text": "function RequiresUpdateComponent(props: IRejectTabProps) {\n  const navigate = useNavigate()\n\n  const { width } = useWindowSize()\n  const [sortedCol, setSortedCol] = useState<COLUMNS>(COLUMNS.SENT_FOR_UPDATES)\n  const [sortOrder, setSortOrder] = useState<SORT_ORDER>(SORT_ORDER.ASCENDING)\n\n  const onColumnClick = (columnName: string) => {\n    const { newSortedCol, newSortOrder } = changeSortedColumn(\n      columnName,\n      sortedCol,\n      sortOrder\n    )\n    setSortedCol(newSortedCol)\n    setSortOrder(newSortOrder)\n  }\n\n  const getColumns = () => {\n    if (width > props.theme.grid.breakpoints.lg) {\n      return [\n        {\n          width: 30,\n          label: props.intl.formatMessage(constantsMessages.name),\n          key: COLUMNS.ICON_WITH_NAME,\n          isSorted: sortedCol === COLUMNS.NAME,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.event),\n          width: 16,\n          key: COLUMNS.EVENT,\n          isSorted: sortedCol === COLUMNS.EVENT,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.eventDate),\n          width: 18,\n          key: COLUMNS.DATE_OF_EVENT,\n          isSorted: sortedCol === COLUMNS.DATE_OF_EVENT,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.sentForUpdates),\n          width: 18,\n          key: COLUMNS.SENT_FOR_UPDATES,\n          isSorted: sortedCol === COLUMNS.SENT_FOR_UPDATES,\n          sortFunction: onColumnClick\n        },\n        {\n          width: 18,\n          alignment: ColumnContentAlignment.RIGHT,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true\n        }\n      ]\n    } else {\n      return [\n        {\n          label: props.intl.formatMessage(constantsMessages.name),\n          width: 70,\n          key: COLUMNS.ICON_WITH_NAME_EVENT\n        },\n        {\n          width: 30,\n          alignment: ColumnContentAlignment.RIGHT,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true\n        }\n      ]\n    }\n  }\n\n  const transformRejectedContent = (data: GQLEventSearchResultSet) => {\n    const { intl } = props\n    if (!data || !data.results) {\n      return []\n    }\n\n    const validateScopes = [\n      SCOPES.RECORD_REGISTER,\n      SCOPES.RECORD_SUBMIT_FOR_APPROVAL,\n      SCOPES.RECORD_SUBMIT_FOR_UPDATES\n    ] as Scope[]\n\n    const isReviewer = props.scope?.some((x) => validateScopes.includes(x))\n\n    const transformedData = transformData(data, props.intl)\n    const items = transformedData.map((reg, index) => {\n      const actions = [] as IAction[]\n      const foundDeclaration = props.outboxDeclarations.find(\n        (declaration) => declaration.id === reg.id\n      )\n      const downloadStatus = foundDeclaration?.downloadStatus\n      const isDuplicate = reg.duplicates && reg.duplicates.length > 0\n\n      if (downloadStatus !== DOWNLOAD_STATUS.DOWNLOADED) {\n        if (width > props.theme.grid.breakpoints.lg && isReviewer) {\n          actions.push({\n            label: props.intl.formatMessage(buttonMessages.update),\n            handler: () => {},\n            disabled: true\n          })\n        }\n      } else {\n        if (width > props.theme.grid.breakpoints.lg && isReviewer) {\n          actions.push({\n            label: props.intl.formatMessage(buttonMessages.update),\n            handler: (\n              e: React.MouseEvent<HTMLButtonElement, MouseEvent> | undefined\n            ) => {\n              if (e) {\n                e.stopPropagation()\n              }\n\n              navigate(\n                generateGoToPageUrl({\n                  pageRoute: REVIEW_EVENT_PARENT_FORM_PAGE,\n                  declarationId: reg.id,\n                  pageId: 'review',\n                  event: reg.event ? reg.event.toLowerCase() : ''\n                })\n              )\n            }\n          })\n        }\n      }\n      actions.push({\n        actionComponent: (\n          <DownloadButton\n            downloadConfigs={{\n              event: reg.event,\n              compositionId: reg.id,\n              action: DownloadAction.LOAD_REVIEW_DECLARATION,\n              assignment:\n                foundDeclaration?.assignmentStatus ??\n                reg.assignment ??\n                undefined\n            }}\n            key={`DownloadButton-${index}`}\n            status={downloadStatus as DOWNLOAD_STATUS}\n            declarationStatus={reg.declarationStatus as SUBMISSION_STATUS}\n          />\n        )\n      })\n      const event =\n        (reg.event &&\n          intl.formatMessage(\n            dynamicConstantsMessages[reg.event.toLowerCase()]\n          )) ||\n        ''\n      const sentForUpdates =\n        getPreviousOperationDateByOperationType(\n          reg.operationHistories,\n          RegStatus.Rejected\n        ) || ''\n\n      const dateOfEvent =\n        reg.dateOfEvent &&\n        reg.dateOfEvent.length > 0 &&\n        plainDateToLocalDate(reg.dateOfEvent)\n      const NameComponent = reg.name ? (\n        <NameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: 'rejectTab',\n                declarationId: reg.id\n              })\n            )\n          }\n        >\n          {reg.name}\n        </NameContainer>\n      ) : (\n        <NoNameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: 'rejectTab',\n                declarationId: reg.id\n              })\n            )\n          }\n        >\n          {intl.formatMessage(constantsMessages.noNameProvided)}\n        </NoNameContainer>\n      )\n      return {\n        ...reg,\n        event,\n        name: reg.name && reg.name.toLowerCase(),\n        iconWithName: (\n          <IconWithName\n            status={reg.declarationStatus}\n            name={NameComponent}\n            isDuplicate={isDuplicate}\n          />\n        ),\n        iconWithNameEvent: (\n          <IconWithNameEvent\n            status={reg.declarationStatus}\n            name={NameComponent}\n            event={reg.event}\n            isDuplicate={isDuplicate}\n          />\n        ),\n        sentForUpdates,\n        dateOfEvent,\n        actions\n      }\n    })\n    const sortedItems = getSortedItems(items, sortedCol, sortOrder)\n    return sortedItems.map((item) => {\n      return {\n        ...item,\n        dateOfEvent:\n          item.dateOfEvent && formattedDuration(item.dateOfEvent as Date),\n        sentForUpdates:\n          item.sentForUpdates && formattedDuration(item.sentForUpdates as Date)\n      }\n    })\n  }\n\n  const totalPages = props.queryData.data.totalItems\n    ? Math.ceil(props.queryData.data.totalItems / props.pageSize)\n    : 0\n  const isShowPagination =\n    props.queryData.data.totalItems &&\n    props.queryData.data.totalItems > props.pageSize\n      ? true\n      : false\n  return (\n    <WQContentWrapper\n      title={props.intl.formatMessage(navigationMessages.requiresUpdate)}\n      isMobileSize={width < props.theme.grid.breakpoints.lg}\n      isShowPagination={isShowPagination}\n      paginationId={props.paginationId}\n      totalPages={totalPages}\n      onPageChange={props.onPageChange}\n      loading={props.loading}\n      error={props.error}\n      noResultText={props.intl.formatMessage(\n        wqMessages.noRecordsRequireUpdates\n      )}\n      noContent={transformRejectedContent(props.queryData.data).length <= 0}\n    >\n      <Workqueue\n        content={transformRejectedContent(props.queryData.data)}\n        columns={getColumns()}\n        loading={props.loading}\n        sortOrder={sortOrder}\n        hideLastBorder={!isShowPagination}\n      />\n    </WQContentWrapper>\n  )\n}",
      "startLine": 83,
      "endLine": 340,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/requiresUpdate/RequiresUpdate.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@342-347",
      "type": "function_declaration",
      "name": "mapStateToProps",
      "text": "function mapStateToProps(state: IStoreState) {\n  return {\n    scope: getScope(state),\n    outboxDeclarations: state.declarationsState.declarations\n  }\n}",
      "startLine": 342,
      "endLine": 347,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/requiresUpdate/RequiresUpdate.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@62-247",
      "type": "function_declaration",
      "name": "InExternalValidationComponent",
      "text": "function InExternalValidationComponent(props: IProps) {\n  const navigate = useNavigate()\n  const [sortedCol, setSortedCOl] = React.useState<COLUMNS>(COLUMNS.NAME)\n  const [sortOrder, setSortOrder] = React.useState<SORT_ORDER>(\n    SORT_ORDER.ASCENDING\n  )\n  const { width: viewportWidth } = useWindowSize()\n  const { intl, queryData, paginationId, pageSize, onPageChange } = props\n  const { data } = queryData\n  const totalPages = props.queryData.data.totalItems\n    ? Math.ceil(props.queryData.data.totalItems / pageSize)\n    : 0\n  const isShowPagination =\n    props.queryData.data.totalItems &&\n    props.queryData.data.totalItems > pageSize\n      ? true\n      : false\n\n  const onColumnClick = (columnName: string) => {\n    const { newSortedCol, newSortOrder } = changeSortedColumn(\n      columnName,\n      sortedCol,\n      sortOrder\n    )\n    setSortedCOl(newSortedCol)\n    setSortOrder(newSortOrder)\n  }\n\n  const transformWaitingValidationContent = (data: GQLEventSearchResultSet) => {\n    const { intl } = props\n    if (!data || !data.results) {\n      return []\n    }\n    const transformedData = transformData(data, props.intl)\n\n    const items = transformedData.map((reg, index) => {\n      const event =\n        (reg.event &&\n          intl.formatMessage(\n            dynamicConstantsMessages[reg.event.toLowerCase()]\n          )) ||\n        ''\n      const dateOfEvent =\n        reg.dateOfEvent &&\n        reg.dateOfEvent.length > 0 &&\n        plainDateToLocalDate(reg.dateOfEvent)\n      const sentForValidation =\n        (reg.modifiedAt && Number.isNaN(Number(reg.modifiedAt))\n          ? new Date(reg.modifiedAt)\n          : new Date(Number(reg.modifiedAt))) || ''\n      const NameComponent = reg.name ? (\n        <NameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: 'externalValidationTab',\n                declarationId: reg.id\n              })\n            )\n          }\n        >\n          {reg.name}\n        </NameContainer>\n      ) : (\n        <NoNameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: 'externalValidationTab',\n                declarationId: reg.id\n              })\n            )\n          }\n        >\n          {intl.formatMessage(constantsMessages.noNameProvided)}\n        </NoNameContainer>\n      )\n      return {\n        ...reg,\n        event,\n        name: reg.name && reg.name.toLowerCase(),\n        iconWithName: (\n          <IconWithName status={reg.declarationStatus} name={NameComponent} />\n        ),\n        iconWithNameEvent: (\n          <IconWithNameEvent\n            status={reg.declarationStatus}\n            name={NameComponent}\n            event={event}\n          />\n        ),\n        actions: [],\n        dateOfEvent,\n        sentForValidation,\n        rowClickHandler: [\n          {\n            label: 'rowClickHandler',\n            handler: () =>\n              navigate(\n                formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                  tab: 'externalValidationTab',\n                  declarationId: reg.id\n                })\n              )\n          }\n        ]\n      }\n    })\n    const sortedItems = getSortedItems(items, sortedCol, sortOrder)\n    return sortedItems.map((item) => {\n      return {\n        ...item,\n        dateOfEvent:\n          item.dateOfEvent && formattedDuration(item.dateOfEvent as Date),\n        sentForValidation:\n          item.sentForValidation &&\n          formattedDuration(item.sentForValidation as Date)\n      }\n    })\n  }\n\n  const columns =\n    viewportWidth > props.theme.grid.breakpoints.lg\n      ? [\n          {\n            width: 30,\n            label: props.intl.formatMessage(constantsMessages.name),\n            key: COLUMNS.ICON_WITH_NAME,\n            isSorted: sortedCol === COLUMNS.NAME,\n            sortFunction: onColumnClick\n          },\n          {\n            label: props.intl.formatMessage(constantsMessages.event),\n            width: 16,\n            key: COLUMNS.EVENT,\n            isSorted: sortedCol === COLUMNS.EVENT,\n            sortFunction: onColumnClick\n          },\n          {\n            label: props.intl.formatMessage(constantsMessages.eventDate),\n            width: 18,\n            key: COLUMNS.DATE_OF_EVENT,\n            isSorted: sortedCol === COLUMNS.DATE_OF_EVENT,\n            sortFunction: onColumnClick\n          },\n          {\n            label: props.intl.formatMessage(constantsMessages.sentForReview),\n            width: 18,\n            key: COLUMNS.SENT_FOR_VALIDATION,\n            isSorted: sortedCol === COLUMNS.SENT_FOR_VALIDATION,\n            sortFunction: onColumnClick\n          }\n        ]\n      : [\n          {\n            label: props.intl.formatMessage(constantsMessages.name),\n            width: 90,\n            key: COLUMNS.ICON_WITH_NAME_EVENT\n          }\n        ]\n\n  return (\n    <WQContentWrapper\n      title={intl.formatMessage(navigationMessages.waitingValidation)}\n      isMobileSize={viewportWidth < props.theme.grid.breakpoints.lg}\n      isShowPagination={isShowPagination}\n      paginationId={paginationId}\n      totalPages={totalPages}\n      onPageChange={onPageChange}\n      noResultText={intl.formatMessage(wqMessages.noRecordsExternalValidation)}\n      loading={props.loading}\n      error={props.error}\n      noContent={transformWaitingValidationContent(data).length <= 0}\n    >\n      <Workqueue\n        content={transformWaitingValidationContent(data)}\n        loading={props.loading}\n        columns={columns}\n        sortOrder={sortOrder}\n        hideLastBorder={!isShowPagination}\n      />\n    </WQContentWrapper>\n  )\n}",
      "startLine": 62,
      "endLine": 247,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/inExternalValidation/InExternalValidationTab.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@132-138",
      "type": "function_declaration",
      "name": "setDateRangePickerValues",
      "text": "function setDateRangePickerValues(startDate: Date, endDate: Date) {\n    setState((prevState) => ({\n      ...prevState,\n      timeStart: startDate,\n      timeEnd: endDate\n    }))\n  }",
      "startLine": 132,
      "endLine": 138,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/UserAudit/UserAuditHistory.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@140-149",
      "type": "function_declaration",
      "name": "toggleSortOrder",
      "text": "function toggleSortOrder(columnName: SORTED_COLUMN) {\n    setState((prevState) => ({\n      ...prevState,\n      sortedColumn: columnName,\n      sortOrder:\n        prevState.sortOrder === SORT_ORDER.DESCENDING\n          ? SORT_ORDER.ASCENDING\n          : SORT_ORDER.DESCENDING\n    }))\n  }",
      "startLine": 140,
      "endLine": 149,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/UserAudit/UserAuditHistory.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@151-190",
      "type": "function_declaration",
      "name": "getAuditColumns",
      "text": "function getAuditColumns() {\n    const { intl } = props\n    return [\n      {\n        label: intl.formatMessage(messages.auditActionColumnTitle),\n        width: 25,\n        isSortable: true,\n        icon: <ArrowDownBlue />,\n        key: 'actionDescription',\n        sortFunction: () => toggleSortOrder(SORTED_COLUMN.ACTION)\n      },\n      {\n        label: intl.formatMessage(messages.auditTrackingIDColumnTitle),\n        width: 25,\n        isSortable: true,\n        icon: <ArrowDownBlue />,\n        key: 'trackingId',\n        sortFunction: () => toggleSortOrder(SORTED_COLUMN.RECORD)\n      },\n      {\n        label: intl.formatMessage(messages.auditDeviceIpAddressColumnTitle),\n        width: 25,\n        isSortable: true,\n        icon: <ArrowDownBlue />,\n        key: 'deviceIpAddress',\n        alignment: ColumnContentAlignment.LEFT,\n        sortFunction: () => toggleSortOrder(SORTED_COLUMN.DEVICE)\n      },\n      {\n        label: intl.formatMessage(messages.auditDateColumnTitle),\n        width: 25,\n        key: 'auditTime',\n        isSortable: true,\n        isSorted: true,\n        icon: <ArrowDownBlue />,\n        alignment: ColumnContentAlignment.RIGHT,\n        sortFunction: () => toggleSortOrder(SORTED_COLUMN.DATE)\n      }\n    ]\n  }",
      "startLine": 151,
      "endLine": 190,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/UserAudit/UserAuditHistory.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@118-513",
      "type": "function_declaration",
      "name": "InProgressComponent",
      "text": "function InProgressComponent(props: IRegistrarHomeProps) {\n  const navigate = useNavigate()\n  const { width } = useWindowSize()\n\n  const [sortedCol, setSortedCol] = useState<COLUMNS>(COLUMNS.NOTIFICATION_SENT)\n  const [sortOrder, setSortOrder] = useState<SORT_ORDER>(SORT_ORDER.DESCENDING)\n\n  const storedDeclarations = useSelector(\n    (state: IStoreState) => state.declarationsState.declarations\n  )\n\n  const onColumnClick = (columnName: string) => {\n    const { newSortedCol, newSortOrder } = changeSortedColumn(\n      columnName,\n      sortedCol,\n      sortOrder\n    )\n    setSortOrder(newSortOrder)\n    setSortedCol(newSortedCol)\n  }\n\n  const transformRemoteDraftsContent = (data: GQLEventSearchResultSet) => {\n    if (!data || !data.results) {\n      return []\n    }\n\n    const { intl } = props\n    const { locale } = intl\n\n    const items = data.results.map((reg, index) => {\n      if (!reg) {\n        throw new Error('Registration is null')\n      }\n\n      const storedDeclaration = storedDeclarations.find((d) => d.id === reg.id)\n\n      const regId = reg.id\n      const event = reg.type\n      const lastModificationDate =\n        (reg.operationHistories &&\n          getPreviousOperationDateByOperationType(\n            reg.operationHistories as ITaskHistory[],\n            RegStatus.InProgress\n          )) ||\n        ''\n      const pageRoute = REVIEW_EVENT_PARENT_FORM_PAGE\n\n      let name\n      let eventDate = ''\n\n      if (reg.registration) {\n        if (isBirthEvent(reg)) {\n          const names = reg.childName as GQLHumanName[]\n          const namesMap = createNamesMap(names)\n          name = namesMap[locale] || namesMap[LANG_EN]\n          eventDate = reg.dateOfBirth\n        } else if (isDeathEvent(reg)) {\n          const names = reg.deceasedName as GQLHumanName[]\n          const namesMap = createNamesMap(names)\n          name = namesMap[locale] || namesMap[LANG_EN]\n          const date = reg.dateOfDeath\n          eventDate = date && date\n        } else if (isMarriageEvent(reg)) {\n          const groomNames = reg.groomName as GQLHumanName[]\n          const groomNamesMap = createNamesMap(groomNames)\n          const brideNames = reg.brideName as GQLHumanName[]\n          const brideNamesMap = createNamesMap(brideNames)\n          const groomName = groomNamesMap[locale] || groomNamesMap[LANG_EN]\n          const brideName = brideNamesMap[locale] || brideNamesMap[LANG_EN]\n          name =\n            brideName && groomName\n              ? `${groomName} & ${brideName}`\n              : brideName || groomName || EMPTY_STRING\n          const date = reg.dateOfMarriage\n          eventDate = date && date\n        }\n      }\n\n      const dateOfEvent = isValidPlainDate(eventDate)\n        ? plainDateToLocalDate(eventDate)\n        : ''\n      const actions: IAction[] = []\n      const foundDeclaration = props.outboxDeclarations.find(\n        (declaration) => declaration.id === reg.id\n      )\n      const downloadStatus = foundDeclaration?.downloadStatus\n\n      if (width > props.theme.grid.breakpoints.lg) {\n        actions.push({\n          label: intl.formatMessage(buttonMessages.update),\n          handler: () => {\n            if (downloadStatus === DOWNLOAD_STATUS.DOWNLOADED) {\n              navigate(\n                generateGoToPageUrl({\n                  pageRoute,\n                  declarationId: regId,\n                  pageId: 'review',\n                  event: (event && event.toLowerCase()) || ''\n                })\n              )\n            }\n          },\n          disabled: downloadStatus !== DOWNLOAD_STATUS.DOWNLOADED\n        })\n      }\n      if (reg.registration?.status) {\n        actions.push({\n          actionComponent: (\n            <DownloadButton\n              downloadConfigs={{\n                event: event as string,\n                compositionId: reg.id,\n                action: DownloadAction.LOAD_REVIEW_DECLARATION,\n                assignment:\n                  storedDeclaration?.assignmentStatus ??\n                  reg?.registration?.assignment\n              }}\n              key={`DownloadButton-${index}`}\n              status={downloadStatus}\n              declarationStatus={reg.registration.status as SUBMISSION_STATUS}\n            />\n          )\n        })\n      }\n\n      const NameComponent = name ? (\n        <NameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab:\n                  props.selectorId === SELECTOR_ID.hospitalDrafts\n                    ? 'notificationTab'\n                    : 'inProgressTab',\n                declarationId: regId\n              })\n            )\n          }\n        >\n          {name}\n        </NameContainer>\n      ) : (\n        <NoNameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: 'inProgressTab',\n                declarationId: regId\n              })\n            )\n          }\n        >\n          {intl.formatMessage(constantsMessages.noNameProvided)}\n        </NoNameContainer>\n      )\n\n      window.__localeId__ = locale\n      return {\n        id: regId,\n        event:\n          (event &&\n            intl.formatMessage(\n              dynamicConstantsMessages[event.toLowerCase()]\n            )) ||\n          '',\n        name: name && name.toString().toLowerCase(),\n        iconWithName: (\n          <IconWithName\n            status={reg.registration?.status || SUBMISSION_STATUS.DRAFT}\n            name={NameComponent}\n            isDuplicate={(reg.registration?.duplicates?.length ?? 0) > 0}\n          />\n        ),\n        iconWithNameEvent: (\n          <IconWithNameEvent\n            status={reg.registration?.status || SUBMISSION_STATUS.DRAFT}\n            name={NameComponent}\n            event={event}\n            isDuplicate={(reg.registration?.duplicates?.length ?? 0) > 0}\n          />\n        ),\n        dateOfEvent,\n        notificationSent: lastModificationDate || '',\n        actions\n      }\n    })\n    const sortedItems = getSortedItems(items, sortedCol, sortOrder)\n    return sortedItems.map((item) => {\n      return {\n        ...item,\n        notificationSent:\n          item.notificationSent &&\n          /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n          formattedDuration(item.notificationSent as any),\n        dateOfEvent:\n          item.dateOfEvent && formattedDuration(item.dateOfEvent as Date)\n      }\n    })\n  }\n\n  const getColumns = () => {\n    if (width > props.theme.grid.breakpoints.lg) {\n      return [\n        {\n          label: props.intl.formatMessage(constantsMessages.name),\n          width: 30,\n          key: COLUMNS.ICON_WITH_NAME,\n          isSorted: sortedCol === COLUMNS.NAME,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.event),\n          width: 16,\n          key: COLUMNS.EVENT,\n          isSorted: sortedCol === COLUMNS.EVENT,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.eventDate),\n          width: 18,\n          key: COLUMNS.DATE_OF_EVENT,\n          isSorted: sortedCol === COLUMNS.DATE_OF_EVENT,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.notificationSent),\n          width: 18,\n          key: COLUMNS.NOTIFICATION_SENT,\n          isSorted: sortedCol === COLUMNS.NOTIFICATION_SENT,\n          sortFunction: onColumnClick\n        },\n        {\n          width: 18,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true,\n          alignment: ColumnContentAlignment.RIGHT\n        }\n      ]\n    } else {\n      return [\n        {\n          label: props.intl.formatMessage(constantsMessages.name),\n          width: 70,\n          key: COLUMNS.ICON_WITH_NAME_EVENT\n        },\n        {\n          width: 30,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true,\n          alignment: ColumnContentAlignment.RIGHT\n        }\n      ]\n    }\n  }\n\n  const getTabs = (\n    selectorId: string,\n    fieldAgentCount: number,\n    hospitalCount: number\n  ) => {\n    const tabs = {\n      activeTabId: selectorId || SELECTOR_ID.fieldAgentDrafts,\n      onTabClick: (selectorId: string) => {\n        navigate(\n          generateGoToHomeTabUrl({\n            tabId: WORKQUEUE_TABS.inProgress,\n            selectorId\n          })\n        )\n      },\n      sections: [\n        {\n          id: SELECTOR_ID.fieldAgentDrafts,\n          title: `${props.intl.formatMessage(\n            messages.inProgressFieldAgents\n          )} (${fieldAgentCount})`,\n          disabled: false\n        },\n        {\n          id: SELECTOR_ID.hospitalDrafts,\n          title: `${props.intl.formatMessage(\n            messages.hospitalDrafts\n          )} (${hospitalCount})`,\n          disabled: false\n        }\n      ]\n    }\n\n    return (\n      <FormTabs\n        sections={tabs.sections}\n        activeTabId={tabs.activeTabId}\n        onTabClick={(id: string) => tabs.onTabClick(id)}\n      />\n    )\n  }\n\n  const renderFieldAgentTable = (\n    data: GQLEventSearchResultSet,\n    isShowPagination: boolean\n  ) => {\n    return (\n      <Workqueue\n        content={transformRemoteDraftsContent(data)}\n        columns={getColumns()}\n        loading={props.loading}\n        sortOrder={sortOrder}\n        hideLastBorder={!isShowPagination}\n      />\n    )\n  }\n\n  const renderHospitalTable = (\n    data: GQLEventSearchResultSet,\n    isShowPagination: boolean\n  ) => {\n    return (\n      <Workqueue\n        content={transformRemoteDraftsContent(data)}\n        columns={getColumns()}\n        loading={props.loading}\n        sortOrder={sortOrder}\n        hideLastBorder={!isShowPagination}\n      />\n    )\n  }\n\n  const { intl, selectorId, queryData, onPageChange } = props\n\n  const isShowPagination =\n    !props.selectorId || props.selectorId === SELECTOR_ID.fieldAgentDrafts\n      ? props.queryData.inProgressData &&\n        props.queryData.inProgressData.totalItems &&\n        props.queryData.inProgressData.totalItems > props.pageSize\n        ? true\n        : false\n      : props.queryData.notificationData &&\n          props.queryData.notificationData.totalItems &&\n          props.queryData.notificationData.totalItems > props.pageSize\n        ? true\n        : false\n\n  const { inProgressData, notificationData } = queryData\n  const paginationId =\n    selectorId === SELECTOR_ID.fieldAgentDrafts\n      ? props.paginationId.fieldAgentId\n      : props.paginationId.healthSystemId\n\n  const totalPages =\n    !selectorId || selectorId === SELECTOR_ID.fieldAgentDrafts\n      ? props.queryData.inProgressData &&\n        props.queryData.inProgressData.totalItems &&\n        Math.ceil(props.queryData.inProgressData.totalItems / props.pageSize)\n      : props.queryData.notificationData &&\n        props.queryData.notificationData.totalItems &&\n        Math.ceil(props.queryData.notificationData.totalItems / props.pageSize)\n\n  const noContent =\n    !selectorId || selectorId === SELECTOR_ID.fieldAgentDrafts\n      ? transformRemoteDraftsContent(inProgressData).length <= 0\n      : transformRemoteDraftsContent(notificationData).length <= 0\n\n  const noResultMessage =\n    !selectorId || selectorId === SELECTOR_ID.fieldAgentDrafts\n      ? intl.formatMessage(wqMessages.noRecordsFieldAgents)\n      : intl.formatMessage(wqMessages.noRecordsHealthSystem)\n\n  const tabs = getTabs(\n    selectorId,\n    (inProgressData && inProgressData.totalItems) || 0,\n    (notificationData && notificationData.totalItems) || 0\n  )\n\n  return (\n    <WQContentWrapper\n      title={intl.formatMessage(navigationMessages.progress)}\n      isMobileSize={width < props.theme.grid.breakpoints.lg ? true : false}\n      tabBarContent={tabs}\n      isShowPagination={isShowPagination}\n      paginationId={paginationId}\n      totalPages={totalPages}\n      onPageChange={onPageChange}\n      loading={tabs ? props.loading : false}\n      error={props.error}\n      noResultText={noResultMessage}\n      noContent={noContent}\n    >\n      {(!selectorId || selectorId === SELECTOR_ID.fieldAgentDrafts) &&\n        renderFieldAgentTable(inProgressData, isShowPagination)}\n      {selectorId === SELECTOR_ID.hospitalDrafts &&\n        renderHospitalTable(notificationData, isShowPagination)}\n    </WQContentWrapper>\n  )\n}",
      "startLine": 118,
      "endLine": 513,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/inProgress/InProgress.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@515-521",
      "type": "function_declaration",
      "name": "mapStateToProps",
      "text": "function mapStateToProps(state: IStoreState) {\n  return {\n    outboxDeclarations: state.declarationsState.declarations,\n    offlineCountryConfig: getOfflineData(state),\n    scopes: getScope(state)\n  }\n}",
      "startLine": 515,
      "endLine": 521,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/inProgress/InProgress.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@369-374",
      "type": "function_declaration",
      "name": "mapStateToProps",
      "text": "function mapStateToProps(state: IStoreState) {\n  return {\n    scope: getScope(state),\n    outboxDeclarations: state.declarationsState.declarations\n  }\n}",
      "startLine": 369,
      "endLine": 374,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/readyForReview/ReadyForReview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@15-18",
      "type": "function_declaration",
      "name": "Home",
      "text": "function Home() {\n  const { path } = useHomePage()\n  return <Navigate to={path} />\n}",
      "startLine": 15,
      "endLine": 18,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/Home.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@111-114",
      "type": "method_definition",
      "name": "WithOnlineStatus",
      "text": "WithOnlineStatus(props: T) {\n    const isOnline = useOnlineStatus()\n    return <WrappedComponent isOnline={isOnline} {...props} />\n  }",
      "startLine": 111,
      "endLine": 114,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/LoadingIndicator.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@85-354",
      "type": "function_declaration",
      "name": "SentForReviewComponent",
      "text": "function SentForReviewComponent(props: IApprovalTabProps) {\n  const navigate = useNavigate()\n  const { width } = useWindowSize()\n  const [sortedCol, setSortedCol] = useState(COLUMNS.SENT_FOR_APPROVAL)\n  const [sortOrder, setSortOrder] = useState(SORT_ORDER.DESCENDING)\n\n  const canSendForApproval = props.scope?.includes(\n    SCOPES.RECORD_SUBMIT_FOR_APPROVAL\n  )\n\n  const onColumnClick = (columnName: string) => {\n    const { newSortedCol, newSortOrder } = changeSortedColumn(\n      columnName,\n      sortedCol,\n      sortOrder\n    )\n    setSortOrder(newSortOrder)\n    setSortedCol(newSortedCol)\n  }\n\n  const getColumns = () => {\n    if (width > props.theme.grid.breakpoints.lg) {\n      return [\n        {\n          width: 30,\n          label: props.intl.formatMessage(constantsMessages.name),\n          key: COLUMNS.ICON_WITH_NAME,\n          isSorted: sortedCol === COLUMNS.NAME,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.event),\n          width: 16,\n          key: COLUMNS.EVENT,\n          isSorted: sortedCol === COLUMNS.EVENT,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.eventDate),\n          width: 18,\n          key: COLUMNS.DATE_OF_EVENT,\n          isSorted: sortedCol === COLUMNS.DATE_OF_EVENT,\n          sortFunction: onColumnClick\n        },\n        {\n          label: canSendForApproval\n            ? props.intl.formatMessage(navigationMessages.approvals)\n            : props.intl.formatMessage(navigationMessages.sentForReview),\n          width: 18,\n          key: COLUMNS.SENT_FOR_APPROVAL,\n          isSorted: sortedCol === COLUMNS.SENT_FOR_APPROVAL,\n          sortFunction: onColumnClick\n        },\n        {\n          width: 18,\n          alignment: ColumnContentAlignment.RIGHT,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true\n        }\n      ]\n    } else {\n      return [\n        {\n          label: props.intl.formatMessage(constantsMessages.name),\n          width: 70,\n          key: COLUMNS.ICON_WITH_NAME_EVENT\n        },\n        {\n          width: 30,\n          alignment: ColumnContentAlignment.RIGHT,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true\n        }\n      ]\n    }\n  }\n\n  const transformValidatedContent = (data: GQLEventSearchResultSet) => {\n    const { intl } = props\n    if (!data || !data.results) {\n      return []\n    }\n    const transformedData = transformData(data, props.intl)\n    const items = transformedData.map((reg, index) => {\n      const actions = [] as IAction[]\n      const foundDeclaration = props.outboxDeclarations.find(\n        (declaration) => declaration.id === reg.id\n      )\n      const downloadStatus =\n        (foundDeclaration && foundDeclaration.downloadStatus) || undefined\n\n      actions.push({\n        actionComponent: (\n          <DownloadButton\n            downloadConfigs={{\n              event: reg.event,\n              compositionId: reg.id,\n              action: DownloadAction.LOAD_REVIEW_DECLARATION,\n              assignment:\n                foundDeclaration?.assignmentStatus ??\n                reg.assignment ??\n                undefined\n            }}\n            key={`DownloadButton-${index}`}\n            status={downloadStatus as DOWNLOAD_STATUS}\n            declarationStatus={reg.declarationStatus as SUBMISSION_STATUS}\n          />\n        )\n      })\n\n      const event =\n        (reg.event &&\n          intl.formatMessage(\n            dynamicConstantsMessages[reg.event.toLowerCase()]\n          )) ||\n        ''\n\n      let sentForApproval\n      if (!canSendForApproval) {\n        sentForApproval =\n          getPreviousOperationDateByOperationType(\n            reg.operationHistories,\n            RegStatus.CorrectionRequested\n          ) ||\n          getPreviousOperationDateByOperationType(\n            reg.operationHistories,\n            RegStatus.Declared\n          ) ||\n          getPreviousOperationDateByOperationType(\n            reg.operationHistories,\n            RegStatus.InProgress\n          ) ||\n          ''\n      } else {\n        sentForApproval =\n          getPreviousOperationDateByOperationType(\n            reg.operationHistories,\n            RegStatus.Validated\n          ) ||\n          getPreviousOperationDateByOperationType(\n            reg.operationHistories,\n            RegStatus.CorrectionRequested\n          ) ||\n          ''\n      }\n\n      const dateOfEvent =\n        reg.dateOfEvent &&\n        reg.dateOfEvent.length > 0 &&\n        plainDateToLocalDate(reg.dateOfEvent)\n      const NameComponent = reg.name ? (\n        <NameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: canSendForApproval ? 'approvalTab' : 'reviewTab',\n                declarationId: reg.id\n              })\n            )\n          }\n        >\n          {reg.name}\n        </NameContainer>\n      ) : (\n        <NoNameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: canSendForApproval ? 'approvalTab' : 'reviewTab',\n                declarationId: reg.id\n              })\n            )\n          }\n        >\n          {intl.formatMessage(constantsMessages.noNameProvided)}\n        </NoNameContainer>\n      )\n      const isDuplicate = reg.duplicates && reg.duplicates.length > 0\n\n      return {\n        ...reg,\n        event,\n        name: reg.name && reg.name.toLowerCase(),\n        iconWithName: (\n          <IconWithName\n            status={reg.declarationStatus}\n            name={NameComponent}\n            isDuplicate={isDuplicate}\n          />\n        ),\n        iconWithNameEvent: (\n          <IconWithNameEvent\n            status={reg.declarationStatus}\n            name={NameComponent}\n            event={event}\n            isDuplicate={isDuplicate}\n          />\n        ),\n        eventTimeElapsed:\n          (reg.dateOfEvent?.length &&\n            formattedDuration(new Date(reg.dateOfEvent))) ||\n          '',\n        dateOfEvent,\n        sentForApproval,\n        actions\n      }\n    })\n    const sortedItems = getSortedItems(items, sortedCol, sortOrder)\n    return sortedItems.map((item) => {\n      return {\n        ...item,\n        dateOfEvent:\n          item.dateOfEvent && formattedDuration(item.dateOfEvent as Date),\n        sentForApproval:\n          item.sentForApproval &&\n          formattedDuration(item.sentForApproval as Date)\n      }\n    })\n  }\n\n  // Approval tab for registration clerk and registrar\n  // Review tab for field agent\n  const { intl, queryData, paginationId, pageSize, onPageChange } = props\n  const { data } = queryData\n  const totalPages = props.queryData.data.totalItems\n    ? Math.ceil(props.queryData.data.totalItems / pageSize)\n    : 0\n  const isShowPagination =\n    props.queryData.data.totalItems &&\n    props.queryData.data.totalItems > pageSize\n      ? true\n      : false\n  const noResultText = canSendForApproval\n    ? intl.formatMessage(wqMessages.noRecordsSentForApproval)\n    : intl.formatMessage(wqMessages.noRecordsSentForReview)\n  const title = canSendForApproval\n    ? intl.formatMessage(navigationMessages.approvals)\n    : intl.formatMessage(navigationMessages.sentForReview)\n  return (\n    <WQContentWrapper\n      title={title}\n      isMobileSize={width < props.theme.grid.breakpoints.lg}\n      isShowPagination={isShowPagination}\n      paginationId={paginationId}\n      totalPages={totalPages}\n      onPageChange={onPageChange}\n      noResultText={noResultText}\n      loading={props.loading}\n      error={props.error}\n      noContent={transformValidatedContent(data).length <= 0}\n    >\n      <ReactTooltip id=\"validatedTooltip\">\n        <ToolTipContainer>\n          {props.intl.formatMessage(\n            messages.validatedDeclarationTooltipForRegistrationAgent\n          )}\n        </ToolTipContainer>\n      </ReactTooltip>\n      <Workqueue\n        content={transformValidatedContent(data)}\n        columns={getColumns()}\n        loading={props.loading}\n        sortOrder={sortOrder}\n        hideLastBorder={!isShowPagination}\n      />\n    </WQContentWrapper>\n  )\n}",
      "startLine": 85,
      "endLine": 354,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/sentForReview/SentForReview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@356-361",
      "type": "function_declaration",
      "name": "mapStateToProps",
      "text": "function mapStateToProps(state: IStoreState) {\n  return {\n    scope: getScope(state),\n    outboxDeclarations: state.declarationsState.declarations\n  }\n}",
      "startLine": 356,
      "endLine": 361,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/sentForReview/SentForReview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@31-38",
      "type": "function_declaration",
      "name": "storeOutboxDeclaration",
      "text": "function storeOutboxDeclaration(\n  store: AppStore,\n  submissionStatus: SUBMISSION_STATUS\n) {\n  const declaration = createDeclaration(EventType.Birth, mockDeclarationData)\n  declaration.submissionStatus = submissionStatus\n  store.dispatch(storeDeclaration(declaration))\n}",
      "startLine": 31,
      "endLine": 38,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/outbox/Outbox.test.tsx",
      "language": "tsx"
    },
    {
      "id": "class_declaration@121-159",
      "type": "class_declaration",
      "name": "OfficeHomeView",
      "text": "class OfficeHomeView extends React.Component<\n  IOfficeHomeProps,\n  IOfficeHomeState\n> {\n  pageSize = 10\n  showPaginated = false\n  interval: NodeJS.Timeout | undefined = undefined\n\n  constructor(props: IOfficeHomeProps) {\n    super(props)\n    this.state = {\n      showCertificateToast: Boolean(\n        this.props.declarations.filter(\n          (item) => item.submissionStatus === SUBMISSION_STATUS.READY_TO_CERTIFY\n        ).length\n      ),\n      offlineResources: this.props.offlineResources\n    }\n  }\n\n  updateWorkqueue() {\n    this.props.updateRegistrarWorkqueue(\n      this.props.userDetails?.practitionerId,\n      this.pageSize\n    )\n  }\n\n  syncWorkqueue() {\n    setTimeout(() => this.updateWorkqueue(), SYNC_WORKQUEUE_TIME)\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n    this.interval = setInterval(() => {\n      this.updateWorkqueue()\n    }, 300000)\n  }\n\n  syncPageId() {\n    const { tabId, selectorId, pageId, inProgressTab, notificationTab } =",
      "startLine": 121,
      "endLine": 159,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body",
        "ERROR"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/OfficeHome.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@130-138",
      "type": "method_definition",
      "name": "super",
      "text": "super(props)\n    this.state = {\n      showCertificateToast: Boolean(\n        this.props.declarations.filter(\n          (item) => item.submissionStatus === SUBMISSION_STATUS.READY_TO_CERTIFY\n        ).length\n      ),\n      offlineResources: this.props.offlineResources\n    }",
      "startLine": 130,
      "endLine": 138,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 15,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/OfficeHome.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@465-508",
      "type": "function_declaration",
      "name": "mapStateToProps",
      "text": "function mapStateToProps(state: IStoreState, props: RouteComponentProps) {\n  const match = props.router.match\n  const userDetails = getUserDetails(state)\n  const userLocationId = (userDetails && getUserLocation(userDetails).id) || ''\n  const scope = getScope(state)\n  const pageId =\n    (match.params.pageId && Number.parseInt(match.params.pageId)) ||\n    (match.params.selectorId && Number.parseInt(match.params.selectorId)) ||\n    1\n\n  return {\n    offlineResources: getOfflineData(state),\n    declarations: state.declarationsState.declarations,\n    workqueue: state.workqueueState.workqueue,\n    language: state.i18n.language,\n    scope,\n    userLocationId,\n    tabId:\n      (match && match.params && match.params.tabId) ||\n      WORKQUEUE_TABS.inProgress,\n    selectorId: (match && match.params && match.params.selectorId) || '',\n    pageId,\n    storedDeclarations: state.declarationsState.declarations,\n    drafts:\n      (\n        state.declarationsState.declarations &&\n        state.declarationsState.declarations.filter(\n          (declaration: IDeclaration) =>\n            declaration.submissionStatus ===\n            SUBMISSION_STATUS[SUBMISSION_STATUS.DRAFT]\n        )\n      ).reverse() || [],\n    declarationsReadyToSend: (\n      (state.declarationsState.declarations &&\n        state.declarationsState.declarations.filter(\n          (declaration: IDeclaration) =>\n            isDeclarationInReadyToReviewStatus(declaration.submissionStatus)\n        )) ||\n      []\n    ).reverse(),\n    userDetails,\n    ...selectWorkqueuePagination(state)\n  }\n}",
      "startLine": 465,
      "endLine": 508,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/OfficeHome.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@104-108",
      "type": "function_declaration",
      "name": "isInprogressStatus",
      "text": "function isInprogressStatus(\n  status: OutboxSubmissionStatus\n): status is IInProgressStatus {\n  return INPROGRESS_STATUS.includes(status as IInProgressStatus)\n}",
      "startLine": 104,
      "endLine": 108,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/outbox/Outbox.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@110-132",
      "type": "function_declaration",
      "name": "getIcon",
      "text": "function getIcon(\n  status: OutboxSubmissionStatus,\n  index: number,\n  isOnline: boolean\n): React.ReactNode {\n  let id = `waiting${index}`\n\n  if (!isOnline) {\n    id = `noConnection${index}`\n    return <ConnectionError id={id} key={id} />\n  }\n\n  if (status === SUBMISSION_STATUS.FAILED_NETWORK) {\n    id = `failed${index}`\n  }\n\n  if (isInprogressStatus(status)) {\n    id = `${statusInprogressIconIdMap[status] || `registering`}${index}`\n    return <Spinner id={id} key={id} size={24} />\n  }\n\n  return <StatusWaiting id={id} key={id} />\n}",
      "startLine": 110,
      "endLine": 132,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/outbox/Outbox.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@147-328",
      "type": "function_declaration",
      "name": "Outbox",
      "text": "function Outbox() {\n  const intl = useIntl()\n  const [sortedColumn, setSortedColumn] = React.useState(COLUMNS.ICON_WITH_NAME)\n  const [sortOrder, setSortOrder] = React.useState(SORT_ORDER.ASCENDING)\n  const { width } = useWindowSize()\n  const isOnline = useOnlineStatus()\n  const theme = getTheme()\n  const declarations = useSelector((state: IStoreState) =>\n    state.declarationsState?.declarations.filter(isOutboxDeclaration)\n  )\n  const dispatch = useDispatch()\n\n  const onColumnClick = (columnName: string) => {\n    const { newSortedCol, newSortOrder } = changeSortedColumn(\n      columnName,\n      sortedColumn,\n      sortOrder\n    )\n    setSortedColumn(newSortedCol)\n    setSortOrder(newSortOrder)\n  }\n\n  function transformDeclarationsReadyToSend() {\n    const items = declarations.map((declaration, index) => {\n      const name = getDeclarationFullName(declaration, intl)\n      let dateOfEvent\n      if (declaration.event && declaration.event.toString() === 'birth') {\n        dateOfEvent = declaration.data?.child?.childBirthDate as string\n      } else if (\n        declaration.event &&\n        declaration.event.toString() === 'death'\n      ) {\n        dateOfEvent = declaration.data?.deathEvent?.deathDate as string\n      } else if (declaration?.event?.toString() === 'marriage') {\n        dateOfEvent = declaration.data?.marriageEvent?.marriageDate?.toString()\n      }\n\n      const statusText = intl.formatMessage(\n        statusMessageMap[declaration.submissionStatus] ||\n          messages.statusWaitingToRegister\n      )\n      const icon = getIcon(declaration.submissionStatus, index, isOnline)\n\n      const NameComponent = name ? (\n        <NameContainer>{name}</NameContainer>\n      ) : (\n        <NoNameContainer>\n          {intl.formatMessage(constantsMessages.noNameProvided)}\n        </NoNameContainer>\n      )\n\n      return {\n        id: declaration.id,\n        name,\n        event:\n          (declaration.event &&\n            intl.formatMessage(\n              dynamicConstantsMessages[declaration.event.toLowerCase()]\n            )) ||\n          '',\n        iconWithName: (\n          <IconWithName\n            status={declaration.registrationStatus || 'IN_PROGRESS'}\n            name={NameComponent}\n          />\n        ),\n        iconWithNameEvent: (\n          <IconWithNameEvent\n            status={declaration.registrationStatus || 'IN_PROGRESS'}\n            name={NameComponent}\n            event={statusText}\n          />\n        ),\n        submissionStatus: statusText,\n        statusIndicator:\n          declaration.submissionStatus === SUBMISSION_STATUS.FAILED\n            ? [\n                {\n                  label: intl.formatMessage(messages.retry),\n                  disabled: false,\n                  handler: (\n                    e:\n                      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n                      | undefined\n                  ) => {\n                    e && e.stopPropagation()\n                    if (!isSubmissionAction(declaration.action!)) {\n                      return\n                    }\n                    dispatch(\n                      declarationReadyForStatusChange({\n                        ...declaration,\n                        action: declaration.action\n                      })\n                    )\n                  }\n                }\n              ]\n            : icon\n              ? [{ actionComponent: icon }]\n              : null,\n        dateOfEvent\n      }\n    })\n\n    const sortedItems = getSortedItems(items, sortedColumn, sortOrder)\n    return sortedItems.map((item) => ({\n      ...item,\n      dateOfEvent: isValidPlainDate(item.dateOfEvent)\n        ? formatPlainDate(item.dateOfEvent)\n        : ''\n    }))\n  }\n\n  function getColumns() {\n    return width < theme.grid.breakpoints.lg\n      ? [\n          {\n            label: intl.formatMessage(constantsMessages.record),\n            width: 70,\n            key: COLUMNS.ICON_WITH_NAME_EVENT\n          },\n          {\n            width: 30,\n            alignment: ColumnContentAlignment.RIGHT,\n            key: 'statusIndicator',\n            isActionColumn: true\n          }\n        ]\n      : [\n          {\n            width: 25,\n            label: intl.formatMessage(constantsMessages.record),\n            key: COLUMNS.ICON_WITH_NAME,\n            isSorted: sortedColumn === COLUMNS.NAME,\n            sortFunction: onColumnClick\n          },\n          {\n            label: intl.formatMessage(constantsMessages.event),\n            width: 25,\n            key: COLUMNS.EVENT,\n            isSorted: sortedColumn === COLUMNS.EVENT,\n            sortFunction: onColumnClick\n          },\n          {\n            label: intl.formatMessage(constantsMessages.eventDate),\n            width: 25,\n            key: COLUMNS.DATE_OF_EVENT,\n            isSorted: sortedColumn === COLUMNS.DATE_OF_EVENT,\n            sortFunction: onColumnClick\n          },\n          {\n            label: '',\n            width: 15,\n            key: 'submissionStatus',\n            alignment: ColumnContentAlignment.RIGHT,\n            color: theme.colors.supportingCopy\n          },\n          {\n            label: '',\n            width: 10,\n            key: 'statusIndicator',\n            isActionColumn: true\n          }\n        ]\n  }\n\n  return (\n    <WQContentWrapper\n      title={intl.formatMessage(navigationMessages.outbox)}\n      isMobileSize={width < theme.grid.breakpoints.lg}\n    >\n      <Workqueue\n        content={transformDeclarationsReadyToSend()}\n        columns={getColumns()}\n        noResultText={intl.formatMessage(constantsMessages.noResultsOutbox)}\n        hideLastBorder={true}\n        sortOrder={sortOrder}\n      />\n    </WQContentWrapper>\n  )\n}",
      "startLine": 147,
      "endLine": 328,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/outbox/Outbox.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@169-259",
      "type": "function_declaration",
      "name": "transformDeclarationsReadyToSend",
      "text": "function transformDeclarationsReadyToSend() {\n    const items = declarations.map((declaration, index) => {\n      const name = getDeclarationFullName(declaration, intl)\n      let dateOfEvent\n      if (declaration.event && declaration.event.toString() === 'birth') {\n        dateOfEvent = declaration.data?.child?.childBirthDate as string\n      } else if (\n        declaration.event &&\n        declaration.event.toString() === 'death'\n      ) {\n        dateOfEvent = declaration.data?.deathEvent?.deathDate as string\n      } else if (declaration?.event?.toString() === 'marriage') {\n        dateOfEvent = declaration.data?.marriageEvent?.marriageDate?.toString()\n      }\n\n      const statusText = intl.formatMessage(\n        statusMessageMap[declaration.submissionStatus] ||\n          messages.statusWaitingToRegister\n      )\n      const icon = getIcon(declaration.submissionStatus, index, isOnline)\n\n      const NameComponent = name ? (\n        <NameContainer>{name}</NameContainer>\n      ) : (\n        <NoNameContainer>\n          {intl.formatMessage(constantsMessages.noNameProvided)}\n        </NoNameContainer>\n      )\n\n      return {\n        id: declaration.id,\n        name,\n        event:\n          (declaration.event &&\n            intl.formatMessage(\n              dynamicConstantsMessages[declaration.event.toLowerCase()]\n            )) ||\n          '',\n        iconWithName: (\n          <IconWithName\n            status={declaration.registrationStatus || 'IN_PROGRESS'}\n            name={NameComponent}\n          />\n        ),\n        iconWithNameEvent: (\n          <IconWithNameEvent\n            status={declaration.registrationStatus || 'IN_PROGRESS'}\n            name={NameComponent}\n            event={statusText}\n          />\n        ),\n        submissionStatus: statusText,\n        statusIndicator:\n          declaration.submissionStatus === SUBMISSION_STATUS.FAILED\n            ? [\n                {\n                  label: intl.formatMessage(messages.retry),\n                  disabled: false,\n                  handler: (\n                    e:\n                      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n                      | undefined\n                  ) => {\n                    e && e.stopPropagation()\n                    if (!isSubmissionAction(declaration.action!)) {\n                      return\n                    }\n                    dispatch(\n                      declarationReadyForStatusChange({\n                        ...declaration,\n                        action: declaration.action\n                      })\n                    )\n                  }\n                }\n              ]\n            : icon\n              ? [{ actionComponent: icon }]\n              : null,\n        dateOfEvent\n      }\n    })\n\n    const sortedItems = getSortedItems(items, sortedColumn, sortOrder)\n    return sortedItems.map((item) => ({\n      ...item,\n      dateOfEvent: isValidPlainDate(item.dateOfEvent)\n        ? formatPlainDate(item.dateOfEvent)\n        : ''\n    }))\n  }",
      "startLine": 169,
      "endLine": 259,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/outbox/Outbox.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@261-312",
      "type": "function_declaration",
      "name": "getColumns",
      "text": "function getColumns() {\n    return width < theme.grid.breakpoints.lg\n      ? [\n          {\n            label: intl.formatMessage(constantsMessages.record),\n            width: 70,\n            key: COLUMNS.ICON_WITH_NAME_EVENT\n          },\n          {\n            width: 30,\n            alignment: ColumnContentAlignment.RIGHT,\n            key: 'statusIndicator',\n            isActionColumn: true\n          }\n        ]\n      : [\n          {\n            width: 25,\n            label: intl.formatMessage(constantsMessages.record),\n            key: COLUMNS.ICON_WITH_NAME,\n            isSorted: sortedColumn === COLUMNS.NAME,\n            sortFunction: onColumnClick\n          },\n          {\n            label: intl.formatMessage(constantsMessages.event),\n            width: 25,\n            key: COLUMNS.EVENT,\n            isSorted: sortedColumn === COLUMNS.EVENT,\n            sortFunction: onColumnClick\n          },\n          {\n            label: intl.formatMessage(constantsMessages.eventDate),\n            width: 25,\n            key: COLUMNS.DATE_OF_EVENT,\n            isSorted: sortedColumn === COLUMNS.DATE_OF_EVENT,\n            sortFunction: onColumnClick\n          },\n          {\n            label: '',\n            width: 15,\n            key: 'submissionStatus',\n            alignment: ColumnContentAlignment.RIGHT,\n            color: theme.colors.supportingCopy\n          },\n          {\n            label: '',\n            width: 10,\n            key: 'statusIndicator',\n            isActionColumn: true\n          }\n        ]\n  }",
      "startLine": 261,
      "endLine": 312,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/outbox/Outbox.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@82-315",
      "type": "function_declaration",
      "name": "ReadyToPrintComponent",
      "text": "function ReadyToPrintComponent(props: IPrintTabProps) {\n  const navigate = useNavigate()\n  const { width } = useWindowSize()\n  const [sortedCol, setSortedCol] = useState(COLUMNS.REGISTERED)\n  const [sortOrder, setSortOrder] = useState(SORT_ORDER.DESCENDING)\n\n  const onColumnClick = (columnName: string) => {\n    const { newSortedCol, newSortOrder } = changeSortedColumn(\n      columnName,\n      sortedCol,\n      sortOrder\n    )\n    setSortOrder(newSortOrder)\n    setSortedCol(newSortedCol)\n  }\n\n  const getColumns = () => {\n    if (width > props.theme.grid.breakpoints.lg) {\n      return [\n        {\n          width: 30,\n          label: props.intl.formatMessage(constantsMessages.name),\n          key: COLUMNS.ICON_WITH_NAME,\n          isSorted: sortedCol === COLUMNS.NAME,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.event),\n          width: 16,\n          key: COLUMNS.EVENT,\n          isSorted: sortedCol === COLUMNS.EVENT,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.eventDate),\n          width: 18,\n          key: COLUMNS.DATE_OF_EVENT,\n          isSorted: sortedCol === COLUMNS.DATE_OF_EVENT,\n          sortFunction: onColumnClick\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.registered),\n          width: 18,\n          key: COLUMNS.REGISTERED,\n          isSorted: sortedCol === COLUMNS.REGISTERED,\n          sortFunction: onColumnClick\n        },\n        {\n          width: 18,\n          alignment: ColumnContentAlignment.RIGHT,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true\n        }\n      ]\n    } else {\n      return [\n        {\n          label: props.intl.formatMessage(constantsMessages.name),\n          width: 70,\n          key: COLUMNS.ICON_WITH_NAME_EVENT\n        },\n        {\n          width: 30,\n          alignment: ColumnContentAlignment.RIGHT,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true\n        }\n      ]\n    }\n  }\n\n  const transformRegisteredContent = (data: GQLEventSearchResultSet) => {\n    const { intl } = props\n    if (!data || !data.results) {\n      return []\n    }\n\n    const transformedData = transformData(data, props.intl)\n    const items = transformedData.map((reg, index) => {\n      const foundDeclaration = props.outboxDeclarations.find(\n        (declaration) => declaration.id === reg.id\n      )\n      const actions: IAction[] = []\n      const downloadStatus = foundDeclaration?.downloadStatus\n\n      if (width > props.theme.grid.breakpoints.lg) {\n        actions.push({\n          label: props.intl.formatMessage(buttonMessages.print),\n          disabled: downloadStatus !== DOWNLOAD_STATUS.DOWNLOADED,\n          handler: (\n            e: React.MouseEvent<HTMLButtonElement, MouseEvent> | undefined\n          ) => {\n            e && e.stopPropagation()\n            if (downloadStatus === DOWNLOAD_STATUS.DOWNLOADED) {\n              props.clearCorrectionAndPrintChanges(reg.id)\n\n              navigate(\n                generatePrintCertificateUrl({\n                  registrationId: reg.id,\n                  event: reg.event.toLocaleLowerCase() || ''\n                })\n              )\n            }\n          }\n        })\n      }\n      actions.push({\n        actionComponent: (\n          <DownloadButton\n            downloadConfigs={{\n              event: reg.event,\n              compositionId: reg.id,\n              action: DownloadAction.LOAD_REVIEW_DECLARATION,\n              assignment:\n                foundDeclaration?.assignmentStatus ??\n                reg.assignment ??\n                undefined\n            }}\n            key={`DownloadButton-${index}`}\n            status={downloadStatus}\n            declarationStatus={reg.declarationStatus as SUBMISSION_STATUS}\n          />\n        )\n      })\n      const event =\n        (reg.event &&\n          intl.formatMessage(\n            dynamicConstantsMessages[reg.event.toLowerCase()]\n          )) ||\n        ''\n      const dateOfEvent =\n        reg.dateOfEvent &&\n        reg.dateOfEvent.length > 0 &&\n        plainDateToLocalDate(reg.dateOfEvent)\n      const registered =\n        getPreviousOperationDateByOperationType(\n          reg.operationHistories,\n          RegStatus.Registered\n        ) || ''\n\n      const NameComponent = reg.name ? (\n        <NameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: 'printTab',\n                declarationId: reg.id\n              })\n            )\n          }\n        >\n          {reg.name}\n        </NameContainer>\n      ) : (\n        <NoNameContainer\n          id={`name_${index}`}\n          onClick={() =>\n            navigate(\n              formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                tab: 'printTab',\n                declarationId: reg.id\n              })\n            )\n          }\n        >\n          {intl.formatMessage(constantsMessages.noNameProvided)}\n        </NoNameContainer>\n      )\n      return {\n        ...reg,\n        event,\n        name: reg.name && reg.name.toLowerCase(),\n        iconWithName: (\n          <IconWithName status={reg.declarationStatus} name={NameComponent} />\n        ),\n        iconWithNameEvent: (\n          <IconWithNameEvent\n            status={reg.declarationStatus}\n            name={NameComponent}\n            event={event}\n          />\n        ),\n        dateOfEvent,\n        registered,\n        actions\n      }\n    })\n    const sortedItems = getSortedItems(items, sortedCol, sortOrder)\n\n    return sortedItems.map((item) => {\n      return {\n        ...item,\n        dateOfEvent:\n          item.dateOfEvent && formattedDuration(item.dateOfEvent as Date),\n        registered:\n          item.registered && formattedDuration(item.registered as Date)\n      }\n    })\n  }\n\n  const { intl, queryData, paginationId, onPageChange, pageSize } = props\n  const { data } = queryData\n  const totalPages = props.queryData.data.totalItems\n    ? Math.ceil(props.queryData.data.totalItems / pageSize)\n    : 0\n  const isShowPagination =\n    props.queryData.data.totalItems &&\n    props.queryData.data.totalItems > pageSize\n      ? true\n      : false\n  return (\n    <WQContentWrapper\n      title={intl.formatMessage(navigationMessages.print)}\n      isMobileSize={width < props.theme.grid.breakpoints.lg}\n      isShowPagination={isShowPagination}\n      paginationId={paginationId}\n      totalPages={totalPages}\n      onPageChange={onPageChange}\n      loading={props.loading}\n      error={props.error}\n      noResultText={intl.formatMessage(wqMessages.noRecordsReadyToPrint)}\n      noContent={transformRegisteredContent(data).length <= 0}\n    >\n      <Workqueue\n        content={transformRegisteredContent(data)}\n        columns={getColumns()}\n        loading={props.loading}\n        sortOrder={sortOrder}\n        hideLastBorder={!isShowPagination}\n      />\n    </WQContentWrapper>\n  )\n}",
      "startLine": 82,
      "endLine": 315,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/readyToPrint/ReadyToPrint.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@317-321",
      "type": "function_declaration",
      "name": "mapStateToProps",
      "text": "function mapStateToProps(state: IStoreState) {\n  return {\n    outboxDeclarations: state.declarationsState.declarations\n  }\n}",
      "startLine": 317,
      "endLine": 321,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/OfficeHome/readyToPrint/ReadyToPrint.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@72-80",
      "type": "function_declaration",
      "name": "BackgroundWrapper",
      "text": "function BackgroundWrapper({ children, id }: IProps) {\n  const countryBackground = useSelector(selectCountryBackground)\n\n  return (\n    <StyledPage id={id} background={countryBackground}>\n      <Container> {children}</Container>\n    </StyledPage>\n  )\n}",
      "startLine": 72,
      "endLine": 80,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/common/Common.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@28-76",
      "type": "function_declaration",
      "name": "DeleteSystemModal",
      "text": "function DeleteSystemModal({\n  loading,\n  system,\n  closeModal,\n  deleteSystem\n}: ISystemProps) {\n  const intl = useIntl()\n\n  return (\n    <>\n      <ResponsiveModal\n        title={system.name}\n        contentHeight={70}\n        responsive={false}\n        actions={[\n          <Button\n            type=\"tertiary\"\n            id=\"cancel\"\n            key=\"cancel\"\n            onClick={() => {\n              closeModal()\n            }}\n          >\n            {intl.formatMessage(buttonMessages.cancel)}\n          </Button>,\n          <Button\n            type=\"negative\"\n            key=\"delete\"\n            id=\"delete\"\n            loading={loading}\n            onClick={() => {\n              deleteSystem()\n            }}\n          >\n            {intl.formatMessage(buttonMessages.delete)}\n          </Button>\n        ]}\n        show={true}\n        handleClose={() => closeModal()}\n      >\n        <Text variant=\"reg16\" element=\"span\">\n          {intl.formatMessage(integrationMessages.deleteSystemText, {\n            b: (chunks: ReactNode) => <strong>{chunks}</strong>\n          })}\n        </Text>\n      </ResponsiveModal>\n    </>\n  )\n}",
      "startLine": 28,
      "endLine": 76,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Config/Systems/DeleteSystemModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@615-694",
      "type": "function_declaration",
      "name": "applyCorrectionToData",
      "text": "function applyCorrectionToData(record: IDeclaration) {\n  const history = record.data.history as unknown as History[]\n  if (!history) {\n    throw new Error('No history found from declaration. Should never happen')\n  }\n\n  const correctionRequestTask = history.find(\n    (task: History) => task.action === 'REQUESTED_CORRECTION'\n  )\n\n  if (!correctionRequestTask) {\n    throw new Error('No correction request task found. Should never happen')\n  }\n\n  if (!correctionRequestTask.input) {\n    throw new Error(\n      'Correction request task did not have an input field. Should never happen'\n    )\n  }\n\n  if (!correctionRequestTask.output) {\n    throw new Error(\n      'Correction request task did not have an output field. Should never happen'\n    )\n  }\n\n  const proposedChangesPatch = correctionRequestTask.output.reduce(\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    (acc: Record<string, Record<string, IFormFieldValue>>, curr: any) => {\n      acc[curr.valueCode] = acc[curr.valueCode] || {}\n\n      acc[curr.valueCode][curr.valueId] = curr.value\n\n      return acc\n    },\n    {}\n  )\n\n  const correction: CorrectionInput = {\n    attachments: correctionRequestTask.documents.map((document) => ({\n      _fhirID: document.id\n    })),\n    hasShowedVerifiedDocument: correctionRequestTask.hasShowedVerifiedDocument!,\n    noSupportingDocumentationRequired:\n      correctionRequestTask.noSupportingDocumentationRequired!,\n    location: {\n      _fhirID: correctionRequestTask.location!.id\n    },\n    note: '', //correctionRequestTask.note!,\n    otherReason: correctionRequestTask.otherReason!,\n    payment: correctionRequestTask.payment && {\n      _fhirID: correctionRequestTask.payment.id,\n      type: correctionRequestTask.payment.type,\n      amount: correctionRequestTask.payment.amount,\n      outcome: correctionRequestTask.payment.outcome,\n      date: correctionRequestTask.payment.date\n    },\n    reason: correctionRequestTask.reason!,\n    requester: correctionRequestTask.requester!,\n    values: correctionRequestTask.input.map((input, index) => ({\n      fieldName: input!.valueId,\n      newValue: correctionRequestTask.output![index]?.value,\n      section: input!.valueCode,\n      oldValue: input!.value!\n    }))\n  }\n\n  const declarationData = merge({}, record.data, proposedChangesPatch)\n\n  return {\n    ...record,\n    data: {\n      ...declarationData,\n      registration: {\n        ...declarationData.registration,\n        correction: correction\n      }\n    }\n  }\n}",
      "startLine": 615,
      "endLine": 694,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/ReviewCorrection/ReviewCorrection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@696-738",
      "type": "function_declaration",
      "name": "ReviewCorrection",
      "text": "function ReviewCorrection() {\n  const { declarationId } = useParams<URLParams>()\n\n  const records = useRecord()\n  const record = declarationId ? records.findById(declarationId) : undefined\n\n  const registerForm = useSelector(\n    (state: IStoreState) => record && getEventReviewForm(state, record.event)\n  )\n\n  if (!record) {\n    return (\n      <Navigate\n        to={formatUrl(REGISTRAR_HOME_TAB, {\n          tabId: WORKQUEUE_TABS.readyForReview,\n          selectorId: ''\n        })}\n      />\n    )\n  }\n\n  const recordWithProposedChanges = applyCorrectionToData(record)\n\n  return (\n    <>\n      <RegisterForm\n        reviewSummaryHeader={\n          <ReviewSummarySection declaration={recordWithProposedChanges} />\n        }\n        match={{\n          params: {\n            declarationId: record.id,\n            pageId: 'review',\n            groupId: 'review-view-group'\n          }\n        }}\n        pageRoute={''}\n        registerForm={registerForm!}\n        declaration={recordWithProposedChanges}\n      />\n    </>\n  )\n}",
      "startLine": 696,
      "endLine": 738,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/ReviewCorrection/ReviewCorrection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@39-63",
      "type": "function_declaration",
      "name": "useNewSystemDraft",
      "text": "function useNewSystemDraft() {\n  const [newClientName, setNewClientName] = useState(EMPTY_STRING)\n  const [newSystemType, setNewSystemType] = useState<SystemType>(\n    SystemType.Health\n  )\n\n  const onChangeClientName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = String(event.target.value)\n    setNewClientName(value)\n  }\n\n  const clearNewSystemDraft = () => {\n    setNewClientName(EMPTY_STRING)\n    setNewSystemType(SystemType.Health)\n  }\n\n  return {\n    newClientName,\n    setNewClientName,\n    newSystemType,\n    setNewSystemType,\n    onChangeClientName,\n    clearNewSystemDraft\n  }\n}",
      "startLine": 39,
      "endLine": 63,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Config/Systems/useSystems.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@66-98",
      "type": "function_declaration",
      "name": "useSystemsGlobalState",
      "text": "function useSystemsGlobalState() {\n  const { systems: existingSystems } = useSelector(getOfflineData)\n  const dispatch = useDispatch()\n\n  const dispatchSystemUpdate = (updatedSystem: System) => {\n    const systems = existingSystems.map((system) => {\n      if (system.clientId === updatedSystem.clientId) {\n        return updatedSystem\n      } else {\n        return system\n      }\n    })\n    dispatch(updateOfflineSystems({ systems }))\n  }\n\n  const dispatchNewSystem = (newSystem: System) => {\n    dispatch(updateOfflineSystems({ systems: [...existingSystems, newSystem] }))\n  }\n\n  const dispatchSystemRemove = (system: System) => {\n    const systems = existingSystems.filter(\n      (ite) => ite.clientId !== system.clientId\n    )\n    dispatch(updateOfflineSystems({ systems }))\n  }\n\n  return {\n    dispatchSystemUpdate,\n    dispatchNewSystem,\n    existingSystems,\n    dispatchSystemRemove\n  }\n}",
      "startLine": 66,
      "endLine": 98,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Config/Systems/useSystems.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@100-105",
      "type": "function_declaration",
      "name": "initWebHook",
      "text": "function initWebHook(event: string) {\n  return {\n    event: event,\n    permissions: []\n  }\n}",
      "startLine": 100,
      "endLine": 105,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Config/Systems/useSystems.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@50-61",
      "type": "function_declaration",
      "name": "downloadURI",
      "text": "async function downloadURI(uri: string, name: string) {\n  await fetch(uri)\n    .then((res) => {\n      return res.blob()\n    })\n    .then((data) => {\n      const a = document.createElement('a')\n      a.href = window.URL.createObjectURL(data)\n      a.download = name\n      a.click()\n    })\n}",
      "startLine": 50,
      "endLine": 61,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Vsexports/VSExport.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@79-151",
      "type": "function_declaration",
      "name": "TabContent",
      "text": "function TabContent(props: VSExportProps) {\n    const items: VsExport[] = props.items\n    const totalItems = items.length\n    const [currentPageNumber, setCurrentPageNumber] = React.useState(1)\n    const pages = chunk(items, DEFAULT_LIST_SIZE)\n    const getPage = (pageNumber: number) => pages[pageNumber - 1]\n\n    return (\n      <>\n        {sortBy(getPage(currentPageNumber), 'startDate').map(\n          (item: VsExport) => {\n            const fileName = intl.formatMessage(\n              messages.vitalStatisticsExport,\n              {\n                month: intl.formatDate(new Date(item.startDate), {\n                  month: 'long'\n                }),\n                event: item.event,\n                fileSize: ''\n              }\n            )\n\n            const label = intl.formatMessage(messages.vitalStatisticsExport, {\n              month: intl.formatDate(new Date(item.startDate), {\n                month: 'long'\n              }),\n              event: item.event,\n              fileSize: item.fileSize\n            })\n\n            return (\n              <ListViewSimplified\n                key={`${item.createdOn}_${item.event}`}\n                bottomBorder\n              >\n                <ListViewItemSimplified\n                  compactLabel\n                  label={\n                    <Label id={`${item.createdOn}_label`}>\n                      {new Date(item.startDate).getFullYear()}\n                    </Label>\n                  }\n                  value={<Value id={`${item.createdOn}_value`}>{label}</Value>}\n                  actions={\n                    <DynamicHeightLinkButton\n                      id={`${item.createdOn}_export_button`}\n                      disabled={false}\n                      onClick={async () => {\n                        try {\n                          await downloadURI(item.url, fileName.trim())\n                        } catch (error) {\n                          setDocumentDownloadError(true)\n                        }\n                      }}\n                    >\n                      {intl.formatMessage(messages.export)}\n                    </DynamicHeightLinkButton>\n                  }\n                />\n              </ListViewSimplified>\n            )\n          }\n        )}\n        {totalItems > 0 && (\n          <Pagination\n            currentPage={currentPageNumber}\n            totalPages={Math.ceil(totalItems / DEFAULT_LIST_SIZE)}\n            onPageChange={(page: number) => setCurrentPageNumber(page)}\n          />\n        )}\n      </>\n    )\n  }",
      "startLine": 79,
      "endLine": 151,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Vsexports/VSExport.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@73-77",
      "type": "function_declaration",
      "name": "getUserAuditDescription",
      "text": "function getUserAuditDescription(\n  status: string\n): MessageDescriptor | undefined {\n  return AuditDescriptionMapping[status] || undefined\n}",
      "startLine": 73,
      "endLine": 77,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@146-152",
      "type": "function_declaration",
      "name": "changeActiveStatusIntl",
      "text": "function changeActiveStatusIntl(status: SystemStatus) {\n    if (status !== SystemStatus.Active) {\n      return intl.formatMessage(integrationMessages.activate)\n    } else {\n      return intl.formatMessage(integrationMessages.deactivate)\n    }\n  }",
      "startLine": 146,
      "endLine": 152,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Config/Systems/Systems.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@93-95",
      "type": "function_declaration",
      "name": "isValidAuditStatus",
      "text": "function isValidAuditStatus(status: string): status is AuditStatus {\n  return Object.keys(statusActionMap).includes(status)\n}",
      "startLine": 93,
      "endLine": 95,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/user/UserAuditActionModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@147-150",
      "type": "function_declaration",
      "name": "cleanUpFormState",
      "text": "function cleanUpFormState() {\n      makeErrorVisible(false)\n      setFormValues({})\n    }",
      "startLine": 147,
      "endLine": 150,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 43,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/user/UserAuditActionModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@152-158",
      "type": "function_declaration",
      "name": "injectAuditActionToFormValues",
      "text": "function injectAuditActionToFormValues() {\n      const action =\n        user && user.status && isValidAuditStatus(user.status)\n          ? statusActionMap[user.status]\n          : AUDIT_ACTION.DEACTIVATE\n      setFormValues({ action })\n    }",
      "startLine": 152,
      "endLine": 158,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 43,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/user/UserAuditActionModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@261-268",
      "type": "function_declaration",
      "name": "mapDispatchToProps",
      "text": "function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    showSuccessToast: (userFullName: string, auditAction: AUDIT_ACTION) =>\n      dispatch(showUserAuditSuccessToast(userFullName, auditAction)),\n    showErrorToast: () =>\n      dispatch(showSubmitFormErrorToast(TOAST_MESSAGES.FAIL))\n  }\n}",
      "startLine": 261,
      "endLine": 268,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/user/UserAuditActionModal.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@80-83",
      "type": "method_definition",
      "name": "super",
      "text": "super(props)\n    this.state = {\n      fileUploading: false\n    }",
      "startLine": 80,
      "endLine": 83,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/user/userCreation/UserForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@210-952",
      "type": "function_declaration",
      "name": "UserListComponent",
      "text": "function UserListComponent(props: IProps) {\n  const location = useLocation()\n  const navigate = useNavigate()\n\n  const [showResendInviteSuccess, setShowResendInviteSuccess] = useState(false)\n  const [showUsernameReminderSuccess, setShowUsernameReminderSuccess] =\n    useState(false)\n  const [showResendInviteError, setShowResendInviteError] = useState(false)\n  const [showUsernameReminderError, setShowUsernameReminderError] =\n    useState(false)\n  const [showResetPasswordSuccess, setShowResetPasswordSuccess] =\n    useState(false)\n  const [showResetPasswordError, setResetPasswordError] = useState(false)\n  const { canReadUser, canEditUser, canAddOfficeUsers, canAccessOffice } =\n    usePermissions()\n\n  const { intl, userDetails, offlineOffices, isOnline, offlineCountryConfig } =\n    props\n\n  const { locationId } = parse(location.search) as unknown as ISearchParams\n  const [toggleUsernameReminder, setToggleUsernameReminder] =\n    useState<ToggleModal>({\n      modalVisible: false,\n      selectedUser: null\n    })\n  const [toggleActivation, setToggleActivation] = useState<ToggleModal>({\n    modalVisible: false,\n    selectedUser: null\n  })\n  const [toggleResetPassword, setToggleResetPassword] = useState<ToggleModal>({\n    modalVisible: false,\n    selectedUser: null\n  })\n\n  const [currentPageNumber, setCurrentPageNumber] =\n    useState<number>(DEFAULT_PAGE_NUMBER)\n  const recordCount = DEFAULT_FIELD_AGENT_LIST_SIZE * currentPageNumber\n  const searchedLocation: ILocation | undefined = offlineOffices.find(\n    ({ id }) => locationId === id\n  )\n  const deliveryMethod = window.config.USER_NOTIFICATION_DELIVERY_METHOD\n\n  const isMultipleOfficeUnderJurisdiction =\n    offlineOffices.filter(canAccessOffice).length > 1\n\n  const getParentLocation = ({ partOf }: ILocation) => {\n    const parentLocationId = partOf.split('/')[1]\n    return offlineCountryConfig.locations[parentLocationId]\n  }\n\n  const toggleUserActivationModal = useCallback(\n    function toggleUserActivationModal(user?: User) {\n      if (user !== undefined) {\n        setToggleActivation({\n          ...toggleActivation,\n          modalVisible: true,\n          selectedUser: user\n        })\n      } else {\n        setToggleActivation({\n          ...toggleActivation,\n          modalVisible: false\n        })\n      }\n    },\n    [toggleActivation]\n  )\n\n  const toggleUsernameReminderModal = useCallback(\n    function toggleUsernameReminderModal(user?: User) {\n      if (user !== undefined) {\n        setToggleUsernameReminder({\n          ...toggleUsernameReminder,\n          modalVisible: true,\n          selectedUser: user\n        })\n      } else {\n        setToggleUsernameReminder({\n          ...toggleUsernameReminder,\n          modalVisible: false\n        })\n      }\n    },\n    [toggleUsernameReminder]\n  )\n\n  const toggleUserResetPasswordModal = useCallback(\n    function toggleUserResetPasswordModal(user?: User) {\n      if (user !== undefined) {\n        setToggleResetPassword({\n          ...toggleResetPassword,\n          modalVisible: true,\n          selectedUser: user\n        })\n      } else {\n        setToggleResetPassword({\n          ...toggleResetPassword,\n          modalVisible: false\n        })\n      }\n    },\n    [toggleResetPassword]\n  )\n\n  const resendInvite = useCallback(\n    async function resendInvite(userId: string) {\n      try {\n        const res = await userMutations.resendInvite(userId, [\n          {\n            query: SEARCH_USERS,\n            variables: { primaryOfficeId: locationId, count: recordCount }\n          }\n        ])\n        if (res && res.data && res.data.resendInvite) {\n          setShowResendInviteSuccess(true)\n        }\n      } catch (err) {\n        setShowResendInviteError(true)\n      }\n    },\n    [locationId, recordCount]\n  )\n\n  const usernameReminder = useCallback(\n    async function usernameReminder(userId: string) {\n      try {\n        const res = await userMutations.usernameReminderSend(userId, [\n          {\n            query: SEARCH_USERS,\n            variables: { primaryOfficeId: locationId, count: recordCount }\n          }\n        ])\n        if (res && res.data && res.data.usernameReminder) {\n          setShowUsernameReminderSuccess(true)\n        }\n      } catch (err) {\n        setShowUsernameReminderError(true)\n      }\n    },\n    [locationId, recordCount]\n  )\n\n  const resetPassword = useCallback(\n    async function resetPassword(userId: string) {\n      try {\n        const res = await userMutations.sendResetPasswordInvite(userId, [\n          {\n            query: SEARCH_USERS,\n            variables: { primaryOfficeId: locationId, count: recordCount }\n          }\n        ])\n        if (res && res.data && res.data.resetPasswordInvite) {\n          setShowResetPasswordSuccess(true)\n        }\n      } catch (err) {\n        setResetPasswordError(true)\n      }\n    },\n    [recordCount, locationId]\n  )\n\n  const getMenuItems = useCallback(\n    function getMenuItems(user: User) {\n      const menuItems = [\n        {\n          label: intl.formatMessage(messages.editUserDetailsTitle),\n          handler: () => {\n            navigate(\n              formatUrl(routes.REVIEW_USER_DETAILS, {\n                userId: user.id,\n                sectionId: UserSection.Preview\n              })\n            )\n          }\n        }\n      ]\n\n      if (user.status === 'pending' || user.status === 'active') {\n        menuItems.push(\n          {\n            label: intl.formatMessage(messages.sendUsernameReminderInvite),\n            handler: () => {\n              toggleUsernameReminderModal(user)\n            }\n          },\n          {\n            label: intl.formatMessage(messages.resetUserPasswordTitle),\n            handler: () => {\n              toggleUserResetPasswordModal(user)\n            }\n          }\n        )\n      }\n\n      if (user.status === 'pending') {\n        menuItems.push({\n          label: intl.formatMessage(messages.resendInvite),\n          handler: () => {\n            resendInvite(user.id as string)\n          }\n        })\n      }\n\n      if (user.status === 'active') {\n        menuItems.push({\n          label: intl.formatMessage(messages.deactivate),\n          handler: () => toggleUserActivationModal(user)\n        })\n      }\n\n      if (user.status === 'deactivated') {\n        menuItems.push({\n          label: intl.formatMessage(messages.reactivate),\n          handler: () => toggleUserActivationModal(user)\n        })\n      }\n\n      return menuItems\n    },\n    [\n      intl,\n      resendInvite,\n      toggleUserActivationModal,\n      toggleUsernameReminderModal,\n      toggleUserResetPasswordModal,\n      navigate\n    ]\n  )\n\n  const getUserName = (user: User) => {\n    const userName =\n      (user &&\n        user.name &&\n        ((createNamesMap(user.name)[intl.locale] as string) ||\n          (createNamesMap(user.name)[LANG_EN] as string))) ||\n      ''\n    return userName\n  }\n\n  const StatusMenu = useCallback(\n    function StatusMenu({\n      user,\n      index,\n      status,\n      underInvestigation\n    }: {\n      userDetails: UserDetails | null\n      locationId: string\n      user: User\n      index: number\n      status?: string\n      underInvestigation?: boolean\n    }) {\n      return (\n        <Stack\n          alignItems=\"center\"\n          direction=\"row\"\n          gap={8}\n          justifyContent=\"flex-start\"\n        >\n          {underInvestigation && <SearchRed />}\n          <Status status={status || 'pending'} />\n          {canEditUser(user) && (\n            <ToggleMenu\n              id={`user-item-${index}-menu`}\n              toggleButton={\n                <Icon name=\"DotsThreeVertical\" color=\"primary\" size=\"large\" />\n              }\n              menuItems={getMenuItems(user)}\n            />\n          )}\n        </Stack>\n      )\n    },\n    [canEditUser, getMenuItems]\n  )\n\n  const generateUserContents = useCallback(\n    function generateUserContents(\n      data: SearchUsersQuery,\n      locationId: string,\n      userDetails: UserDetails | null\n    ) {\n      if (!data || !data.searchUsers || !data.searchUsers.results) {\n        return []\n      }\n\n      return data.searchUsers.results.map((user, index) => {\n        if (user !== null) {\n          const name = getLocalisedName(intl, user.name[0])\n\n          const role = intl.formatMessage(user.role.label)\n          const avatar = user.avatar\n\n          return {\n            image: (\n              <Link\n                onClick={() =>\n                  navigate(\n                    formatUrl(routes.USER_PROFILE, {\n                      userId: String(user.id)\n                    })\n                  )\n                }\n                disabled={!canReadUser(user)}\n              >\n                <AvatarSmall name={name} avatar={avatar || undefined} />\n              </Link>\n            ),\n            label: (\n              <Link\n                id=\"profile-link\"\n                onClick={() =>\n                  navigate(\n                    formatUrl(routes.USER_PROFILE, {\n                      userId: String(user.id)\n                    })\n                  )\n                }\n                disabled={!canReadUser(user)}\n              >\n                {name}\n              </Link>\n            ),\n            value: <Value>{role}</Value>,\n            actions: (\n              <StatusMenu\n                userDetails={userDetails}\n                locationId={locationId}\n                user={user}\n                index={index}\n                status={user.status || undefined}\n                underInvestigation={user.underInvestigation || false}\n              />\n            )\n          }\n        }\n        return {\n          label: '',\n          value: <></>\n        }\n      })\n    },\n    [StatusMenu, intl, navigate, canReadUser]\n  )\n\n  const onClickAddUser = useCallback(\n    function onClickAddUser() {\n      if (searchedLocation) {\n        navigate(\n          formatUrl(routes.CREATE_USER_ON_LOCATION, {\n            locationId: searchedLocation.id\n          })\n        )\n      }\n    },\n    [searchedLocation, navigate]\n  )\n\n  function onChangeLocation() {\n    if (searchedLocation) {\n      navigate(routes.TEAM_SEARCH, {\n        state: {\n          selectedLocation: {\n            id: searchedLocation.id,\n            searchableText: searchedLocation?.name,\n            displayLabel: searchedLocation?.name\n          }\n        }\n      })\n    }\n  }\n\n  const LocationButton = (locationId: string) => {\n    const buttons: React.ReactElement[] = []\n    if (isMultipleOfficeUnderJurisdiction) {\n      buttons.push(\n        <LocationPicker\n          key={`location-picker-${locationId}`}\n          selectedLocationId={locationId}\n          onChangeLocation={(locationId) => {\n            navigate({\n              pathname: routes.TEAM_USER_LIST,\n              search: stringify({\n                locationId\n              })\n            })\n\n            setCurrentPageNumber(DEFAULT_PAGE_NUMBER)\n          }}\n          locationFilter={(location) =>\n            location.type === 'CRVS_OFFICE' && canAccessOffice(location)\n          }\n        />\n      )\n    }\n    if (canAddOfficeUsers({ id: locationId })) {\n      buttons.push(\n        <Button\n          id=\"add-user\"\n          type=\"icon\"\n          size=\"medium\"\n          key={`add-user-${locationId}`}\n          onClick={onClickAddUser}\n        >\n          <Icon name=\"UserPlus\" />\n        </Button>\n      )\n    }\n    return buttons\n  }\n\n  const RenderUserList = useCallback(\n    function RenderUserList({\n      data,\n      locationId,\n      userDetails\n    }: {\n      data: SearchUsersQuery\n      locationId: string\n      userDetails: UserDetails | null\n    }) {\n      const totalData =\n        (data && data.searchUsers && data.searchUsers.totalItems) || 0\n      const userContent = generateUserContents(data, locationId, userDetails)\n\n      return (\n        <>\n          <UserTable id=\"user_list\">\n            {userContent.length <= 0 ? (\n              <NoRecord id=\"no-record\">\n                {intl.formatMessage(constantsMessages.noResults)}\n              </NoRecord>\n            ) : (\n              <ListUser\n                rows={userContent.map((content) => ({\n                  avatar: content.image,\n                  label: content.label,\n                  value: content.value,\n                  actions: content.actions ? [content.actions] : []\n                }))}\n                labelHeader={intl.formatMessage(constantsMessages.user)}\n                valueHeader={intl.formatMessage(constantsMessages.labelRole)}\n              />\n            )}\n            {totalData > DEFAULT_FIELD_AGENT_LIST_SIZE && (\n              <Pagination\n                currentPage={currentPageNumber}\n                totalPages={Math.ceil(\n                  totalData / DEFAULT_FIELD_AGENT_LIST_SIZE\n                )}\n                onPageChange={(currentPage: number) =>\n                  setCurrentPageNumber(currentPage)\n                }\n              />\n            )}\n            {toggleActivation.selectedUser?.id ? (\n              <UserAuditActionModal\n                show={toggleActivation.modalVisible}\n                userId={toggleActivation.selectedUser.id}\n                onClose={() => toggleUserActivationModal()}\n                onConfirmRefetchQueries={[\n                  {\n                    query: SEARCH_USERS,\n                    variables: {\n                      primaryOfficeId: locationId,\n                      count: recordCount\n                    }\n                  }\n                ]}\n              />\n            ) : null}\n\n            <ResponsiveModal\n              id=\"username-reminder-modal\"\n              show={toggleUsernameReminder.modalVisible}\n              handleClose={() => toggleUsernameReminderModal()}\n              title={intl.formatMessage(\n                messages.sendUsernameReminderInviteModalTitle\n              )}\n              actions={[\n                <Button\n                  type=\"tertiary\"\n                  id=\"username-reminder-cancel\"\n                  key=\"username-reminusernameSMSReminderder-cancel\"\n                  onClick={() => toggleUsernameReminderModal()}\n                >\n                  {intl.formatMessage(buttonMessages.cancel)}\n                </Button>,\n                <Button\n                  type=\"primary\"\n                  id=\"username-reminder-send\"\n                  key=\"username-reminder-send\"\n                  onClick={() => {\n                    if (toggleUsernameReminder.selectedUser?.id) {\n                      usernameReminder(toggleUsernameReminder.selectedUser.id)\n                    }\n                    toggleUsernameReminderModal()\n                  }}\n                >\n                  {intl.formatMessage(buttonMessages.send)}\n                </Button>\n              ]}\n              responsive={false}\n              autoHeight={true}\n            >\n              {intl.formatMessage(\n                messages.sendUsernameReminderInviteModalMessage,\n                {\n                  recipient:\n                    deliveryMethod === 'sms'\n                      ? toggleUsernameReminder.selectedUser?.mobile\n                      : toggleUsernameReminder.selectedUser?.email,\n                  deliveryMethod\n                }\n              )}\n            </ResponsiveModal>\n            <ResponsiveModal\n              id=\"user-reset-password-modal\"\n              show={toggleResetPassword.modalVisible}\n              handleClose={() => toggleUserResetPasswordModal()}\n              title={intl.formatMessage(messages.resetUserPasswordModalTitle)}\n              actions={[\n                <Button\n                  type=\"tertiary\"\n                  id=\"reset-password-cancel\"\n                  key=\"reset-password-cancel\"\n                  onClick={() => toggleUserResetPasswordModal()}\n                >\n                  {intl.formatMessage(buttonMessages.cancel)}\n                </Button>,\n                <Button\n                  type=\"primary\"\n                  id=\"reset-password-send\"\n                  key=\"reset-password-send\"\n                  onClick={() => {\n                    if (toggleResetPassword.selectedUser?.id) {\n                      resetPassword(toggleResetPassword.selectedUser.id)\n                    }\n                    toggleUserResetPasswordModal()\n                  }}\n                >\n                  {intl.formatMessage(buttonMessages.send)}\n                </Button>\n              ]}\n              responsive={false}\n              autoHeight={true}\n            >\n              {intl.formatMessage(messages.resetUserPasswordModalMessage, {\n                deliveryMethod,\n                recipient:\n                  deliveryMethod === 'sms'\n                    ? toggleResetPassword.selectedUser?.mobile\n                    : toggleResetPassword.selectedUser?.email\n              })}\n            </ResponsiveModal>\n          </UserTable>\n        </>\n      )\n    },\n    [\n      currentPageNumber,\n      generateUserContents,\n      intl,\n      recordCount,\n      toggleActivation.modalVisible,\n      toggleActivation.selectedUser,\n      toggleUserActivationModal,\n      toggleUsernameReminder.modalVisible,\n      toggleUsernameReminder.selectedUser,\n      toggleUsernameReminderModal,\n      usernameReminder,\n      resetPassword,\n      toggleResetPassword.modalVisible,\n      toggleResetPassword.selectedUser,\n      toggleUserResetPasswordModal,\n      deliveryMethod\n    ]\n  )\n\n  /**\n   * Because the locationId is a search parameter,\n   * it can happen that it gets removed as part of the login redirect mechanism causing the user to land on /team/users without a search parameter\n   */\n  if (!locationId) {\n    return <Navigate to={routes.HOME} />\n  }\n\n  return (\n    <SysAdminContentWrapper\n      changeTeamLocation={\n        isMultipleOfficeUnderJurisdiction ? onChangeLocation : undefined\n      }\n      isCertificatesConfigPage={true}\n      hideBackground={true}\n    >\n      {isOnline ? (\n        <Query<SearchUsersQuery>\n          query={SEARCH_USERS}\n          variables={{\n            primaryOfficeId: locationId,\n            count: DEFAULT_FIELD_AGENT_LIST_SIZE,\n            skip: (currentPageNumber - 1) * DEFAULT_FIELD_AGENT_LIST_SIZE\n          }}\n          fetchPolicy={'cache-and-network'}\n        >\n          {({ data, loading, error }) => {\n            return (\n              <Content\n                title={\n                  !loading && !error\n                    ? searchedLocation\n                      ? getLocalizedLocationName(intl, searchedLocation)\n                      : ''\n                    : intl.formatMessage(headerMessages.teamTitle)\n                }\n                size={ContentSize.NORMAL}\n                topActionButtons={LocationButton(locationId)}\n              >\n                {error ? (\n                  <ErrorText id=\"user_loading_error\">\n                    <>{intl.formatMessage(errorMessages.userQueryError)}</>\n                    <LinkButtonModified\n                      onClick={() => window.location.reload()}\n                    >\n                      {intl.formatMessage(constantsMessages.refresh)}\n                    </LinkButtonModified>\n                  </ErrorText>\n                ) : loading ? (\n                  <Loading>\n                    <LoadingIndicator loading={true} />\n                  </Loading>\n                ) : data ? (\n                  <>\n                    <Header id=\"header\">\n                      {(searchedLocation &&\n                        getLocalizedLocationName(intl, searchedLocation)) ||\n                        ''}\n                    </Header>\n                    <LocationInfo>\n                      {searchedLocation && (\n                        <LocationInfoValue>\n                          {getAddressName(\n                            offlineCountryConfig,\n                            getParentLocation(searchedLocation)\n                          )}\n                        </LocationInfoValue>\n                      )}\n                    </LocationInfo>\n                    <RenderUserList\n                      data={data}\n                      locationId={locationId}\n                      userDetails={userDetails}\n                    />\n                  </>\n                ) : null}\n              </Content>\n            )\n          }}\n        </Query>\n      ) : (\n        <Content\n          title={intl.formatMessage(headerMessages.teamTitle)}\n          size={ContentSize.NORMAL}\n        >\n          <ConnectivityContainer>\n            <NoConnectivity />\n            <Text id=\"no-connection-text\">\n              {intl.formatMessage(constantsMessages.noConnection)}\n            </Text>\n          </ConnectivityContainer>\n        </Content>\n      )}\n\n      {showResendInviteSuccess && (\n        <Toast\n          id=\"resend_invite_success\"\n          type=\"success\"\n          onClose={() => setShowResendInviteSuccess(false)}\n        >\n          {intl.formatMessage(messages.resendInviteSuccess)}\n        </Toast>\n      )}\n      {showResendInviteError && (\n        <Toast\n          id=\"resend_invite_error\"\n          type=\"warning\"\n          onClose={() => setShowResendInviteError(false)}\n        >\n          {intl.formatMessage(messages.resendInviteError)}\n        </Toast>\n      )}\n\n      {showUsernameReminderSuccess && (\n        <Toast\n          id=\"username_reminder_success\"\n          type=\"success\"\n          onClose={() => setShowUsernameReminderSuccess(false)}\n        >\n          {intl.formatMessage(messages.sendUsernameReminderInviteSuccess, {\n            name: getUserName(toggleUsernameReminder.selectedUser as User)\n          })}\n        </Toast>\n      )}\n      {showUsernameReminderError && (\n        <Toast\n          id=\"username_reminder_error\"\n          type=\"warning\"\n          onClose={() => setShowUsernameReminderError(false)}\n        >\n          {intl.formatMessage(messages.sendUsernameReminderInviteError)}\n        </Toast>\n      )}\n\n      {showResetPasswordSuccess && (\n        <Toast\n          id=\"reset_password_success\"\n          type=\"success\"\n          onClose={() => {\n            setShowResetPasswordSuccess(false)\n            setToggleResetPassword({\n              ...toggleResetPassword,\n              selectedUser: null\n            })\n          }}\n        >\n          {intl.formatMessage(messages.resetPasswordSuccess, {\n            username: getUserName(toggleResetPassword.selectedUser as User)\n          })}\n        </Toast>\n      )}\n      {showResetPasswordError && (\n        <Toast\n          id=\"reset_password_error\"\n          type=\"warning\"\n          onClose={() => setResetPasswordError(false)}\n        >\n          {intl.formatMessage(messages.resetPasswordError)}\n        </Toast>\n      )}\n    </SysAdminContentWrapper>\n  )\n}",
      "startLine": 210,
      "endLine": 952,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/user/UserList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@569-581",
      "type": "function_declaration",
      "name": "onChangeLocation",
      "text": "function onChangeLocation() {\n    if (searchedLocation) {\n      navigate(routes.TEAM_SEARCH, {\n        state: {\n          selectedLocation: {\n            id: searchedLocation.id,\n            searchableText: searchedLocation?.name,\n            displayLabel: searchedLocation?.name\n          }\n        }\n      })\n    }\n  }",
      "startLine": 569,
      "endLine": 581,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/user/UserList.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@244-253",
      "type": "method_definition",
      "name": "if",
      "text": "if (field.type === LOCATION_SEARCH_INPUT) {\n    const offlineLocations = field.searchableResource.reduce(\n      (locations, resource) => {\n        return {\n          ...locations,\n          ...getListOfLocations(offlineCountryConfiguration, resource)\n        }\n      },\n      {}\n    ) as { [key: string]: ILocation }",
      "startLine": 244,
      "endLine": 253,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/user/userCreation/UserReviewForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@50-109",
      "type": "function_declaration",
      "name": "TeamSearch",
      "text": "function TeamSearch() {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const [selectedLocation, setSelectedLocation] = React.useState(\n    location.state.selectedLocation\n  )\n  const intl = useIntl()\n  const offlineCountryConfiguration = useSelector(getOfflineData)\n  const isOnline = useOnlineStatus()\n  const { canAccessOffice } = usePermissions()\n\n  const searchHandler = (item: ISearchLocation) => {\n    setSelectedLocation(item)\n  }\n\n  const searchButtonHandler = () => {\n    if (selectedLocation) {\n      navigate({\n        pathname: routes.TEAM_USER_LIST,\n        search: stringify({\n          locationId: selectedLocation.id\n        })\n      })\n    }\n  }\n\n  return (\n    <SysAdminContentWrapper>\n      {isOnline ? (\n        <>\n          <Header>{intl.formatMessage(messages.sysAdminTeamHomeHeader)}</Header>\n\n          <LocationSearch\n            selectedLocation={selectedLocation}\n            buttonLabel={intl.formatMessage(buttonMessages.search)}\n            locationList={Object.values(offlineCountryConfiguration.offices)\n              .filter(canAccessOffice)\n              .map((location) => {\n                return {\n                  id: location.id,\n                  searchableText: location.name,\n                  displayLabel: location.name\n                }\n              })}\n            searchHandler={searchHandler}\n            searchButtonHandler={searchButtonHandler}\n            errorMessage={intl.formatMessage(messagesSearch.locationNotFound)}\n          />\n        </>\n      ) : (\n        <ConnectivityContainer>\n          <NoConnectivity />\n          <Text id=\"no-connection-text\">\n            {intl.formatMessage(constantsMessages.noConnection)}\n          </Text>\n        </ConnectivityContainer>\n      )}\n    </SysAdminContentWrapper>\n  )\n}",
      "startLine": 50,
      "endLine": 109,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Team/TeamSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@24-26",
      "type": "function_declaration",
      "name": "PerformanceSelect",
      "text": "function PerformanceSelect(props: IOperationalSelectProps) {\n  return <Select2 {...props} />\n}",
      "startLine": 24,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/PerformanceSelect.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@43-48",
      "type": "function_declaration",
      "name": "getMonthDateRange",
      "text": "function getMonthDateRange(year: number, month: number) {\n  return {\n    start: startOfMonth(new Date(year, month - 1)),\n    end: endOfMonth(new Date(year, month - 1))\n  }\n}",
      "startLine": 43,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/utils.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@164-168",
      "type": "function_declaration",
      "name": "calculateTotalPaymentAmount",
      "text": "function calculateTotalPaymentAmount(metrics: GQLPaymentMetric[]) {\n  return metrics\n    .map((metric) => metric.total)\n    .reduce((m, metric) => m + metric, 0)\n}",
      "startLine": 164,
      "endLine": 168,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/utils.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@187-198",
      "type": "function_declaration",
      "name": "getPrimaryLocationIdOfOffice",
      "text": "function getPrimaryLocationIdOfOffice(\n  locations: { [key: string]: ILocation },\n  office: ILocation\n) {\n  const location = locations[office.partOf.split('/')[1]]\n\n  if (!location) {\n    throw new Error(`Office location of ${office.id} not found`)\n  }\n\n  return location.id\n}",
      "startLine": 187,
      "endLine": 198,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/utils.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@208-216",
      "type": "function_declaration",
      "name": "getAdditionalLocations",
      "text": "function getAdditionalLocations(intl: IntlShape) {\n  return [\n    {\n      id: NATIONAL_ADMINISTRATIVE_LEVEL,\n      searchableText: intl.formatMessage(constantsMessages.countryName),\n      displayLabel: intl.formatMessage(constantsMessages.countryName)\n    }\n  ]\n}",
      "startLine": 208,
      "endLine": 216,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/utils.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@218-220",
      "type": "function_declaration",
      "name": "isCountry",
      "text": "function isCountry(location: ISearchLocation) {\n  return location.id === NATIONAL_ADMINISTRATIVE_LEVEL\n}",
      "startLine": 218,
      "endLine": 220,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/utils.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@37-125",
      "type": "function_declaration",
      "name": "PaymentsAmountComponent",
      "text": "function PaymentsAmountComponent(props: PaymentsAmountProps) {\n  const { data, currency } = props\n  const intl = useIntl()\n  return (\n    <ListContainer>\n      <ReportContainer>\n        <ListViewItemSimplified\n          label={\n            <div>\n              <PerformanceListHeader>\n                {intl.formatMessage(messages.performanceTotalPaymentsHeader)}\n              </PerformanceListHeader>\n            </div>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceTotalLabel)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              <span>\n                {getAmountWithCurrencySymbol(\n                  {\n                    isoCode: currency.isoCode,\n                    languagesAndCountry: currency.languagesAndCountry\n                  },\n                  calculateTotalPaymentAmount(data)\n                )}\n              </span>\n            </PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceCertificationFeeLabel)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              <span>\n                {getAmountWithCurrencySymbol(\n                  {\n                    isoCode: currency.isoCode,\n                    languagesAndCountry: currency.languagesAndCountry\n                  },\n                  calculateTotalPaymentAmount(\n                    data.filter(\n                      (payment) =>\n                        payment.paymentType === PAYMENT_TYPE.CERTIFICATION\n                    )\n                  )\n                )}\n              </span>\n            </PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceCorrectionFeeLabel)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              <span>\n                {getAmountWithCurrencySymbol(\n                  {\n                    isoCode: currency.isoCode,\n                    languagesAndCountry: currency.languagesAndCountry\n                  },\n                  calculateTotalPaymentAmount(\n                    data.filter(\n                      (payment) =>\n                        payment.paymentType === PAYMENT_TYPE.CORRECTION\n                    )\n                  )\n                )}\n              </span>\n            </PerformanceValue>\n          }\n        />\n      </ReportContainer>\n    </ListContainer>\n  )\n}",
      "startLine": 37,
      "endLine": 125,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/PaymentsAmountComponent.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-15",
      "type": "function_declaration",
      "name": "getValueWithPercentageString",
      "text": "function getValueWithPercentageString(value: number, total: number) {\n  return `${value} (${total ? Math.floor((value / total) * 100) : 0}%)`\n}",
      "startLine": 13,
      "endLine": 15,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/reports/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-26",
      "type": "function_declaration",
      "name": "getLocationFromPartOfLocationId",
      "text": "function getLocationFromPartOfLocationId(\n  locationId: string,\n  offlineCountryConfiguration: IOfflineData\n) {\n  const id = (locationId && locationId.split('/')[1]) || ''\n  return (\n    offlineCountryConfiguration.locations[id] ||\n    offlineCountryConfiguration.offices[id] || { name: '' }\n  )\n}",
      "startLine": 17,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/reports/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-117",
      "type": "function_declaration",
      "name": "CertificationRatesReport",
      "text": "function CertificationRatesReport(props: ICertificationRateProps) {\n  const intl = useIntl()\n  return (\n    <Query\n      query={GET_TOTAL_CERTIFICATIONS}\n      variables={{\n        timeStart: props.timeStart,\n        timeEnd: props.timeEnd,\n        event: props.event,\n        locationId: props.locationId\n      }}\n    >\n      {({ data, loading, error }) => {\n        if (error) {\n          return <GenericErrorToast />\n        }\n\n        if (loading) {\n          return <Spinner id=\"certification-rates-report-loading\" size={24} />\n        }\n\n        const dataItem: GQLCertificationMetric =\n          data.getTotalCertifications.find(\n            (dataPoint: GQLCertificationMetric) =>\n              dataPoint.eventType === props.event\n          ) || { total: 0 }\n\n        return (\n          <ListContainer>\n            <ReportContainer>\n              <ListViewItemSimplified\n                label={\n                  <div>\n                    <PerformanceListHeader>\n                      {intl.formatMessage(\n                        messages.performanceTotalCertificatesHeader\n                      )}\n                    </PerformanceListHeader>\n                    <PerformanceListSubHeader>\n                      {intl.formatMessage(\n                        messages.performanceTotalCertificatesSubHeader\n                      )}\n                    </PerformanceListSubHeader>\n                  </div>\n                }\n              />\n\n              <ListViewItemSimplified\n                label={\n                  <PerformanceTitle>\n                    {intl.formatMessage(messages.performanceTotalLabel)}\n                  </PerformanceTitle>\n                }\n                value={<PerformanceValue>{dataItem.total}</PerformanceValue>}\n              />\n\n              <ListViewItemSimplified\n                label={\n                  <PerformanceTitle>\n                    {intl.formatMessage(\n                      messages.performanceCertificationRateLabel\n                    )}\n                  </PerformanceTitle>\n                }\n                value={\n                  <PerformanceValue>\n                    <PercentageDisplay\n                      total={Math.min(dataItem.total, props.totalRegistrations)}\n                      ofNumber={props.totalRegistrations}\n                    />\n                  </PerformanceValue>\n                }\n              />\n            </ReportContainer>\n          </ListContainer>\n        )\n      }}\n    </Query>\n  )\n}",
      "startLine": 38,
      "endLine": 117,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/CertificationRatesReport.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@128-141",
      "type": "function_declaration",
      "name": "toggleSort",
      "text": "function toggleSort(key: keyof SortMap) {\n    const existingItemInSortOrder = sortOrder.find((item) => item.key === key)!\n\n    const invertedOrder =\n      existingItemInSortOrder.value === SORT_ORDER.DESCENDING\n        ? SORT_ORDER.ASCENDING\n        : SORT_ORDER.DESCENDING\n\n    setSortOrder(\n      [{ ...existingItemInSortOrder, value: invertedOrder }].concat(\n        sortOrder.filter((x) => x !== existingItemInSortOrder)\n      )\n    )\n  }",
      "startLine": 128,
      "endLine": 141,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/reports/completenessRates/CompletenessDataTable.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@178-180",
      "type": "function_declaration",
      "name": "isPrimaryContact",
      "text": "function isPrimaryContact(contact: string): contact is PrimaryContact {\n  return Object.keys(PrimaryContactLabelMapping).includes(contact)\n}",
      "startLine": 178,
      "endLine": 180,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@189-840",
      "type": "function_declaration",
      "name": "WorkflowStatusComponent",
      "text": "function WorkflowStatusComponent(props: WorkflowStatusProps) {\n  const navigate = useNavigate()\n  const location = useLocation()\n\n  const { intl } = props\n  const { locationId, status, event } = parse(\n    location.search\n  ) as unknown as ISearchParams\n  const [currentPageNumber, setCurrentPageNumber] = useState<number>(1)\n  const [sortOrder, setSortOrder] = React.useState<SortMap>(INITIAL_SORT_MAP)\n  const [columnToBeSort, setColumnToBeSort] = useState<keyof SortMap>(\n    'declarationStartedOn'\n  )\n  const pageSize = 10\n\n  let timeStart: string | Date = subYears(new Date(Date.now()), 1)\n  let timeEnd: string | Date = new Date(Date.now())\n  const historyState = location.state\n\n  if (historyState) {\n    timeStart = historyState.timeStart\n    timeEnd = historyState.timeEnd\n  }\n\n  function toggleSort(key: keyof SortMap) {\n    const invertedOrder =\n      sortOrder[key] === SORT_ORDER.DESCENDING\n        ? SORT_ORDER.ASCENDING\n        : SORT_ORDER.DESCENDING\n    setSortOrder({ ...sortOrder, [key]: invertedOrder })\n    setColumnToBeSort(key)\n  }\n\n  function getColumns(): IColumn[] {\n    const keys = [\n      {\n        label: intl.formatMessage(constantsMessages.trackingId),\n        key: 'id',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('id'),\n        icon: columnToBeSort === 'id' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'id' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.status),\n        key: 'status',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('status'),\n        icon: columnToBeSort === 'status' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'status' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.eventType),\n        key: 'eventType',\n        width: 8,\n        isSortable: true,\n        sortFunction: () => toggleSort('eventType'),\n        icon: columnToBeSort === 'eventType' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'eventType' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.name),\n        key: 'nameIntl',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('nameIntl'),\n        icon: columnToBeSort === 'nameIntl' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'nameIntl' ? true : false\n      },\n      {\n        label: intl.formatMessage(formMessages.informantName),\n        key: 'informant',\n        width: 14,\n        isSortable: true,\n        sortFunction: () => toggleSort('informant'),\n        icon: columnToBeSort === 'informant' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'informant' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.declarationStarted),\n        key: 'declarationStartedOn',\n        width: 10,\n        isSortable: true,\n        sortFunction: () => toggleSort('declarationStartedOn'),\n        icon:\n          columnToBeSort === 'declarationStartedOn' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'declarationStartedOn' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.declarationStartedBy),\n        key: 'declarationStartedBy',\n        width: 10,\n        isSortable: true,\n        sortFunction: () => toggleSort('declarationStartedBy'),\n        icon:\n          columnToBeSort === 'declarationStartedBy' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'declarationStartedBy' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.eventDate),\n        key: 'dateOfEvent',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('dateOfEvent'),\n        icon: columnToBeSort === 'dateOfEvent' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'dateOfEvent' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeInProgress),\n        key: 'timeLoggedInProgress',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedInProgress'),\n        icon:\n          columnToBeSort === 'timeLoggedInProgress' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedInProgress' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeReadyForReview),\n        key: 'timeLoggedDeclared',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedDeclared'),\n        icon:\n          columnToBeSort === 'timeLoggedDeclared' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedDeclared' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeRequireUpdates),\n        key: 'timeLoggedRejected',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedRejected'),\n        icon:\n          columnToBeSort === 'timeLoggedRejected' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedRejected' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeWatingApproval),\n        key: 'timeLoggedValidated',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedValidated'),\n        icon:\n          columnToBeSort === 'timeLoggedValidated' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedValidated' ? true : false\n      },\n      {\n        label: intl.formatMessage(\n          constantsMessages.timeWaitingExternalValidation\n        ),\n        key: 'timeLoggedWaitingValidation',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedWaitingValidation'),\n        icon:\n          columnToBeSort === 'timeLoggedWaitingValidation' ? (\n            <ArrowDownBlue />\n          ) : (\n            <></>\n          ),\n        isSorted:\n          columnToBeSort === 'timeLoggedWaitingValidation' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeReadyToPrint),\n        key: 'timeLoggedRegistered',\n        width: 12,\n        alignment: ColumnContentAlignment.LEFT,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedRegistered'),\n        icon:\n          columnToBeSort === 'timeLoggedRegistered' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedRegistered' ? true : false\n      }\n    ] as IColumn[]\n    return keys.filter((item) => {\n      return !(\n        !window.config.FEATURES.EXTERNAL_VALIDATION_WORKQUEUE &&\n        item.key === 'timeLoggedWaitingValidation'\n      )\n    })\n  }\n\n  function getContent(data: GQLQuery) {\n    if (\n      !data ||\n      !data.getEventsWithProgress ||\n      !data.getEventsWithProgress.results\n    ) {\n      return []\n    }\n\n    function formateDateWithRelationalText(date: Date | null) {\n      date = date\n        ? Number.isNaN(Number(date))\n          ? new Date(date)\n          : new Date(Number(date))\n        : null\n      return (\n        (date && (\n          <DoubleLineValueWrapper>\n            {format(date, 'MMMM dd, yyyy')}\n            <br />\n            {`(${formattedDuration(date)})`}\n          </DoubleLineValueWrapper>\n        )) || <></>\n      )\n    }\n\n    function conditioanllyFormatContactRelationship(relationshipCode: string) {\n      if (isPrimaryContact(relationshipCode)) {\n        return intl.formatMessage(PrimaryContactLabelMapping[relationshipCode])\n      } else {\n        return relationshipCode\n      }\n    }\n\n    function getTimeDifferenceFromLastModification(\n      eventProgress: GQLEventProgressSet\n    ) {\n      const lastUpdateDate =\n        eventProgress.registration &&\n        (eventProgress.registration.modifiedAt ||\n          eventProgress.registration.createdAt)\n      if (!lastUpdateDate) {\n        return 0\n      }\n      return differenceInSeconds(Date.now(), Number(lastUpdateDate))\n    }\n\n    function getTimeDurationElements(\n      timeDuration: number,\n      tooltipId: string,\n      rowIndex: number\n    ) {\n      if (timeDuration === 0) return <>-</>\n\n      const timeStructure = formatTimeDuration(timeDuration)\n      const label =\n        (timeStructure &&\n          `${timeStructure.days}:${timeStructure.hours}:${timeStructure.minutes}`) ||\n        '-'\n      const tooltip =\n        (timeStructure &&\n          `${timeStructure.days} days, ${timeStructure.hours} hours, ${timeStructure.minutes} minutes`) ||\n        '-'\n      return (\n        <>\n          <ReactTooltip id={`${tooltipId}_${rowIndex}`}>\n            <ToolTipContainer>{tooltip}</ToolTipContainer>\n          </ReactTooltip>\n          <span data-tip data-for={`${tooltipId}_${rowIndex}`}>\n            {label}\n          </span>\n        </>\n      )\n    }\n\n    function getTimeDuration(\n      timeDuration: number,\n      checkStatus: string,\n      eventProgress: GQLEventProgressSet\n    ) {\n      const timeStructure =\n        eventProgress.registration &&\n        eventProgress.registration.status === checkStatus\n          ? getTimeDifferenceFromLastModification(eventProgress)\n          : timeDuration\n      return timeStructure === null ? 0 : timeStructure\n    }\n\n    const content = data.getEventsWithProgress.results.map(\n      (eventProgress: GQLEventProgressSet | null) => {\n        if (eventProgress !== null) {\n          const nameIntl = createNamesMap(\n            eventProgress && (eventProgress.name as GQLHumanName[])\n          )[LANG_EN] as string\n          const localLang = window.config.LANGUAGES.split(',').find(\n            (lang: string) => lang !== LANG_EN\n          )\n          const nameLocal =\n            (localLang &&\n              (createNamesMap(\n                eventProgress && (eventProgress.name as GQLHumanName[])\n              )[localLang] as string)) ||\n            nameIntl\n          let starterPractitionerName = ''\n          let starterPractitionerRole = ''\n\n          const user = eventProgress.startedBy\n          starterPractitionerName =\n            (user &&\n              user.name &&\n              ((createNamesMap(user.name as GQLHumanName[])[\n                intl.locale\n              ] as string) ||\n                (createNamesMap(user.name as GQLHumanName[])[\n                  LANG_EN\n                ] as string))) ||\n            eventProgress.startedByFacility ||\n            ''\n          if (eventProgress.startedBy != null) {\n            const user = eventProgress.startedBy\n            starterPractitionerRole =\n              (user.role && intl.formatMessage(user.role.label)) || ''\n          }\n\n          const event =\n            (eventProgress.type &&\n              intl.formatMessage(\n                dynamicConstantsMessages[eventProgress.type.toLowerCase()]\n              )) ||\n            ''\n          const status =\n            (eventProgress.registration &&\n              eventProgress.registration.status &&\n              intl.formatMessage(\n                StatusMapping[\n                  eventProgress.registration.status as keyof IStatusMapping\n                ].labelDescriptor\n              )) ||\n            ''\n\n          let timeLoggedInProgress = 0\n          let timeLoggedDeclared = 0\n          let timeLoggedRejected = 0\n          let timeLoggedValidated = 0\n          let timeLoggedWaitingValidation = 0\n          let timeLoggedRegistered = 0\n\n          if (eventProgress.progressReport != null) {\n            const {\n              timeInProgress,\n              timeInReadyForReview,\n              timeInRequiresUpdates,\n              timeInWaitingForApproval,\n              timeInWaitingForBRIS,\n              timeInReadyToPrint\n            } = eventProgress.progressReport\n\n            timeLoggedInProgress = getTimeDuration(\n              timeInProgress as number,\n              'IN_PROGRESS',\n              eventProgress\n            )\n\n            timeLoggedDeclared = getTimeDuration(\n              timeInReadyForReview as number,\n              'DECLARED',\n              eventProgress\n            )\n\n            timeLoggedRejected = getTimeDuration(\n              timeInRequiresUpdates as number,\n              'REJECTED',\n              eventProgress\n            )\n\n            timeLoggedValidated = getTimeDuration(\n              timeInWaitingForApproval as number,\n              'VALIDATED',\n              eventProgress\n            )\n\n            timeLoggedWaitingValidation = getTimeDuration(\n              timeInWaitingForBRIS as number,\n              'WAITING_VALIDATION',\n              eventProgress\n            )\n\n            timeLoggedRegistered = getTimeDuration(\n              timeInReadyToPrint as number,\n              'REGISTERED',\n              eventProgress\n            )\n          }\n          return {\n            id:\n              eventProgress.registration &&\n              eventProgress.registration.trackingId,\n            status,\n            compositionId: eventProgress.id,\n            eventType: event,\n            dateOfEvent: eventProgress.dateOfEvent,\n            nameIntl,\n            nameLocal,\n            informant:\n              (eventProgress.registration &&\n                [\n                  eventProgress.registration.contactRelationship &&\n                    conditioanllyFormatContactRelationship(\n                      eventProgress.registration.contactRelationship\n                    ),\n                  eventProgress.registration.contactNumber,\n                  eventProgress.registration.contactEmail\n                ]\n                  .filter(Boolean)\n                  .join('\\n')) ||\n              '',\n            declarationStartedOn: formateDateWithRelationalText(\n              eventProgress.startedAt\n            ),\n            declarationStartedOnTime:\n              eventProgress.registration &&\n              new Date(eventProgress.registration.dateOfDeclaration)\n                .getTime()\n                .toString(),\n            declarationStartedBy:\n              starterPractitionerRole !== ''\n                ? starterPractitionerName +\n                  '\\n' +\n                  `(${starterPractitionerRole})`\n                : starterPractitionerName,\n            timeLoggedInProgress,\n            timeLoggedDeclared,\n            timeLoggedRejected,\n            timeLoggedValidated,\n            timeLoggedWaitingValidation,\n            timeLoggedRegistered\n          }\n        }\n        return {}\n      }\n    )\n\n    return orderBy(\n      content,\n      columnToBeSort === 'nameIntl'\n        ? [(content) => content[columnToBeSort]!.toString().toLowerCase()]\n        : columnToBeSort === 'declarationStartedOn'\n          ? ['declarationStartedOnTime']\n          : [columnToBeSort],\n      [sortOrder[columnToBeSort]]\n    ).map((row, idx) => {\n      return {\n        ...row,\n        id: (\n          <LinkButton\n            onClick={() =>\n              navigate(\n                formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                  tab: 'printTab',\n                  declarationId: row.compositionId as string\n                })\n              )\n            }\n          >\n            {row.id}\n          </LinkButton>\n        ),\n        declarationStartedBy: (\n          <DoubleLineValueWrapper>\n            {row.declarationStartedBy}\n          </DoubleLineValueWrapper>\n        ),\n        dateOfEvent: formateDateWithRelationalText(row.dateOfEvent),\n        timeLoggedInProgress: getTimeDurationElements(\n          Number(row.timeLoggedInProgress),\n          'in_prog_tltp',\n          idx\n        ),\n        timeLoggedDeclared: getTimeDurationElements(\n          Number(row.timeLoggedDeclared),\n          'dclrd_tltp',\n          idx\n        ),\n        timeLoggedRejected: getTimeDurationElements(\n          Number(row.timeLoggedRejected),\n          'rjctd_tltp',\n          idx\n        ),\n        timeLoggedValidated: getTimeDurationElements(\n          Number(row.timeLoggedValidated),\n          'vldtd_tltp',\n          idx\n        ),\n        timeLoggedWaitingValidation: getTimeDurationElements(\n          Number(row.timeLoggedWaitingValidation),\n          'wtng_vldtn_tltp',\n          idx\n        ),\n        timeLoggedRegistered: getTimeDurationElements(\n          Number(row.timeLoggedRegistered),\n          'rgstrd_tltp_tltp',\n          idx\n        )\n      }\n    })\n  }\n\n  const onPageChange = (paginationId: number) => {\n    setCurrentPageNumber(paginationId)\n  }\n\n  return (\n    <SysAdminContentWrapper\n      id=\"workflow-status\"\n      isCertificatesConfigPage\n      hideBackground={true}\n    >\n      <Content\n        title={intl.formatMessage(messages.registrationByStatus)}\n        showTitleOnMobile={true}\n        size={ContentSize.LARGE}\n        filterContent={\n          <>\n            <LocationPicker\n              selectedLocationId={locationId}\n              disabled={true}\n              onChangeLocation={(newLocationId: string) => {\n                navigate(\n                  generateWorkflowStatusUrl({\n                    locationId: newLocationId,\n                    timeStart: new Date(timeStart),\n                    timeEnd: new Date(timeEnd),\n                    status,\n                    event\n                  })\n                )\n              }}\n              locationFilter={\n                window.config.DECLARATION_AUDIT_LOCATIONS\n                  ? ({ jurisdictionType }) =>\n                      Boolean(\n                        jurisdictionType &&\n                          window.config.DECLARATION_AUDIT_LOCATIONS.split(\n                            ','\n                          ).includes(jurisdictionType)\n                      )\n                  : undefined\n              }\n            />\n            <PerformanceSelect\n              onChange={({ value }) => {\n                navigate(\n                  generateWorkflowStatusUrl({\n                    locationId,\n                    timeStart: new Date(timeStart),\n                    timeEnd: new Date(timeEnd),\n                    status,\n                    event: value as EventType\n                  })\n                )\n              }}\n              id=\"event-select\"\n              withLightTheme={true}\n              defaultWidth={110}\n              value={\n                (event?.toUpperCase() as unknown as EVENT_OPTIONS) ||\n                EVENT_OPTIONS.BIRTH\n              }\n              options={[\n                {\n                  label: intl.formatMessage(messages.eventOptionForBirths),\n                  value: EVENT_OPTIONS.BIRTH\n                },\n                {\n                  label: intl.formatMessage(messages.eventOptionForDeaths),\n                  value: EVENT_OPTIONS.DEATH\n                }\n              ]}\n            />\n            <PerformanceSelect\n              onChange={({ value }) => {\n                navigate(\n                  generateWorkflowStatusUrl({\n                    locationId,\n                    timeStart: new Date(timeStart),\n                    timeEnd: new Date(timeEnd),\n                    status: value as keyof IStatusMapping,\n                    event\n                  })\n                )\n              }}\n              id=\"status-select\"\n              withLightTheme={true}\n              defaultWidth={175}\n              value={(status as string) || ''}\n              options={statusOptions.map((option) => ({\n                ...option,\n                label: intl.formatMessage(option.label)\n              }))}\n            />\n          </>\n        }\n      >\n        <Query\n          query={FETCH_EVENTS_WITH_PROGRESS}\n          variables={{\n            declarationJurisdictionId: locationId,\n            skip: pageSize * (currentPageNumber - 1),\n            count: pageSize,\n            registrationStatuses: (status && [status]) || undefined,\n            compositionType:\n              (event && [\n                `${event.toLowerCase()}-declaration`,\n                `${event.toLowerCase()}-notification`\n              ]) ||\n              undefined\n          }}\n          fetchPolicy={'no-cache'}\n        >\n          {({ data, loading, error }) => {\n            let total = 0\n            if (loading) {\n              return <Spinner id=\"status-view-loader\" size={24} />\n            }\n            if (\n              data &&\n              data.getEventsWithProgress &&\n              data.getEventsWithProgress.totalItems\n            ) {\n              total = data.getEventsWithProgress.totalItems\n            }\n\n            return (\n              <>\n                <TableDiv id=\"table-div-wrapper\">\n                  <Table\n                    id=\"declaration-status-list\"\n                    content={getContent(data)}\n                    columns={getColumns()}\n                    isLoading={loading || Boolean(error)}\n                    noResultText={intl.formatMessage(\n                      constantsMessages.noResults\n                    )}\n                    fixedWidth={2050}\n                    tableHeight={150}\n                    highlightRowOnMouseOver\n                    noPagination\n                    isFullPage\n                  />\n                  {error && <GenericErrorToast />}\n                  {total > pageSize && (\n                    <Pagination\n                      currentPage={currentPageNumber}\n                      totalPages={Math.ceil(total / pageSize)}\n                      onPageChange={onPageChange}\n                    />\n                  )}\n                </TableDiv>\n              </>\n            )\n          }}\n        </Query>\n      </Content>\n    </SysAdminContentWrapper>\n  )\n}",
      "startLine": 189,
      "endLine": 840,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@213-220",
      "type": "function_declaration",
      "name": "toggleSort",
      "text": "function toggleSort(key: keyof SortMap) {\n    const invertedOrder =\n      sortOrder[key] === SORT_ORDER.DESCENDING\n        ? SORT_ORDER.ASCENDING\n        : SORT_ORDER.DESCENDING\n    setSortOrder({ ...sortOrder, [key]: invertedOrder })\n    setColumnToBeSort(key)\n  }",
      "startLine": 213,
      "endLine": 220,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@222-373",
      "type": "function_declaration",
      "name": "getColumns",
      "text": "function getColumns(): IColumn[] {\n    const keys = [\n      {\n        label: intl.formatMessage(constantsMessages.trackingId),\n        key: 'id',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('id'),\n        icon: columnToBeSort === 'id' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'id' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.status),\n        key: 'status',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('status'),\n        icon: columnToBeSort === 'status' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'status' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.eventType),\n        key: 'eventType',\n        width: 8,\n        isSortable: true,\n        sortFunction: () => toggleSort('eventType'),\n        icon: columnToBeSort === 'eventType' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'eventType' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.name),\n        key: 'nameIntl',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('nameIntl'),\n        icon: columnToBeSort === 'nameIntl' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'nameIntl' ? true : false\n      },\n      {\n        label: intl.formatMessage(formMessages.informantName),\n        key: 'informant',\n        width: 14,\n        isSortable: true,\n        sortFunction: () => toggleSort('informant'),\n        icon: columnToBeSort === 'informant' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'informant' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.declarationStarted),\n        key: 'declarationStartedOn',\n        width: 10,\n        isSortable: true,\n        sortFunction: () => toggleSort('declarationStartedOn'),\n        icon:\n          columnToBeSort === 'declarationStartedOn' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'declarationStartedOn' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.declarationStartedBy),\n        key: 'declarationStartedBy',\n        width: 10,\n        isSortable: true,\n        sortFunction: () => toggleSort('declarationStartedBy'),\n        icon:\n          columnToBeSort === 'declarationStartedBy' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'declarationStartedBy' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.eventDate),\n        key: 'dateOfEvent',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('dateOfEvent'),\n        icon: columnToBeSort === 'dateOfEvent' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'dateOfEvent' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeInProgress),\n        key: 'timeLoggedInProgress',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedInProgress'),\n        icon:\n          columnToBeSort === 'timeLoggedInProgress' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedInProgress' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeReadyForReview),\n        key: 'timeLoggedDeclared',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedDeclared'),\n        icon:\n          columnToBeSort === 'timeLoggedDeclared' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedDeclared' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeRequireUpdates),\n        key: 'timeLoggedRejected',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedRejected'),\n        icon:\n          columnToBeSort === 'timeLoggedRejected' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedRejected' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeWatingApproval),\n        key: 'timeLoggedValidated',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedValidated'),\n        icon:\n          columnToBeSort === 'timeLoggedValidated' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedValidated' ? true : false\n      },\n      {\n        label: intl.formatMessage(\n          constantsMessages.timeWaitingExternalValidation\n        ),\n        key: 'timeLoggedWaitingValidation',\n        width: 12,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedWaitingValidation'),\n        icon:\n          columnToBeSort === 'timeLoggedWaitingValidation' ? (\n            <ArrowDownBlue />\n          ) : (\n            <></>\n          ),\n        isSorted:\n          columnToBeSort === 'timeLoggedWaitingValidation' ? true : false\n      },\n      {\n        label: intl.formatMessage(constantsMessages.timeReadyToPrint),\n        key: 'timeLoggedRegistered',\n        width: 12,\n        alignment: ColumnContentAlignment.LEFT,\n        isSortable: true,\n        sortFunction: () => toggleSort('timeLoggedRegistered'),\n        icon:\n          columnToBeSort === 'timeLoggedRegistered' ? <ArrowDownBlue /> : <></>,\n        isSorted: columnToBeSort === 'timeLoggedRegistered' ? true : false\n      }\n    ] as IColumn[]\n    return keys.filter((item) => {\n      return !(\n        !window.config.FEATURES.EXTERNAL_VALIDATION_WORKQUEUE &&\n        item.key === 'timeLoggedWaitingValidation'\n      )\n    })\n  }",
      "startLine": 222,
      "endLine": 373,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@375-680",
      "type": "function_declaration",
      "name": "getContent",
      "text": "function getContent(data: GQLQuery) {\n    if (\n      !data ||\n      !data.getEventsWithProgress ||\n      !data.getEventsWithProgress.results\n    ) {\n      return []\n    }\n\n    function formateDateWithRelationalText(date: Date | null) {\n      date = date\n        ? Number.isNaN(Number(date))\n          ? new Date(date)\n          : new Date(Number(date))\n        : null\n      return (\n        (date && (\n          <DoubleLineValueWrapper>\n            {format(date, 'MMMM dd, yyyy')}\n            <br />\n            {`(${formattedDuration(date)})`}\n          </DoubleLineValueWrapper>\n        )) || <></>\n      )\n    }\n\n    function conditioanllyFormatContactRelationship(relationshipCode: string) {\n      if (isPrimaryContact(relationshipCode)) {\n        return intl.formatMessage(PrimaryContactLabelMapping[relationshipCode])\n      } else {\n        return relationshipCode\n      }\n    }\n\n    function getTimeDifferenceFromLastModification(\n      eventProgress: GQLEventProgressSet\n    ) {\n      const lastUpdateDate =\n        eventProgress.registration &&\n        (eventProgress.registration.modifiedAt ||\n          eventProgress.registration.createdAt)\n      if (!lastUpdateDate) {\n        return 0\n      }\n      return differenceInSeconds(Date.now(), Number(lastUpdateDate))\n    }\n\n    function getTimeDurationElements(\n      timeDuration: number,\n      tooltipId: string,\n      rowIndex: number\n    ) {\n      if (timeDuration === 0) return <>-</>\n\n      const timeStructure = formatTimeDuration(timeDuration)\n      const label =\n        (timeStructure &&\n          `${timeStructure.days}:${timeStructure.hours}:${timeStructure.minutes}`) ||\n        '-'\n      const tooltip =\n        (timeStructure &&\n          `${timeStructure.days} days, ${timeStructure.hours} hours, ${timeStructure.minutes} minutes`) ||\n        '-'\n      return (\n        <>\n          <ReactTooltip id={`${tooltipId}_${rowIndex}`}>\n            <ToolTipContainer>{tooltip}</ToolTipContainer>\n          </ReactTooltip>\n          <span data-tip data-for={`${tooltipId}_${rowIndex}`}>\n            {label}\n          </span>\n        </>\n      )\n    }\n\n    function getTimeDuration(\n      timeDuration: number,\n      checkStatus: string,\n      eventProgress: GQLEventProgressSet\n    ) {\n      const timeStructure =\n        eventProgress.registration &&\n        eventProgress.registration.status === checkStatus\n          ? getTimeDifferenceFromLastModification(eventProgress)\n          : timeDuration\n      return timeStructure === null ? 0 : timeStructure\n    }\n\n    const content = data.getEventsWithProgress.results.map(\n      (eventProgress: GQLEventProgressSet | null) => {\n        if (eventProgress !== null) {\n          const nameIntl = createNamesMap(\n            eventProgress && (eventProgress.name as GQLHumanName[])\n          )[LANG_EN] as string\n          const localLang = window.config.LANGUAGES.split(',').find(\n            (lang: string) => lang !== LANG_EN\n          )\n          const nameLocal =\n            (localLang &&\n              (createNamesMap(\n                eventProgress && (eventProgress.name as GQLHumanName[])\n              )[localLang] as string)) ||\n            nameIntl\n          let starterPractitionerName = ''\n          let starterPractitionerRole = ''\n\n          const user = eventProgress.startedBy\n          starterPractitionerName =\n            (user &&\n              user.name &&\n              ((createNamesMap(user.name as GQLHumanName[])[\n                intl.locale\n              ] as string) ||\n                (createNamesMap(user.name as GQLHumanName[])[\n                  LANG_EN\n                ] as string))) ||\n            eventProgress.startedByFacility ||\n            ''\n          if (eventProgress.startedBy != null) {\n            const user = eventProgress.startedBy\n            starterPractitionerRole =\n              (user.role && intl.formatMessage(user.role.label)) || ''\n          }\n\n          const event =\n            (eventProgress.type &&\n              intl.formatMessage(\n                dynamicConstantsMessages[eventProgress.type.toLowerCase()]\n              )) ||\n            ''\n          const status =\n            (eventProgress.registration &&\n              eventProgress.registration.status &&\n              intl.formatMessage(\n                StatusMapping[\n                  eventProgress.registration.status as keyof IStatusMapping\n                ].labelDescriptor\n              )) ||\n            ''\n\n          let timeLoggedInProgress = 0\n          let timeLoggedDeclared = 0\n          let timeLoggedRejected = 0\n          let timeLoggedValidated = 0\n          let timeLoggedWaitingValidation = 0\n          let timeLoggedRegistered = 0\n\n          if (eventProgress.progressReport != null) {\n            const {\n              timeInProgress,\n              timeInReadyForReview,\n              timeInRequiresUpdates,\n              timeInWaitingForApproval,\n              timeInWaitingForBRIS,\n              timeInReadyToPrint\n            } = eventProgress.progressReport\n\n            timeLoggedInProgress = getTimeDuration(\n              timeInProgress as number,\n              'IN_PROGRESS',\n              eventProgress\n            )\n\n            timeLoggedDeclared = getTimeDuration(\n              timeInReadyForReview as number,\n              'DECLARED',\n              eventProgress\n            )\n\n            timeLoggedRejected = getTimeDuration(\n              timeInRequiresUpdates as number,\n              'REJECTED',\n              eventProgress\n            )\n\n            timeLoggedValidated = getTimeDuration(\n              timeInWaitingForApproval as number,\n              'VALIDATED',\n              eventProgress\n            )\n\n            timeLoggedWaitingValidation = getTimeDuration(\n              timeInWaitingForBRIS as number,\n              'WAITING_VALIDATION',\n              eventProgress\n            )\n\n            timeLoggedRegistered = getTimeDuration(\n              timeInReadyToPrint as number,\n              'REGISTERED',\n              eventProgress\n            )\n          }\n          return {\n            id:\n              eventProgress.registration &&\n              eventProgress.registration.trackingId,\n            status,\n            compositionId: eventProgress.id,\n            eventType: event,\n            dateOfEvent: eventProgress.dateOfEvent,\n            nameIntl,\n            nameLocal,\n            informant:\n              (eventProgress.registration &&\n                [\n                  eventProgress.registration.contactRelationship &&\n                    conditioanllyFormatContactRelationship(\n                      eventProgress.registration.contactRelationship\n                    ),\n                  eventProgress.registration.contactNumber,\n                  eventProgress.registration.contactEmail\n                ]\n                  .filter(Boolean)\n                  .join('\\n')) ||\n              '',\n            declarationStartedOn: formateDateWithRelationalText(\n              eventProgress.startedAt\n            ),\n            declarationStartedOnTime:\n              eventProgress.registration &&\n              new Date(eventProgress.registration.dateOfDeclaration)\n                .getTime()\n                .toString(),\n            declarationStartedBy:\n              starterPractitionerRole !== ''\n                ? starterPractitionerName +\n                  '\\n' +\n                  `(${starterPractitionerRole})`\n                : starterPractitionerName,\n            timeLoggedInProgress,\n            timeLoggedDeclared,\n            timeLoggedRejected,\n            timeLoggedValidated,\n            timeLoggedWaitingValidation,\n            timeLoggedRegistered\n          }\n        }\n        return {}\n      }\n    )\n\n    return orderBy(\n      content,\n      columnToBeSort === 'nameIntl'\n        ? [(content) => content[columnToBeSort]!.toString().toLowerCase()]\n        : columnToBeSort === 'declarationStartedOn'\n          ? ['declarationStartedOnTime']\n          : [columnToBeSort],\n      [sortOrder[columnToBeSort]]\n    ).map((row, idx) => {\n      return {\n        ...row,\n        id: (\n          <LinkButton\n            onClick={() =>\n              navigate(\n                formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                  tab: 'printTab',\n                  declarationId: row.compositionId as string\n                })\n              )\n            }\n          >\n            {row.id}\n          </LinkButton>\n        ),\n        declarationStartedBy: (\n          <DoubleLineValueWrapper>\n            {row.declarationStartedBy}\n          </DoubleLineValueWrapper>\n        ),\n        dateOfEvent: formateDateWithRelationalText(row.dateOfEvent),\n        timeLoggedInProgress: getTimeDurationElements(\n          Number(row.timeLoggedInProgress),\n          'in_prog_tltp',\n          idx\n        ),\n        timeLoggedDeclared: getTimeDurationElements(\n          Number(row.timeLoggedDeclared),\n          'dclrd_tltp',\n          idx\n        ),\n        timeLoggedRejected: getTimeDurationElements(\n          Number(row.timeLoggedRejected),\n          'rjctd_tltp',\n          idx\n        ),\n        timeLoggedValidated: getTimeDurationElements(\n          Number(row.timeLoggedValidated),\n          'vldtd_tltp',\n          idx\n        ),\n        timeLoggedWaitingValidation: getTimeDurationElements(\n          Number(row.timeLoggedWaitingValidation),\n          'wtng_vldtn_tltp',\n          idx\n        ),\n        timeLoggedRegistered: getTimeDurationElements(\n          Number(row.timeLoggedRegistered),\n          'rgstrd_tltp_tltp',\n          idx\n        )\n      }\n    })\n  }",
      "startLine": 375,
      "endLine": 680,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@384-399",
      "type": "function_declaration",
      "name": "formateDateWithRelationalText",
      "text": "function formateDateWithRelationalText(date: Date | null) {\n      date = date\n        ? Number.isNaN(Number(date))\n          ? new Date(date)\n          : new Date(Number(date))\n        : null\n      return (\n        (date && (\n          <DoubleLineValueWrapper>\n            {format(date, 'MMMM dd, yyyy')}\n            <br />\n            {`(${formattedDuration(date)})`}\n          </DoubleLineValueWrapper>\n        )) || <></>\n      )\n    }",
      "startLine": 384,
      "endLine": 399,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@401-407",
      "type": "function_declaration",
      "name": "conditioanllyFormatContactRelationship",
      "text": "function conditioanllyFormatContactRelationship(relationshipCode: string) {\n      if (isPrimaryContact(relationshipCode)) {\n        return intl.formatMessage(PrimaryContactLabelMapping[relationshipCode])\n      } else {\n        return relationshipCode\n      }\n    }",
      "startLine": 401,
      "endLine": 407,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@409-420",
      "type": "function_declaration",
      "name": "getTimeDifferenceFromLastModification",
      "text": "function getTimeDifferenceFromLastModification(\n      eventProgress: GQLEventProgressSet\n    ) {\n      const lastUpdateDate =\n        eventProgress.registration &&\n        (eventProgress.registration.modifiedAt ||\n          eventProgress.registration.createdAt)\n      if (!lastUpdateDate) {\n        return 0\n      }\n      return differenceInSeconds(Date.now(), Number(lastUpdateDate))\n    }",
      "startLine": 409,
      "endLine": 420,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@422-448",
      "type": "function_declaration",
      "name": "getTimeDurationElements",
      "text": "function getTimeDurationElements(\n      timeDuration: number,\n      tooltipId: string,\n      rowIndex: number\n    ) {\n      if (timeDuration === 0) return <>-</>\n\n      const timeStructure = formatTimeDuration(timeDuration)\n      const label =\n        (timeStructure &&\n          `${timeStructure.days}:${timeStructure.hours}:${timeStructure.minutes}`) ||\n        '-'\n      const tooltip =\n        (timeStructure &&\n          `${timeStructure.days} days, ${timeStructure.hours} hours, ${timeStructure.minutes} minutes`) ||\n        '-'\n      return (\n        <>\n          <ReactTooltip id={`${tooltipId}_${rowIndex}`}>\n            <ToolTipContainer>{tooltip}</ToolTipContainer>\n          </ReactTooltip>\n          <span data-tip data-for={`${tooltipId}_${rowIndex}`}>\n            {label}\n          </span>\n        </>\n      )\n    }",
      "startLine": 422,
      "endLine": 448,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@450-461",
      "type": "function_declaration",
      "name": "getTimeDuration",
      "text": "function getTimeDuration(\n      timeDuration: number,\n      checkStatus: string,\n      eventProgress: GQLEventProgressSet\n    ) {\n      const timeStructure =\n        eventProgress.registration &&\n        eventProgress.registration.status === checkStatus\n          ? getTimeDifferenceFromLastModification(eventProgress)\n          : timeDuration\n      return timeStructure === null ? 0 : timeStructure\n    }",
      "startLine": 450,
      "endLine": 461,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/WorkflowStatus.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@56-105",
      "type": "method_definition",
      "name": "getStatusCountView",
      "text": "getStatusCountView(data: GQLRegistrationCountResult) {\n    const { intl, statusMapping, selectedEvent, isAccessibleOffice } =\n      this.props\n    const { results, total } = data\n    return (\n      <ContentHolder id=\"declaration-statuses\">\n        <SubHeader>\n          {intl.formatMessage(performanceMessages.registrationByStatus)}\n        </SubHeader>\n        <Description>\n          {intl.formatMessage(\n            performanceMessages.declarationCountByStatusDescription,\n            {\n              event: selectedEvent.toUpperCase()\n            }\n          )}\n        </Description>\n        {results\n          .filter((item) => item && checkExternalValidationStatus(item.status))\n          .map((statusCount, index) => {\n            return (\n              statusCount && (\n                <StatusProgressBarWrapper key={index}>\n                  <ProgressBar\n                    id={`${statusCount.status.toLowerCase()}-${index}`}\n                    title={intl.formatMessage(\n                      statusMapping![statusCount.status as keyof IStatusMapping]\n                        .labelDescriptor\n                    )}\n                    color={\n                      statusMapping![\n                        statusCount?.status as keyof IStatusMapping\n                      ].color\n                    }\n                    totalPoints={total}\n                    disabled={!isAccessibleOffice}\n                    onClick={() =>\n                      this.props.onClickStatusDetails(\n                        statusCount.status as keyof IStatusMapping\n                      )\n                    }\n                    currentPoints={statusCount.count}\n                  />\n                </StatusProgressBarWrapper>\n              )\n            )\n          })}\n      </ContentHolder>\n    )\n  }",
      "startLine": 56,
      "endLine": 105,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/reports/operational/StatusWiseDeclarationCountView.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@71-102",
      "type": "function_declaration",
      "name": "prepareChartData",
      "text": "function prepareChartData(\n  data: GQLMonthWiseEstimationMetric[],\n  time: CompletenessRateTime\n) {\n  return (\n    data &&\n    data.reduce(\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      (chartData: any[], dataDetails: GQLMonthWiseEstimationMetric) => {\n        if (dataDetails !== null) {\n          chartData.push({\n            label:\n              dataDetails.month === 0\n                ? format(\n                    new Date(dataDetails.year, dataDetails.month),\n                    'MMM yyyy'\n                  )\n                : format(new Date(dataDetails.year, dataDetails.month), 'MMM'),\n            registeredInTargetDays: dataDetails[time],\n            totalRegistered: dataDetails.total,\n            totalEstimate: dataDetails.estimated,\n            registrationPercentage: `${Number(\n              (dataDetails[time] / dataDetails.estimated) * 100\n            ).toFixed(2)}%`\n          })\n        }\n        return chartData\n      },\n      []\n    )\n  )\n}",
      "startLine": 71,
      "endLine": 102,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/CompletenessRates.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@237-341",
      "type": "function_declaration",
      "name": "CompletenessRatesComponent",
      "text": "function CompletenessRatesComponent(props: ICompletenessRateProps) {\n  const [base, setBase] = useState<IEstimationBase>({\n    baseType: COMPLETENESS_RATE_REPORT_BASE.TIME\n  })\n\n  const location = useLocation()\n  const params = useParams()\n\n  const { intl } = props\n\n  const { locationId, timeStart, timeEnd, time } = parse(\n    location.search\n  ) as unknown as ISearchParams\n\n  const dateStart = new Date(timeStart)\n  const dateEnd = new Date(timeEnd)\n\n  return (\n    <SysAdminContentWrapper\n      id=\"reg-rates\"\n      isCertificatesConfigPage={true}\n      hideBackground={true}\n    >\n      <Content\n        title={intl.formatMessage(navigationMessages.completenessRates)}\n        showTitleOnMobile={true}\n        size={ContentSize.LARGE}\n        filterContent={\n          <Filter\n            locationId={locationId || NATIONAL_ADMINISTRATIVE_LEVEL}\n            base={base.baseType}\n            time={time}\n            event={params.eventType as EventType}\n            dateStart={dateStart}\n            dateEnd={dateEnd}\n            onBaseChange={(base) => setBase({ baseType: base })}\n          />\n        }\n      >\n        <Query\n          query={\n            base.baseType === COMPLETENESS_RATE_REPORT_BASE.TIME\n              ? FETCH_MONTH_WISE_EVENT_ESTIMATIONS\n              : FETCH_LOCATION_WISE_EVENT_ESTIMATIONS\n          }\n          variables={{\n            event: params?.eventType?.toUpperCase(),\n            timeStart: timeStart,\n            timeEnd: timeEnd,\n            locationId:\n              locationId && locationId !== NATIONAL_ADMINISTRATIVE_LEVEL\n                ? locationId\n                : undefined\n          }}\n        >\n          {({ data, loading, error }) => {\n            if (error) {\n              return (\n                <>\n                  {base.baseType === COMPLETENESS_RATE_REPORT_BASE.TIME && (\n                    <RegRatesLineChart loading={true} />\n                  )}\n                  <CompletenessDataTable\n                    loading={true}\n                    base={base}\n                    completenessRateTime={time}\n                  />\n                  <GenericErrorToast />\n                </>\n              )\n            } else {\n              return (\n                <>\n                  {base.baseType === COMPLETENESS_RATE_REPORT_BASE.TIME && (\n                    <RegRatesLineChart\n                      loading={loading}\n                      data={prepareChartData(\n                        data && data.fetchMonthWiseEventMetrics,\n                        time\n                      )}\n                      completenessRateTime={time}\n                      eventType={params.eventType as EventType}\n                    />\n                  )}\n                  <CompletenessDataTable\n                    loading={loading}\n                    base={base}\n                    data={\n                      data &&\n                      (base.baseType === COMPLETENESS_RATE_REPORT_BASE.TIME\n                        ? data.fetchMonthWiseEventMetrics\n                        : data.fetchLocationWiseEventMetrics)\n                    }\n                    eventType={params.eventType as EventType}\n                    completenessRateTime={time}\n                  />\n                </>\n              )\n            }\n          }}\n        </Query>\n      </Content>\n    </SysAdminContentWrapper>\n  )\n}",
      "startLine": 237,
      "endLine": 341,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/CompletenessRates.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@44-203",
      "type": "function_declaration",
      "name": "ApplicationSourcesReport",
      "text": "function ApplicationSourcesReport(props: ApplicationSourcesProps) {\n  const { data, isAccessibleOffice } = props\n  const navigate = useNavigate()\n  const intl = useIntl()\n  const userRoles = useSelector(\n    (state: IStoreState) => state.userForm.userRoles\n  )\n\n  const fieldAgentRoles = userRoles\n    .filter((role) => role.scopes.includes(SCOPES.RECORD_SUBMIT_FOR_REVIEW))\n    .map((role) => role.id)\n\n  const registrationAgentRoles = userRoles\n    .filter((role) => role.scopes.includes(SCOPES.RECORD_SUBMIT_FOR_APPROVAL))\n    .map((role) => role.id)\n\n  const registrarRoles = userRoles\n    .filter((role) => role.scopes.includes(SCOPES.RECORD_REGISTER))\n    .map((role) => role.id)\n\n  return (\n    <ListContainer>\n      <ReportContainer>\n        <ListViewItemSimplified\n          label={\n            <div>\n              <PerformanceListHeader>\n                {intl.formatMessage(\n                  messages.performanceApplicationSourcesHeader\n                )}\n              </PerformanceListHeader>\n              <PerformanceListSubHeader>\n                {intl.formatMessage(\n                  messages.performanceApplicationSourcesSubHeader\n                )}\n              </PerformanceListSubHeader>\n            </div>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceTotalLabel)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>{calculateTotal(data.results)}</PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(\n                messages.performanceFieldAgentsApplicationsLabel\n              )}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              <TotalDisplayWithPercentage\n                total={calculateTotal(\n                  data.results.filter((item) =>\n                    fieldAgentRoles.includes(item.practitionerRole)\n                  )\n                )}\n                ofNumber={calculateTotal(data.results)}\n              ></TotalDisplayWithPercentage>\n            </PerformanceValue>\n          }\n          actions={\n            isAccessibleOffice && (\n              <LinkButton\n                id=\"field-agent-list-view\"\n                onClick={() =>\n                  navigate({\n                    pathname: routes.PERFORMANCE_FIELD_AGENT_LIST,\n                    search: stringify({\n                      locationId: props.locationId,\n                      timeStart: props.timeStart,\n                      timeEnd: props.timeEnd,\n                      event: props.event\n                    })\n                  })\n                }\n              >\n                {intl.formatMessage(buttonMessages.view)}\n              </LinkButton>\n            )\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {' '}\n              {intl.formatMessage(\n                messages.performanceHospitalApplicationsLabel\n              )}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              <TotalDisplayWithPercentage\n                total={calculateTotal(\n                  data.results.filter(\n                    (item) => item.practitionerRole === 'AUTOMATED'\n                  )\n                )}\n                ofNumber={calculateTotal(data.results)}\n              ></TotalDisplayWithPercentage>\n            </PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {' '}\n              {intl.formatMessage(\n                messages.performanceRegistrationAgentsApplicationsLabel\n              )}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              <TotalDisplayWithPercentage\n                total={calculateTotal(\n                  data.results.filter((item) =>\n                    registrationAgentRoles.includes(item.practitionerRole)\n                  )\n                )}\n                ofNumber={calculateTotal(data.results)}\n              ></TotalDisplayWithPercentage>\n            </PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {' '}\n              {intl.formatMessage(\n                messages.performanceRegistrarsApplicationsLabel\n              )}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              <TotalDisplayWithPercentage\n                total={calculateTotal(\n                  data.results.filter((item) =>\n                    registrarRoles.includes(item.practitionerRole)\n                  )\n                )}\n                ofNumber={calculateTotal(data.results)}\n              ></TotalDisplayWithPercentage>\n            </PerformanceValue>\n          }\n        />\n      </ReportContainer>\n    </ListContainer>\n  )\n}",
      "startLine": 44,
      "endLine": 203,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/ApplicationSourcesReport.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@46-346",
      "type": "function_declaration",
      "name": "RegistrationsReport",
      "text": "function RegistrationsReport({\n  data,\n  selectedEvent,\n  timeStart,\n  timeEnd,\n  locationId\n}: RegistrationsReportProps) {\n  const navigate = useNavigate()\n  const intl = useIntl()\n  return (\n    <ReportContainer>\n      <ListViewItemSimplified\n        label={\n          <div>\n            <PerformanceListHeader>\n              {intl.formatMessage(messages.performanceTotalRegitrationsHeader)}\n            </PerformanceListHeader>\n          </div>\n        }\n      />\n      <ListViewItemSimplified\n        label={\n          <PerformanceTitle>\n            {intl.formatMessage(messages.performanceTotalLabel)}\n          </PerformanceTitle>\n        }\n        value={\n          <div>\n            <PerformanceValue>\n              {data.results.reduce((m, x) => m + x.total, 0)}\n            </PerformanceValue>\n            <Breakdown>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceMaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  {\n                    <PercentageDisplay\n                      total={calculateTotal(\n                        data.results.filter((x) => x.gender === 'male')\n                      )}\n                      ofNumber={calculateTotal(data.results)}\n                    />\n                  }\n                </BreakdownValue>\n              </BreakdownRow>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceFemaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  {\n                    <PercentageDisplay\n                      total={calculateTotal(\n                        data.results.filter((x) => x.gender === 'female')\n                      )}\n                      ofNumber={calculateTotal(data.results)}\n                    />\n                  }\n                </BreakdownValue>\n              </BreakdownRow>\n            </Breakdown>\n          </div>\n        }\n        actions={\n          <ActionButton\n            onClick={() => {\n              navigate(\n                generateRegistrationsListUrlConfig({\n                  timeStart,\n                  timeEnd,\n                  locationId,\n                  event: selectedEvent\n                })\n              )\n            }}\n          >\n            {intl.formatMessage(buttonMessages.view)}\n          </ActionButton>\n        }\n      />\n      {selectedEvent === 'BIRTH' && (\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceLateRegistrationsLabel)}\n            </PerformanceTitle>\n          }\n          value={\n            <div>\n              <PerformanceValue>\n                {\n                  <TotalDisplayWithPercentage\n                    total={calculateTotal(\n                      data.results.filter((x) =>\n                        ['withinLate'].includes(x.timeLabel)\n                      )\n                    )}\n                    ofNumber={calculateTotal(data.results)}\n                  />\n                }\n              </PerformanceValue>\n              <Breakdown>\n                <BreakdownRow>\n                  <BreakdownLabel>\n                    {intl.formatMessage(messages.performanceMaleLabel)}:{' '}\n                  </BreakdownLabel>\n                  <BreakdownValue>\n                    {\n                      <PercentageDisplay\n                        total={calculateTotal(\n                          data.results.filter(\n                            (x) =>\n                              x.gender === 'male' &&\n                              ['withinLate'].includes(x.timeLabel)\n                          )\n                        )}\n                        ofNumber={calculateTotal(\n                          data.results.filter((x) =>\n                            ['withinLate'].includes(x.timeLabel)\n                          )\n                        )}\n                      />\n                    }\n                  </BreakdownValue>\n                </BreakdownRow>\n                <BreakdownRow>\n                  <BreakdownLabel>\n                    {intl.formatMessage(messages.performanceFemaleLabel)}:{' '}\n                  </BreakdownLabel>\n                  <BreakdownValue>\n                    {\n                      <PercentageDisplay\n                        total={calculateTotal(\n                          data.results.filter(\n                            (x) =>\n                              x.gender === 'female' &&\n                              ['withinLate'].includes(x.timeLabel)\n                          )\n                        )}\n                        ofNumber={calculateTotal(\n                          data.results.filter((x) =>\n                            ['withinLate'].includes(x.timeLabel)\n                          )\n                        )}\n                      />\n                    }\n                  </BreakdownValue>\n                </BreakdownRow>\n              </Breakdown>\n            </div>\n          }\n        />\n      )}\n\n      <ListViewItemSimplified\n        label={\n          <PerformanceTitle>\n            {intl.formatMessage(messages.performanceDelayedRegistrationsLabel)}\n          </PerformanceTitle>\n        }\n        value={\n          <div>\n            <PerformanceValue>\n              {\n                <TotalDisplayWithPercentage\n                  total={calculateTotal(\n                    data.results.filter(\n                      (x) =>\n                        !['withinLate', 'withinTarget'].includes(x.timeLabel)\n                    )\n                  )}\n                  ofNumber={calculateTotal(data.results)}\n                />\n              }\n            </PerformanceValue>\n            <Breakdown>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceMaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  {\n                    <PercentageDisplay\n                      total={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            x.gender === 'male' &&\n                            !['withinLate', 'withinTarget'].includes(\n                              x.timeLabel\n                            )\n                        )\n                      )}\n                      ofNumber={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            !['withinLate', 'withinTarget'].includes(\n                              x.timeLabel\n                            )\n                        )\n                      )}\n                    />\n                  }\n                </BreakdownValue>\n              </BreakdownRow>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceFemaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  {\n                    <PercentageDisplay\n                      total={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            x.gender === 'female' &&\n                            !['withinLate', 'withinTarget'].includes(\n                              x.timeLabel\n                            )\n                        )\n                      )}\n                      ofNumber={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            !['withinLate', 'withinTarget'].includes(\n                              x.timeLabel\n                            )\n                        )\n                      )}\n                    />\n                  }\n                </BreakdownValue>\n              </BreakdownRow>\n            </Breakdown>\n          </div>\n        }\n      />\n      <ListViewItemSimplified\n        label={\n          selectedEvent === 'BIRTH' ? (\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceHomeBirth)}\n            </PerformanceTitle>\n          ) : (\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceHomeDeath)}\n            </PerformanceTitle>\n          )\n        }\n        value={\n          <div>\n            <PerformanceValue>\n              {\n                <TotalDisplayWithPercentage\n                  total={calculateTotal(\n                    data.results.filter((x) =>\n                      ['DECEASED_USUAL_RESIDENCE', 'PRIVATE_HOME'].includes(\n                        x.eventLocationType\n                      )\n                    )\n                  )}\n                  ofNumber={calculateTotal(data.results)}\n                />\n              }\n            </PerformanceValue>\n          </div>\n        }\n      />\n      <ListViewItemSimplified\n        label={\n          selectedEvent === 'BIRTH' ? (\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceHealthFacilityBirth)}\n            </PerformanceTitle>\n          ) : (\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceHealthFacilityDeath)}\n            </PerformanceTitle>\n          )\n        }\n        value={\n          <div>\n            <PerformanceValue>\n              {\n                <TotalDisplayWithPercentage\n                  total={calculateTotal(\n                    data.results.filter((x) =>\n                      ['HEALTH_FACILITY'].includes(x.eventLocationType)\n                    )\n                  )}\n                  ofNumber={calculateTotal(data.results)}\n                />\n              }\n            </PerformanceValue>\n          </div>\n        }\n      />\n    </ReportContainer>\n  )\n}",
      "startLine": 46,
      "endLine": 346,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/RegistrationsReport.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@45-302",
      "type": "function_declaration",
      "name": "CompletenessReport",
      "text": "function CompletenessReport({\n  data,\n  selectedEvent,\n  onClickDetails\n}: CompletenessReportProps) {\n  const intl = useIntl()\n  return (\n    <ReportContainer>\n      <ListViewItemSimplified\n        label={\n          <div>\n            <PerformanceListHeader>\n              {intl.formatMessage(messages.performanceCompletenessRatesHeader)}\n            </PerformanceListHeader>\n            <PerformanceListSubHeader>\n              {intl.formatMessage(\n                messages.performanceCompletenessRatesSubHeader,\n                {\n                  event: selectedEvent\n                }\n              )}\n            </PerformanceListSubHeader>\n          </div>\n        }\n      />\n      <ListViewItemSimplified\n        label={\n          <PerformanceTitle>\n            {intl.formatMessage(messages.performanceWithinTargetDaysLabel, {\n              target: window.config[selectedEvent].REGISTRATION_TARGET,\n              withPrefix: true\n            })}\n          </PerformanceTitle>\n        }\n        value={\n          <div>\n            <PerformanceValue>\n              <PercentageDisplay\n                total={data.results\n                  .filter((p) => p.timeLabel === 'withinTarget')\n                  .reduce((t, x) => t + x.total, 0)}\n                ofNumber={data.estimated.totalEstimation}\n              />\n            </PerformanceValue>\n            <Breakdown>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceMaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  {\n                    <PercentageDisplay\n                      total={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            x.gender === 'male' &&\n                            x.timeLabel === 'withinTarget'\n                        )\n                      )}\n                      ofNumber={calculateTotal(\n                        data.results.filter(\n                          (x) => x.timeLabel === 'withinTarget'\n                        )\n                      )}\n                    />\n                  }\n                </BreakdownValue>\n              </BreakdownRow>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceFemaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  {\n                    <PercentageDisplay\n                      total={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            x.gender === 'female' &&\n                            x.timeLabel === 'withinTarget'\n                        )\n                      )}\n                      ofNumber={calculateTotal(\n                        data.results.filter(\n                          (x) => x.timeLabel === 'withinTarget'\n                        )\n                      )}\n                    />\n                  }\n                </BreakdownValue>\n              </BreakdownRow>\n            </Breakdown>\n          </div>\n        }\n        actions={\n          <ActionButton\n            onClick={() => onClickDetails(CompletenessRateTime.WithinTarget)}\n          >\n            {intl.formatMessage(buttonMessages.view)}\n          </ActionButton>\n        }\n      />\n      <ListViewItemSimplified\n        label={\n          <PerformanceTitle>\n            {intl.formatMessage(messages.performanceWithin1YearLabel)}\n          </PerformanceTitle>\n        }\n        value={\n          <div>\n            <PerformanceValue>\n              <PercentageDisplay\n                total={calculateTotal(\n                  data.results.filter(\n                    (x) =>\n                      x.timeLabel === 'withinTarget' ||\n                      x.timeLabel === 'withinLate' ||\n                      x.timeLabel === 'within1Year'\n                  )\n                )}\n                ofNumber={data.estimated.totalEstimation}\n              />\n            </PerformanceValue>\n            <Breakdown>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceMaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  {\n                    <PercentageDisplay\n                      total={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            x.gender === 'male' &&\n                            (x.timeLabel === 'withinTarget' ||\n                              x.timeLabel === 'withinLate' ||\n                              x.timeLabel === 'within1Year')\n                        )\n                      )}\n                      ofNumber={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            x.timeLabel === 'withinTarget' ||\n                            x.timeLabel === 'withinLate' ||\n                            x.timeLabel === 'within1Year'\n                        )\n                      )}\n                    />\n                  }\n                </BreakdownValue>\n              </BreakdownRow>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceFemaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  {\n                    <PercentageDisplay\n                      total={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            x.gender === 'female' &&\n                            (x.timeLabel === 'withinTarget' ||\n                              x.timeLabel === 'withinLate' ||\n                              x.timeLabel === 'within1Year')\n                        )\n                      )}\n                      ofNumber={calculateTotal(\n                        data.results.filter(\n                          (x) =>\n                            x.timeLabel === 'withinTarget' ||\n                            x.timeLabel === 'withinLate' ||\n                            x.timeLabel === 'within1Year'\n                        )\n                      )}\n                    />\n                  }\n                </BreakdownValue>\n              </BreakdownRow>\n            </Breakdown>\n          </div>\n        }\n        actions={\n          <ActionButton\n            onClick={() => onClickDetails(CompletenessRateTime.Within1Year)}\n          >\n            {intl.formatMessage(buttonMessages.view)}\n          </ActionButton>\n        }\n      />\n      <ListViewItemSimplified\n        label={\n          <PerformanceTitle>\n            {intl.formatMessage(messages.performanceWithin5YearsLabel)}\n          </PerformanceTitle>\n        }\n        value={\n          <div>\n            <PerformanceValue>\n              <PercentageDisplay\n                total={calculateTotal(\n                  data.results.filter((x) => x.timeLabel !== 'after5Years')\n                )}\n                ofNumber={data.estimated.totalEstimation}\n              />\n            </PerformanceValue>\n            <Breakdown>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceMaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  <PercentageDisplay\n                    total={calculateTotal(\n                      data.results.filter(\n                        (x) =>\n                          x.gender === 'male' && x.timeLabel !== 'after5Years'\n                      )\n                    )}\n                    ofNumber={calculateTotal(\n                      data.results.filter((x) => x.timeLabel !== 'after5Years')\n                    )}\n                  />\n                </BreakdownValue>\n              </BreakdownRow>\n              <BreakdownRow>\n                <BreakdownLabel>\n                  {intl.formatMessage(messages.performanceFemaleLabel)}:{' '}\n                </BreakdownLabel>\n                <BreakdownValue>\n                  <PercentageDisplay\n                    total={calculateTotal(\n                      data.results.filter(\n                        (x) =>\n                          x.gender === 'female' && x.timeLabel !== 'after5Years'\n                      )\n                    )}\n                    ofNumber={calculateTotal(\n                      data.results.filter((x) => x.timeLabel !== 'after5Years')\n                    )}\n                  />\n                </BreakdownValue>\n              </BreakdownRow>\n            </Breakdown>\n          </div>\n        }\n        actions={\n          <ActionButton\n            onClick={() => onClickDetails(CompletenessRateTime.Within5Years)}\n          >\n            {intl.formatMessage(buttonMessages.view)}\n          </ActionButton>\n        }\n      />\n    </ReportContainer>\n  )\n}",
      "startLine": 45,
      "endLine": 302,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/CompletenessReport.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@45-48",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: Props) {\n    super(props)\n    window.__localeId__ = this.props.intl.locale\n  }",
      "startLine": 45,
      "endLine": 48,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/LocationStatsView.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@50-86",
      "type": "method_definition",
      "name": "render",
      "text": "render() {\n    const {\n      intl,\n      registrationOffices,\n      totalRegistrars,\n\n      citizen\n    } = this.props\n\n    return (\n      <>\n        <SubHeader>{intl.formatMessage(messages.stats)}</SubHeader>\n        <StatsRow>\n          <span>{intl.formatMessage(messages.declarationsStartedOffices)}</span>\n          <span>{registrationOffices || 0}</span>\n        </StatsRow>\n        <StatsRow>\n          <span>\n            {intl.formatMessage(\n              messages.performanceRegistrarsApplicationsLabel\n            )}\n          </span>\n          <span>{totalRegistrars || 0}</span>\n        </StatsRow>\n        {totalRegistrars > 0 && (\n          <StatsRow>\n            <span>{intl.formatMessage(messages.registrarsToCitizen)}</span>\n            <span>\n              {intl.formatMessage(messages.registrarsToCitizenValue, {\n                citizen: citizen || 0\n              })}\n            </span>\n          </StatsRow>\n        )}\n      </>\n    )\n  }",
      "startLine": 50,
      "endLine": 86,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/LocationStatsView.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@31-139",
      "type": "function_declaration",
      "name": "CorrectionsReport",
      "text": "function CorrectionsReport({ data }: CorrectionsReportProps) {\n  const intl = useIntl()\n  if (!data) return <></>\n  return (\n    <ListContainer>\n      <ReportContainer>\n        <ListViewItemSimplified\n          label={\n            <div>\n              <PerformanceListHeader>\n                {intl.formatMessage(messages.performanceTotalCorrectionsHeader)}\n              </PerformanceListHeader>\n            </div>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(messages.performanceTotalLabel)}\n            </PerformanceTitle>\n          }\n          value={\n            <div>\n              <PerformanceValue>{calculateTotal(data)}</PerformanceValue>\n            </div>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(correctionMessages.clericalError)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              {calculateTotal(\n                data.filter(\n                  ({ reason }) => reason === CorrectionReason.CLERICAL_ERROR\n                )\n              )}\n            </PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(correctionMessages.materialError)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              {calculateTotal(\n                data.filter(\n                  ({ reason }) => reason === CorrectionReason.MATERIAL_ERROR\n                )\n              )}\n            </PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(correctionMessages.materialOmission)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              {calculateTotal(\n                data.filter(\n                  ({ reason }) => reason === CorrectionReason.MATERIAL_OMISSION\n                )\n              )}\n            </PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(correctionMessages.judicialOrder)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              {calculateTotal(\n                data.filter(\n                  ({ reason }) => reason === CorrectionReason.JUDICIAL_ORDER\n                )\n              )}\n            </PerformanceValue>\n          }\n        />\n        <ListViewItemSimplified\n          label={\n            <PerformanceTitle>\n              {intl.formatMessage(messages.otherCorrectionReason)}\n            </PerformanceTitle>\n          }\n          value={\n            <PerformanceValue>\n              {calculateTotal(\n                data.filter(({ reason }) => reason === CorrectionReason.OTHER)\n              )}\n            </PerformanceValue>\n          }\n        />\n      </ReportContainer>\n    </ListContainer>\n  )\n}",
      "startLine": 31,
      "endLine": 139,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/Performance/CorrectionsReport.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@94-96",
      "type": "function_declaration",
      "name": "isSubPage",
      "text": "function isSubPage(page: SysAdminPage): page is SubPage {\n  return page.type === SysAdminPageVariant.SUBPAGE\n}",
      "startLine": 94,
      "endLine": 96,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/SysAdminContentWrapper.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@98-100",
      "type": "function_declaration",
      "name": "isSubPageCentered",
      "text": "function isSubPageCentered(page: SysAdminPage): page is SubPage {\n  return page.type === SysAdminPageVariant.SUBPAGE_CENTERED\n}",
      "startLine": 98,
      "endLine": 100,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/SysAdminContentWrapper.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@154-180",
      "type": "function_declaration",
      "name": "SubPageHeader",
      "text": "function SubPageHeader(props: HeaderProps) {\n  return (\n    <SubPageHeaderContainer id=\"sub-page-header\">\n      <SubPageHeaderBody>\n        <CircleButton\n          id={`${props.id}-action-back`}\n          onClick={props.backActionHandler}\n        >\n          <BackArrowDeepBlue />\n        </CircleButton>\n        {(props.loadingHeader && <LoadingGrey width={20} />) || (\n          <HeaderText id={`${props.id}-header`}>\n            {props.headerTitle || ''}\n          </HeaderText>\n        )}\n        {props.menuComponent && (\n          <HeaderMenuContainer id=\"menuOptionsHolder\">\n            {props.menuComponent}\n          </HeaderMenuContainer>\n        )}\n      </SubPageHeaderBody>\n      {props.toolbarComponent && (\n        <ToolbarContainer>{props.toolbarComponent}</ToolbarContainer>\n      )}\n    </SubPageHeaderContainer>\n  )\n}",
      "startLine": 154,
      "endLine": 180,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/SysAdminContentWrapper.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@182-256",
      "type": "function_declaration",
      "name": "SysAdminContentWrapper",
      "text": "function SysAdminContentWrapper(props: SysAdminPage) {\n  let pageHeader: JSX.Element\n  let pageContent: JSX.Element\n  if (isSubPage(props)) {\n    pageHeader = (\n      <SubPageHeader\n        id={props.id}\n        headerTitle={props.headerTitle}\n        loadingHeader={props.loadingHeader}\n        backActionHandler={props.backActionHandler}\n        toolbarComponent={props.toolbarComponent}\n        menuComponent={props.menuComponent}\n      />\n    )\n\n    pageContent = (\n      <SubPageContent hideBackground={props.hideBackground}>\n        {props.children}\n      </SubPageContent>\n    )\n  } else if (isSubPageCentered(props)) {\n    pageHeader = (\n      <SubPageHeader\n        id={props.id}\n        headerTitle={props.headerTitle}\n        loadingHeader={props.loadingHeader}\n        backActionHandler={props.backActionHandler}\n        toolbarComponent={props.toolbarComponent}\n        menuComponent={props.menuComponent}\n      />\n    )\n    pageContent = (\n      <DynamicContainer\n        marginLeft={props.marginLeft}\n        marginRight={props.marginRight}\n        fixedWidth={props.fixedWidth}\n      >\n        <Content hideBackground={props.hideBackground}>\n          {props.children}\n        </Content>\n      </DynamicContainer>\n    )\n  } else {\n    pageHeader = (\n      <MarginedHeader\n        changeTeamLocation={props.changeTeamLocation}\n        mapPerformanceClickHandler={props.mapPerformanceClickHandler}\n      />\n    )\n    pageContent = (\n      <>\n        <FixedNavigation loadWorkqueueStatuses={false} />\n        <BodyContainer>\n          <DynamicContainer\n            marginLeft={props.marginLeft}\n            marginRight={props.marginRight}\n            fixedWidth={props.fixedWidth}\n          >\n            <Content hideBackground={props.hideBackground}>\n              {props.children}\n            </Content>\n          </DynamicContainer>\n        </BodyContainer>\n      </>\n    )\n  }\n\n  return (\n    <Container isCertificatesConfigPage={props.isCertificatesConfigPage}>\n      {pageHeader}\n      {props.subMenuComponent && props.subMenuComponent}\n      {pageContent}\n    </Container>\n  )\n}",
      "startLine": 182,
      "endLine": 256,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SysAdmin/SysAdminContentWrapper.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@43-54",
      "type": "function_declaration",
      "name": "collectorFormFieldsForOthers",
      "text": "function collectorFormFieldsForOthers(event: EventType) {\n  const collectCertFormSection =\n    event === EventType.Birth\n      ? collectBirthCertificateFormSection\n      : event === EventType.Death\n        ? collectDeathCertificateFormSection\n        : collectMarriageCertificateFormSection\n\n  return collectCertFormSection.groups.find(\n    (group) => group.id === 'otherCertCollector'\n  )!.fields\n}",
      "startLine": 43,
      "endLine": 54,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/IssueCertificate/IssueCollectorForm/IssueFormForOthers.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@111-120",
      "type": "function_declaration",
      "name": "continueButtonHandler",
      "text": "function continueButtonHandler() {\n    const event = declaration.event\n\n    navigate(\n      generateIssueCertificatePaymentUrl({\n        registrationId: declaration.id,\n        event\n      })\n    )\n  }",
      "startLine": 111,
      "endLine": 120,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/IssueCertificate/IssueCollectorForm/IssueFormForOthers.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@67-75",
      "type": "function_declaration",
      "name": "Slider",
      "text": "function Slider(props: React.InputHTMLAttributes<HTMLInputElement>) {\n  return (\n    <SliderContainer>\n      <Square width={12} height={12} color=\"grey400\" />\n      <StyledInput {...props} />\n      <Square width={18} height={18} color=\"grey400\" />\n    </SliderContainer>\n  )\n}",
      "startLine": 67,
      "endLine": 75,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/AvatarChangeModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@131-152",
      "type": "function_declaration",
      "name": "useCropSize",
      "text": "function useCropSize(breakpoint: number) {\n  const [value, setValue] = React.useState<number>(360)\n\n  React.useEffect(() => {\n    function handleResize() {\n      if (window.innerWidth > breakpoint) {\n        setValue(360)\n      } else {\n        setValue(240)\n      }\n    }\n\n    handleResize()\n\n    window.addEventListener('resize', handleResize)\n\n    return () => window.removeEventListener('resize', handleResize)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return { width: value, height: value }\n}",
      "startLine": 131,
      "endLine": 152,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/AvatarChangeModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@135-141",
      "type": "function_declaration",
      "name": "handleResize",
      "text": "function handleResize() {\n      if (window.innerWidth > breakpoint) {\n        setValue(360)\n      } else {\n        setValue(240)\n      }\n    }",
      "startLine": 135,
      "endLine": 141,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/AvatarChangeModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@38-179",
      "type": "function_declaration",
      "name": "ChangeEmailView",
      "text": "function ChangeEmailView({ show, onSuccess, onClose }: IProps) {\n  const [fetchUserDetailsByEmail] =\n    useLazyQuery<GetUserByEmailQuery>(GET_USER_BY_EMAIL)\n  const intl = useIntl()\n  const [emailAddress, setEmailAddress] = React.useState(EMPTY_STRING)\n  const [unknownError, setUnknownError] = React.useState(false)\n  const [isInvalidEmailAddress, setIsInvalidEmailAddress] =\n    React.useState(false)\n  const [\n    showDuplicateEmailErrorNotification,\n    setShowDuplicateEmailErrorNotification\n  ] = React.useState(false)\n  const dispatch = useDispatch()\n  const userDetails = useSelector(getUserDetails)\n  const language = useSelector(getLanguage)\n\n  const onChangeEmailAddress = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const emailAddress = event.target.value\n    setEmailAddress(emailAddress)\n    setIsInvalidEmailAddress(!isAValidEmailAddressFormat(emailAddress))\n    if (showDuplicateEmailErrorNotification) {\n      setShowDuplicateEmailErrorNotification(false)\n    }\n  }\n  const restoreState = () => {\n    setEmailAddress(EMPTY_STRING)\n    setIsInvalidEmailAddress(false)\n    setUnknownError(false)\n    setShowDuplicateEmailErrorNotification(false)\n  }\n  const toggleDuplicateEmailErrorNotification = () => {\n    setShowDuplicateEmailErrorNotification((prevValue) => !prevValue)\n  }\n  const toggleUnknownErrorNotification = () => {\n    setUnknownError((prevValue) => !prevValue)\n  }\n  const continueButtonHandler = async (emailAddress: string) => {\n    const { data: userData, error } = await fetchUserDetailsByEmail({\n      variables: { email: emailAddress }\n    })\n    if (error) {\n      setUnknownError(true)\n      return\n    }\n    const emailExists = userData?.getUserByEmail\n\n    if (!emailExists) {\n      const notificationEvent = NotificationEvent.CHANGE_EMAIL_ADDRESS\n      dispatch(\n        sendVerifyCode(\n          [\n            {\n              use: language,\n              family: String(userDetails?.name?.[0].familyName),\n              given: [String(userDetails?.name?.[0].firstNames)]\n            }\n          ],\n          notificationEvent,\n          userDetails?.mobile\n            ? convertToMSISDN(userDetails?.mobile, window.config.COUNTRY)\n            : undefined,\n          emailAddress\n        )\n      )\n      onSuccess(emailAddress)\n    } else {\n      toggleDuplicateEmailErrorNotification()\n      setUnknownError(false)\n    }\n  }\n  React.useEffect(() => {\n    if (!show) {\n      restoreState()\n    }\n  }, [show])\n\n  return (\n    <ResponsiveModal\n      id=\"ChangeEmailAddressModal\"\n      show={show}\n      title={intl.formatMessage(messages.changeEmailLabel)}\n      actions={[\n        <TertiaryButton key=\"cancel\" id=\"modal_cancel\" onClick={onClose}>\n          {intl.formatMessage(buttonMessages.cancel)}\n        </TertiaryButton>,\n        <PrimaryButton\n          id=\"continue-button\"\n          key=\"continue\"\n          onClick={() => {\n            continueButtonHandler(emailAddress)\n          }}\n          disabled={!Boolean(emailAddress.length) || isInvalidEmailAddress}\n        >\n          {intl.formatMessage(buttonMessages.continueButton)}\n        </PrimaryButton>\n      ]}\n      handleClose={onClose}\n      contentHeight={150}\n      contentScrollableY={true}\n    >\n      <InputField\n        id=\"emailAddress\"\n        touched={true}\n        required={false}\n        optionalLabel=\"\"\n        error={\n          isInvalidEmailAddress\n            ? intl.formatMessage(messages.emailAddressChangeFormValidationMsg)\n            : ''\n        }\n      >\n        <TextInput\n          id=\"EmailAddressTextInput\"\n          touched={true}\n          error={isInvalidEmailAddress}\n          value={emailAddress}\n          onChange={onChangeEmailAddress}\n        />\n      </InputField>\n      {showDuplicateEmailErrorNotification && (\n        <Toast\n          id=\"duplicate-email-error-notification\"\n          type=\"warning\"\n          onClose={() => toggleDuplicateEmailErrorNotification()}\n        >\n          {intl.formatMessage(messages.duplicateUserEmailErrorMessege, {\n            email: emailAddress\n          })}\n        </Toast>\n      )}\n      {unknownError && (\n        <Toast\n          id=\"unknown-error-notification\"\n          type=\"warning\"\n          onClose={() => toggleUnknownErrorNotification()}\n        >\n          {intl.formatMessage(errorMessages.unknownErrorTitle)}\n        </Toast>\n      )}\n    </ResponsiveModal>\n  )\n}",
      "startLine": 38,
      "endLine": 179,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/ChangeEmailModal/ChangeEmailView.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@30-81",
      "type": "function_declaration",
      "name": "EmailAddress",
      "text": "function EmailAddress() {\n  const intl = useIntl()\n  const isOnline = useOnlineStatus()\n  const email = useSelector<IStoreState, string>(\n    (state) => state.profile.userDetails?.email || ''\n  )\n\n  const [showSuccessNotification, setShowSuccessNotification] =\n    React.useState(false)\n  const [showModal, setShowModal] = React.useState(false)\n  const toggleSuccessNotification = () => {\n    setShowSuccessNotification((prevValue) => !prevValue)\n  }\n  const toggleChangeEmailModal = () => {\n    setShowModal((prevValue) => !prevValue)\n  }\n  const handleSuccess = () => {\n    toggleChangeEmailModal()\n    toggleSuccessNotification()\n  }\n\n  return (\n    <>\n      <ListViewItemSimplified\n        label={\n          <LabelContainer>\n            {intl.formatMessage(constantsMessages.labelEmail)}\n          </LabelContainer>\n        }\n        value={<ValueContainer>{email}</ValueContainer>}\n        actions={\n          <DynamicHeightLinkButton\n            onClick={toggleChangeEmailModal}\n            disabled={!isOnline}\n          >\n            {intl.formatMessage(buttonMessages.change)}\n          </DynamicHeightLinkButton>\n        }\n      />\n      <ChangeEmailModal\n        show={showModal}\n        onClose={toggleChangeEmailModal}\n        onSuccess={handleSuccess}\n      />\n      {showSuccessNotification && (\n        <Toast type=\"success\" onClose={toggleSuccessNotification}>\n          <FormattedMessage {...userMessages.emailAddressUpdated} />\n        </Toast>\n      )}\n    </>\n  )\n}",
      "startLine": 30,
      "endLine": 81,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/items/EmailAddress.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@27-102",
      "type": "function_declaration",
      "name": "IssueCertificate",
      "text": "function IssueCertificate() {\n  const navigate = useNavigate()\n  const intl = useIntl()\n\n  const { pageId, registrationId } = useParams<{\n    registrationId: string\n    pageId: string\n  }>()\n\n  const declaration = useDeclaration<IPrintableDeclaration | undefined>(\n    registrationId\n  )\n\n  if (!declaration) {\n    return (\n      <Navigate\n        to={formatUrl(REGISTRAR_HOME_TAB, {\n          tabId: WORKQUEUE_TABS.readyToIssue,\n          selectorId: ''\n        })}\n      />\n    )\n  }\n\n  return (\n    <Frame\n      header={\n        <AppBar\n          mobileTitle={intl.formatMessage(issueMessages.issueCertificate)}\n          mobileLeft={<HistoryNavigator hideForward={true} />}\n          mobileRight={\n            <Button\n              size=\"medium\"\n              type=\"icon\"\n              onClick={() =>\n                navigate(\n                  generateGoToHomeTabUrl({\n                    tabId: WORKQUEUE_TABS.readyToIssue\n                  })\n                )\n              }\n            >\n              <Icon name={'X'} weight={'bold'} />\n            </Button>\n          }\n          desktopTitle={intl.formatMessage(issueMessages.issueCertificate)}\n          desktopLeft={<HistoryNavigator hideForward={true} />}\n          desktopRight={\n            <Button\n              size=\"medium\"\n              type=\"icon\"\n              onClick={() =>\n                navigate(\n                  generateGoToHomeTabUrl({\n                    tabId: WORKQUEUE_TABS.readyToIssue\n                  })\n                )\n              }\n            >\n              <Icon name={'X'} weight={'bold'} />\n            </Button>\n          }\n        />\n      }\n      skipToContentText={intl.formatMessage(\n        constantsMessages.skipToMainContent\n      )}\n    >\n      {pageId === 'collector' ? (\n        <IssueCollectorForm declaration={declaration} />\n      ) : (\n        <IssueCollectorFormForOthers declaration={declaration} />\n      )}\n    </Frame>\n  )\n}",
      "startLine": 27,
      "endLine": 102,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/IssueCertificate/IssueCertificate.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@35-89",
      "type": "function_declaration",
      "name": "ImageLoaderComp",
      "text": "function ImageLoaderComp({\n  children,\n  onImageLoaded,\n  onLoadingStarted,\n  onError,\n  intl\n}: IProps) {\n  const fileUploader = React.useRef<HTMLInputElement>(null)\n\n  const handleSelectFile = async (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const { files } = event.target\n    if (files && files.length > 0) {\n      try {\n        onLoadingStarted && onLoadingStarted()\n        const image = await validateImage(files[0])\n        onImageLoaded({ type: files[0].type, data: image })\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message === ERROR_TYPES.OVERSIZED) {\n            onError(\n              intl.formatMessage(messages.overSized, {\n                maxSize: bytesToMB(IMAGE_UPLOAD_MAX_SIZE_IN_BYTES)\n              })\n            )\n          } else {\n            onError(\n              intl.formatMessage(messages.imageFormat, {\n                maxSize: bytesToMB(IMAGE_UPLOAD_MAX_SIZE_IN_BYTES)\n              })\n            )\n          }\n        }\n      } finally {\n        fileUploader.current!.value = ''\n      }\n    }\n  }\n\n  return (\n    /* eslint-disable jsx-a11y/click-events-have-key-events */\n    /* eslint-disable jsx-a11y/no-static-element-interactions */\n    <div onClick={() => fileUploader.current!.click()}>\n      {children}\n      <HiddenInput\n        ref={fileUploader}\n        id=\"image_file_uploader_field\"\n        type=\"file\"\n        accept={ALLOWED_IMAGE_TYPE.join(',')}\n        onChange={handleSelectFile}\n      />\n    </div>\n  )\n}",
      "startLine": 35,
      "endLine": 89,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/ImageLoader.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@27-59",
      "type": "function_declaration",
      "name": "ChangeEmailModal",
      "text": "function ChangeEmailModal({ show, onClose, onSuccess }: IProps) {\n  const [view, setView] = React.useState(VIEW_TYPE.CHANGE_EMAIL)\n  const [emailAddress, setEmailAddress] = React.useState(EMPTY_STRING)\n  const onSuccessChangeEmail = (emailAddress: string) => {\n    setEmailAddress(emailAddress)\n    setView(VIEW_TYPE.VERIFY_NUMBER)\n  }\n  const restoreState = () => {\n    setView(VIEW_TYPE.CHANGE_EMAIL)\n    setEmailAddress(EMPTY_STRING)\n  }\n  React.useEffect(() => {\n    if (!show) {\n      restoreState()\n    }\n  }, [show])\n\n  return (\n    <>\n      <ChangeEmailView\n        show={show && view === VIEW_TYPE.CHANGE_EMAIL}\n        onSuccess={onSuccessChangeEmail}\n        onClose={onClose}\n      />\n      <VerifyCodeView\n        show={show && view === VIEW_TYPE.VERIFY_NUMBER}\n        onSuccess={onSuccess}\n        onClose={onClose}\n        data={{ email: emailAddress }}\n      />\n    </>\n  )\n}",
      "startLine": 27,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/ChangeEmailModal/ChangeEmailModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@24-45",
      "type": "function_declaration",
      "name": "Role",
      "text": "function Role() {\n  const intl = useIntl()\n  const role = useSelector<IStoreState, string>((state) => {\n    const userDetails = getUserDetails(state)\n    return (userDetails && intl.formatMessage(userDetails.role.label)) || ''\n  })\n  return (\n    <ListViewItemSimplified\n      label={\n        <LabelContainer>\n          {intl.formatMessage(constantsMessages.labelRole)}\n        </LabelContainer>\n      }\n      value={<ValueContainer>{role}</ValueContainer>}\n      actions={\n        <DynamicHeightLinkButton disabled>\n          {intl.formatMessage(buttonMessages.change)}\n        </DynamicHeightLinkButton>\n      }\n    />\n  )\n}",
      "startLine": 24,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/items/Role.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@31-137",
      "type": "function_declaration",
      "name": "ProfileImage",
      "text": "function ProfileImage() {\n  const intl = useIntl()\n  const [showChangeAvatar, setShowChangeAvatar] = React.useState(false)\n  const [imageUploading, setImageUploading] = React.useState(false)\n  const [image, setImage] = React.useState<IImage>({\n    type: '',\n    data: ''\n  })\n  const [imageLoadingError, setImageLoadingError] = React.useState('')\n  const toggleAvatarChangeModal = () => {\n    setShowChangeAvatar((prevValue) => !prevValue)\n  }\n  const [showSuccessNotification, setShowSuccessNotification] =\n    React.useState(false)\n\n  const toggleSuccessNotification = () => {\n    setShowSuccessNotification((prevValue) => !prevValue)\n  }\n\n  const handleConfirmAvatarChange = () => {\n    setImageUploading(true)\n    toggleAvatarChangeModal()\n    toggleSuccessNotification()\n  }\n\n  const englishName = useUserName()\n\n  const userDetails = useSelector<IStoreState, UserDetails | null>(\n    getUserDetails\n  )\n  const dispatch = useDispatch()\n\n  const changeAvatar = React.useCallback(\n    (avatar: IImage) => {\n      if (userDetails) {\n        setImageUploading(false)\n        dispatch(\n          modifyUserDetails({\n            ...userDetails,\n            avatar\n          })\n        )\n      }\n    },\n    [dispatch, userDetails]\n  )\n\n  const handleImageLoaded = (image: IImage) => {\n    setImage(image)\n  }\n\n  return (\n    <>\n      <TopAlignedListViewItemSimplified\n        label={\n          <LabelContainer>\n            {intl.formatMessage(userMessages.profileImage)}\n          </LabelContainer>\n        }\n        value={\n          <ValueContainer>\n            <Avatar avatar={userDetails?.avatar} name={englishName} />\n          </ValueContainer>\n        }\n        actions={\n          <ImageLoader\n            onImageLoaded={handleImageLoaded}\n            onLoadingStarted={toggleAvatarChangeModal}\n            onError={(imageLoadingError) =>\n              setImageLoadingError(imageLoadingError)\n            }\n          >\n            <DynamicHeightLinkButton>\n              {intl.formatMessage(buttonMessages.change)}\n            </DynamicHeightLinkButton>\n          </ImageLoader>\n        }\n      />\n      <AvatarChangeModal\n        cancelAvatarChangeModal={toggleAvatarChangeModal}\n        showChangeAvatar={showChangeAvatar}\n        imgSrc={image}\n        onImgSrcChanged={(image) => setImage(image)}\n        error={imageLoadingError}\n        onErrorChanged={(imageLoadingError) =>\n          setImageLoadingError(imageLoadingError)\n        }\n        onConfirmAvatarChange={handleConfirmAvatarChange}\n        onAvatarChanged={changeAvatar}\n      />\n      {showSuccessNotification && (\n        <Toast\n          type={imageUploading ? 'loading' : 'success'}\n          onClose={\n            imageUploading ? undefined : () => toggleSuccessNotification()\n          }\n        >\n          <FormattedMessage\n            {...(imageUploading\n              ? userMessages.avatarUpdating\n              : userMessages.avatarUpdated)}\n          />\n        </Toast>\n      )}\n    </>\n  )\n}",
      "startLine": 31,
      "endLine": 137,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/items/ProfileImage.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@33-60",
      "type": "function_declaration",
      "name": "SettingsPage",
      "text": "function SettingsPage() {\n  const intl = useIntl()\n  return (\n    <Frame\n      header={<Header title={intl.formatMessage(messages.settingsTitle)} />}\n      navigation={<Navigation />}\n      skipToContentText={intl.formatMessage(\n        constantsMessages.skipToMainContent\n      )}\n    >\n      <Content\n        title={intl.formatMessage(messages.settingsTitle)}\n        showTitleOnMobile={true}\n      >\n        <ListViewSimplified>\n          <Name />\n          <PhoneNumber />\n          <EmailAddress />\n          <Role />\n          <Language />\n          <Password />\n          <PIN />\n          <ProfileImage />\n        </ListViewSimplified>\n      </Content>\n    </Frame>\n  )\n}",
      "startLine": 33,
      "endLine": 60,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/SettingsPage.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@78-100",
      "type": "function_declaration",
      "name": "continueButtonHandler",
      "text": "function continueButtonHandler() {\n    const relationship =\n      declaration.data.registration.certificates[0].collector?.type\n    const event = declaration.event\n\n    if (!relationship) return\n    if (relationship === 'OTHER') {\n      navigate(\n        generateIssueCertificateUrl({\n          registrationId: declaration.id,\n          pageId: 'otherCollector'\n        })\n      )\n    } else {\n      navigate(\n        generateVerifyIssueCollectorUrl({\n          registrationId: declaration.id,\n          event,\n          collector: relationship\n        })\n      )\n    }\n  }",
      "startLine": 78,
      "endLine": 100,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/IssueCertificate/IssueCollectorForm/IssueCollectorForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@22-41",
      "type": "function_declaration",
      "name": "Name",
      "text": "function Name() {\n  const intl = useIntl()\n  const englishName = useUserName()\n\n  return (\n    <ListViewItemSimplified\n      label={\n        <LabelContainer>\n          {intl.formatMessage(userMessages.labelEnglishName)}\n        </LabelContainer>\n      }\n      value={<ValueContainer>{englishName}</ValueContainer>}\n      actions={\n        <DynamicHeightLinkButton disabled>\n          {intl.formatMessage(buttonMessages.change)}\n        </DynamicHeightLinkButton>\n      }\n    />\n  )\n}",
      "startLine": 22,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/items/Name.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@30-81",
      "type": "function_declaration",
      "name": "PhoneNumber",
      "text": "function PhoneNumber() {\n  const intl = useIntl()\n  const isOnline = useOnlineStatus()\n  const mobile = useSelector<IStoreState, string>(\n    (state) => state.profile.userDetails?.mobile || ''\n  )\n\n  const [showSuccessNotification, setShowSuccessNotification] =\n    React.useState(false)\n  const [showModal, setShowModal] = React.useState(false)\n  const toggleSuccessNotification = () => {\n    setShowSuccessNotification((prevValue) => !prevValue)\n  }\n  const toggleChangePhoneModal = () => {\n    setShowModal((prevValue) => !prevValue)\n  }\n  const handleSuccess = () => {\n    toggleChangePhoneModal()\n    toggleSuccessNotification()\n  }\n\n  return (\n    <>\n      <ListViewItemSimplified\n        label={\n          <LabelContainer>\n            {intl.formatMessage(constantsMessages.labelPhone)}\n          </LabelContainer>\n        }\n        value={<ValueContainer>{mobile}</ValueContainer>}\n        actions={\n          <DynamicHeightLinkButton\n            onClick={toggleChangePhoneModal}\n            disabled={!isOnline}\n          >\n            {intl.formatMessage(buttonMessages.change)}\n          </DynamicHeightLinkButton>\n        }\n      />\n      <ChangePhoneModal\n        show={showModal}\n        onClose={toggleChangePhoneModal}\n        onSuccess={handleSuccess}\n      />\n      {showSuccessNotification && (\n        <Toast type=\"success\" onClose={toggleSuccessNotification}>\n          <FormattedMessage {...userMessages.phoneNumberUpdated} />\n        </Toast>\n      )}\n    </>\n  )\n}",
      "startLine": 30,
      "endLine": 81,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/items/PhoneNumber.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@40-156",
      "type": "function_declaration",
      "name": "Language",
      "text": "function Language() {\n  const [showModal, setShowModal] = React.useState(false)\n  const [showSuccessNotification, setShowSuccessNotification] =\n    React.useState(false)\n  const intl = useIntl()\n  const languages = useSelector(getLanguages)\n  const language = useSelector(getLanguage)\n  const [selectedLanguage, setSelectedLanguage] =\n    React.useState<string>(language)\n  const toggleLanguageModal = () => {\n    setShowModal((prevValue) => !prevValue)\n  }\n\n  const cancelLanguageSettings = () => {\n    setSelectedLanguage(language)\n    toggleLanguageModal()\n  }\n\n  const toggleSuccessNotification = () => {\n    setShowSuccessNotification((prevValue) => !prevValue)\n  }\n\n  const userDetails = useSelector(getUserDetails)\n\n  const dispatch = useDispatch()\n\n  const changeLanguage = () => {\n    if (userDetails) {\n      dispatch(changeLanguageActionCreator({ language: selectedLanguage }))\n      toggleLanguageModal()\n      toggleSuccessNotification()\n    }\n  }\n\n  const availableLangs = getAvailableLanguages()\n  const langChoice = availableLangs.reduce<ILanguageOptions[]>(\n    (choices, lang) =>\n      languages[lang]\n        ? [\n            ...choices,\n            {\n              value: lang,\n              label: intl.formatMessage(userMessages.language, {\n                language: languages[lang].lang\n              })\n            }\n          ]\n        : choices,\n    []\n  )\n\n  return (\n    <>\n      <ListViewItemSimplified\n        label={\n          <LabelContainer>\n            {intl.formatMessage(userMessages.systemLanguage)}\n          </LabelContainer>\n        }\n        value={\n          <ValueContainer>\n            {intl.formatMessage(userMessages.language, {\n              language: languages[language].lang\n            })}\n          </ValueContainer>\n        }\n        actions={\n          <DynamicHeightLinkButton\n            id=\"BtnChangeLanguage\"\n            onClick={toggleLanguageModal}\n          >\n            {intl.formatMessage(buttonMessages.change)}\n          </DynamicHeightLinkButton>\n        }\n      />\n      <ResponsiveModal\n        id=\"ChangeLanguageModal\"\n        title={intl.formatMessage(userMessages.changeLanguageTitle)}\n        show={showModal}\n        actions={[\n          <TertiaryButton\n            key=\"cancel\"\n            id=\"modal_cancel\"\n            onClick={cancelLanguageSettings}\n          >\n            {intl.formatMessage(buttonMessages.cancel)}\n          </TertiaryButton>,\n          <PrimaryButton key=\"apply\" id=\"apply_change\" onClick={changeLanguage}>\n            {intl.formatMessage(buttonMessages.apply)}\n          </PrimaryButton>\n        ]}\n        handleClose={cancelLanguageSettings}\n        contentHeight={175}\n        contentScrollableY={true}\n      >\n        <Message>\n          {intl.formatMessage(userMessages.changeLanguageMessege)}\n        </Message>\n        <Label>{intl.formatMessage(constantsMessages.labelLanguage)}</Label>\n        <Select\n          id=\"SelectLanguage\"\n          onChange={(val: string) => {\n            setSelectedLanguage(val)\n          }}\n          value={selectedLanguage}\n          options={langChoice}\n          placeholder=\"\"\n        />\n      </ResponsiveModal>\n      {showSuccessNotification && (\n        <Toast type=\"success\" onClose={toggleSuccessNotification}>\n          <FormattedMessage {...userMessages.changeLanguageSuccessMessage} />\n        </Toast>\n      )}\n    </>\n  )\n}",
      "startLine": 40,
      "endLine": 156,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/items/Language.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@236-244",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (eventType && eventType.toLowerCase()) {\n    case 'birth':\n    default:\n      return EventType.Birth\n    case 'death':\n      return EventType.Death\n    case 'marriage':\n      return EventType.Marriage\n  }",
      "startLine": 236,
      "endLine": 244,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/IssueCertificate/IssueCollectorForm/IssuePayment.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@21-38",
      "type": "function_declaration",
      "name": "PIN",
      "text": "function PIN() {\n  const intl = useIntl()\n  return (\n    <ListViewItemSimplified\n      label={\n        <LabelContainer>\n          {intl.formatMessage(constantsMessages.labelPin)}\n        </LabelContainer>\n      }\n      value={<ValueContainer>****</ValueContainer>}\n      actions={\n        <DynamicHeightLinkButton disabled>\n          {intl.formatMessage(buttonMessages.change)}\n        </DynamicHeightLinkButton>\n      }\n    />\n  )\n}",
      "startLine": 21,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/items/PIN.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@27-59",
      "type": "function_declaration",
      "name": "ChangePhoneModal",
      "text": "function ChangePhoneModal({ show, onClose, onSuccess }: IProps) {\n  const [view, setView] = React.useState(VIEW_TYPE.CHANGE_NUMBER)\n  const [phoneNumber, setPhoneNumber] = React.useState(EMPTY_STRING)\n  const onSuccessChangeNumber = (phoneNumber: string) => {\n    setPhoneNumber(phoneNumber)\n    setView(VIEW_TYPE.VERIFY_NUMBER)\n  }\n  const restoreState = () => {\n    setView(VIEW_TYPE.CHANGE_NUMBER)\n    setPhoneNumber(EMPTY_STRING)\n  }\n  React.useEffect(() => {\n    if (!show) {\n      restoreState()\n    }\n  }, [show])\n\n  return (\n    <>\n      <ChangeNumberView\n        show={show && view === VIEW_TYPE.CHANGE_NUMBER}\n        onSuccess={onSuccessChangeNumber}\n        onClose={onClose}\n      />\n      <VerifyCodeView\n        show={show && view === VIEW_TYPE.VERIFY_NUMBER}\n        onSuccess={onSuccess}\n        onClose={onClose}\n        data={{ phoneNumber }}\n      />\n    </>\n  )\n}",
      "startLine": 27,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/ChangePhoneModal/ChangePhoneModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@28-79",
      "type": "function_declaration",
      "name": "Password",
      "text": "function Password() {\n  const intl = useIntl()\n  const isOnline = useOnlineStatus()\n  const [showModal, setShowModal] = React.useState(false)\n  const [showSuccessNotification, setShowSuccessNotification] =\n    React.useState(false)\n\n  const togglePasswordChangeModal = () => {\n    setShowModal((prevValue) => !prevValue)\n  }\n\n  const toggleSuccessNotification = () => {\n    setShowSuccessNotification((prevValue) => !prevValue)\n  }\n\n  const changePassword = () => {\n    togglePasswordChangeModal()\n    toggleSuccessNotification()\n  }\n\n  return (\n    <>\n      <ListViewItemSimplified\n        label={\n          <LabelContainer>\n            {intl.formatMessage(constantsMessages.labelPassword)}\n          </LabelContainer>\n        }\n        value={<ValueContainer>********</ValueContainer>}\n        actions={\n          <DynamicHeightLinkButton\n            id=\"BtnChangePassword\"\n            onClick={togglePasswordChangeModal}\n            disabled={!isOnline}\n          >\n            {intl.formatMessage(buttonMessages.change)}\n          </DynamicHeightLinkButton>\n        }\n      />\n      <PasswordChangeModal\n        togglePasswordChangeModal={togglePasswordChangeModal}\n        showPasswordChange={showModal}\n        passwordChanged={changePassword}\n      />\n      {showSuccessNotification && (\n        <Toast type=\"success\" onClose={toggleSuccessNotification}>\n          <FormattedMessage {...userMessages.passwordUpdated} />\n        </Toast>\n      )}\n    </>\n  )\n}",
      "startLine": 28,
      "endLine": 79,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/items/Password.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@38-188",
      "type": "function_declaration",
      "name": "ChangeNumberView",
      "text": "function ChangeNumberView({ show, onSuccess, onClose }: IProps) {\n  const [fetchUserDetailsByMobile] =\n    useLazyQuery<GetUserByMobileQuery>(GET_USER_BY_MOBILE)\n  const intl = useIntl()\n  const [phoneNumber, setPhoneNumber] = React.useState(EMPTY_STRING)\n  const [unknownError, setUnknownError] = React.useState(false)\n  const [isInvalidPhoneNumber, setIsInvalidPhoneNumber] = React.useState(false)\n  const userDetails = useSelector(getUserDetails)\n  const language = useSelector(getLanguage)\n  const [\n    showDuplicateMobileErrorNotification,\n    setShowDuplicateMobileErrorNotification\n  ] = React.useState(false)\n  const dispatch = useDispatch()\n  const onChangePhoneNumber = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const phoneNumber = event.target.value\n    setPhoneNumber(phoneNumber)\n    setIsInvalidPhoneNumber(!isAValidPhoneNumberFormat(phoneNumber))\n    if (showDuplicateMobileErrorNotification) {\n      setShowDuplicateMobileErrorNotification(false)\n    }\n  }\n  const restoreState = () => {\n    setPhoneNumber(EMPTY_STRING)\n    setIsInvalidPhoneNumber(false)\n    setUnknownError(false)\n    setShowDuplicateMobileErrorNotification(false)\n  }\n  const toggleDuplicateMobileErrorNotification = () => {\n    setShowDuplicateMobileErrorNotification((prevValue) => !prevValue)\n  }\n  const toggleUnknownErrorNotification = () => {\n    setUnknownError((prevValue) => !prevValue)\n  }\n  const continueButtonHandler = async (phoneNumber: string) => {\n    const formattedNumber = convertToMSISDN(phoneNumber, window.config.COUNTRY)\n    const { data: userData, error } = await fetchUserDetailsByMobile({\n      variables: { mobile: formattedNumber }\n    })\n    if (error) {\n      setUnknownError(true)\n      return\n    }\n    const mobileNumberExist = userData?.getUserByMobile\n\n    if (!mobileNumberExist) {\n      const notificationEvent = NotificationEvent.CHANGE_PHONE_NUMBER\n\n      dispatch(\n        sendVerifyCode(\n          [\n            {\n              use: language,\n              family: String(userDetails?.name?.[0].familyName),\n              given: [String(userDetails?.name?.[0].firstNames)]\n            }\n          ],\n          notificationEvent,\n          convertToMSISDN(phoneNumber, window.config.COUNTRY),\n          String(userDetails?.email)\n        )\n      )\n      onSuccess(phoneNumber)\n    } else {\n      toggleDuplicateMobileErrorNotification()\n      setUnknownError(false)\n    }\n  }\n  React.useEffect(() => {\n    if (!show) {\n      restoreState()\n    }\n  }, [show])\n\n  return (\n    <ResponsiveModal\n      id=\"ChangePhoneNumberModal\"\n      show={show}\n      title={intl.formatMessage(messages.changePhoneLabel)}\n      actions={[\n        <TertiaryButton key=\"cancel\" id=\"modal_cancel\" onClick={onClose}>\n          {intl.formatMessage(buttonMessages.cancel)}\n        </TertiaryButton>,\n        <PrimaryButton\n          id=\"continue-button\"\n          key=\"continue\"\n          onClick={() => {\n            continueButtonHandler(phoneNumber)\n          }}\n          disabled={!Boolean(phoneNumber.length) || isInvalidPhoneNumber}\n        >\n          {intl.formatMessage(buttonMessages.continueButton)}\n        </PrimaryButton>\n      ]}\n      handleClose={onClose}\n      contentHeight={150}\n      contentScrollableY={true}\n    >\n      <InputField\n        id=\"phoneNumber\"\n        touched={true}\n        required={false}\n        optionalLabel=\"\"\n        error={\n          isInvalidPhoneNumber\n            ? intl.formatMessage(messages.phoneNumberChangeFormValidationMsg, {\n                num: intl.formatMessage({\n                  defaultMessage: '10',\n                  id: 'phone.digit'\n                }),\n                start: intl.formatMessage({\n                  defaultMessage: '0(4|5)',\n                  description: 'Should starts with',\n                  id: 'phone.start'\n                })\n              })\n            : ''\n        }\n      >\n        <TextInput\n          id=\"PhoneNumber\"\n          type=\"number\"\n          touched={true}\n          error={isInvalidPhoneNumber}\n          value={phoneNumber}\n          onChange={onChangePhoneNumber}\n        />\n      </InputField>\n      {showDuplicateMobileErrorNotification && (\n        <Toast\n          id=\"duplicate-mobile-error-notification\"\n          type=\"warning\"\n          onClose={() => toggleDuplicateMobileErrorNotification()}\n        >\n          {intl.formatMessage(messages.duplicateUserMobileErrorMessege, {\n            number: phoneNumber\n          })}\n        </Toast>\n      )}\n      {unknownError && (\n        <Toast\n          id=\"unknown-error-notification\"\n          type=\"warning\"\n          onClose={() => toggleUnknownErrorNotification()}\n        >\n          {intl.formatMessage(errorMessages.unknownErrorTitle)}\n        </Toast>\n      )}\n    </ResponsiveModal>\n  )\n}",
      "startLine": 38,
      "endLine": 188,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/ChangePhoneModal/ChangeNumberView.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@45-185",
      "type": "function_declaration",
      "name": "VerifyCodeView",
      "text": "function VerifyCodeView({ show, onSuccess, onClose, data }: IProps) {\n  const intl = useIntl()\n  const { phoneNumber, email } = data\n  const userDetails = useSelector(getUserDetails)\n  const nonce = useSelector(getUserNonce)\n  const [verifyCode, setVerifyCode] = React.useState(EMPTY_STRING)\n  const [isInvalidLength, setIsInvalidLength] = React.useState(false)\n  const [errorOccured, setErrorOccured] = React.useState(false)\n  const dispatch = useDispatch()\n  const onChangeVerifyCode = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const verifyCode = event.target.value\n    setVerifyCode(verifyCode)\n    setIsInvalidLength(verifyCode.length === 6)\n  }\n  const restoreState = () => {\n    setVerifyCode(EMPTY_STRING)\n    setIsInvalidLength(false)\n    setErrorOccured(false)\n  }\n  const phoneChangeCompleted = () => {\n    if (userDetails && phoneNumber) {\n      dispatch(\n        modifyUserDetails({\n          ...userDetails,\n          mobile: convertToMSISDN(phoneNumber, window.config.COUNTRY)\n        })\n      )\n    }\n    onSuccess()\n  }\n\n  const emailChangeCompleted = () => {\n    if (userDetails) {\n      dispatch(\n        modifyUserDetails({\n          ...userDetails,\n          email: email\n        })\n      )\n    }\n    onSuccess()\n  }\n  React.useEffect(() => {\n    if (!show) {\n      restoreState()\n    }\n  }, [show])\n\n  return (\n    <ResponsiveModal\n      id=\"VerifyCodeModal\"\n      show={show}\n      title={intl.formatMessage(messages.verifyPhoneLabel)}\n      actions={[\n        <TertiaryButton key=\"cancel\" id=\"modal_cancel\" onClick={onClose}>\n          {intl.formatMessage(buttonMessages.cancel)}\n        </TertiaryButton>,\n        <Mutation<\n          ChangePasswordMutation,\n          ChangePhoneMutationVariables | ChangeEmailMutationVariables\n        >\n          key=\"change-phone-mutation\"\n          mutation={phoneNumber ? changePhoneMutation : changeEmailMutation}\n          onCompleted={\n            phoneNumber ? phoneChangeCompleted : emailChangeCompleted\n          }\n          onError={() => setErrorOccured(true)}\n        >\n          {(changePhoneOrEmail) => {\n            return (\n              <PrimaryButton\n                id=\"verify-button\"\n                key=\"verify\"\n                onClick={() => {\n                  if (userDetails?.userMgntUserID) {\n                    if (phoneNumber) {\n                      changePhoneOrEmail({\n                        variables: {\n                          userId: userDetails.userMgntUserID,\n                          phoneNumber: convertToMSISDN(\n                            phoneNumber,\n                            window.config.COUNTRY\n                          ),\n                          nonce: nonce,\n                          verifyCode: verifyCode\n                        }\n                      })\n                    } else if (email) {\n                      changePhoneOrEmail({\n                        variables: {\n                          userId: userDetails.userMgntUserID,\n                          email: email,\n                          nonce: nonce,\n                          verifyCode: verifyCode\n                        }\n                      })\n                    }\n                  }\n                }}\n                disabled={!Boolean(verifyCode.length) || !isInvalidLength}\n              >\n                {intl.formatMessage(buttonMessages.verify)}\n              </PrimaryButton>\n            )\n          }}\n        </Mutation>\n      ]}\n      handleClose={onClose}\n      contentHeight={150}\n      contentScrollableY={true}\n    >\n      <Message>\n        {window.config.USER_NOTIFICATION_DELIVERY_METHOD === 'sms'\n          ? intl.formatMessage(messages.confirmationPhoneMsg, {\n              num: phoneNumber || userDetails?.mobile\n            })\n          : intl.formatMessage(messages.confirmationEmailMsg, {\n              email: email || userDetails?.email\n            })}\n      </Message>\n      <InputField\n        id=\"verifyCode\"\n        touched={true}\n        required={false}\n        optionalLabel=\"\"\n        error={\n          errorOccured ? intl.formatMessage(messages.incorrectVerifyCode) : ''\n        }\n      >\n        <TextInput\n          id=\"VerifyCode\"\n          type=\"number\"\n          touched={true}\n          error={errorOccured}\n          value={verifyCode}\n          onChange={onChangeVerifyCode}\n        />\n      </InputField>\n    </ResponsiveModal>\n  )\n}",
      "startLine": 45,
      "endLine": 185,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/ChangePhoneModal/VerifyCodeView.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@54-72",
      "type": "function_declaration",
      "name": "getGroupWithInitialValues",
      "text": "function getGroupWithInitialValues(\n  section: IFormSection,\n  declaration: IDeclaration,\n  config: IOfflineData,\n  user: UserDetails | null\n) {\n  const group = section.groups[0]\n\n  return {\n    ...group,\n    fields: replaceInitialValues(\n      group.fields,\n      declaration.data[section.id] || {},\n      declaration.data,\n      config,\n      user\n    )\n  }\n}",
      "startLine": 54,
      "endLine": 72,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/CorrectionReasonForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@74-167",
      "type": "function_declaration",
      "name": "CorrectionReasonFormComponent",
      "text": "function CorrectionReasonFormComponent(props: IFullProps) {\n  const { declaration, intl } = props\n  const config = useSelector(getOfflineData)\n  const user = useSelector(getUserDetails)\n  const navigate = useNavigate()\n\n  const section = correctReasonSection\n\n  const group = React.useMemo(\n    () => getGroupWithInitialValues(section, declaration, config, user),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  const modifyDeclaration = (\n    sectionData: IFormSectionData,\n    activeSection: IFormSection,\n    declaration: IDeclaration\n  ) => {\n    props.modifyDeclaration({\n      ...declaration,\n      data: {\n        ...declaration.data,\n        [activeSection.id]: {\n          ...declaration.data[activeSection.id],\n          ...sectionData\n        }\n      }\n    })\n  }\n\n  const continueButtonHandler = () => {\n    props.writeDeclaration(declaration)\n    navigate(\n      generateCertificateCorrectionUrl({\n        declarationId: declaration.id,\n        pageId: CorrectionSection.Summary\n      })\n    )\n  }\n\n  const continueButton = (\n    <PrimaryButton\n      id=\"confirm_form\"\n      key=\"confirm_form\"\n      onClick={continueButtonHandler}\n      disabled={groupHasError(\n        group,\n        declaration.data[section.id],\n        config,\n        props.declaration.data,\n        user\n      )}\n    >\n      {intl.formatMessage(buttonMessages.continueButton)}\n    </PrimaryButton>\n  )\n\n  return (\n    <>\n      <ActionPageLight\n        id=\"corrector_form\"\n        title={section.title && intl.formatMessage(section.title)}\n        hideBackground\n        goBack={() => navigate(-1)}\n        goHome={() =>\n          navigate(\n            generateGoToHomeTabUrl({\n              tabId: WORKQUEUE_TABS.readyForReview\n            })\n          )\n        }\n      >\n        <Content\n          title={group.title && intl.formatMessage(group.title)}\n          bottomActionButtons={[continueButton]}\n          size={ContentSize.SMALL}\n          showTitleOnMobile={true}\n        >\n          <FormFieldGenerator\n            id={group.id}\n            key={group.id}\n            onChange={(values) => {\n              modifyDeclaration(values, section, declaration)\n            }}\n            setAllFieldsDirty={false}\n            fields={group.fields}\n            draftData={declaration.data}\n          />\n        </Content>\n      </ActionPageLight>\n    </>\n  )\n}",
      "startLine": 74,
      "endLine": 167,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/CorrectionReasonForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@140-153",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: IFullProps) {\n    super(props)\n    this.state = {\n      currentPassword: EMPTY_STRING,\n      newPassword: EMPTY_STRING,\n      confirmPassword: EMPTY_STRING,\n      validLength: false,\n      hasNumber: false,\n      hasCases: false,\n      passwordMismatched: false,\n      passwordMatched: false,\n      errorOccured: false\n    }\n  }",
      "startLine": 140,
      "endLine": 153,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/PasswordChangeModal.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@195-203",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n      this.state.passwordMatched &&\n      this.state.currentPassword &&\n      this.state.hasCases &&\n      this.state.hasNumber &&\n      this.state.validLength\n    ) {\n      mutation()\n    }",
      "startLine": 195,
      "endLine": 203,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Settings/PasswordChangeModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@53-173",
      "type": "function_declaration",
      "name": "SupportingDocumentsFormComoponent",
      "text": "function SupportingDocumentsFormComoponent(props: IFullProps) {\n  const { intl, declaration } = props\n  const [isFileUploading, setIsFileUploading] = React.useState<boolean>(false)\n  const navigate = useNavigate()\n  const config = useSelector(getOfflineData)\n  const user = useSelector(getUserDetails)\n  const section = supportingDocumentsSection\n\n  const group = {\n    ...section.groups[0],\n    fields: replaceInitialValues(\n      section.groups[0].fields,\n      declaration.data[section.id] || {},\n      declaration.data,\n      config,\n      user\n    )\n  }\n\n  const hasUploadedDoc =\n    declaration.data[section.id] &&\n    (declaration.data[section.id].uploadDocForLegalProof as IFormFieldValue[])\n      .length > 0\n\n  const hasSelectedOption =\n    declaration.data[section.id]?.supportDocumentRequiredForCorrection !==\n      undefined &&\n    declaration.data[section.id]?.supportDocumentRequiredForCorrection !== ''\n\n  const fields = [\n    group.fields[0],\n    {\n      ...group.fields[1],\n      disabled: hasUploadedDoc\n    }\n  ]\n\n  const contentProps = {\n    title: intl.formatMessage(messages.supportingDocumentsTitle),\n    subtitle: intl.formatMessage(messages.supportingDocumentsSubtitle),\n    size: ContentSize.SMALL\n  }\n\n  const modifyDeclaration = (\n    sectionData: IFormSectionData,\n    section: IFormSection,\n    declaration: IDeclaration\n  ) => {\n    props.modifyDeclaration({\n      ...declaration,\n      data: {\n        ...declaration.data,\n        [section.id]: {\n          ...declaration.data[section.id],\n          ...sectionData\n        }\n      }\n    })\n  }\n\n  const onUploadingStateChanged = (isUploading: boolean) => {\n    setIsFileUploading(isUploading)\n  }\n\n  const continueButtonHandler = () => {\n    props.writeDeclaration(declaration)\n    navigate(\n      generateCertificateCorrectionUrl({\n        declarationId: declaration.id,\n        pageId: CorrectionSection.Reason\n      })\n    )\n  }\n\n  return (\n    <>\n      <ActionPageLight\n        id=\"corrector_form\"\n        title={section.title && intl.formatMessage(section.title)}\n        hideBackground\n        goBack={() => navigate(-1)}\n        goHome={() =>\n          navigate(\n            generateGoToHomeTabUrl({\n              tabId: WORKQUEUE_TABS.readyForReview\n            })\n          )\n        }\n      >\n        <Content\n          {...contentProps}\n          showTitleOnMobile={true}\n          bottomActionButtons={[\n            <PrimaryButton\n              id=\"confirm_form\"\n              key=\"confirm_form\"\n              disabled={\n                !(hasUploadedDoc || hasSelectedOption) || isFileUploading\n              }\n              onClick={continueButtonHandler}\n            >\n              {intl.formatMessage(buttonMessages.continueButton)}\n            </PrimaryButton>\n          ]}\n        >\n          <FormFieldGenerator\n            id={group.id}\n            key={group.id}\n            onChange={(values) => {\n              modifyDeclaration(values, section, declaration)\n            }}\n            setAllFieldsDirty={false}\n            fields={fields}\n            draftData={declaration.data}\n            onUploadingStateChanged={onUploadingStateChanged}\n          />\n        </Content>\n      </ActionPageLight>\n    </>\n  )\n}",
      "startLine": 53,
      "endLine": 173,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/SupportingDocumentsForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@55-193",
      "type": "function_declaration",
      "name": "CorrectorFormComponent",
      "text": "function CorrectorFormComponent(props: IFullProps) {\n  const navigate = useNavigate()\n  const { declaration, intl } = props\n  const config = useSelector(getOfflineData)\n  const user = useSelector(getUserDetails)\n  const section = getCorrectorSection(declaration)\n\n  const group = React.useMemo(\n    () => ({\n      ...section.groups[0],\n      fields: replaceInitialValues(\n        section.groups[0].fields,\n        declaration.data[section.id] || {},\n        declaration.data,\n        config,\n        user\n      )\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  const modifyDeclaration = (\n    sectionData: IFormSectionData,\n    section: IFormSection,\n    declaration: IDeclaration\n  ) => {\n    props.modifyDeclaration({\n      ...declaration,\n      data: {\n        ...declaration.data,\n        [section.id]: {\n          ...declaration.data[section.id],\n          ...sectionData\n        }\n      }\n    })\n  }\n  const continueButtonHandler = () => {\n    const relationship = (\n      declaration.data.corrector.relationship as IFormSectionData\n    ).value as string\n    if (\n      relationship === CorrectorRelationship.REGISTRAR ||\n      relationship === CorrectorRelationship.ANOTHER_AGENT\n    ) {\n      const changed = {\n        ...declaration,\n        data: {\n          ...declaration.data,\n          corrector: {\n            ...declaration.data.corrector,\n            hasShowedVerifiedDocument: false\n          }\n        }\n      }\n      props.modifyDeclaration(changed)\n      props.writeDeclaration(changed)\n      navigate(\n        generateGoToPageGroupUrl({\n          pageRoute: CERTIFICATE_CORRECTION_REVIEW,\n          declarationId: declaration.id,\n          pageId: ReviewSection.Review,\n          groupId: 'review-view-group',\n          event: declaration.event\n        })\n      )\n    } else {\n      props.writeDeclaration(declaration)\n      navigate(\n        generateVerifyCorrectorUrl({\n          declarationId: declaration.id,\n          corrector: relationship\n        })\n      )\n    }\n  }\n\n  const continueButton = (\n    <Button\n      id=\"confirm_form\"\n      key=\"confirm_form\"\n      type=\"primary\"\n      size=\"large\"\n      fullWidth\n      onClick={continueButtonHandler}\n      disabled={groupHasError(\n        group,\n        declaration.data[section.id],\n        config,\n        declaration.data,\n        user\n      )}\n    >\n      {intl.formatMessage(buttonMessages.continueButton)}\n    </Button>\n  )\n\n  return (\n    <>\n      <ActionPageLight\n        id=\"corrector_form\"\n        title={section.title && intl.formatMessage(section.title)}\n        hideBackground\n        goBack={() => navigate(-1)}\n        goHome={() =>\n          navigate(\n            generateGoToHomeTabUrl({\n              tabId: WORKQUEUE_TABS.readyForReview\n            })\n          )\n        }\n      >\n        <Content\n          size={ContentSize.SMALL}\n          title={group.title && intl.formatMessage(group.title)}\n          subtitle={\n            declaration.event === EventType.Birth\n              ? intl.formatMessage(messages.birthCorrectionNote)\n              : undefined\n          }\n          bottomActionButtons={[continueButton]}\n          showTitleOnMobile={true}\n        >\n          <FormFieldGenerator\n            id={group.id}\n            key={group.id}\n            onChange={(values) => {\n              modifyDeclaration(values, section, declaration)\n            }}\n            setAllFieldsDirty={false}\n            fields={group.fields}\n            draftData={declaration.data}\n          />\n        </Content>\n      </ActionPageLight>\n    </>\n  )\n}",
      "startLine": 55,
      "endLine": 193,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/CorrectorForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@33-54",
      "type": "function_declaration",
      "name": "CorrectionFormComponent",
      "text": "function CorrectionFormComponent({ sectionId, declaration, ...props }: IProps) {\n  const { modifyDeclaration } = props\n  if (!declaration) {\n    return <Navigate to={HOME} />\n  }\n\n  const logTime = (timeMs: number) => {\n    modifyDeclaration({\n      timeLoggedMS: declaration.timeLoggedMS ?? 0 + timeMs\n    })\n  }\n\n  if (declaration.writingDraft) {\n    return <LoadingSpinner />\n  }\n\n  return (\n    <TimeMounted onUnmount={logTime}>\n      <FormSection sectionId={sectionId} declaration={declaration} {...props} />\n    </TimeMounted>\n  )\n}",
      "startLine": 33,
      "endLine": 54,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/CorrectionForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@56-72",
      "type": "function_declaration",
      "name": "FormSection",
      "text": "function FormSection({\n  sectionId,\n  ...props\n}: IProps & { declaration: IDeclaration }) {\n  switch (sectionId) {\n    case CorrectionSection.Corrector:\n      return <CorrectorForm {...props} />\n    case CorrectionSection.Reason:\n      return <CorrectionReasonForm {...props} />\n    case CorrectionSection.SupportingDocuments:\n      return <SupportingDocumentsForm {...props} />\n    case CorrectionSection.Summary:\n      return <CorrectionSummary {...props} />\n    default:\n      return <></>\n  }\n}",
      "startLine": 56,
      "endLine": 72,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/CorrectionForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@74-84",
      "type": "function_declaration",
      "name": "mapStateToProps",
      "text": "function mapStateToProps(state: IStoreState, props: RouteComponentProps) {\n  const { declarationId, pageId: sectionId } = props.router.match.params\n  const declaration = state.declarationsState.declarations.find(\n    ({ id }) => id === declarationId\n  )\n\n  return {\n    declaration,\n    sectionId\n  }\n}",
      "startLine": 74,
      "endLine": 84,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/CorrectionForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@75-113",
      "type": "function_declaration",
      "name": "groupHasError",
      "text": "function groupHasError(\n  group: IFormSectionGroup,\n  sectionData: IFormSectionData,\n  config: IOfflineData,\n  draft: IFormData,\n  user: UserDetails | null\n) {\n  const errors = getValidationErrorsForForm(\n    group.fields,\n    sectionData || {},\n    config,\n    draft,\n    user\n  )\n\n  for (const field of group.fields) {\n    const fieldErrors = errors[field.name].errors\n    const nestedFieldErrors = errors[field.name].nestedFields\n\n    if (fieldErrors.length > 0) {\n      return true\n    }\n\n    if (field.nestedFields) {\n      for (const nestedFields of Object.values(field.nestedFields)) {\n        for (const nestedField of nestedFields) {\n          if (\n            nestedFieldErrors[nestedField.name] &&\n            nestedFieldErrors[nestedField.name].length > 0\n          ) {\n            return true\n          }\n        }\n      }\n    }\n  }\n\n  return false\n}",
      "startLine": 75,
      "endLine": 113,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@115-123",
      "type": "function_declaration",
      "name": "isCorrection",
      "text": "function isCorrection(declaration: IDeclaration) {\n  const { registrationStatus } = declaration\n  return (\n    registrationStatus === RegStatus.Registered ||\n    registrationStatus === RegStatus.Certified ||\n    registrationStatus === RegStatus.Issued ||\n    registrationStatus === RegStatus.CorrectionRequested\n  )\n}",
      "startLine": 115,
      "endLine": 123,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@125-131",
      "type": "function_declaration",
      "name": "bytesToSize",
      "text": "function bytesToSize(bytes: number) {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n  if (bytes === 0) return '0 Byte'\n\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i]\n}",
      "startLine": 125,
      "endLine": 131,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@133-148",
      "type": "function_declaration",
      "name": "isFileSizeExceeded",
      "text": "function isFileSizeExceeded(declaration: IDeclaration) {\n  const {\n    data: { documents }\n  } = declaration\n  let totalFileSize = 0\n  for (const index in documents) {\n    if (!isArray(documents[index])) {\n      continue\n    }\n    totalFileSize = (documents[index] as IFileValue[]).reduce(\n      (total, fieldValue) => (total += fieldValue.fileSize || 0),\n      totalFileSize\n    )\n  }\n  return totalFileSize > ACCUMULATED_FILE_SIZE\n}",
      "startLine": 133,
      "endLine": 148,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@150-423",
      "type": "function_declaration",
      "name": "updateDeclarationRegistrationWithCorrection",
      "text": "function updateDeclarationRegistrationWithCorrection(\n  correctionData: {\n    corrector?: {\n      relationship:\n        | string\n        | { value: string; nestedFields: { otherRelationship: string } }\n      hasShowedVerifiedDocument?: boolean\n    }\n    reason?: {\n      type: string | { value: string }\n      additionalComment?: string\n      nestedFields?: IFormSectionData\n    }\n    supportingDocuments?: {\n      supportDocumentRequiredForCorrection?: boolean\n      uploadDocForLegalProof?: IAttachmentValue\n    }\n    currectionFeesPayment?: {\n      correctionFees?: IFormSectionData\n    }\n  },\n  meta?: { userPrimaryOffice?: UserDetails['primaryOffice'] }\n) {\n  let correctionValues: CorrectionInput = {\n    requester: '',\n    requesterOther: '',\n    hasShowedVerifiedDocument: false,\n    noSupportingDocumentationRequired: false,\n    reason: '',\n    otherReason: '',\n    location: {},\n    note: '',\n    attachments: [],\n    values: []\n  }\n\n  const data = correctionData\n\n  if (data.corrector && data.corrector.relationship) {\n    if (typeof data.corrector.relationship === 'string') {\n      correctionValues.requester = data.corrector.relationship\n    } else {\n      correctionValues.requester = data.corrector.relationship.value\n      correctionValues.requesterOther =\n        data.corrector.relationship.nestedFields.otherRelationship\n    }\n  }\n\n  correctionValues.hasShowedVerifiedDocument = Boolean(\n    data.corrector?.hasShowedVerifiedDocument\n  )\n\n  if (data.reason) {\n    if (data.reason.type) {\n      correctionValues.reason = ((data.reason.type as IFormSectionData).value ||\n        data.reason.type) as string\n    }\n\n    if (data.reason.additionalComment) {\n      correctionValues.note = data.reason.additionalComment\n    }\n\n    if ((data.reason.type as IFormSectionData).nestedFields) {\n      const nestedFields = (data.reason.type as IFormSectionData)\n        .nestedFields as IFormSectionData\n      correctionValues = { ...correctionValues, ...nestedFields }\n    }\n  }\n\n  if (data.supportingDocuments) {\n    if (\n      typeof data.supportingDocuments.supportDocumentRequiredForCorrection ===\n      'boolean'\n    ) {\n      if (data.supportingDocuments.supportDocumentRequiredForCorrection) {\n        correctionValues.hasShowedVerifiedDocument = Boolean(\n          data.corrector?.hasShowedVerifiedDocument\n        )\n      } else {\n        correctionValues.noSupportingDocumentationRequired = true\n      }\n    }\n\n    if (Array.isArray(data.supportingDocuments.uploadDocForLegalProof)) {\n      data.supportingDocuments.uploadDocForLegalProof.forEach((file) => {\n        correctionValues.attachments.push({\n          data: file.data,\n          type: file.optionValues[1]\n        })\n      })\n    }\n  }\n\n  if (data.currectionFeesPayment) {\n    const correctionFees = (\n      data.currectionFeesPayment.correctionFees as IFormSectionData\n    )?.value\n\n    if (correctionFees === 'REQUIRED') {\n      const { nestedFields }: { nestedFields?: IFormSectionData } = data\n        .currectionFeesPayment.correctionFees as IFormSectionData\n\n      correctionValues.payment = {\n        type: PaymentType.Manual,\n        amount: Number(nestedFields?.totalFees),\n        outcome: PaymentOutcomeType.Completed,\n        date: new Date().toISOString()\n      }\n\n      if (nestedFields?.proofOfPayment) {\n        correctionValues.payment.attachmentData = (\n          nestedFields?.proofOfPayment as IFileValue\n        ).data\n      }\n    }\n  }\n\n  if (meta) {\n    if (meta.userPrimaryOffice) {\n      correctionValues.location = {\n        _fhirID: meta.userPrimaryOffice.id\n      }\n    }\n  }\n\n  return correctionValues\n}\n\nexport function sectionHasError(\n  group: IFormSectionGroup,\n  section: IFormSection,\n  declaration: IDeclaration,\n  config: IOfflineData,\n  draft: IFormData,\n  user: UserDetails | null\n) {\n  const errors = getValidationErrorsForForm(\n    group.fields,\n    declaration.data[section.id] || {},\n    config,\n    draft,\n    user\n  )\n\n  for (const field of group.fields) {\n    const fieldErrors = errors[field.name].errors\n    const nestedFieldErrors = errors[field.name].nestedFields\n\n    if (fieldErrors.length > 0) {\n      return true\n    }\n\n    if (field.nestedFields) {\n      for (const nestedFields of Object.values(field.nestedFields)) {\n        for (const nestedField of nestedFields) {\n          if (\n            nestedFieldErrors[nestedField.name] &&\n            nestedFieldErrors[nestedField.name].length > 0\n          ) {\n            return true\n          }\n        }\n      }\n    }\n  }\n\n  return false\n}\n\nfunction renderSelectOrRadioLabel(\n  value: IFormFieldValue,\n  options: Array<ISelectOption | IRadioOption>,\n  intl: IntlShape\n) {\n  const option = options.find((option) => option.value === value)\n  return option?.label ? intl.formatMessage(option.label) : value\n}\n\nfunction renderSelectDynamicLabel(\n  value: IFormFieldValue,\n  options: IDynamicOptions,\n  draftData: IFormSectionData,\n  intl: IntlShape,\n  resources: IOfflineData,\n  language: string\n) {\n  if (!options.resource) {\n    const dependency = options.dependency\n      ? draftData[options.dependency]\n      : false\n    const selectedOption = dependency\n      ? options.options &&\n        options.options[dependency.toString()].find(\n          (option) => option.value === value\n        )\n      : false\n    return selectedOption ? intl.formatMessage(selectedOption.label) : value\n  } else {\n    if (options.resource) {\n      let selectedLocation: ILocation\n      const locationId = value as string\n      // HOTFIX for handling international address\n      if (options.resource === 'locations') {\n        selectedLocation = resources[OFFLINE_LOCATIONS_KEY][locationId] || {\n          name: locationId,\n          alias: locationId\n        }\n      } else {\n        selectedLocation = resources[OFFLINE_FACILITIES_KEY][locationId]\n      }\n\n      if (selectedLocation) {\n        if (language !== getDefaultLanguage()) {\n          return selectedLocation.alias\n        } else {\n          return selectedLocation.name\n        }\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n}\n\nconst getCheckboxFieldValue = (\n  field: ICheckboxFormField,\n  value: string,\n  intl: IntlShape\n) => {\n  const { checkedValue = true } = field\n  return intl.formatMessage(\n    value === String(checkedValue)\n      ? formMessageDescriptors.confirm\n      : formMessageDescriptors.deny\n  )\n}\n\nconst getCheckBoxGroupFieldValue = (\n  field: ICheckboxGroupFormField,\n  value: string[],\n  intl: IntlShape\n) => {\n  const option = field.options.find((option) => {\n    return value.length > 0 && option.value === value[0]\n  })\n  if (option) {\n    return intl.formatMessage(option.label)\n  }\n  return ''\n}\n\nconst getFormFieldValue = (\n  draftData: IFormData,\n  sectionId: string,\n  field: IFormField\n): IFormFieldValue => {\n  const sectionDraftData = draftData[sectionId] || {}\n  if (field.name in sectionDraftData) {\n    return sectionDraftData[field.name]\n  }\n\n  let tempField: IFormField\n  for (const key in sectionDraftData) {\n    tempField = sectionDraftData[key] as IFormField\n    if (\n      tempField &&\n      tempField.nestedFields &&\n      field.name in tempField.nestedFields\n    ) {\n      return tempField.nestedFields[field.name] as IFormFieldValue\n    }\n  }",
      "startLine": 150,
      "endLine": 423,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@586-614",
      "type": "function_declaration",
      "name": "hasFieldChanged",
      "text": "function hasFieldChanged(\n  field: IFormField,\n  sectionData: IFormSectionData,\n  originalSectionData?: IFormSectionData\n) {\n  if (!originalSectionData) {\n    const isCustomSection = sectionData && sectionData[field.name]\n    if (isCustomSection) return true\n    return false\n  }\n  if (sectionData[field.name] && (sectionData[field.name] as IFormData).value) {\n    return hasNestedDataChanged(\n      sectionData[field.name] as IFormData,\n      originalSectionData[field.name] as IFormData\n    )\n  }\n  /*\n   * data section might have some values as empty string\n   * whereas original data section have them as undefined\n   */\n  if (!originalSectionData[field.name] && sectionData[field.name] === '') {\n    return false\n  }\n\n  if (Array.isArray(sectionData[field.name])) {\n    return !isEqual(sectionData[field.name], originalSectionData[field.name])\n  }\n  return sectionData[field.name] !== originalSectionData[field.name]\n}",
      "startLine": 586,
      "endLine": 614,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@616-638",
      "type": "function_declaration",
      "name": "hasNestedDataChanged",
      "text": "function hasNestedDataChanged(\n  nestedFieldData: IFormData,\n  previousNestedFieldData: IFormData\n) {\n  if (nestedFieldData.value === previousNestedFieldData.value) {\n    for (const key of Object.keys(nestedFieldData.nestedFields)) {\n      if (\n        !previousNestedFieldData.nestedFields[key] &&\n        nestedFieldData.nestedFields[key] === ''\n      ) {\n        continue\n      }\n      if (\n        nestedFieldData.nestedFields[key] !==\n        previousNestedFieldData.nestedFields[key]\n      ) {\n        return true\n      }\n    }\n    return false\n  }\n  return true\n}",
      "startLine": 616,
      "endLine": 638,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@646-668",
      "type": "function_declaration",
      "name": "getRenderableField",
      "text": "function getRenderableField(\n  section: IFormSection,\n  {\n    fieldLabel,\n    fieldLabelParams\n  }: {\n    fieldLabel: MessageDescriptor\n    fieldLabelParams?: Record<string, string>\n  },\n  original: IFormFieldValue | JSX.Element | undefined,\n  changed: IFormFieldValue | JSX.Element | undefined,\n  intl: IntlShape\n): RenderableFieldType {\n  let item = intl.formatMessage(fieldLabel, fieldLabelParams)\n  if (section && section.name) {\n    item = `${item} (${intl.formatMessage(section.name)})`\n  }\n  return {\n    item,\n    original,\n    changed\n  }\n}",
      "startLine": 646,
      "endLine": 668,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@670-691",
      "type": "function_declaration",
      "name": "isVisibleField",
      "text": "function isVisibleField(\n  field: IFormField,\n  section: IFormSection,\n  draft: IDeclaration,\n  config: IOfflineData,\n  user: UserDetails | null\n) {\n  if (field.type === HIDDEN) {\n    return false\n  }\n  const conditionalActions = getConditionalActionsForField(\n    field,\n    draft.data[section.id] || {},\n    config,\n    draft.data,\n    user\n  )\n  return (\n    !conditionalActions.includes('hide') &&\n    !conditionalActions.includes('disable')\n  )\n}",
      "startLine": 670,
      "endLine": 691,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@693-750",
      "type": "function_declaration",
      "name": "getOverriddenFieldsListForPreview",
      "text": "function getOverriddenFieldsListForPreview(\n  formSections: IFormSection[],\n  draft: IDeclaration,\n  offlineResources: IOfflineData,\n  userDetails: UserDetails | null\n): IFormField[] {\n  const overriddenFields = formSections\n    .map((section) => {\n      return section.groups\n        .map((group) => {\n          return group.fields\n            .map((field) => {\n              const tempField = clone(field)\n              const residingSection =\n                get(field.reviewOverrides, 'residingSection') || ''\n              tempField.conditionals =\n                get(field.reviewOverrides, 'conditionals') ||\n                field.conditionals ||\n                []\n\n              const isVisible = !getConditionalActionsForField(\n                tempField,\n                draft.data[residingSection] || {},\n                offlineResources,\n                draft.data,\n                userDetails\n              ).includes('hide')\n              return isVisible ? field : ({} as IFormField)\n            })\n            .filter((field) => !Boolean(field.hideInPreview))\n            .filter((field) => Boolean(field.reviewOverrides))\n            .filter((field) =>\n              isVisibleField(\n                field,\n                section,\n                draft,\n                offlineResources,\n                userDetails\n              )\n            )\n        })\n        .filter((item) => item.length)\n    })\n    .filter((item) => item.length)\n  return flattenDeep(overriddenFields)\n}\n\nexport function isViewOnly(field: IFormField) {\n  return [\n    BULLET_LIST,\n    PARAGRAPH,\n    WARNING,\n    TEXTAREA,\n    SUBSECTION_HEADER,\n    FETCH_BUTTON,\n    DIVIDER\n  ].find((type) => type === field.type)\n}",
      "startLine": 693,
      "endLine": 750,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@126-132",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: IFullProps) {\n    super(props)\n    this.state = {\n      isFileUploading: false,\n      showPrompt: false\n    }\n  }",
      "startLine": 126,
      "endLine": 132,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/CorrectionSummary.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@180-515",
      "type": "function_declaration",
      "name": "VerifyCertificatePage",
      "text": "function VerifyCertificatePage() {\n  const intl = useIntl()\n  const { declarationId } = useParams<{ declarationId: string }>()\n  const { localizeLocation } = useLocationIntl()\n  const navigate = useNavigate()\n\n  const logo = useSelector(selectCountryLogo)\n  const appName = useSelector(selectApplicationName)\n  const offlineData = useSelector(getOfflineData)\n\n  const [closeWindow, setCloseWindow] = React.useState(false)\n  const [timeOut, setTimeOut] = React.useState(false)\n\n  const { loading, error, data } = useVerificationRecordDetails()\n\n  useTimeout(\n    () => {\n      setCloseWindow(true)\n    },\n    60000,\n    Boolean(data)\n  )\n\n  useTimeout(\n    () => {\n      setCloseWindow(false)\n      setTimeOut(true)\n    },\n    600000,\n    Boolean(data)\n  )\n\n  const closeWindowAction = () => {\n    const blank = window.open('about:blank', '_self')\n    blank?.close()\n  }\n\n  const getFullName = (data: RegistrationToBeVerified) => {\n    if (isBirthRegistration(data)) {\n      return (\n        data.child?.name?.[0]?.firstNames +\n        ' ' +\n        data.child?.name?.[0]?.familyName\n      )\n    }\n\n    if (isDeathRegistration(data)) {\n      return (\n        data.deceased?.name?.[0]?.firstNames +\n        ' ' +\n        data.deceased?.name?.[0]?.familyName\n      )\n    }\n  }\n\n  const getDateOfBirthOrOfDeceased = (data: RegistrationToBeVerified) => {\n    if (isBirthRegistration(data) && data.child?.birthDate) {\n      return formatPlainDate(data.child.birthDate)\n    }\n    if (isDeathRegistration(data) && data.deceased?.deceased?.deathDate) {\n      return formatPlainDate(data.deceased.deceased.deathDate)\n    }\n    return undefined\n  }\n\n  const getGender = (data: RegistrationToBeVerified) => {\n    if (isBirthRegistration(data)) return data.child?.gender\n    if (isDeathRegistration(data)) return data.deceased?.gender\n  }\n\n  const getLastCertifiedDate = (data: RegistrationToBeVerified) => {\n    // find first certified action from history sorted in ascending order by time\n    return data.history?.find((item) => item?.regStatus === RegStatus.Certified)\n      ?.date\n  }\n\n  // This function currently supports upto two location levels\n  const getLocation = (data: RegistrationToBeVerified) => {\n    const location = data.eventLocation\n\n    if (location?.type === 'HEALTH_FACILITY') {\n      return location?.name ?? EMPTY_STRING\n    }\n\n    const country =\n      location?.address?.country &&\n      intl.formatMessage(countryMessages[location?.address?.country])\n    const city = location?.address?.city ?? EMPTY_STRING\n    if (location?.address?.country === window.config.COUNTRY) {\n      return [\n        city,\n        ...generateFullAddress(location.address, offlineData),\n        country\n      ]\n        .filter((label) => Boolean(label))\n        .join(', ')\n    }\n\n    //international address\n\n    return [\n      city,\n      location?.address?.district,\n      location?.address?.state,\n      country\n    ]\n      .filter((label) => Boolean(label))\n      .join(', ')\n  }\n\n  const getRegistarData = (data: RegistrationToBeVerified) => {\n    const history = compact(data.history).find(\n      ({ action, regStatus }) => !action && regStatus === RegStatus.Registered\n    )\n\n    return {\n      registar:\n        history &&\n        history?.user?.name[0]?.firstNames +\n          ' ' +\n          history?.user?.name[0]?.familyName,\n      officeHierarchy: history?.user?.primaryOffice?.hierarchy\n    }\n  }\n\n  return (\n    <Frame\n      header={\n        <AppBar\n          mobileTitle={appName}\n          desktopTitle={appName}\n          mobileRight={\n            <Button\n              size=\"medium\"\n              type=\"icon\"\n              onClick={() => navigate(routes.HOME)}\n            >\n              <Icon name={'X'} weight={'bold'} />\n            </Button>\n          }\n          desktopRight={\n            <Button\n              size=\"medium\"\n              type=\"icon\"\n              onClick={() => navigate(routes.HOME)}\n            >\n              <Icon name={'X'} weight={'bold'} />\n            </Button>\n          }\n        />\n      }\n      skipToContentText={intl.formatMessage(\n        constantsMessages.skipToMainContent\n      )}\n    >\n      <Container size={ContentSize.NORMAL} checking={Boolean(data) || timeOut}>\n        <LogoDiv>\n          <CountryLogo src={logo} />\n        </LogoDiv>\n        {declarationId ? (\n          <>\n            {loading && <LoadingState />}\n            {error && <ErrorState />}\n            {data && !timeOut && (\n              <>\n                <Alert type=\"success\">\n                  <Text variant={'bold16'} element={'span'} color={'greenDark'}>\n                    {intl.formatMessage(messageToDefine.successAlertTitle)}\n                  </Text>{' '}\n                  <br />\n                  <Text variant={'reg16'} element={'span'} color={'greenDark'}>\n                    {intl.formatMessage(messageToDefine.successAlertMessage)}\n                  </Text>\n                </Alert>\n                <SpaceDiv />\n                <Alert type=\"success\" customIcon={<Icon name={'Lock'} />}>\n                  <Text variant={'bold16'} element={'span'} color={'greenDark'}>\n                    {intl.formatMessage(messageToDefine.successUrlValidation)}\n                  </Text>{' '}\n                  <br />\n                  <Text variant={'reg16'} element={'span'} color={'greenDark'}>\n                    {window.origin}\n                  </Text>\n                </Alert>\n                <SpaceDiv />\n                <Box>\n                  <ListViewSimplified rowHeight={'small'}>\n                    <ListViewItemSimplified\n                      label={\n                        <Text variant={'bold16'} element={'span'}>\n                          {data?.registration?.type ===\n                            RegistrationType.Birth &&\n                            intl.formatMessage(messageToDefine.brn)}\n                          {data?.registration?.type ===\n                            RegistrationType.Death &&\n                            intl.formatMessage(messageToDefine.drn)}\n                        </Text>\n                      }\n                      value={\n                        <Text variant=\"reg16\" element=\"span\">\n                          {data.registration?.registrationNumber}\n                        </Text>\n                      }\n                    />\n                    <ListViewItemSimplified\n                      label={\n                        <Text variant=\"bold16\" element=\"span\">\n                          {intl.formatMessage(messageToDefine.fullName)}\n                        </Text>\n                      }\n                      value={\n                        <Text variant=\"reg16\" element=\"span\">\n                          {getFullName(data)}\n                        </Text>\n                      }\n                    />\n                    <ListViewItemSimplified\n                      label={\n                        <Text variant=\"bold16\" element=\"span\">\n                          {data?.registration?.type ===\n                            RegistrationType.Birth &&\n                            intl.formatMessage(messageToDefine.dateOfBirth)}\n                          {data?.registration?.type ===\n                            RegistrationType.Death &&\n                            intl.formatMessage(messageToDefine.dateOfDeath)}\n                        </Text>\n                      }\n                      value={\n                        <Text variant=\"reg16\" element=\"span\">\n                          {getDateOfBirthOrOfDeceased(data)}\n                        </Text>\n                      }\n                    />\n                    <ListViewItemSimplified\n                      label={\n                        <Text variant=\"bold16\" element=\"span\">\n                          {intl.formatMessage(messageToDefine.sex)}\n                        </Text>\n                      }\n                      value={\n                        <Text variant=\"reg16\" element=\"span\">\n                          {intl.formatMessage(\n                            messageToDefine[getGender(data) ?? 'unknown']\n                          )}\n                        </Text>\n                      }\n                    />\n                    <ListViewItemSimplified\n                      label={\n                        <Text variant={'bold16'} element={'span'}>\n                          {isBirthRegistration(data) &&\n                            intl.formatMessage(messageToDefine.placeOfBirth)}\n                          {isDeathRegistration(data) &&\n                            intl.formatMessage(messageToDefine.placeOfDeath)}\n                        </Text>\n                      }\n                      value={\n                        <Text variant={'reg16'} element={'span'}>\n                          {getLocation(data)}\n                        </Text>\n                      }\n                    />\n                    <ListViewItemSimplified\n                      label={\n                        <Text variant={'bold16'} element={'span'}>\n                          {intl.formatMessage(\n                            messageToDefine.registrationCenter\n                          )}\n                        </Text>\n                      }\n                      value={\n                        <Stack\n                          direction=\"column-reverse\"\n                          alignItems=\"flex-start\"\n                          gap={0}\n                        >\n                          {getRegistarData(data).officeHierarchy?.map(\n                            (location) => (\n                              <Text\n                                key={location.id}\n                                variant=\"reg16\"\n                                element=\"span\"\n                              >\n                                {localizeLocation(location)}\n                              </Text>\n                            )\n                          )}\n                        </Stack>\n                      }\n                    />\n                    <ListViewItemSimplified\n                      label={\n                        <Text variant={'bold16'} element={'span'}>\n                          {intl.formatMessage(messageToDefine.registar)}\n                        </Text>\n                      }\n                      value={\n                        <Text variant={'reg16'} element={'span'}>\n                          {getRegistarData(data).registar}\n                        </Text>\n                      }\n                    />\n\n                    <ListViewItemSimplified\n                      label={\n                        <Text variant={'bold16'} element={'span'}>\n                          {intl.formatMessage(messageToDefine.certifiedAt)}\n                        </Text>\n                      }\n                      value={\n                        <Text variant={'reg16'} element={'span'}>\n                          {formatDate(\n                            new Date(getLastCertifiedDate(data)),\n                            'dd MMMM yyyy'\n                          )}\n                        </Text>\n                      }\n                    />\n                  </ListViewSimplified>\n                </Box>\n              </>\n            )}\n            {data && timeOut && <TimeOutState />}\n          </>\n        ) : (\n          <ErrorState />\n        )}\n      </Container>\n      {closeWindow && (\n        <Toast type={'info'} onClose={closeWindowAction} duration={null}>\n          {intl.formatMessage(messageToDefine.toastMessage)}\n        </Toast>\n      )}\n    </Frame>\n  )\n}",
      "startLine": 180,
      "endLine": 515,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/VerifyCertificate/VerifyCertificatePage.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@655-664",
      "type": "function_declaration",
      "name": "fetchDuplicateDeclarations",
      "text": "async function fetchDuplicateDeclarations(id: string) {\n  return (\n    client &&\n    client.query<FetchViewRecordByCompositionQuery>({\n      query: FETCH_VIEW_RECORD_BY_COMPOSITION,\n      variables: { id },\n      fetchPolicy: 'network-only'\n    })\n  )\n}",
      "startLine": 655,
      "endLine": 664,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/ViewRecord/query.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@666-675",
      "type": "function_declaration",
      "name": "fetchDeclarationForViewing",
      "text": "async function fetchDeclarationForViewing(id: string) {\n  return (\n    client &&\n    client.query({\n      query: FETCH_VIEW_RECORD_BY_COMPOSITION,\n      variables: { id },\n      fetchPolicy: 'cache-first'\n    })\n  )\n}",
      "startLine": 666,
      "endLine": 675,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/ViewRecord/query.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@73-166",
      "type": "class_declaration",
      "name": "ReviewSectionCorrectionComp",
      "text": "class ReviewSectionCorrectionComp extends React.Component<FullProps, State> {\n  constructor(props: FullProps) {\n    super(props)\n    this.state = {\n      data: {},\n      approvePrompt: false,\n      rejectPrompt: false,\n      enabledForReject: false,\n      startTime: 0\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ startTime: Date.now() })\n  }\n\n  toggleRejectModal = () => {\n    this.setState((state) => ({\n      rejectPrompt: !state.rejectPrompt\n    }))\n  }\n\n  toggleApproveModal = () => {\n    this.setState((state) => ({\n      approvePrompt: !state.approvePrompt\n    }))\n  }\n\n  approveCorrectionAction = () => {\n    const recordWithSubmissionStatus = {\n      ...this.props.declaration,\n      submissionStatus: SUBMISSION_STATUS.READY_TO_REQUEST_CORRECTION,\n      action: SubmissionAction.APPROVE_CORRECTION\n    }\n    this.props.modifyDeclaration(recordWithSubmissionStatus)\n    this.props.writeDeclaration(recordWithSubmissionStatus)\n\n    this.props.router.navigate(\n      generateGoToHomeTabUrl({\n        tabId: WORKQUEUE_TABS.readyToPrint\n      })\n    )\n  }\n\n  rejectCorrectionAction = () => {\n    const reason = this.state.data.rejectionRaisonOfCorrection as string\n    const payload = {\n      id: this.props.declaration.id,\n      details: {\n        reason,\n        timeLoggedMS:\n          (this.props.declaration.timeLoggedMS || 0) +\n          Date.now() -\n          this.state.startTime\n      }\n    }\n    const updatedDeclaration = {\n      ...this.props.declaration,\n      submissionStatus: SUBMISSION_STATUS.READY_TO_REQUEST_CORRECTION,\n      action: SubmissionAction.REJECT_CORRECTION,\n      payload,\n      timeLoggedMS:\n        (this.props.declaration.timeLoggedMS || 0) +\n        Date.now() -\n        this.state.startTime\n    }\n\n    this.props.writeDeclaration(updatedDeclaration)\n    this.props.router.navigate(\n      generateGoToHomeTabUrl({\n        tabId: WORKQUEUE_TABS.readyToPrint\n      })\n    )\n  }\n\n  storeData = (rejectionFormData: IFormSectionData) => {\n    this.setState(\n      () => ({ data: rejectionFormData }),\n      () =>\n        this.setState(() => ({\n          enabledForReject: !hasFormError(\n            this.props.form.fields,\n            rejectionFormData,\n            this.props.config,\n            this.props.declaration.data,\n            this.props.user\n          )\n        }))\n    )\n  }\n\n  render() {\n    const { intl, form } = this.props\n    const { fields }",
      "startLine": 73,
      "endLine": 166,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "ERROR",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSectionCorrection.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@74-83",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: FullProps) {\n    super(props)\n    this.state = {\n      data: {},\n      approvePrompt: false,\n      rejectPrompt: false,\n      enabledForReject: false,\n      startTime: 0\n    }\n  }",
      "startLine": 74,
      "endLine": 83,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSectionCorrection.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@85-87",
      "type": "method_definition",
      "name": "componentDidMount",
      "text": "componentDidMount() {\n    this.setState({ startTime: Date.now() })\n  }",
      "startLine": 85,
      "endLine": 87,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSectionCorrection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@42-63",
      "type": "function_declaration",
      "name": "mapStateToProps",
      "text": "function mapStateToProps(\n  state: IStoreState,\n  props: RouteComponentProps\n): IStateProps {\n  const { match } = props.router\n\n  const { declarationId } = match.params\n\n  const declaration = state.declarationsState.declarations.find(\n    (app) => app.id === declarationId\n  )\n\n  const event = declaration?.event || EventType.Birth\n\n  const reviewForm = getEventReviewForm(state, event)\n\n  return {\n    declaration,\n    registerForm: reviewForm,\n    pageRoute: CERTIFICATE_CORRECTION_REVIEW\n  }\n}",
      "startLine": 42,
      "endLine": 63,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/CorrectionForm/ReviewForm.tsx",
      "language": "tsx"
    },
    {
      "id": "class_declaration@63-116",
      "type": "class_declaration",
      "name": "ReviewFormView",
      "text": "class ReviewFormView extends React.Component<IProps> {\n  userHasRegisterScope() {\n    return this.props.scope && this.props.scope.includes(SCOPES.RECORD_REGISTER)\n  }\n\n  userHasValidateScope() {\n    const validateScopes = [\n      SCOPES.RECORD_REGISTER,\n      SCOPES.RECORD_SUBMIT_FOR_APPROVAL,\n      SCOPES.RECORD_SUBMIT_FOR_UPDATES\n    ] as Scope[]\n\n    return (\n      this.props.scope &&\n      this.props.scope.some((scope) => validateScopes.includes(scope))\n    )\n  }\n\n  render() {\n    const { intl, declaration } = this.props\n    if (!this.userHasRegisterScope() && !this.userHasValidateScope()) {\n      return (\n        <ErrorText id=\"review-unauthorized-error-text\">\n          {intl.formatMessage(errorMessages.unauthorized)}\n        </ErrorText>\n      )\n    }\n    if (!declaration) {\n      return (\n        <Navigate\n          to={formatUrl(REGISTRAR_HOME_TAB, {\n            tabId: WORKQUEUE_TABS.readyForReview,\n            selectorId: ''\n          })}\n        />\n      )\n    } else {\n      return <RegisterForm {...this.props} />\n    }\n  }\n}\n\nfunction getEvent(eventType: string) {\n  switch (eventType && eventType.toLocaleLowerCase()) {\n    case 'birth':\n      return EventType.Birth\n    case 'death':\n      return EventType.Death\n    case 'marriage':\n      return EventType.Marriage\n    default:\n      return EventType.Birth\n  }\n}",
      "startLine": 63,
      "endLine": 116,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/ReviewForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@64-66",
      "type": "method_definition",
      "name": "userHasRegisterScope",
      "text": "userHasRegisterScope() {\n    return this.props.scope && this.props.scope.includes(SCOPES.RECORD_REGISTER)\n  }",
      "startLine": 64,
      "endLine": 66,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/ReviewForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@68-79",
      "type": "method_definition",
      "name": "userHasValidateScope",
      "text": "userHasValidateScope() {\n    const validateScopes = [\n      SCOPES.RECORD_REGISTER,\n      SCOPES.RECORD_SUBMIT_FOR_APPROVAL,\n      SCOPES.RECORD_SUBMIT_FOR_UPDATES\n    ] as Scope[]\n\n    return (\n      this.props.scope &&\n      this.props.scope.some((scope) => validateScopes.includes(scope))\n    )\n  }",
      "startLine": 68,
      "endLine": 79,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/ReviewForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@81-102",
      "type": "method_definition",
      "name": "render",
      "text": "render() {\n    const { intl, declaration } = this.props\n    if (!this.userHasRegisterScope() && !this.userHasValidateScope()) {\n      return (\n        <ErrorText id=\"review-unauthorized-error-text\">\n          {intl.formatMessage(errorMessages.unauthorized)}\n        </ErrorText>\n      )\n    }\n    if (!declaration) {\n      return (\n        <Navigate\n          to={formatUrl(REGISTRAR_HOME_TAB, {\n            tabId: WORKQUEUE_TABS.readyForReview,\n            selectorId: ''\n          })}\n        />\n      )\n    } else {\n      return <RegisterForm {...this.props} />\n    }\n  }",
      "startLine": 81,
      "endLine": 102,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/ReviewForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@106-115",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (eventType && eventType.toLocaleLowerCase()) {\n    case 'birth':\n      return EventType.Birth\n    case 'death':\n      return EventType.Death\n    case 'marriage':\n      return EventType.Marriage\n    default:\n      return EventType.Birth\n  }",
      "startLine": 106,
      "endLine": 115,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/ReviewForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@123-155",
      "type": "function_declaration",
      "name": "mapStatetoProps",
      "text": "function mapStatetoProps(\n  state: IStoreState,\n  props: RouteComponentProps<{\n    pageRoute: string\n    pageId: string\n    groupId: string\n    declarationId: string\n    event: string\n  }>\n) {\n  const match = props.router.match\n  if (!match?.params?.event) {\n    throw new Error('Event is not provided as path param')\n  }\n\n  const reviewFormState: IReviewFormState = getReviewForm(\n    state\n  ) as IReviewFormState\n  const form = reviewFormState[match.params.event.toLowerCase()]\n\n  const declaration = state.declarationsState.declarations.find(\n    ({ id, review }) => id === match.params.declarationId && review === true\n  )\n  return {\n    declaration,\n    scope: getScope(state),\n    declarationId: match.params.declarationId,\n    event: getEvent(match.params.event),\n    registerForm: form,\n    pageRoute: REVIEW_EVENT_PARENT_FORM_PAGE_GROUP,\n    duplicate: Boolean(declaration?.duplicates?.length)\n  }\n}",
      "startLine": 123,
      "endLine": 155,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/ReviewForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@131-135",
      "type": "function_declaration",
      "name": "getStatusFromHistory",
      "text": "function getStatusFromHistory(history: ReadonlyArray<History>) {\n  return [...history]\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n    .find((entry) => entry.action == null)?.regStatus as RegStatus\n}",
      "startLine": 131,
      "endLine": 135,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/duplicate/DuplicateFormTabs.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@183-185",
      "type": "method_definition",
      "name": "for",
      "text": "for (const key in sectionErrors[section.id]) {\n      return sectionErrors[section.id][key].nestedFields[field.name] || []\n    }",
      "startLine": 183,
      "endLine": 185,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 10,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/duplicate/DuplicateFormTabs.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@309-316",
      "type": "function_declaration",
      "name": "renderSelectOrRadioLabel",
      "text": "function renderSelectOrRadioLabel(\n  value: IFormFieldValue,\n  options: Array<ISelectOption | IRadioOption>,\n  intl: IntlShape\n) {\n  const option = options.find((option) => option.value === value)\n  return option?.label ? intl.formatMessage(option.label) : value\n}",
      "startLine": 309,
      "endLine": 316,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@318-364",
      "type": "function_declaration",
      "name": "renderSelectDynamicLabel",
      "text": "function renderSelectDynamicLabel(\n  value: IFormFieldValue,\n  options: IDynamicOptions,\n  draftData: IFormSectionData,\n  intl: IntlShape,\n  offlineCountryConfig: IOfflineData,\n  language: string\n) {\n  if (!options.resource) {\n    const dependency = options.dependency\n      ? draftData[options.dependency]\n      : false\n    const selectedOption = dependency\n      ? options.options &&\n        options.options[dependency.toString()].find(\n          (option) => option.value === value\n        )\n      : false\n    return selectedOption ? intl.formatMessage(selectedOption.label) : value\n  } else {\n    if (options.resource) {\n      let selectedLocation: ILocation\n      const locationId = value as string\n      // HOTFIX for handling international address\n      if (options.resource === 'locations') {\n        selectedLocation = offlineCountryConfig[OFFLINE_LOCATIONS_KEY][\n          locationId\n        ] || { name: locationId, alias: locationId }\n      } else {\n        selectedLocation =\n          offlineCountryConfig[OFFLINE_FACILITIES_KEY][locationId]\n      }\n\n      if (selectedLocation) {\n        if (language !== getDefaultLanguage()) {\n          return selectedLocation.alias\n        } else {\n          return selectedLocation.name\n        }\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n}",
      "startLine": 318,
      "endLine": 364,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSection.tsx",
      "language": "tsx"
    },
    {
      "id": "class_declaration@616-838",
      "type": "class_declaration",
      "name": "ReviewSectionComp",
      "text": "class ReviewSectionComp extends React.Component<FullProps, State> {\n  hasChangesBeenMade = false\n\n  constructor(props: FullProps) {\n    super(props)\n\n    this.state = {\n      displayEditDialog: false,\n      editClickedSectionGroupId: '',\n      editClickFieldName: '',\n      editClickedSectionId: '',\n      previewImage: null\n    }\n  }\n\n  UNSAFE_componentWillUpdate() {\n    this.hasChangesBeenMade = false\n  }\n\n  getVisibleSections = (formSections: IFormSection[]) => {\n    const { draft, userDetails } = this.props\n\n    return formSections.filter(\n      (section) =>\n        getVisibleSectionGroupsBasedOnConditions(\n          section,\n          draft.data[section.id] || {},\n          draft.data,\n          userDetails\n        ).length > 0\n    )\n  }\n\n  getViewableSection = (registerForm: IForm): IFormSection[] => {\n    const sections = registerForm.sections.filter(({ viewType }) =>\n      ['form', 'hidden', 'preview', 'review'].includes(viewType)\n    )\n\n    return this.getVisibleSections(sections)\n  }\n\n  getLabelForDoc = (docForWhom: string, docType: string) => {\n    const { intl } = this.props\n    const documentSection = this.props.form.sections.find(\n      (section) => section.id === 'documents'\n    )\n    const docSectionFields = documentSection && documentSection.groups[0].fields\n    const docFieldsWithOptions =\n      docSectionFields &&\n      (docSectionFields.filter(\n        (field) =>\n          field.extraValue && field.type === DOCUMENT_UPLOADER_WITH_OPTION\n      ) as IDocumentUploaderWithOptionsFormField[])\n    const matchedField = docFieldsWithOptions?.find(\n      (field) => field.extraValue === docForWhom\n    )\n    const matchedOption = matchedField?.options.find(\n      (option) => option.value === docType\n    )\n    return (\n      matchedField &&\n      matchedOption &&\n      intl.formatMessage(matchedField.label) +\n        ' (' +\n        intl.formatMessage(matchedOption.label) +\n        ')'\n    )\n  }\n  getAllAttachmentInPreviewList = (declaration: IDeclaration) => {\n    const options = this.prepSectionDocOptions(declaration)\n\n    return options.uploadedDocuments.length > 0 ? (\n      <DocumentListPreviewContainer>\n        <DocumentListPreview\n          id=\"all_attachment_list\"\n          documents={options.uploadedDocuments}\n          onSelect={this.selectForPreview}\n          dropdownOptions={options.selectOptions}\n          inReviewSection={true}\n        />\n      </DocumentListPreviewContainer>\n    ) : null\n  }\n\n  prepSectionDocOptions = (\n    draft: IDeclaration\n  ): IDocumentViewerOptions & {\n    uploadedDocuments: IFileValue[]\n  } => {\n    let selectOptions: SelectComponentOptions[] = []\n    let documentOptions: SelectComponentOptions[] = []\n    let uploadedDocuments: IFileValue[] = []\n\n    const prepDocumentOption = this.prepSectionDocuments(draft)\n    selectOptions = [...selectOptions, ...prepDocumentOption.selectOptions]\n    documentOptions = [\n      ...documentOptions,\n      ...prepDocumentOption.documentOptions\n    ]\n    uploadedDocuments = [\n      ...uploadedDocuments,\n      ...prepDocumentOption.uploadedDocuments\n    ]\n    return { selectOptions, documentOptions, uploadedDocuments }\n  }\n\n  prepSectionDocuments = (\n    draft: IDeclaration\n  ): IDocumentViewerOptions & { uploadedDocuments: IFileValue[] } => {\n    const { documentsSection } = this.props\n\n    const draftItemName = documentsSection.id\n    const documentOptions: SelectComponentOptions[] = []\n    const selectOptions: SelectComponentOptions[] = []\n\n    let uploadedDocuments: IFileValue[] = []\n\n    for (const index in draft.data[draftItemName]) {\n      if (isArray(draft.data[draftItemName][index])) {\n        const newDocuments = draft.data[draftItemName][\n          index\n        ] as unknown as IFileValue[]\n        uploadedDocuments = uploadedDocuments.concat(newDocuments)\n      }\n    }\n\n    uploadedDocuments = uploadedDocuments.filter((document) => {\n      const label =\n        this.getLabelForDoc(\n          document.optionValues[0] as string,\n          document.optionValues[1] as string\n        ) || (document.optionValues[1] as string)\n\n      /**\n       * Skip insertion if the value already exist\n       */\n      if (selectOptions.findIndex((elem) => elem.value === label) > -1) {\n        return true\n      }\n\n      documentOptions.push({\n        value: document.data,\n        label\n      })\n      selectOptions.push({\n        value: label,\n        label\n      })\n      return true\n    })\n\n    return {\n      selectOptions,\n      documentOptions,\n      uploadedDocuments\n    }\n  }\n\n  toggleDisplayDialog = () => {\n    this.setState((prevState) => ({\n      displayEditDialog: !prevState.displayEditDialog\n    }))\n  }\n\n  editLinkClickHandler = (\n    sectionId: string,\n    sectionGroupId: string,\n    fieldName: string\n  ) => {\n    this.setState(() => ({\n      editClickedSectionId: sectionId,\n      editClickedSectionGroupId: sectionGroupId,\n      editClickFieldName: fieldName\n    }))\n    this.toggleDisplayDialog()\n  }\n\n  editLinkClickHandlerForDraft = (\n    sectionId: string,\n    groupId: string,\n    fieldName?: string\n  ) => {\n    const { draft, pageRoute } = this.props\n    const declaration = draft\n    declaration.review = true\n\n    this.props.router.navigate(\n      generateGoToPageGroupUrl({\n        pageRoute,\n        declarationId: declaration.id,\n        pageId: sectionId,\n        groupId,\n        event: declaration.event.toLowerCase(),\n        fieldNameHash: fieldName\n      })\n    )\n  }\n\n  replaceHandler(sectionId: string, groupId: string) {\n    const { draft, pageRoute, writeDeclaration } = this.props\n    const declaration = draft\n    declaration.data[sectionId] = {}\n    writeDeclaration(declaration)\n\n    this.props.router.navigate(\n      generateGoToPageGroupUrl({\n        pageRoute,\n        declarationId: declaration.id,\n        pageId: sectionId,\n        groupId,\n        event: declaration.event.toLowerCase()\n      })\n    )\n  }\n\n  userHasRegisterScope() {\n    if (this.props.scope) {\n      return (\n        this.props.scope && this.props.scope.includes(SCOPES.RECORD_REGISTER)\n      )\n    } else {\n      return false\n    }",
      "startLine": 616,
      "endLine": 838,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSection.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@734-739",
      "type": "method_definition",
      "name": "if",
      "text": "if (isArray(draft.data[draftItemName][index])) {\n        const newDocuments = draft.data[draftItemName][\n          index\n        ] as unknown as IFileValue[]\n        uploadedDocuments = uploadedDocuments.concat(newDocuments)\n      }",
      "startLine": 734,
      "endLine": 739,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 15,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSection.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@832-836",
      "type": "method_definition",
      "name": "if",
      "text": "if (this.props.scope) {\n      return (\n        this.props.scope && this.props.scope.includes(SCOPES.RECORD_REGISTER)\n      )\n    }",
      "startLine": 832,
      "endLine": 836,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSection.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@929-931",
      "type": "method_definition",
      "name": "for",
      "text": "for (const key in sectionErrors[section.id]) {\n      return sectionErrors[section.id][key].nestedFields[field.name] || []\n    }",
      "startLine": 929,
      "endLine": 931,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@2090-2109",
      "type": "function_declaration",
      "name": "fieldToReadOnlyFields",
      "text": "function fieldToReadOnlyFields(field: IFormField): IFormField {\n  const readyOnlyField = {\n    ...field,\n    readonly: true\n  }\n  if (field.nestedFields) {\n    readyOnlyField.nestedFields = Object.entries(\n      field.nestedFields\n    ).reduce<INestedInputFields>((nestedInputFields, [key, nestedFields]) => {\n      return {\n        ...nestedInputFields,\n        [key]: nestedFields.map((nestedField) => ({\n          ...nestedField,\n          readonly: true\n        }))\n      }\n    }, {})\n  }\n  return readyOnlyField\n}",
      "startLine": 2090,
      "endLine": 2109,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/review/ReviewSection.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@134-139",
      "type": "function_declaration",
      "name": "getPercentage",
      "text": "function getPercentage(total: number | undefined, current: number | undefined) {\n  if (!total || total <= 0 || !current || current <= 0) {\n    return 0\n  }\n  return Math.round((current / total) * 100)\n}",
      "startLine": 134,
      "endLine": 139,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/RegistrationsList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@180-187",
      "type": "function_declaration",
      "name": "toggleSort",
      "text": "function toggleSort(key: keyof SortMap) {\n    const invertedOrder =\n      sortOrder[key] === SORT_ORDER.DESCENDING\n        ? SORT_ORDER.ASCENDING\n        : SORT_ORDER.DESCENDING\n    setSortOrder({ ...sortOrder, [key]: invertedOrder })\n    setColumnToBeSort(key)\n  }",
      "startLine": 180,
      "endLine": 187,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/RegistrationsList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@189-364",
      "type": "function_declaration",
      "name": "getColumns",
      "text": "function getColumns() {\n    const commonColumns = [\n      {\n        key: 'total',\n        label: intl.formatMessage(messages.totalRegistrations),\n        width: 20,\n        isSortable: true,\n        sortFunction: () => toggleSort('total'),\n        icon:\n          columnToBeSort === 'total' ? (\n            <SortArrow active={true} />\n          ) : (\n            <SortArrow active={false} />\n          ),\n        isSorted: columnToBeSort === 'total' ? true : false\n      },\n      {\n        key: 'delayed',\n        label: intl.formatMessage(\n          messages.performanceDelayedRegistrationsLabel\n        ),\n        width: 20,\n        isSortable: true,\n        sortFunction: () => toggleSort('delayed_num'),\n        icon:\n          columnToBeSort === 'delayed_num' ? (\n            <SortArrow active={true} />\n          ) : (\n            <SortArrow active={false} />\n          ),\n        isSorted: columnToBeSort === 'delayed_num' ? true : false\n      }\n    ]\n\n    if (event === EVENT_OPTIONS.BIRTH) {\n      commonColumns.push({\n        key: 'late',\n        label: intl.formatMessage(messages.performanceLateRegistrationsLabel),\n        width: 20,\n        isSortable: true,\n        sortFunction: () => toggleSort('late_num'),\n        icon:\n          columnToBeSort === 'late_num' ? (\n            <SortArrow active={true} />\n          ) : (\n            <SortArrow active={false} />\n          ),\n        isSorted: columnToBeSort === 'late_num' ? true : false\n      })\n    }\n\n    if (filterBy === FILTER_BY_OPTIONS.BY_TIME)\n      return [\n        {\n          key: 'month',\n          label: intl.formatMessage(messages.month),\n          width: 20,\n          isSortable: true,\n          sortFunction: () => toggleSort('time'),\n          icon:\n            columnToBeSort === 'time' ? (\n              <SortArrow active={true} />\n            ) : (\n              <SortArrow active={false} />\n            ),\n          isSorted: columnToBeSort === 'time' ? true : false\n        },\n        ...commonColumns,\n        {\n          key: 'home',\n          label:\n            event === EVENT_OPTIONS.DEATH\n              ? intl.formatMessage(messages.performanceHomeDeath)\n              : intl.formatMessage(messages.performanceHomeBirth),\n          width: 20,\n          isSortable: true,\n          sortFunction: () => toggleSort('home_num'),\n          icon:\n            columnToBeSort === 'home_num' ? (\n              <SortArrow active={true} />\n            ) : (\n              <SortArrow active={false} />\n            ),\n          isSorted: columnToBeSort === 'home_num' ? true : false\n        },\n        {\n          key: 'healthFacility',\n          label:\n            event === EVENT_OPTIONS.DEATH\n              ? intl.formatMessage(messages.performanceHealthFacilityDeath)\n              : intl.formatMessage(messages.performanceHealthFacilityBirth),\n          width: 20,\n          isSortable: true,\n          sortFunction: () => toggleSort('healthFacility_num'),\n          icon:\n            columnToBeSort === 'healthFacility_num' ? (\n              <SortArrow active={true} />\n            ) : (\n              <SortArrow active={false} />\n            ),\n          isSorted: columnToBeSort === 'healthFacility_num' ? true : false\n        }\n      ]\n    if (filterBy === FILTER_BY_OPTIONS.BY_LOCATION)\n      return [\n        {\n          key: 'location',\n          label: intl.formatMessage(messages.location),\n          width: 20,\n          isSortable: true,\n          sortFunction: () => toggleSort('location'),\n          icon:\n            columnToBeSort === 'location' ? (\n              <SortArrow active={true} />\n            ) : (\n              <SortArrow active={false} />\n            ),\n          isSorted: columnToBeSort === 'location' ? true : false\n        },\n        ...commonColumns,\n        {\n          key: 'home',\n          label:\n            event === EVENT_OPTIONS.DEATH\n              ? intl.formatMessage(messages.performanceHomeDeath)\n              : intl.formatMessage(messages.performanceHomeBirth),\n          width: 20,\n          isSortable: true,\n          sortFunction: () => toggleSort('home_num'),\n          icon:\n            columnToBeSort === 'home_num' ? (\n              <SortArrow active={true} />\n            ) : (\n              <SortArrow active={false} />\n            ),\n          isSorted: columnToBeSort === 'home_num' ? true : false\n        },\n        {\n          key: 'healthFacility',\n          label:\n            event === EVENT_OPTIONS.DEATH\n              ? intl.formatMessage(messages.performanceHealthFacilityDeath)\n              : intl.formatMessage(messages.performanceHealthFacilityBirth),\n          width: 20,\n          isSortable: true,\n          sortFunction: () => toggleSort('healthFacility_num'),\n          icon:\n            columnToBeSort === 'healthFacility_num' ? (\n              <SortArrow active={true} />\n            ) : (\n              <SortArrow active={false} />\n            ),\n          isSorted: columnToBeSort === 'healthFacility_num' ? true : false\n        }\n      ]\n    if (filterBy === FILTER_BY_OPTIONS.BY_REGISTRAR)\n      return [\n        {\n          key: 'name',\n          label: intl.formatMessage(messages.registrar),\n          width: 20\n        },\n        {\n          key: 'role',\n          label: intl.formatMessage(messages.typeColumnHeader),\n          width: 20\n        },\n        {\n          key: 'location',\n          label: intl.formatMessage(messages.officeColumnHeader),\n          width: 20\n        },\n        ...commonColumns\n      ]\n    throw new Error('Invalid Filter')\n  }",
      "startLine": 189,
      "endLine": 364,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/RegistrationsList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@366-368",
      "type": "function_declaration",
      "name": "getFieldAgentTypeLabel",
      "text": "function getFieldAgentTypeLabel(type: string) {\n    return userMessages[type] ? intl.formatMessage(userMessages[type]) : type\n  }",
      "startLine": 366,
      "endLine": 368,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/RegistrationsList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@370-386",
      "type": "function_declaration",
      "name": "showWithTooltip",
      "text": "function showWithTooltip(\n    total: number,\n    amount: number,\n    key: string,\n    index: number\n  ) {\n    return (\n      <>\n        <ReactTooltip id={`${key}_${index}`}>\n          <ToolTipContainer>{amount}</ToolTipContainer>\n        </ReactTooltip>\n        <span data-tip data-for={`${key}_${index}`}>\n          {getPercentage(total, amount)}%\n        </span>\n      </>\n    )\n  }",
      "startLine": 370,
      "endLine": 386,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/RegistrationsList.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@522-524",
      "type": "method_definition",
      "name": "if",
      "text": "if (!content) {\n      return []\n    }",
      "startLine": 522,
      "endLine": 524,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/RegistrationsList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@194-200",
      "type": "function_declaration",
      "name": "getDeclarationIconColor",
      "text": "function getDeclarationIconColor(declaration: IDeclaration): string {\n  return declaration.submissionStatus === SUBMISSION_STATUS.DRAFT\n    ? 'purple'\n    : declaration.registrationStatus\n      ? STATUSTOCOLOR[declaration.registrationStatus]\n      : 'orange'\n}",
      "startLine": 194,
      "endLine": 200,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/RegisterForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@243-658",
      "type": "function_declaration",
      "name": "FormAppBar",
      "text": "function FormAppBar({\n  section,\n  declaration,\n  duplicate,\n  modifyDeclarationMethod,\n  deleteDeclarationMethod,\n  printDeclarationMethod,\n  canSaveAndExit\n}: {\n  duplicate: boolean | undefined\n  section: IFormSection\n  declaration: IDeclaration\n  modifyDeclarationMethod: (declration: IDeclaration) => void\n  deleteDeclarationMethod: (declration: IDeclaration) => void\n  printDeclarationMethod: (declarationId: string) => void\n  canSaveAndExit: boolean\n}) {\n  const navigate = useNavigate()\n  const intl = useIntl()\n  const dispatch = useDispatch()\n  const [modal, openModal] = useModal()\n\n  const isFormDataAltered = () => {\n    if (!declaration.localData) {\n      // if there is no localData property\n      // that means it's a draft and has unsaved changes\n      return true\n    }\n\n    return !isEqual(declaration.localData, declaration.data)\n  }\n\n  const getRedirectionTabOnSaveOrExit = () => {\n    const status =\n      declaration.submissionStatus || declaration.registrationStatus\n    switch (status) {\n      case 'DECLARED':\n        return WORKQUEUE_TABS.readyForReview\n      case 'DRAFT':\n        return WORKQUEUE_TABS.myDrafts\n      case 'IN_PROGRESS':\n        return WORKQUEUE_TABS.inProgressFieldAgent\n      case 'REJECTED':\n        return WORKQUEUE_TABS.requiresUpdate\n      case 'VALIDATED':\n        return WORKQUEUE_TABS.readyForReview\n      default:\n        return WORKQUEUE_TABS.inProgress\n    }\n  }\n  const handleSaveAndExit = async () => {\n    const saveAndExitConfirm = await openModal<boolean | null>((close) => (\n      <ResponsiveModal\n        id=\"save_declaration_confirmation\"\n        autoHeight\n        responsive={false}\n        title={intl.formatMessage(messages.saveDeclarationConfirmModalTitle)}\n        actions={[\n          <Button\n            type=\"tertiary\"\n            id=\"cancel_save_exit\"\n            key=\"cancel_save_exit\"\n            onClick={() => {\n              close(null)\n            }}\n          >\n            {intl.formatMessage(buttonMessages.cancel)}\n          </Button>,\n          <Button\n            type=\"positive\"\n            key=\"confirm_save_exit\"\n            id=\"confirm_save_exit\"\n            onClick={() => {\n              close(true)\n            }}\n          >\n            {intl.formatMessage(buttonMessages.confirm)}\n          </Button>\n        ]}\n        show={true}\n        handleClose={() => close(null)}\n      >\n        <Stack>\n          <Text variant=\"reg16\" element=\"p\" color=\"grey500\">\n            {intl.formatMessage(\n              messages.saveDeclarationConfirmModalDescription\n            )}\n          </Text>\n        </Stack>\n      </ResponsiveModal>\n    ))\n\n    if (saveAndExitConfirm) {\n      // saving current changes to localData\n      // for reverting back the changes when users exits without saving\n      declaration.localData = declaration.data\n      // save declaration and exit\n      dispatch(writeDeclaration(declaration))\n\n      navigate(\n        generateGoToHomeTabUrl({\n          tabId: getRedirectionTabOnSaveOrExit()\n        })\n      )\n    }\n  }\n\n  const handleExit = async () => {\n    const isDataAltered = isFormDataAltered()\n    if (!isDataAltered) {\n      navigate(\n        generateGoToHomeTabUrl({\n          tabId: getRedirectionTabOnSaveOrExit()\n        })\n      )\n\n      return\n    }\n    const [exitModalTitle, exitModalDescription] =\n      isCorrection(declaration) ||\n      declaration.registrationStatus === RegStatus.CorrectionRequested\n        ? [\n            intl.formatMessage(\n              messages.exitWithoutSavingModalForCorrectionRecordTitle\n            ),\n            intl.formatMessage(\n              messages.exitWithoutSavingModalForCorrectionRecordDescription\n            )\n          ]\n        : [\n            intl.formatMessage(\n              messages.exitWithoutSavingDeclarationConfirmModalTitle\n            ),\n            intl.formatMessage(\n              messages.exitWithoutSavingDeclarationConfirmModalDescription\n            )\n          ]\n    const exitConfirm = await openModal<boolean | null>((close) => (\n      <ResponsiveModal\n        autoHeight\n        responsive={false}\n        title={exitModalTitle}\n        actions={[\n          <Button\n            type=\"tertiary\"\n            id=\"cancel_save_without_exit\"\n            key=\"cancel_save_without_exit\"\n            onClick={() => {\n              close(null)\n            }}\n          >\n            {intl.formatMessage(buttonMessages.cancel)}\n          </Button>,\n          <Button\n            type=\"primary\"\n            key=\"confirm_save_without_exit\"\n            id=\"confirm_save_without_exit\"\n            onClick={() => {\n              close(true)\n            }}\n          >\n            {intl.formatMessage(buttonMessages.confirm)}\n          </Button>\n        ]}\n        show={true}\n        handleClose={() => close(null)}\n      >\n        <Stack>\n          <Text variant=\"reg16\" element=\"p\" color=\"grey500\">\n            {exitModalDescription}\n          </Text>\n        </Stack>\n      </ResponsiveModal>\n    ))\n\n    if (exitConfirm) {\n      if (!declaration.localData) {\n        deleteDeclarationMethod(declaration)\n      } else {\n        modifyDeclarationMethod({\n          ...declaration,\n          data: declaration.localData\n        })\n      }\n      navigate(\n        generateGoToHomeTabUrl({\n          tabId: getRedirectionTabOnSaveOrExit()\n        })\n      )\n    }\n  }\n\n  const handleDelete = async () => {\n    const deleteConfirm = await openModal<boolean | null>((close) => (\n      <DeleteModal intl={intl} close={close}></DeleteModal>\n    ))\n\n    deleteConfirm && deleteDeclarationMethod(declaration)\n    return\n  }\n  switch (section.viewType) {\n    case 'review':\n      return (\n        <>\n          <AppBar\n            desktopLeft={\n              duplicate ? (\n                <Duplicate />\n              ) : (\n                <DeclarationIcon color={getDeclarationIconColor(declaration)} />\n              )\n            }\n            desktopTitle={\n              duplicate\n                ? intl.formatMessage(duplicateMessages.duplicateReviewHeader, {\n                    event: declaration.event\n                  })\n                : intl.formatMessage(messages.newVitalEventRegistration, {\n                    event: declaration.event\n                  })\n            }\n            desktopRight={\n              <>\n                {!duplicate &&\n                  !isCorrection(declaration) &&\n                  declaration.registrationStatus !==\n                    RegStatus.CorrectionRequested && (\n                    <>\n                      <Button\n                        id=\"save-exit-btn\"\n                        type=\"primary\"\n                        size=\"small\"\n                        onClick={handleSaveAndExit}\n                      >\n                        <Icon name=\"DownloadSimple\" />\n                        {intl.formatMessage(buttonMessages.saveExitButton)}\n                      </Button>\n                      {window.config.FEATURES.PRINT_DECLARATION && (\n                        <Button\n                          id=\"print-btn\"\n                          type=\"secondary\"\n                          size=\"small\"\n                          onClick={() => printDeclarationMethod(declaration.id)}\n                        >\n                          <Icon name=\"Printer\" />\n                          {intl.formatMessage(buttonMessages.printDeclaration)}\n                        </Button>\n                      )}\n                    </>\n                  )}\n                <Button\n                  id=\"exit-btn\"\n                  type=\"secondary\"\n                  size=\"small\"\n                  onClick={handleExit}\n                >\n                  <Icon name=\"X\" />\n                  {intl.formatMessage(buttonMessages.exitButton)}\n                </Button>\n              </>\n            }\n            mobileLeft={\n              duplicate ? (\n                <Duplicate />\n              ) : (\n                <DeclarationIcon color={getDeclarationIconColor(declaration)} />\n              )\n            }\n            mobileTitle={\n              duplicate\n                ? intl.formatMessage(duplicateMessages.duplicateReviewHeader, {\n                    event: declaration.event\n                  })\n                : intl.formatMessage(messages.newVitalEventRegistration, {\n                    event: declaration.event\n                  })\n            }\n            mobileRight={\n              <>\n                {!duplicate && !isCorrection(declaration) && (\n                  <Button type=\"icon\" size=\"small\" onClick={handleSaveAndExit}>\n                    <Icon name=\"DownloadSimple\" />\n                  </Button>\n                )}\n                <Button type=\"icon\" size=\"small\" onClick={handleExit}>\n                  <Icon name=\"X\" />\n                </Button>\n              </>\n            }\n          />\n          {modal}\n        </>\n      )\n    case 'preview':\n    case 'form':\n      return (\n        <>\n          <AppBar\n            desktopLeft={\n              <DeclarationIcon color={getDeclarationIconColor(declaration)} />\n            }\n            desktopTitle={intl.formatMessage(\n              messages.newVitalEventRegistration,\n              {\n                event: declaration.event\n              }\n            )}\n            desktopRight={\n              <>\n                {!isCorrection(declaration) && (\n                  <Button\n                    id=\"save-exit-btn\"\n                    type=\"primary\"\n                    size=\"small\"\n                    disabled={!canSaveAndExit}\n                    onClick={handleSaveAndExit}\n                  >\n                    <Icon name=\"DownloadSimple\" />\n                    {intl.formatMessage(buttonMessages.saveExitButton)}\n                  </Button>\n                )}\n                {section.viewType === 'preview' &&\n                  window.config.FEATURES.PRINT_DECLARATION && (\n                    <Button\n                      id=\"print-btn\"\n                      type=\"secondary\"\n                      size=\"small\"\n                      onClick={() => printDeclarationMethod(declaration.id)}\n                    >\n                      <Icon name=\"Printer\" />\n                      {intl.formatMessage(buttonMessages.printDeclaration)}\n                    </Button>\n                  )}\n                <Button type=\"secondary\" size=\"small\" onClick={handleExit}>\n                  <Icon name=\"X\" />\n                  {intl.formatMessage(buttonMessages.exitButton)}\n                </Button>\n                {declaration.submissionStatus === SUBMISSION_STATUS.DRAFT && (\n                  <ToggleMenu\n                    id=\"eventToggleMenu\"\n                    toggleButton={\n                      <Icon\n                        name=\"DotsThreeVertical\"\n                        color=\"primary\"\n                        size=\"large\"\n                      />\n                    }\n                    menuItems={[\n                      {\n                        label: intl.formatMessage(\n                          buttonMessages.deleteDeclaration\n                        ),\n                        handler: () => {\n                          handleDelete()\n                        }\n                      }\n                    ]}\n                  />\n                )}\n              </>\n            }\n            mobileLeft={\n              <DeclarationIcon color={getDeclarationIconColor(declaration)} />\n            }\n            mobileTitle={intl.formatMessage(\n              messages.newVitalEventRegistration,\n              {\n                event: declaration.event\n              }\n            )}\n            mobileRight={\n              <>\n                {!isCorrection(declaration) && (\n                  <Button\n                    type=\"icon\"\n                    size=\"small\"\n                    disabled={!canSaveAndExit}\n                    onClick={handleSaveAndExit}\n                  >\n                    <Icon name=\"DownloadSimple\" />\n                  </Button>\n                )}\n                <Button type=\"icon\" size=\"small\" onClick={handleExit}>\n                  <Icon name=\"X\" />\n                </Button>\n                {declaration.submissionStatus === SUBMISSION_STATUS.DRAFT && (\n                  <ToggleMenu\n                    id=\"eventToggleMenu\"\n                    toggleButton={\n                      <Icon\n                        name=\"DotsThreeVertical\"\n                        color=\"primary\"\n                        size=\"large\"\n                      />\n                    }\n                    menuItems={[\n                      {\n                        label: intl.formatMessage(\n                          buttonMessages.deleteDeclaration\n                        ),\n                        handler: () => {\n                          handleDelete()\n                        }\n                      }\n                    ]}\n                  />\n                )}\n              </>\n            }\n          />\n          {modal}\n        </>\n      )\n  }\n  return null\n}",
      "startLine": 243,
      "endLine": 658,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/RegisterForm.tsx",
      "language": "tsx"
    },
    {
      "id": "class_declaration@660-771",
      "type": "class_declaration",
      "name": "RegisterFormView",
      "text": "class RegisterFormView extends React.Component<FullProps, State> {\n  constructor(props: FullProps) {\n    super(props)\n    this.state = {\n      isDataAltered: false,\n      rejectFormOpen: false,\n      hasError: false,\n      showConfirmationModal: false,\n      confirmDeleteDeclarationModal: false,\n      isFileUploading: false,\n      startTime: 0,\n      selectedDuplicateComId: props.declaration.id,\n      isDuplicateDeclarationLoading: false,\n      formFieldKey: `${props.activeSection.id}-${props.activeSectionGroup.id}`\n    }\n  }\n  setAllFormFieldsTouched!: (touched: FormikTouched<FormikValues>) => void\n\n  setSelectedCompId = (id: string) => {\n    this.setState({ selectedDuplicateComId: id })\n  }\n\n  showAllValidationErrors = () => {\n    const touched = getSectionFields(\n      this.props.activeSection,\n      this.props.declaration.data[this.props.activeSection.id],\n      this.props.declaration.data\n    ).reduce((memo, field) => {\n      let fieldTouched: boolean | ITouchedNestedFields = true\n      if (field.nestedFields) {\n        fieldTouched = {\n          value: true,\n          nestedFields: flatten(Object.values(field.nestedFields)).reduce(\n            (nestedMemo, nestedField) => ({\n              ...nestedMemo,\n              [nestedField.name]: true\n            }),\n            {}\n          )\n        }\n      }\n      return { ...memo, [field.name]: fieldTouched }\n    }, {})\n    this.setAllFormFieldsTouched(touched)\n  }\n\n  userHasRegisterScope() {\n    return this.props.scope && this.props.scope.includes(SCOPES.RECORD_REGISTER)\n  }\n\n  userHasValidateScope() {\n    const validateScopes = [\n      SCOPES.RECORD_REGISTER,\n      SCOPES.RECORD_SUBMIT_FOR_APPROVAL,\n      SCOPES.RECORD_SUBMIT_FOR_UPDATES\n    ] as Scope[]\n\n    return (\n      this.props.scope &&\n      this.props.scope.some((x) => validateScopes.includes(x))\n    )\n  }\n\n  componentDidMount() {\n    this.setState({ startTime: Date.now() })\n  }\n\n  componentDidUpdate(prevProps: FullProps) {\n    const oldHash = prevProps.router.location && prevProps.router.location.hash\n    const newHash =\n      this.props.router.location && this.props.router.location.hash\n    const { declaration } = this.props\n    const informantTypeChanged =\n      prevProps.declaration?.data?.informant?.informantType !==\n        declaration?.data?.informant?.informantType &&\n      Boolean(declaration?.data?.informant?.informantType)\n\n    // see https://github.com/opencrvs/opencrvs-core/issues/5820\n    if (informantTypeChanged) {\n      let informant\n      let modifiedDeclaration = declaration\n\n      if (declaration?.data?.informant?.informantType === 'MOTHER') {\n        informant = 'mother'\n      } else if (declaration?.data?.informant?.informantType === 'FATHER') {\n        informant = 'father'\n      } else if (declaration?.data?.informant?.informantType === 'SPOUSE') {\n        informant = 'spouse'\n      }\n\n      modifiedDeclaration = {\n        ...modifiedDeclaration,\n        data: {\n          ...modifiedDeclaration.data,\n          informant: {\n            informantType: modifiedDeclaration.data.informant?.informantType\n          }\n        }\n      }\n\n      if (informant) {\n        modifiedDeclaration = {\n          ...modifiedDeclaration,\n          data: {\n            ...modifiedDeclaration.data,\n            [informant]: {\n              ...modifiedDeclaration.data[informant],\n              detailsExist: true\n            }\n          }\n        }\n      }",
      "startLine": 660,
      "endLine": 771,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/RegisterForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@661-675",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: FullProps) {\n    super(props)\n    this.state = {\n      isDataAltered: false,\n      rejectFormOpen: false,\n      hasError: false,\n      showConfirmationModal: false,\n      confirmDeleteDeclarationModal: false,\n      isFileUploading: false,\n      startTime: 0,\n      selectedDuplicateComId: props.declaration.id,\n      isDuplicateDeclarationLoading: false,\n      formFieldKey: `${props.activeSection.id}-${props.activeSectionGroup.id}`\n    }\n  }",
      "startLine": 661,
      "endLine": 675,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/RegisterForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@1462-1533",
      "type": "method_definition",
      "name": "return",
      "text": "return fields.map((field) => ({\n    ...field,\n    initialValue:\n      isUndefined(form[field.name]) || isNull(form[field.name])\n        ? getInitialValue(field, form, draft, config, user)\n        : form[field.name]\n  }))\n}\n\nfunction findFirstVisibleSection(sections: IFormSection[]) {\n  return sections.filter(({ viewType }) => viewType !== 'hidden')[0]\n}\n\nfunction mapStateToProps(state: IStoreState, props: IFormProps) {\n  const { router, registerForm, declaration } = props\n  const params = {\n    ...(router.match?.params ?? {}),\n    // ReviewCorrection depends on additional params passed in as props.\n    ...(props?.match?.params ?? {})\n  }\n\n  const sectionId =\n    params.pageId || findFirstVisibleSection(registerForm.sections).id\n  const user = getUserDetails(state)\n  const config = getOfflineData(state)\n  const groupId = params.groupId\n  const { activeSection, activeSectionGroup } = getValidSectionGroup(\n    registerForm.sections,\n    declaration,\n    sectionId,\n    groupId,\n    user\n  )\n\n  if (!activeSectionGroup) {\n    throw new Error(`Configuration for group \"${params.groupId}\" missing!`)\n  }\n\n  const setAllFieldsDirty =\n    (declaration.visitedGroupIds &&\n      declaration.visitedGroupIds.findIndex(\n        (visitedGroup) =>\n          visitedGroup.sectionId === activeSection.id &&\n          visitedGroup.groupId === activeSectionGroup.id\n      ) > -1) ||\n    false\n\n  const fields = activeSectionGroup.fields\n\n  let updatedFields: IFormField[] = []\n\n  if (!setAllFieldsDirty) {\n    updatedFields = activeSectionGroup.fields.filter(\n      (field, index) => fields[index].initialValue !== field.initialValue\n    )\n  }\n\n  return {\n    activeSection,\n    activeSectionGroup: {\n      ...activeSectionGroup,\n      fields\n    },\n    fieldsToShowValidationErrors: updatedFields,\n    isWritingDraft: declaration.writingDraft ?? false,\n    scope: getScope(state),\n    config,\n    userDetails: user,\n    location: router.location,\n    navigate: router.navigate\n  }\n}",
      "startLine": 1462,
      "endLine": 1533,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/RegisterForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@106-113",
      "type": "function_declaration",
      "name": "getNameWithAvatar",
      "text": "function getNameWithAvatar(userName: string, avatar?: Avatar) {\n  return (\n    <NameAvatar>\n      <AvatarSmall name={userName} avatar={avatar} />\n      <span>{userName}</span>\n    </NameAvatar>\n  )\n}",
      "startLine": 106,
      "endLine": 113,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/FieldAgentList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@115-120",
      "type": "function_declaration",
      "name": "getPercentage",
      "text": "function getPercentage(total: number | undefined, current: number | undefined) {\n  if (!total || total <= 0 || !current || current <= 0) {\n    return 0\n  }\n  return Math.round((current / total) * 100)\n}",
      "startLine": 115,
      "endLine": 120,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/FieldAgentList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@122-146",
      "type": "function_declaration",
      "name": "getAverageCompletionTimeComponent",
      "text": "function getAverageCompletionTimeComponent(\n  completionTimeInSeconds: number | undefined,\n  id: number\n) {\n  const timeStructure = formatTimeDuration(completionTimeInSeconds || 0)\n  const label =\n    (timeStructure &&\n      `${timeStructure.days}:${timeStructure.hours}:${timeStructure.minutes}`) ||\n    '-'\n  const tooltip =\n    (timeStructure &&\n      `${timeStructure.days} days, ${timeStructure.hours} hours, ${timeStructure.minutes} minutes`) ||\n    '-'\n\n  return (\n    <>\n      <ReactTooltip id={`cmpltn_time_${id}`}>\n        <ToolTipContainer>{tooltip}</ToolTipContainer>\n      </ReactTooltip>\n      <span data-tip data-for={`cmpltn_time_${id}`}>\n        {label}\n      </span>\n    </>\n  )\n}",
      "startLine": 122,
      "endLine": 146,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/FieldAgentList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@194-201",
      "type": "function_declaration",
      "name": "toggleSort",
      "text": "function toggleSort(key: keyof SortMap) {\n    const invertedOrder =\n      sortOrder[key] === SORT_ORDER.DESCENDING\n        ? SORT_ORDER.ASCENDING\n        : SORT_ORDER.DESCENDING\n    setSortOrder({ ...sortOrder, [key]: invertedOrder })\n    setColumnToBeSort(key)\n  }",
      "startLine": 194,
      "endLine": 201,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Performance/FieldAgentList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@53-76",
      "type": "function_declaration",
      "name": "replaceMinioUrlWithBase64",
      "text": "async function replaceMinioUrlWithBase64(template: Record<string, any>) {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  async function recursiveTransform(obj: any) {\n    if (typeof obj !== 'object' || obj === null) {\n      return obj\n    }\n\n    const transformedObject = Array.isArray(obj) ? [...obj] : { ...obj }\n\n    for (const key in obj) {\n      const value = obj[key]\n      if (typeof value === 'string' && isMinioUrl(value)) {\n        transformedObject[key] = await fetchImageAsBase64(value)\n      } else if (typeof value === 'object') {\n        transformedObject[key] = await recursiveTransform(value)\n      } else {\n        transformedObject[key] = value\n      }\n    }\n\n    return transformedObject\n  }\n  return recursiveTransform(template)\n}",
      "startLine": 53,
      "endLine": 76,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/usePrintableCertificate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@55-74",
      "type": "function_declaration",
      "name": "recursiveTransform",
      "text": "async function recursiveTransform(obj: any) {\n    if (typeof obj !== 'object' || obj === null) {\n      return obj\n    }\n\n    const transformedObject = Array.isArray(obj) ? [...obj] : { ...obj }\n\n    for (const key in obj) {\n      const value = obj[key]\n      if (typeof value === 'string' && isMinioUrl(value)) {\n        transformedObject[key] = await fetchImageAsBase64(value)\n      } else if (typeof value === 'object') {\n        transformedObject[key] = await recursiveTransform(value)\n      } else {\n        transformedObject[key] = value\n      }\n    }\n\n    return transformedObject\n  }",
      "startLine": 55,
      "endLine": 74,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/usePrintableCertificate.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@69-200",
      "type": "class_declaration",
      "name": "VerifyCollectorComponent",
      "text": "class VerifyCollectorComponent extends React.Component<IFullProps> {\n  handleVerification = (hasShowedVerifiedDocument: boolean) => {\n    const isIssueUrl = window.location.href.includes('issue')\n\n    const event = this.props.declaration!.event\n    const eventDate = getEventDate(this.props.declaration!.data, event)\n    const registeredDate = getRegisteredDate(this.props.declaration!.data)\n    const { offlineCountryConfiguration } = this.props\n\n    const declaration = { ...this.props.declaration! }\n    if (declaration?.data?.registration.certificates.length) {\n      declaration.data.registration.certificates[0].hasShowedVerifiedDocument =\n        hasShowedVerifiedDocument\n    }\n\n    if (!this.props.router.match.params.registrationId) {\n      // eslint-disable-next-line no-console\n      console.error('No registrationId in URL')\n      return\n    }\n\n    this.props.modifyDeclaration(declaration)\n    this.props.writeDeclaration(declaration)\n\n    if (\n      isFreeOfCost(\n        declaration.data.registration.certificates[0],\n        eventDate,\n        registeredDate,\n        offlineCountryConfiguration\n      )\n    ) {\n      if (!isIssueUrl) {\n        this.props.router.navigate(\n          generateReviewCertificateUrl({\n            registrationId: this.props.router.match.params.registrationId,\n            event\n          }),\n          {\n            state: { isNavigatedInsideApp: true }\n          }\n        )\n      } else {\n        this.props.router.navigate(\n          generateIssueCertificatePaymentUrl({\n            registrationId: this.props.router.match.params.registrationId,\n            event\n          })\n        )\n      }\n    } else {\n      if (!isIssueUrl) {\n        this.props.router.navigate(\n          generatePrintCertificatePaymentUrl({\n            registrationId: this.props.router.match.params.registrationId,\n            event\n          })\n        )\n      } else {\n        this.props.router.navigate(\n          generateIssueCertificatePaymentUrl({\n            registrationId: this.props.router.match.params.registrationId,\n            event\n          })\n        )\n      }\n    }\n  }\n\n  getGenericCollectorInfo = (collector: string): ICollectorInfo => {\n    const { intl, declaration, registerForm } = this.props\n\n    const info = declaration!.data[collector]\n\n    const eventRegistrationInput = draftToGqlTransformer(\n      registerForm,\n      declaration!.data,\n      declaration!.id,\n      this.props.userDetails,\n      this.props.offlineCountryConfiguration\n    )\n\n    const informantType =\n      eventRegistrationInput.registration.informantType.toLowerCase()\n\n    const fields = verifyIDOnDeclarationCertificateCollectorDefinition[\n      declaration!.event\n    ][collector] as IVerifyIDCertificateCollectorField\n\n    const iD =\n      (collector === 'informant'\n        ? eventRegistrationInput[informantType]?.identifier?.[0]?.id\n        : undefined) ?? eventRegistrationInput[collector]?.identifier?.[0]?.id\n    const iDType =\n      (collector === 'informant'\n        ? eventRegistrationInput[informantType]?.identifier?.[0]?.type\n        : undefined) ?? eventRegistrationInput[collector]?.identifier?.[0]?.type\n\n    const firstNameIndex = (\n      fields.nameFields[intl.locale] || fields.nameFields[intl.defaultLocale]\n    ).firstNamesField\n\n    const familyNameIndex = (\n      fields.nameFields[intl.locale] || fields.nameFields[intl.defaultLocale]\n    ).familyNameField\n\n    const firstNames = info[firstNameIndex] as string\n    const familyName = info[familyNameIndex] as string\n\n    const isExactDobUnknownForIdVerifier =\n      !!declaration?.data[collector]?.exactDateOfBirthUnknown\n\n    const birthDate =\n      fields.birthDateField && !isExactDobUnknownForIdVerifier\n        ? (info[fields.birthDateField] as string)\n        : ''\n\n    const age = isExactDobUnknownForIdVerifier\n      ? (info[fields.ageOfPerson as string] as string)\n      : ''\n\n    const nationality = info[fields.nationalityField] as string\n\n    return {\n      iD,\n      iDType,\n      firstNames,\n      familyName,\n      birthDate,\n      nationality,\n      age\n    }",
      "startLine": 69,
      "endLine": 200,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "ERROR",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/VerifyCollector.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@77-103",
      "type": "function_declaration",
      "name": "getDeathMutation",
      "text": "function getDeathMutation(action: SubmissionAction) {\n  switch (action) {\n    case SubmissionAction.SUBMIT_FOR_REVIEW:\n      return SUBMIT_DEATH_DECLARATION\n    case SubmissionAction.APPROVE_DECLARATION:\n      return APPROVE_DEATH_DECLARATION\n    case SubmissionAction.REGISTER_DECLARATION:\n      return REGISTER_DEATH_DECLARATION\n    case SubmissionAction.REJECT_DECLARATION:\n      return REJECT_DEATH_DECLARATION\n    case SubmissionAction.ARCHIVE_DECLARATION:\n      return ARCHIVE_DEATH_DECLARATION\n    case SubmissionAction.CERTIFY_DECLARATION:\n    case SubmissionAction.CERTIFY_AND_ISSUE_DECLARATION:\n      return COLLECT_DEATH_CERTIFICATE\n    case SubmissionAction.ISSUE_DECLARATION:\n      return ISSUE_DEATH_CERTIFICATE\n    case SubmissionAction.MAKE_CORRECTION:\n      return CREATE_DEATH_REG_CORRECTION\n    case SubmissionAction.REQUEST_CORRECTION:\n      return REQUEST_REG_CORRECTION\n    case SubmissionAction.APPROVE_CORRECTION:\n      return APPROVE_DEATH_REG_CORRECTION\n    case SubmissionAction.REJECT_CORRECTION:\n      return REJECT_REG_CORRECTION\n  }\n}",
      "startLine": 77,
      "endLine": 103,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/DataProvider/death/mutations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@714-736",
      "type": "function_declaration",
      "name": "getDeathQueryMappings",
      "text": "function getDeathQueryMappings(action: Action) {\n  switch (action) {\n    case DownloadAction.LOAD_REVIEW_DECLARATION:\n      return {\n        query: GET_DEATH_REGISTRATION_FOR_REVIEW,\n        dataKey: 'fetchDeathRegistration'\n      }\n    case DownloadAction.LOAD_CERTIFICATE_DECLARATION:\n      return {\n        query: GET_DEATH_REGISTRATION_FOR_CERTIFICATION,\n        dataKey: 'fetchDeathRegistration'\n      }\n    case DownloadAction.LOAD_REQUESTED_CORRECTION_DECLARATION:\n      // TODO: Apply seperate query; currently using it\n      // because the actual query is yet to be developed\n      return {\n        query: GET_DEATH_REGISTRATION_FOR_CERTIFICATION,\n        dataKey: 'fetchDeathRegistration'\n      }\n    default:\n      return null\n  }\n}",
      "startLine": 714,
      "endLine": 736,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/DataProvider/death/queries.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@116-141",
      "type": "function_declaration",
      "name": "getNextSectionIds",
      "text": "function getNextSectionIds(\n  formSection: IFormSection,\n  formSectionGroup: IFormSectionGroup,\n  declaration?: IPrintableDeclaration\n) {\n  const certificates = declaration && declaration.data.registration.certificates\n\n  const certificate = (certificates && certificates[0]) || {}\n  const visibleGroups = getVisibleSectionGroupsBasedOnConditions(\n    formSection,\n    (certificate[\n      formSection.id as keyof typeof certificate\n    ] as IFormSectionData) || {}\n  )\n  const currentGroupIndex = visibleGroups.findIndex(\n    (group: IFormSectionGroup) => group.id === formSectionGroup.id\n  )\n\n  if (currentGroupIndex === visibleGroups.length - 1) {\n    return null\n  }\n  return {\n    sectionId: formSection.id,\n    groupId: visibleGroups[currentGroupIndex + 1].id\n  }\n}",
      "startLine": 116,
      "endLine": 141,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/collectorForm/CollectorForm.tsx",
      "language": "tsx"
    },
    {
      "id": "class_declaration@181-275",
      "type": "class_declaration",
      "name": "CollectorFormComponent",
      "text": "class CollectorFormComponent extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n    this.state = {\n      showModalForNoSignedAffidavit: false,\n      isFileUploading: false\n    }\n  }\n  setAllFormFieldsTouched!: (touched: FormikTouched<FormikValues>) => void\n\n  onUploadingStateChanged = (isUploading: boolean) => {\n    this.setState({\n      ...this.state,\n      isFileUploading: isUploading\n    })\n  }\n\n  modifyDeclaration = (\n    sectionData: ICertificate['collector'],\n    declaration: IPrintableDeclaration\n  ) => {\n    const certificates = declaration.data.registration.certificates\n    const certificate = (certificates && certificates[0]) || {}\n    const collector = { ...(certificate.collector || {}), ...sectionData }\n    this.props.modifyDeclaration({\n      ...declaration,\n      data: {\n        ...declaration.data,\n        registration: {\n          ...declaration.data.registration,\n          certificates: [\n            {\n              collector: collector,\n              hasShowedVerifiedDocument: false,\n              certificateTemplateId: collector.certificateTemplateId\n            }\n          ]\n        }\n      }\n    })\n  }\n\n  continueButtonHandler = (\n    declarationId: string,\n    currentGroup: string,\n    nextGroup: string | undefined,\n    event: EventType,\n    sectionId: keyof IPrintableDeclaration['data'],\n    fields: IFormField[],\n    draft: IPrintableDeclaration | undefined\n  ) => {\n    if (!draft) return\n\n    const errors = getErrorsOnFieldsBySection(\n      sectionId,\n      fields,\n      draft,\n      this.props.offlineCountryConfiguration,\n      this.props.userDetails\n    )\n\n    const certificates = draft.data.registration.certificates\n    const certificate = (certificates && certificates[0]) || {}\n    const collector = certificate[\n      sectionId as keyof typeof certificate\n    ] as IFormSectionData\n\n    if (errors.length > 0) {\n      const formGroup = (\n        this.props as PropsWhenDeclarationIsFound\n      ).formGroup.fields.reduce(\n        (acc, { name }) => ({ ...acc, [name]: true }),\n        {}\n      )\n\n      this.setAllFormFieldsTouched(formGroup)\n      return\n    }\n\n    if (currentGroup === 'affidavit') {\n      if (\n        collector.affidavitFile &&\n        (collector.affidavitFile as IFormSectionData).data\n      ) {\n        this.props.writeDeclaration(draft)\n        this.goToNextFormForSomeoneElse(declarationId, draft, event)\n\n        return\n      }\n\n      this.props.writeDeclaration(draft)\n      this.setState({ showModalForNoSignedAffidavit: true })\n\n      return\n    }",
      "startLine": 181,
      "endLine": 275,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/collectorForm/CollectorForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@182-188",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: IProps) {\n    super(props)\n    this.state = {\n      showModalForNoSignedAffidavit: false,\n      isFileUploading: false\n    }\n  }",
      "startLine": 182,
      "endLine": 188,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/collectorForm/CollectorForm.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@261-269",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n        collector.affidavitFile &&\n        (collector.affidavitFile as IFormSectionData).data\n      ) {\n        this.props.writeDeclaration(draft)\n        this.goToNextFormForSomeoneElse(declarationId, draft, event)\n\n        return\n      }",
      "startLine": 261,
      "endLine": 269,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/collectorForm/CollectorForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@669-684",
      "type": "function_declaration",
      "name": "getMarriageQueryMappings",
      "text": "function getMarriageQueryMappings(action: Action) {\n  switch (action) {\n    case DownloadAction.LOAD_REVIEW_DECLARATION:\n      return {\n        query: GET_MARRIAGE_REGISTRATION_FOR_REVIEW,\n        dataKey: 'fetchMarriageRegistration'\n      }\n    case DownloadAction.LOAD_CERTIFICATE_DECLARATION:\n      return {\n        query: GET_MARRIAGE_REGISTRATION_FOR_CERTIFICATE,\n        dataKey: 'fetchMarriageRegistration'\n      }\n    default:\n      return null\n  }\n}",
      "startLine": 669,
      "endLine": 684,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/DataProvider/marriage/queries.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@83-103",
      "type": "function_declaration",
      "name": "getMarriageMutation",
      "text": "function getMarriageMutation(action: SubmissionAction) {\n  switch (action) {\n    case SubmissionAction.SUBMIT_FOR_REVIEW:\n      return SUBMIT_MARRIAGE_DECLARATION\n    case SubmissionAction.APPROVE_DECLARATION:\n      return APPROVE_MARRIAGE_DECLARATION\n    case SubmissionAction.REGISTER_DECLARATION:\n      return REGISTER_MARRIAGE_DECLARATION\n    case SubmissionAction.REJECT_DECLARATION:\n      return REJECT_MARRIAGE_DECLARATION\n    case SubmissionAction.ARCHIVE_DECLARATION:\n      return ARCHIVE_MARRIAGE_DECLARATION\n    case SubmissionAction.CERTIFY_DECLARATION:\n    case SubmissionAction.CERTIFY_AND_ISSUE_DECLARATION:\n      return COLLECT_MARRIAGE_CERTIFICATE\n    case SubmissionAction.ISSUE_DECLARATION:\n      return ISSUE_MARRIAGE_CERTIFICATE\n    case SubmissionAction.MAKE_CORRECTION:\n      return REQUEST_REG_CORRECTION\n  }\n}",
      "startLine": 83,
      "endLine": 103,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/DataProvider/marriage/mutations.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@105-110",
      "type": "method_definition",
      "name": "if",
      "text": "if (isArray(draft.data[draftItemName][index])) {\n        const newDocuments = draft.data[draftItemName][\n          index\n        ] as unknown as IFileValue[]\n        uploadedDocuments = uploadedDocuments.concat(newDocuments)\n      }",
      "startLine": 105,
      "endLine": 110,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 18,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/duplicate/SupportingDocumentsView.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@99-126",
      "type": "function_declaration",
      "name": "getBirthMutation",
      "text": "function getBirthMutation(action: SubmissionAction) {\n  switch (action) {\n    case SubmissionAction.SUBMIT_FOR_REVIEW:\n      return SUBMIT_BIRTH_DECLARATION\n    case SubmissionAction.APPROVE_DECLARATION:\n      return APPROVE_BIRTH_DECLARATION\n    case SubmissionAction.REGISTER_DECLARATION:\n      return REGISTER_BIRTH_DECLARATION\n    case SubmissionAction.REJECT_DECLARATION:\n      return REJECT_BIRTH_DECLARATION\n    case SubmissionAction.ARCHIVE_DECLARATION:\n      return ARCHIVE_BIRTH_DECLARATION\n    case SubmissionAction.CERTIFY_DECLARATION:\n    case SubmissionAction.CERTIFY_AND_ISSUE_DECLARATION:\n      return COLLECT_BIRTH_CERTIFICATE\n    case SubmissionAction.ISSUE_DECLARATION:\n      return ISSUE_BIRTH_CERTIFICATE\n    case SubmissionAction.APPROVE_CORRECTION:\n      return APPROVE_BIRTH_REG_CORRECTION\n    case SubmissionAction.REJECT_CORRECTION:\n      return REJECT_REG_CORRECTION\n    case SubmissionAction.MAKE_CORRECTION:\n      return CREATE_BIRTH_REG_CORRECTION\n    case SubmissionAction.REQUEST_CORRECTION: {\n      return REQUEST_REG_CORRECTION\n    }\n  }\n}",
      "startLine": 99,
      "endLine": 126,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/DataProvider/birth/mutations.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@208-216",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (eventType && eventType.toLowerCase()) {\n    case 'birth':\n    default:\n      return EventType.Birth\n    case 'death':\n      return EventType.Death\n    case 'marriage':\n      return EventType.Marriage\n  }",
      "startLine": 208,
      "endLine": 216,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/Payment.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@219-234",
      "type": "function_declaration",
      "name": "mapStatetoProps",
      "text": "function mapStatetoProps(state: IStoreState, props: RouteComponentProps) {\n  const { registrationId, eventType } = props.router.params\n  const event = getEvent(eventType)\n  const declaration = state.declarationsState.declarations.find(\n    (app) => app.id === registrationId && app.event === event\n  ) as IPrintableDeclaration\n\n  return {\n    event,\n    registrationId,\n    language: state.i18n.language,\n    declaration,\n    userDetails: getUserDetails(state),\n    offlineCountryConfig: getOfflineData(state)\n  }\n}",
      "startLine": 219,
      "endLine": 234,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/Payment.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@135-140",
      "type": "function_declaration",
      "name": "calculateDaysFromToday",
      "text": "function calculateDaysFromToday(doE: string) {\n  const todaysDate = new Date(Date.now())\n  const eventDate = new Date(doE)\n  const diffInDays = differenceInDays(todaysDate, eventDate)\n  return diffInDays\n}",
      "startLine": 135,
      "endLine": 140,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@142-147",
      "type": "function_declaration",
      "name": "calculateDays",
      "text": "function calculateDays(doE: string, regDate: string) {\n  const registeredDate = new Date(regDate)\n  const eventDate = new Date(doE)\n  const diffInDays = differenceInDays(registeredDate, eventDate)\n  return diffInDays\n}",
      "startLine": 142,
      "endLine": 147,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@149-150",
      "type": "function_declaration",
      "name": "timeElapsed",
      "text": "function timeElapsed(days: number) {\n  const output: { unit: string; value: number }",
      "startLine": 149,
      "endLine": 150,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@168-179",
      "type": "function_declaration",
      "name": "calculatePrice",
      "text": "function calculatePrice(\n  event: EventType,\n  eventDate: string,\n  registeredDate: string,\n  offlineData: IOfflineData,\n  certificate: ICertificate\n) {\n  if (!certificate) return 0\n  const days = calculateDays(eventDate, registeredDate)\n  const result = getValue(offlineData, certificate, days)\n  return result\n}",
      "startLine": 168,
      "endLine": 179,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@181-229",
      "type": "function_declaration",
      "name": "getServiceMessage",
      "text": "function getServiceMessage(\n  intl: IntlShape,\n  event: EventType,\n  eventDate: string,\n  registeredDate: string,\n  offlineData: IOfflineData\n) {\n  const days = calculateDays(eventDate, registeredDate)\n\n  if (event === EventType.Birth) {\n    if (days <= offlineData.config.BIRTH.REGISTRATION_TARGET) {\n      return intl.formatMessage(dynamicMessages[`${event}ServiceBefore`], {\n        target: offlineData.config.BIRTH.REGISTRATION_TARGET\n      })\n    } else if (\n      days > offlineData.config.BIRTH.REGISTRATION_TARGET &&\n      days <= offlineData.config.BIRTH.LATE_REGISTRATION_TARGET\n    ) {\n      return intl.formatMessage(dynamicMessages[`${event}ServiceBetween`], {\n        target: offlineData.config.BIRTH.REGISTRATION_TARGET,\n        latetarget: offlineData.config.BIRTH.LATE_REGISTRATION_TARGET\n      })\n    } else {\n      return intl.formatMessage(dynamicMessages[`${event}ServiceAfter`], {\n        target: offlineData.config.BIRTH.LATE_REGISTRATION_TARGET\n      })\n    }\n  } else if (event === EventType.Death) {\n    if (days <= offlineData.config.DEATH.REGISTRATION_TARGET) {\n      return intl.formatMessage(dynamicMessages[`${event}ServiceBefore`], {\n        target: offlineData.config.DEATH.REGISTRATION_TARGET\n      })\n    } else {\n      return intl.formatMessage(dynamicMessages[`${event}ServiceAfter`], {\n        target: offlineData.config.DEATH.REGISTRATION_TARGET\n      })\n    }\n  } else if (event === EventType.Marriage) {\n    if (days <= offlineData.config.DEATH.REGISTRATION_TARGET) {\n      return intl.formatMessage(dynamicMessages[`${event}ServiceBefore`], {\n        target: offlineData.config.MARRIAGE.REGISTRATION_TARGET\n      })\n    } else {\n      return intl.formatMessage(dynamicMessages[`${event}ServiceAfter`], {\n        target: offlineData.config.MARRIAGE.REGISTRATION_TARGET\n      })\n    }\n  }\n}",
      "startLine": 181,
      "endLine": 229,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@231-240",
      "type": "function_declaration",
      "name": "isFreeOfCost",
      "text": "function isFreeOfCost(\n  certificate: ICertificate,\n  eventDate: string,\n  registeredDate: string,\n  offlineData: IOfflineData\n): boolean {\n  const days = calculateDays(eventDate, registeredDate)\n  const result = getValue(offlineData, certificate, days)\n  return result === 0\n}",
      "startLine": 231,
      "endLine": 240,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@242-251",
      "type": "function_declaration",
      "name": "getEventDate",
      "text": "function getEventDate(data: IFormData, event: EventType) {\n  switch (event) {\n    case EventType.Birth:\n      return data.child.childBirthDate as string\n    case EventType.Death:\n      return data.deathEvent.deathDate as string\n    case EventType.Marriage:\n      return data.marriageEvent.marriageDate as string\n  }\n}",
      "startLine": 242,
      "endLine": 251,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@253-255",
      "type": "function_declaration",
      "name": "getRegisteredDate",
      "text": "function getRegisteredDate(data: IFormData) {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  const historyList = data.history as unknown as { [key: string]: any }",
      "startLine": 253,
      "endLine": 255,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@262-272",
      "type": "function_declaration",
      "name": "getEvent",
      "text": "function getEvent(eventType: string | undefined) {\n  switch (eventType && eventType.toLowerCase()) {\n    case 'birth':\n    default:\n      return EventType.Birth\n    case 'death':\n      return EventType.Death\n    case 'marriage':\n      return EventType.Marriage\n  }\n}",
      "startLine": 262,
      "endLine": 272,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@274-283",
      "type": "function_declaration",
      "name": "isCertificateForPrintInAdvance",
      "text": "function isCertificateForPrintInAdvance(\n  declaration: IPrintableDeclaration | undefined\n) {\n  const collectorType =\n    declaration?.data?.registration?.certificates?.[0]?.collector?.type\n  if (collectorType && collectorType === 'PRINT_IN_ADVANCE') {\n    return true\n  }\n  return false\n}",
      "startLine": 274,
      "endLine": 283,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@285-296",
      "type": "function_declaration",
      "name": "filterPrintInAdvancedOption",
      "text": "function filterPrintInAdvancedOption(collectionForm: IFormSectionGroup) {\n  const filtredCollectionForm = collectionForm.fields.map((field) => {\n    if (field.type !== 'RADIO_GROUP') return field\n\n    const filteredOption = field.options.filter(\n      (option) => option.value !== 'PRINT_IN_ADVANCE'\n    )\n    return { ...field, options: filteredOption }\n  })\n\n  return { ...collectionForm, fields: filtredCollectionForm }\n}",
      "startLine": 285,
      "endLine": 296,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintCertificate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-67",
      "type": "function_declaration",
      "name": "mapStatetoProps",
      "text": "function mapStatetoProps(state: IStoreState, props: RouteComponentProps) {\n  const declaration = state.declarationsState.declarations.find(\n    ({ id }) => id === props.router.params.declarationId\n  )\n\n  const event = declaration?.event || EventType.Birth\n  const registerForm = getRegisterForm(state)[event]\n\n  return {\n    declaration,\n    registerForm,\n    pageRoute: pageRoute[event]\n  }\n}",
      "startLine": 54,
      "endLine": 67,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RegisterForm/DeclarationForm.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@55-127",
      "type": "function_declaration",
      "name": "PrintRecord",
      "text": "function PrintRecord() {\n  const navigate = useNavigate()\n  const languages = useSelector(getLanguages)\n  const offlineData = useSelector(getOfflineData)\n  const cache = createIntlCache()\n  const intls = createSeparateIntls(languages, cache)\n  const params = useParams<{ declarationId: string }>()\n  const { declarationId } = params\n  const declaration = useSelector<IStoreState, IDeclaration | undefined>(\n    (state) =>\n      state.declarationsState.declarations.find(\n        ({ id }) => id === declarationId\n      )\n  )\n\n  if (!declaration) {\n    return (\n      <Navigate\n        to={formatUrl(REGISTRAR_HOME_TAB, {\n          tabId: WORKQUEUE_TABS.readyForReview,\n          selectorId: ''\n        })}\n      />\n    )\n  }\n\n  return (\n    <>\n      <StyledAppBar\n        desktopRight={\n          <Button type=\"icon\" size=\"small\" onClick={() => navigate(-1)}>\n            <Icon name=\"X\" />\n          </Button>\n        }\n        mobileRight={\n          <Button type=\"icon\" size=\"small\" onClick={() => navigate(-1)}>\n            <Icon name=\"X\" />\n          </Button>\n        }\n      />\n      <Container>\n        <Content>\n          <AvoidBreak>\n            <Header\n              logoSrc={offlineData.config.COUNTRY_LOGO.file}\n              title={formatMessage(intls, reviewMessages.govtName)}\n              heading={formatMessage(\n                intls,\n                printRecordMessages.civilRegistrationCentre\n              )}\n              subject={formatMessage(\n                intls,\n                reviewMessages.headerSubjectWithoutName,\n                {\n                  eventType: declaration.event\n                }\n              )}\n              info={\n                declaration.data?.registration?.trackingId\n                  ? {\n                      label: formatMessage(intls, constantsMessages.trackingId),\n                      value: declaration.data.registration.trackingId as string\n                    }\n                  : undefined\n              }\n            />\n          </AvoidBreak>\n          <Body declaration={declaration} intls={intls} />\n        </Content>\n      </Container>\n    </>\n  )\n}",
      "startLine": 55,
      "endLine": 127,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/PrintRecord.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@654-676",
      "type": "function_declaration",
      "name": "getBirthQueryMappings",
      "text": "function getBirthQueryMappings(action: Action) {\n  switch (action) {\n    case DownloadAction.LOAD_REVIEW_DECLARATION:\n      return {\n        query: GET_BIRTH_REGISTRATION_FOR_REVIEW,\n        dataKey: 'fetchBirthRegistration'\n      }\n    case DownloadAction.LOAD_CERTIFICATE_DECLARATION:\n      return {\n        query: GET_BIRTH_REGISTRATION_FOR_CERTIFICATE,\n        dataKey: 'fetchBirthRegistration'\n      }\n    case DownloadAction.LOAD_REQUESTED_CORRECTION_DECLARATION:\n      // TODO: Apply seperate query; currently using it\n      // because the actual query is yet to be developed\n      return {\n        query: GET_BIRTH_REGISTRATION_FOR_CERTIFICATE,\n        dataKey: 'fetchBirthRegistration'\n      }\n    default:\n      return null\n  }\n}",
      "startLine": 654,
      "endLine": 676,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/DataProvider/birth/queries.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-84",
      "type": "function_declaration",
      "name": "PrintRecordHeader",
      "text": "function PrintRecordHeader(props: PrintRecordHeaderProps) {\n  const { logoSrc, title, heading, subject, info } = props\n\n  return (\n    <Container>\n      <StyledCountryLogo src={logoSrc} />\n      <TextContainer>\n        <CapitalText variant=\"bold12\" element=\"span\">\n          {title}\n        </CapitalText>\n        <Text variant=\"bold18\" element=\"span\">\n          {heading}\n        </Text>\n        <SubheaderText variant=\"bold12\" element=\"span\" color=\"grey600\">\n          {subject}\n        </SubheaderText>\n      </TextContainer>\n      {info && (\n        <Box>\n          <Text variant=\"bold12\" element=\"span\">\n            <>\n              {info.label}\n              <br />\n              {info.value}\n            </>\n          </Text>\n        </Box>\n      )}\n    </Container>\n  )\n}",
      "startLine": 54,
      "endLine": 84,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Header.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@72-107",
      "type": "function_declaration",
      "name": "PrintRecordTable",
      "text": "function PrintRecordTable(props: ITableProps) {\n  const { heading, rows, borderedCell = true } = props\n  const Row = borderedCell ? StyledTR : 'tr'\n  const DataCell = borderedCell ? StyledTD : BorderlessTD\n  return (\n    <StyledTable>\n      <StyledTHead>\n        <tr>\n          <StyledTH colSpan={heading.colSpan}>{heading.label}</StyledTH>\n        </tr>\n      </StyledTHead>\n      <tbody>\n        {rows.map((row, rowIndex) => {\n          const rowKey =\n            row.key || `${row.data[0].value?.toString()}_${rowIndex}`\n          return (\n            <Row key={rowKey}>\n              {row.data.map((item, colIndex) => {\n                const TDContentWrapper = item.italic ? StyledEM : React.Fragment\n                return (\n                  <DataCell\n                    key={`${rowKey}_${colIndex}`}\n                    colSpan={item.colSpan}\n                    bold={item.bold}\n                  >\n                    <TDContentWrapper>{item.value}</TDContentWrapper>\n                  </DataCell>\n                )\n              })}\n            </Row>\n          )\n        })}\n      </tbody>\n    </StyledTable>\n  )\n}",
      "startLine": 72,
      "endLine": 107,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Table.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@18-35",
      "type": "function_declaration",
      "name": "createDuplicateDetailsQuery",
      "text": "function createDuplicateDetailsQuery(ids: string[]) {\n  const listQueryParams = () => {\n    return ids.map((_, i) => `$duplicate${i}Id: ID!`).join(', ')\n  }\n\n  const writeQueryForId = (_: string, i: number) => `\n    duplicate${i}: fetchRegistration(id: $duplicate${i}Id) {\n      registration {\n        trackingId\n      }\n    }`\n\n  return gql`\n    query fetchDuplicateDetails(${listQueryParams()}) {\n      ${ids.map((_, i) => writeQueryForId(_, i)).join(',\\n')}\n    }\n  `\n}",
      "startLine": 18,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Duplicates/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-71",
      "type": "function_declaration",
      "name": "DuplicateWarning",
      "text": "function DuplicateWarning({\n  duplicateIds,\n  className\n}: {\n  duplicateIds: string[] | undefined\n  className?: string\n}) {\n  const intl = useIntl()\n  return (\n    <WarningContainer className={className}>\n      {duplicateIds && (\n        <Query<Record<string, FetchDuplicateDeatilsQuery>>\n          query={createDuplicateDetailsQuery(duplicateIds)}\n          variables={duplicateIds.reduce(\n            (accum, duplicateId, idx) => ({\n              ...accum,\n              [`duplicate${idx}Id`]: duplicateId\n            }),\n            {}\n          )}\n        >\n          {({ data }) => {\n            return (\n              <>\n                {duplicateIds.map((_, idx) => {\n                  const duplicateQuery = data?.[`duplicate${idx}`]\n                  if (duplicateQuery?.registration?.trackingId) {\n                    return (\n                      <Alert key={`alert-${idx}`} type=\"warning\">\n                        {intl.formatMessage(errorMessages.duplicateWarning, {\n                          trackingId: duplicateQuery.registration.trackingId\n                        })}\n                      </Alert>\n                    )\n                  }\n                  return <></>\n                })}\n              </>\n            )\n          }}\n        </Query>\n      )}",
      "startLine": 30,
      "endLine": 71,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Duplicates/DuplicateWarning.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@42-49",
      "type": "method_definition",
      "name": "createDuplicateDetailsQuery",
      "text": "createDuplicateDetailsQuery(duplicateIds)}\n          variables={duplicateIds.reduce(\n            (accum, duplicateId, idx) => ({\n              ...accum,\n              [`duplicate${idx}Id`]: duplicateId\n            }),\n            {}\n          )}",
      "startLine": 42,
      "endLine": 49,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 15,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Duplicates/DuplicateWarning.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@14-23",
      "type": "function_declaration",
      "name": "loadUserPin",
      "text": "async function loadUserPin() {\n  const currentUserID = await getCurrentUserID()\n  const allUserData = JSON.parse(\n    (await storage.getItem('USER_DATA')) as string\n  ) as IUserData[]\n  const currentUserData = allUserData.find(\n    (user) => user.userID === currentUserID\n  ) as IUserData\n  return currentUserData.userPIN as string\n}",
      "startLine": 14,
      "endLine": 23,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Unlock/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@138-145",
      "type": "function_declaration",
      "name": "renderSelectOrRadioLabel",
      "text": "function renderSelectOrRadioLabel(\n  value: IFormFieldValue,\n  options: Array<ISelectOption | IRadioOption>,\n  intls: IntlShape[]\n) {\n  const option = options.find((option) => option.value === value)\n  return option?.label ? formatMessage(intls, option.label) : value\n}",
      "startLine": 138,
      "endLine": 145,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@147-189",
      "type": "function_declaration",
      "name": "renderSelectDynamicLabel",
      "text": "function renderSelectDynamicLabel(\n  value: IFormFieldValue,\n  options: IDynamicOptions,\n  draftData: IFormSectionData,\n  intl: IntlShape,\n  intls: IntlShape[],\n  offlineCountryConfig: IOfflineData\n) {\n  if (!options.resource) {\n    const dependency = options.dependency\n      ? draftData[options.dependency]\n      : false\n    const selectedOption = dependency\n      ? options.options &&\n        options.options[dependency.toString()].find(\n          (option) => option.value === value\n        )\n      : false\n    return selectedOption ? formatMessage(intls, selectedOption.label) : value\n  } else {\n    if (options.resource) {\n      let selectedLocation: ILocation\n      const locationId = value as string\n      // HOTFIX for handling international address\n      if (options.resource === 'locations') {\n        selectedLocation = offlineCountryConfig[OFFLINE_LOCATIONS_KEY][\n          locationId\n        ] || { name: locationId, alias: locationId }\n      } else {\n        selectedLocation =\n          offlineCountryConfig[OFFLINE_FACILITIES_KEY][locationId]\n      }\n\n      if (selectedLocation) {\n        return getLocalizedLocationName(intl, selectedLocation)\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n}",
      "startLine": 147,
      "endLine": 189,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@218-236",
      "type": "function_declaration",
      "name": "getFormFieldValue",
      "text": "function getFormFieldValue(\n  draftData: IFormData,\n  sectionId: string,\n  field: IFormField\n): IFormFieldValue {\n  const sectionDraftData = draftData[sectionId] || {}\n  if (field.name in sectionDraftData) {\n    return sectionDraftData[field.name]\n  }\n\n  let tempField: IFormField\n  for (const key in sectionDraftData) {\n    tempField = sectionDraftData[key] as IFormField\n    if (tempField?.nestedFields?.[field.name]) {\n      return tempField.nestedFields[field.name] as IFormFieldValue\n    }\n  }\n  return ''\n}",
      "startLine": 218,
      "endLine": 236,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@238-415",
      "type": "function_declaration",
      "name": "renderValue",
      "text": "function renderValue(\n  draftData: IFormData,\n  sectionId: string,\n  field: IFormField,\n  intls: IntlShape[],\n  offlineCountryConfiguration: IOfflineData,\n  isOriginalData = false,\n  intl: IntlShape\n) {\n  const value: IFormFieldValue = getFormFieldValue(draftData, sectionId, field)\n\n  const onlyCurrentlySelectedIntl = intls.filter(\n    (i) => i.locale === intl.locale\n  )\n\n  // Showing State & District Name instead of their ID\n  if (\n    [\n      'statePrimary',\n      'districtPrimary',\n      'cityUrbanOptionPrimary',\n      'internationalStatePrimary',\n      'internationalDistrictPrimary',\n      'internationalCityPrimary',\n      'stateSecondary',\n      'districtSecondary',\n      'cityUrbanOptionSecondary',\n      'internationalStateSecondary',\n      'internationalCitySecondary',\n      'internationalDistrictSecondary'\n    ].includes(field.name) &&\n    isOriginalData\n  ) {\n    const sectionData = draftData[sectionId]\n\n    if (sectionData.countryPrimary === window.config.COUNTRY) {\n      const dynamicOption: IDynamicOptions = {\n        resource: 'locations'\n      }\n      dynamicOption.dependency = [\n        'internationalStatePrimary',\n        'statePrimary'\n      ].includes(field.name)\n        ? 'countryPrimary'\n        : 'statePrimary'\n\n      return renderSelectDynamicLabel(\n        value,\n        dynamicOption,\n        sectionData,\n        intl,\n        onlyCurrentlySelectedIntl,\n        offlineCountryConfiguration\n      )\n    }\n\n    if (sectionData.countrySecondary === window.config.COUNTRY) {\n      const dynamicOption: IDynamicOptions = {\n        resource: 'locations'\n      }\n      dynamicOption.dependency = [\n        'internationalStateSecondary',\n        'stateSecondary'\n      ].includes(field.name)\n        ? 'countrySecondary'\n        : 'stateSecondary'\n\n      return renderSelectDynamicLabel(\n        value,\n        dynamicOption,\n        sectionData,\n        intl,\n        onlyCurrentlySelectedIntl,\n        offlineCountryConfiguration\n      )\n    }\n\n    return value\n  }\n  if (field.type === SELECT_WITH_OPTIONS && field.options) {\n    return renderSelectOrRadioLabel(\n      value,\n      field.options,\n      onlyCurrentlySelectedIntl\n    )\n  }\n  if (field.type === SELECT_WITH_DYNAMIC_OPTIONS && field.dynamicOptions) {\n    const sectionData = draftData[sectionId]\n    return renderSelectDynamicLabel(\n      value,\n      field.dynamicOptions,\n      sectionData,\n      intl,\n      onlyCurrentlySelectedIntl,\n      offlineCountryConfiguration\n    )\n  }\n\n  if (\n    (field.type === DATE ||\n      (field.type === FIELD_WITH_DYNAMIC_DEFINITIONS &&\n        field.dynamicDefinitions.type &&\n        field.dynamicDefinitions.type.kind === 'static' &&\n        field.dynamicDefinitions.type.staticType === DATE)) &&\n    value &&\n    typeof value === 'string'\n  ) {\n    return formatLongDate(value)\n  }\n\n  if (field.hideValueInPreview) {\n    return ''\n  }\n\n  if (field.type === RADIO_GROUP) {\n    return renderSelectOrRadioLabel(\n      value,\n      field.options,\n      onlyCurrentlySelectedIntl\n    )\n  }\n\n  if (field.type === RADIO_GROUP_WITH_NESTED_FIELDS) {\n    return renderSelectOrRadioLabel(\n      (value && (value as IFormSectionData).value) || '',\n      field.options,\n      onlyCurrentlySelectedIntl\n    )\n  }\n\n  if (field.type === CHECKBOX) {\n    return getCheckboxFieldValue(\n      field,\n      String(value),\n      onlyCurrentlySelectedIntl\n    )\n  }\n\n  if (value && field.type === CHECKBOX_GROUP) {\n    return getCheckBoxGroupFieldValue(\n      field,\n      value as string[],\n      onlyCurrentlySelectedIntl\n    )\n  }\n\n  if (value && field.type === LOCATION_SEARCH_INPUT) {\n    const searchableListOfLocations = generateLocations(\n      field.searchableResource.reduce((locations, resource) => {\n        return {\n          ...locations,\n          ...getListOfLocations(offlineCountryConfiguration, resource)\n        }\n      }, {}),\n      intl\n    )\n    const selectedLocation = searchableListOfLocations.find(\n      (location) => location.id === value\n    )\n    return (selectedLocation && selectedLocation.displayLabel) || ''\n  }\n\n  if (typeof value === 'boolean') {\n    return value\n      ? intl.formatMessage(buttonMessages.yes)\n      : intl.formatMessage(buttonMessages.no)\n  }\n\n  if (value && (typeof value === 'string' || typeof value === 'number')) {\n    return field.postfix\n      ? String(value).concat(` ${field.postfix.toLowerCase()}`)\n      : field.unit\n        ? String(value).concat(intl.formatMessage(field.unit))\n        : value\n  }\n\n  return value\n}",
      "startLine": 238,
      "endLine": 415,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@424-1107",
      "type": "function_declaration",
      "name": "PrintRecordBody",
      "text": "function PrintRecordBody(props: PrintRecordTableProps) {\n  const offlineCountryConfiguration = useSelector(getOfflineData)\n  const user = useSelector(getUserDetails)\n  const intl = useIntl()\n  const registerForm = useSelector(getRegisterForm)\n  function getLabelForDoc(\n    docFieldsWithOptions: IDocumentUploaderWithOptionsFormField[],\n    docForWhom: string,\n    docType: string\n  ) {\n    const { intls } = props\n    const matchedField = docFieldsWithOptions?.find(\n      (field) => field.extraValue === docForWhom\n    )\n    const matchedOption = matchedField?.options.find(\n      (option) => option.value === docType\n    )\n    return (\n      matchedField && matchedOption && formatMessage(intls, matchedOption.label)\n    )\n  }\n\n  function getRenderableField(\n    _section: IFormSection,\n    _group: IFormSectionGroup,\n    {\n      fieldLabel,\n      fieldLabelParams\n    }: {\n      fieldLabel: MessageDescriptor\n      fieldLabelParams?: Record<string, string>\n    },\n    _fieldName: string,\n    value: IFormFieldValue | JSX.Element | undefined,\n    _ignoreAction = false\n  ) {\n    const { intls } = props\n\n    return {\n      label: formatMessage(intls, fieldLabel, fieldLabelParams),\n      value\n    }\n  }\n\n  function getNestedFieldValue(\n    nestSectionData: IFormData,\n    nestedField: IFormField\n  ) {\n    const { intls } = props\n\n    return (\n      <>\n        {renderValue(\n          nestSectionData,\n          'nestedFields',\n          nestedField,\n          intls,\n          offlineCountryConfiguration,\n          undefined,\n          intl\n        )}\n      </>\n    )\n  }\n\n  function getPreviewGroupsField(\n    section: IFormSection,\n    group: IFormSectionGroup,\n    field: IFormField,\n    visitedTags: string[]\n  ) {\n    const { declaration: draft } = props\n\n    if (field.previewGroup && !visitedTags.includes(field.previewGroup)) {\n      visitedTags.push(field.previewGroup)\n\n      const baseTag = field.previewGroup\n      const taggedFields: IFormField[] = []\n      group.fields.forEach((field) => {\n        if (isVisibleField(field, section) && !isViewOnly(field)) {\n          if (field.previewGroup === baseTag) {\n            taggedFields.push(field)\n          }\n          for (const index in field.nestedFields) {\n            field.nestedFields[index].forEach((tempField) => {\n              if (\n                isVisibleField(tempField, section) &&\n                !isViewOnly(tempField) &&\n                tempField.previewGroup === baseTag\n              ) {\n                taggedFields.push(tempField)\n              }\n            })\n          }\n        }\n      })\n\n      const tagDef =\n        (group.previewGroups &&\n          (group.previewGroups.filter(\n            (previewGroup) => previewGroup.id === baseTag\n          ) as IPreviewGroup[])) ||\n        []\n      const values = taggedFields\n        .map((field) => getValue(section, draft.data, field))\n        .filter((value) => value)\n\n      let completeValue = values[0]\n      values.shift()\n      values.forEach(\n        (value) =>\n          (completeValue = (\n            <>\n              {completeValue}\n              {tagDef[0].delimiter ? (\n                <span>{tagDef[0].delimiter}</span>\n              ) : (\n                <br />\n              )}\n              {value}\n            </>\n          ))\n      )\n\n      completeValue = <>{completeValue}</>\n\n      return getRenderableField(\n        section,\n        group,\n        {\n          fieldLabel: (tagDef[0] && tagDef[0].label) || field.label,\n          fieldLabelParams: field.labelParam\n        },\n        (tagDef[0] && tagDef[0].fieldToRedirect) || field.name,\n        completeValue,\n        field.readonly\n      )\n    }\n  }\n\n  function getValue(\n    section: IFormSection,\n    data: IFormData,\n    field: IFormField,\n    replaceEmpty?: boolean,\n    isOriginalData?: boolean\n  ) {\n    let value = renderValue(\n      data,\n      section.id,\n      field,\n      props.intls,\n      offlineCountryConfiguration,\n      isOriginalData,\n      intl\n    )\n\n    if (replaceEmpty && !value) {\n      value = '-'\n    }\n\n    return <>{value}</>\n  }\n  function getSinglePreviewField(\n    section: IFormSection,\n    group: IFormSectionGroup,\n    field: IFormField\n  ) {\n    const {\n      declaration: { data }\n    } = props\n\n    const value = getValue(section, data, field)\n\n    return getRenderableField(\n      section,\n      group,\n      { fieldLabel: field.label, fieldLabelParams: field.labelParam },\n      field.name,\n      value,\n      field.readonly\n    )\n  }\n\n  function getNestedPreviewField(\n    section: IFormSection,\n    group: IFormSectionGroup,\n    field: IFormField\n  ) {\n    const { declaration: draft } = props\n    const visitedTags: string[] = []\n    const nestedItems: NestedItem[] = []\n    // parent field\n    nestedItems.push(getSinglePreviewField(section, group, field))\n    ;(\n      (field.nestedFields &&\n        draft.data[section.id] &&\n        draft.data[section.id][field.name] &&\n        (draft.data[section.id][field.name] as IFormSectionData).value &&\n        field.nestedFields[\n          (draft.data[section.id][field.name] as IFormSectionData)\n            .value as string\n        ]) ||\n      []\n    ).forEach((nestedField) => {\n      if (nestedField.previewGroup) {\n        nestedItems.push(\n          getPreviewGroupsField(section, group, nestedField, visitedTags)\n        )\n      } else {\n        nestedItems.push(\n          getRenderableField(\n            section,\n            group,\n            {\n              fieldLabel: nestedField.label,\n              fieldLabelParams: nestedField.labelParam\n            },\n            nestedField.name,\n            getNestedFieldValue(\n              draft.data[section.id][field.name] as IFormData,\n              nestedField\n            ),\n            nestedField.readonly\n          )\n        )\n      }\n    })\n    return nestedItems\n  }\n  function isViewOnly(field: IFormField) {\n    return [BULLET_LIST, PARAGRAPH, WARNING, DIVIDER, FETCH_BUTTON].find(\n      (type) => type === field.type\n    )\n  }\n  function isVisibleField(field: IFormField, section: IFormSection) {\n    const { declaration: draft } = props\n    const conditionalActions = getConditionalActionsForField(\n      field,\n      draft.data[section.id] || {},\n      offlineCountryConfiguration,\n      draft.data,\n      user\n    )\n    return (\n      !conditionalActions.includes('hide') &&\n      !conditionalActions.includes('hideInPreview')\n    )\n  }\n  function getOverriddenFieldsListForPreview(\n    formSections: IFormSection[]\n  ): IFormField[] {\n    const overriddenFields = formSections\n      .map((section) => {\n        return section.groups\n          .map((group) => {\n            return group.fields\n              .map((field) => {\n                const { declaration: draft } = props\n                const tempField = clone(field)\n                const residingSection =\n                  get(field.reviewOverrides, 'residingSection') || ''\n                tempField.conditionals =\n                  get(field.reviewOverrides, 'conditionals') ||\n                  field.conditionals ||\n                  []\n\n                const isVisible = !getConditionalActionsForField(\n                  tempField,\n                  draft.data[residingSection] || {},\n                  offlineCountryConfiguration,\n                  draft.data,\n                  user\n                ).includes('hide')\n\n                return isVisible ? field : ({} as IFormField)\n              })\n              .filter((field) => !Boolean(field.hideInPreview))\n              .filter((field) => Boolean(field.reviewOverrides))\n              .filter((field) => isVisibleField(field, section))\n          })\n          .filter((item) => item.length)\n      })\n      .filter((item) => item.length)\n    return flattenDeep(overriddenFields)\n  }\n\n  function getOverRiddenPreviewField(\n    section: IFormSection,\n    group: IFormSectionGroup,\n    overriddenField: IFormField,\n    field: IFormField,\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    items: any[],\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    item: any\n  ) {\n    overriddenField.label =\n      get(overriddenField, 'reviewOverrides.labelAs') || overriddenField.label\n    const residingSectionId = get(\n      overriddenField,\n      'reviewOverrides.residingSection'\n    )\n    const residingSection = registerForm.death.sections.find(\n      (section) => section.id === residingSectionId\n    ) as IFormSection\n\n    const result = getSinglePreviewField(\n      residingSection,\n      group,\n      overriddenField\n    )\n\n    const { sectionID, groupID, fieldName } =\n      overriddenField!.reviewOverrides!.reference\n    if (\n      sectionID === section.id &&\n      groupID === group.id &&\n      fieldName === field.name\n    ) {\n      if (\n        overriddenField!.reviewOverrides!.position ===\n        REVIEW_OVERRIDE_POSITION.BEFORE\n      ) {\n        items = items.concat(result)\n        items = items.concat(item)\n      } else {\n        items = items.concat(item)\n        items = items.concat(result)\n      }\n      return items\n    }\n\n    items = items.concat(item)\n    return items\n  }\n\n  const transformSectionData = (\n    formSections: IFormSection[],\n    offlineCountryConfiguration: IOfflineData\n  ) => {\n    const { intls, declaration: draft } = props\n    const overriddenFields = getOverriddenFieldsListForPreview(formSections)\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    let tempItem: any\n    return formSections.map((section) => {\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      let items: any[] = []\n      const visitedTags: string[] = []\n      const visibleGroups = getVisibleSectionGroupsBasedOnConditions(\n        section,\n        draft.data[section.id] || {},\n        draft.data\n      )\n      visibleGroups.forEach((group) => {\n        group.fields\n          .filter(\n            (field) => isVisibleField(field, section) && !isViewOnly(field)\n          )\n          .filter((field) => !Boolean(field.hideInPreview))\n          .filter((field) => !Boolean(field.reviewOverrides))\n          .forEach((field) => {\n            const fieldDisabled = getConditionalActionsForField(\n              field,\n              draft.data[section.id] || {},\n              offlineCountryConfiguration,\n              draft.data,\n              user\n            )\n\n            tempItem = field.previewGroup\n              ? getPreviewGroupsField(section, group, field, visitedTags)\n              : field.nestedFields && field.ignoreNestedFieldWrappingInPreview\n                ? getNestedPreviewField(section, group, field)\n                : getSinglePreviewField(section, group, field)\n            if (fieldDisabled.includes('disable') && tempItem?.action) {\n              tempItem.action.disabled = true\n            }\n            overriddenFields.forEach((overriddenField) => {\n              items = getOverRiddenPreviewField(\n                section,\n                group,\n                overriddenField as IFormField,\n                field,\n                items,\n                tempItem\n              )\n            })\n\n            if (!overriddenFields.length) {\n              items = items.concat(tempItem)\n            }\n          })\n      })\n      return {\n        id: section.id,\n        title: section.title && formatMessage(intls, section.title),\n        items: items.filter((item) => item)\n      }\n    })\n  }\n\n  const formSections = getViewableSection(\n    registerForm[props.declaration.event],\n    props.declaration\n  )\n  const transformedSectionData = transformSectionData(\n    formSections,\n    offlineCountryConfiguration\n  ).filter((sec) => sec.items.length > 0)\n  function renderSignatureBox() {\n    if (props.declaration.event === EventType.Marriage) {\n      return (\n        <StyledStack>\n          <StyledStack direction=\"column\">\n            <SignatureBox>\n              {formatMessage(props.intls, reviewMessages.groomSignature)}\n            </SignatureBox>\n            <SignatureBox>\n              {formatMessage(props.intls, reviewMessages.witnessOneSignature)}\n            </SignatureBox>\n          </StyledStack>\n          <StyledStack direction=\"column\">\n            <SignatureBox>\n              {formatMessage(props.intls, reviewMessages.brideSignature)}\n            </SignatureBox>\n            <SignatureBox>\n              {formatMessage(props.intls, reviewMessages.witnessTwoSignature)}\n            </SignatureBox>\n          </StyledStack>\n        </StyledStack>\n      )\n    } else {\n      return (\n        <SignatureBox>\n          {formatMessage(props.intls, reviewMessages.informantsSignature)}\n        </SignatureBox>\n      )\n    }\n  }\n  function renderDocumentBox(field: IDocumentUploaderWithOptionsFormField) {\n    const documents = (props.declaration.data?.documents?.[field.name] ||\n      []) as IAttachment[]\n    return (\n      <div>\n        <Checkbox\n          name={field.name}\n          value=\"true\"\n          selected={Boolean(documents.length)}\n          disabled\n          label={formatMessage(props.intls, field.label)}\n        ></Checkbox>\n        {documents.length > 0 &&\n          documents.map((doc, i) => (\n            <DocumentTypeBox key={`${doc.title}_${i}`}>\n              {getLabelForDoc(\n                documentSectionFields,\n                doc.optionValues[0],\n                doc.optionValues[1]\n              )}\n            </DocumentTypeBox>\n          ))}\n      </div>\n    )\n  }\n  const documentSection = registerForm[props.declaration.event].sections.find(\n    ({ id }) => id === 'documents'\n  )\n  const documentSectionFields = (documentSection?.groups[0].fields.filter(\n    (field) => field.type === DOCUMENT_UPLOADER_WITH_OPTION\n  ) || []) as IDocumentUploaderWithOptionsFormField[]\n  const leftColumnSize = Math.ceil(documentSectionFields.length / 2)\n  const declarationAciton = (\n    props.declaration.data.history as unknown as History[]\n  )\n    ?.reverse()\n    ?.find(\n      (history) =>\n        history.regStatus &&\n        [RegStatus.Declared, RegStatus.Validated].includes(history.regStatus)\n    )\n  return (\n    <div>\n      <AvoidBreak>\n        {transformedSectionData\n          .filter(({ id }) => id !== 'informant')\n          .map((section, idx) => (\n            <Table\n              key={`${section.id}_${idx}`}\n              heading={{\n                colSpan: 2,\n                label: section.title || ''\n              }}\n              rows={section.items.map((item) => ({\n                data: [{ value: item.label, bold: true }, { value: item.value }]\n              }))}\n            />\n          ))}\n      </AvoidBreak>\n      <AvoidBreak>\n        {documentSection && (\n          <Table\n            heading={{\n              label: formatMessage(\n                props.intls,\n                reviewMessages.documentViewerTitle\n              ),\n              colSpan: 2\n            }}\n            rows={documentSectionFields\n              .slice(0, leftColumnSize)\n              .map((leftColumnField, index) => {\n                const rightColumnField =\n                  documentSectionFields[index + leftColumnSize]\n                return {\n                  data: [\n                    { value: renderDocumentBox(leftColumnField) },\n                    {\n                      value:\n                        rightColumnField && renderDocumentBox(rightColumnField)\n                    }\n                  ]\n                }\n              })}\n            borderedCell={false}\n          />\n        )}\n      </AvoidBreak>\n      <AvoidBreak>\n        {transformedSectionData\n          .filter(({ id }) => id === 'informant')\n          .map((section, idx) => {\n            const items =\n              props.declaration.event === EventType.Marriage\n                ? [\n                    ...section.items.map((item) => ({\n                      data: [\n                        { value: item.label, bold: true },\n                        { value: item.value }\n                      ]\n                    })),\n                    {\n                      data: [\n                        {\n                          value: formatMessage(\n                            props.intls,\n                            reviewMessages.terms\n                          ),\n                          colSpan: 2,\n                          italic: true\n                        }\n                      ]\n                    }\n                  ]\n                : [\n                    {\n                      data: [\n                        {\n                          value: formatMessage(\n                            props.intls,\n                            reviewMessages.signatureDescription\n                          ),\n                          colSpan: 2,\n                          italic: true\n                        }\n                      ]\n                    },\n                    ...section.items.map((item) => ({\n                      data: [\n                        { value: item.label, bold: true },\n                        { value: item.value }\n                      ]\n                    }))\n                  ]\n            return (\n              <Table\n                key={`${section.id}_${idx}`}\n                heading={{ label: section.title || '', colSpan: 2 }}\n                rows={items}\n              />\n            )\n          })}\n        {renderSignatureBox()}\n      </AvoidBreak>\n      <AvoidBreak>\n        <WarningText>\n          <span>\n            {formatMessage(\n              props.intls,\n              printRecordMessages.warningDeclarationDetails\n            )}\n          </span>\n        </WarningText>\n\n        <Table\n          heading={{\n            label: formatMessage(props.intls, {\n              id: 'form.section.declaration.title',\n              defaultMessage: 'Declaration details'\n            }),\n            colSpan: 2\n          }}\n          rows={[\n            {\n              data: [\n                {\n                  value: formatMessage(\n                    props.intls,\n                    printRecordMessages.placeOfDeclaration\n                  )\n                },\n                {\n                  value:\n                    declarationAciton?.location?.id &&\n                    getLocationHierarchy(\n                      declarationAciton.location.id,\n                      offlineCountryConfiguration\n                    ).map((loc) => (\n                      <span key={loc.id}>\n                        {getLocalizedLocationName(intl, loc)}\n                        <br></br>\n                      </span>\n                    ))\n                }\n              ]\n            },\n            {\n              data: [\n                {\n                  value: formatMessage(\n                    props.intls,\n                    printRecordMessages.civilRegistrationOffice\n                  )\n                },\n                {\n                  value:\n                    declarationAciton?.office &&\n                    getLocalizedLocationName(\n                      intl,\n                      declarationAciton?.office as unknown as ILocation\n                    )\n                }\n              ]\n            },\n            {\n              data: [\n                {\n                  value: formatMessage(\n                    props.intls,\n                    constantsMessages.dateOfDeclaration\n                  )\n                },\n                {\n                  value:\n                    declarationAciton && formatLongDate(declarationAciton.date)\n                }\n              ]\n            },\n            {\n              data: [\n                {\n                  value: formatMessage(\n                    [props.intls[0]],\n                    userMessages['REGISTRATION_AGENT']\n                  )\n                },\n                {\n                  value:\n                    declarationAciton?.user?.name &&\n                    createNamesMap(declarationAciton.user.name)[intl.locale]\n                }\n              ]\n            }\n          ]}\n        />\n      </AvoidBreak>\n      <AvoidBreak>\n        <SignatureBox>\n          {formatMessage(props.intls, userFormMessages.userAttachmentSection)}\n        </SignatureBox>\n      </AvoidBreak>\n    </div>\n  )\n}",
      "startLine": 424,
      "endLine": 1107,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@429-444",
      "type": "function_declaration",
      "name": "getLabelForDoc",
      "text": "function getLabelForDoc(\n    docFieldsWithOptions: IDocumentUploaderWithOptionsFormField[],\n    docForWhom: string,\n    docType: string\n  ) {\n    const { intls } = props\n    const matchedField = docFieldsWithOptions?.find(\n      (field) => field.extraValue === docForWhom\n    )\n    const matchedOption = matchedField?.options.find(\n      (option) => option.value === docType\n    )\n    return (\n      matchedField && matchedOption && formatMessage(intls, matchedOption.label)\n    )\n  }",
      "startLine": 429,
      "endLine": 444,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@446-466",
      "type": "function_declaration",
      "name": "getRenderableField",
      "text": "function getRenderableField(\n    _section: IFormSection,\n    _group: IFormSectionGroup,\n    {\n      fieldLabel,\n      fieldLabelParams\n    }: {\n      fieldLabel: MessageDescriptor\n      fieldLabelParams?: Record<string, string>\n    },\n    _fieldName: string,\n    value: IFormFieldValue | JSX.Element | undefined,\n    _ignoreAction = false\n  ) {\n    const { intls } = props\n\n    return {\n      label: formatMessage(intls, fieldLabel, fieldLabelParams),\n      value\n    }\n  }",
      "startLine": 446,
      "endLine": 466,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@468-487",
      "type": "function_declaration",
      "name": "getNestedFieldValue",
      "text": "function getNestedFieldValue(\n    nestSectionData: IFormData,\n    nestedField: IFormField\n  ) {\n    const { intls } = props\n\n    return (\n      <>\n        {renderValue(\n          nestSectionData,\n          'nestedFields',\n          nestedField,\n          intls,\n          offlineCountryConfiguration,\n          undefined,\n          intl\n        )}\n      </>\n    )\n  }",
      "startLine": 468,
      "endLine": 487,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@489-562",
      "type": "function_declaration",
      "name": "getPreviewGroupsField",
      "text": "function getPreviewGroupsField(\n    section: IFormSection,\n    group: IFormSectionGroup,\n    field: IFormField,\n    visitedTags: string[]\n  ) {\n    const { declaration: draft } = props\n\n    if (field.previewGroup && !visitedTags.includes(field.previewGroup)) {\n      visitedTags.push(field.previewGroup)\n\n      const baseTag = field.previewGroup\n      const taggedFields: IFormField[] = []\n      group.fields.forEach((field) => {\n        if (isVisibleField(field, section) && !isViewOnly(field)) {\n          if (field.previewGroup === baseTag) {\n            taggedFields.push(field)\n          }\n          for (const index in field.nestedFields) {\n            field.nestedFields[index].forEach((tempField) => {\n              if (\n                isVisibleField(tempField, section) &&\n                !isViewOnly(tempField) &&\n                tempField.previewGroup === baseTag\n              ) {\n                taggedFields.push(tempField)\n              }\n            })\n          }\n        }\n      })\n\n      const tagDef =\n        (group.previewGroups &&\n          (group.previewGroups.filter(\n            (previewGroup) => previewGroup.id === baseTag\n          ) as IPreviewGroup[])) ||\n        []\n      const values = taggedFields\n        .map((field) => getValue(section, draft.data, field))\n        .filter((value) => value)\n\n      let completeValue = values[0]\n      values.shift()\n      values.forEach(\n        (value) =>\n          (completeValue = (\n            <>\n              {completeValue}\n              {tagDef[0].delimiter ? (\n                <span>{tagDef[0].delimiter}</span>\n              ) : (\n                <br />\n              )}\n              {value}\n            </>\n          ))\n      )\n\n      completeValue = <>{completeValue}</>\n\n      return getRenderableField(\n        section,\n        group,\n        {\n          fieldLabel: (tagDef[0] && tagDef[0].label) || field.label,\n          fieldLabelParams: field.labelParam\n        },\n        (tagDef[0] && tagDef[0].fieldToRedirect) || field.name,\n        completeValue,\n        field.readonly\n      )\n    }\n  }",
      "startLine": 489,
      "endLine": 562,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@564-824",
      "type": "function_declaration",
      "name": "getValue",
      "text": "function getValue(\n    section: IFormSection,\n    data: IFormData,\n    field: IFormField,\n    replaceEmpty?: boolean,\n    isOriginalData?: boolean\n  ) {\n    let value = renderValue(\n      data,\n      section.id,\n      field,\n      props.intls,\n      offlineCountryConfiguration,\n      isOriginalData,\n      intl\n    )\n\n    if (replaceEmpty && !value) {\n      value = '-'\n    }\n\n    return <>{value}</>\n  }\n  function getSinglePreviewField(\n    section: IFormSection,\n    group: IFormSectionGroup,\n    field: IFormField\n  ) {\n    const {\n      declaration: { data }\n    } = props\n\n    const value = getValue(section, data, field)\n\n    return getRenderableField(\n      section,\n      group,\n      { fieldLabel: field.label, fieldLabelParams: field.labelParam },\n      field.name,\n      value,\n      field.readonly\n    )\n  }\n\n  function getNestedPreviewField(\n    section: IFormSection,\n    group: IFormSectionGroup,\n    field: IFormField\n  ) {\n    const { declaration: draft } = props\n    const visitedTags: string[] = []\n    const nestedItems: NestedItem[] = []\n    // parent field\n    nestedItems.push(getSinglePreviewField(section, group, field))\n    ;(\n      (field.nestedFields &&\n        draft.data[section.id] &&\n        draft.data[section.id][field.name] &&\n        (draft.data[section.id][field.name] as IFormSectionData).value &&\n        field.nestedFields[\n          (draft.data[section.id][field.name] as IFormSectionData)\n            .value as string\n        ]) ||\n      []\n    ).forEach((nestedField) => {\n      if (nestedField.previewGroup) {\n        nestedItems.push(\n          getPreviewGroupsField(section, group, nestedField, visitedTags)\n        )\n      } else {\n        nestedItems.push(\n          getRenderableField(\n            section,\n            group,\n            {\n              fieldLabel: nestedField.label,\n              fieldLabelParams: nestedField.labelParam\n            },\n            nestedField.name,\n            getNestedFieldValue(\n              draft.data[section.id][field.name] as IFormData,\n              nestedField\n            ),\n            nestedField.readonly\n          )\n        )\n      }\n    })\n    return nestedItems\n  }\n  function isViewOnly(field: IFormField) {\n    return [BULLET_LIST, PARAGRAPH, WARNING, DIVIDER, FETCH_BUTTON].find(\n      (type) => type === field.type\n    )\n  }\n  function isVisibleField(field: IFormField, section: IFormSection) {\n    const { declaration: draft } = props\n    const conditionalActions = getConditionalActionsForField(\n      field,\n      draft.data[section.id] || {},\n      offlineCountryConfiguration,\n      draft.data,\n      user\n    )\n    return (\n      !conditionalActions.includes('hide') &&\n      !conditionalActions.includes('hideInPreview')\n    )\n  }\n  function getOverriddenFieldsListForPreview(\n    formSections: IFormSection[]\n  ): IFormField[] {\n    const overriddenFields = formSections\n      .map((section) => {\n        return section.groups\n          .map((group) => {\n            return group.fields\n              .map((field) => {\n                const { declaration: draft } = props\n                const tempField = clone(field)\n                const residingSection =\n                  get(field.reviewOverrides, 'residingSection') || ''\n                tempField.conditionals =\n                  get(field.reviewOverrides, 'conditionals') ||\n                  field.conditionals ||\n                  []\n\n                const isVisible = !getConditionalActionsForField(\n                  tempField,\n                  draft.data[residingSection] || {},\n                  offlineCountryConfiguration,\n                  draft.data,\n                  user\n                ).includes('hide')\n\n                return isVisible ? field : ({} as IFormField)\n              })\n              .filter((field) => !Boolean(field.hideInPreview))\n              .filter((field) => Boolean(field.reviewOverrides))\n              .filter((field) => isVisibleField(field, section))\n          })\n          .filter((item) => item.length)\n      })\n      .filter((item) => item.length)\n    return flattenDeep(overriddenFields)\n  }\n\n  function getOverRiddenPreviewField(\n    section: IFormSection,\n    group: IFormSectionGroup,\n    overriddenField: IFormField,\n    field: IFormField,\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    items: any[],\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    item: any\n  ) {\n    overriddenField.label =\n      get(overriddenField, 'reviewOverrides.labelAs') || overriddenField.label\n    const residingSectionId = get(\n      overriddenField,\n      'reviewOverrides.residingSection'\n    )\n    const residingSection = registerForm.death.sections.find(\n      (section) => section.id === residingSectionId\n    ) as IFormSection\n\n    const result = getSinglePreviewField(\n      residingSection,\n      group,\n      overriddenField\n    )\n\n    const { sectionID, groupID, fieldName } =\n      overriddenField!.reviewOverrides!.reference\n    if (\n      sectionID === section.id &&\n      groupID === group.id &&\n      fieldName === field.name\n    ) {\n      if (\n        overriddenField!.reviewOverrides!.position ===\n        REVIEW_OVERRIDE_POSITION.BEFORE\n      ) {\n        items = items.concat(result)\n        items = items.concat(item)\n      } else {\n        items = items.concat(item)\n        items = items.concat(result)\n      }\n      return items\n    }\n\n    items = items.concat(item)\n    return items\n  }\n\n  const transformSectionData = (\n    formSections: IFormSection[],\n    offlineCountryConfiguration: IOfflineData\n  ) => {\n    const { intls, declaration: draft } = props\n    const overriddenFields = getOverriddenFieldsListForPreview(formSections)\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    let tempItem: any\n    return formSections.map((section) => {\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      let items: any[] = []\n      const visitedTags: string[] = []\n      const visibleGroups = getVisibleSectionGroupsBasedOnConditions(\n        section,\n        draft.data[section.id] || {},\n        draft.data\n      )\n      visibleGroups.forEach((group) => {\n        group.fields\n          .filter(\n            (field) => isVisibleField(field, section) && !isViewOnly(field)\n          )\n          .filter((field) => !Boolean(field.hideInPreview))\n          .filter((field) => !Boolean(field.reviewOverrides))\n          .forEach((field) => {\n            const fieldDisabled = getConditionalActionsForField(\n              field,\n              draft.data[section.id] || {},\n              offlineCountryConfiguration,\n              draft.data,\n              user\n            )\n\n            tempItem = field.previewGroup\n              ? getPreviewGroupsField(section, group, field, visitedTags)\n              : field.nestedFields && field.ignoreNestedFieldWrappingInPreview\n                ? getNestedPreviewField(section, group, field)\n                : getSinglePreviewField(section, group, field)\n            if (fieldDisabled.includes('disable') && tempItem?.action) {\n              tempItem.action.disabled = true\n            }\n            overriddenFields.forEach((overriddenField) => {\n              items = getOverRiddenPreviewField(\n                section,\n                group,\n                overriddenField as IFormField,\n                field,\n                items,\n                tempItem\n              )\n            })\n\n            if (!overriddenFields.length) {\n              items = items.concat(tempItem)\n            }\n          })\n      })\n      return {\n        id: section.id,\n        title: section.title && formatMessage(intls, section.title),\n        items: items.filter((item) => item)\n      }\n    })\n  }",
      "startLine": 564,
      "endLine": 824,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@834-863",
      "type": "function_declaration",
      "name": "renderSignatureBox",
      "text": "function renderSignatureBox() {\n    if (props.declaration.event === EventType.Marriage) {\n      return (\n        <StyledStack>\n          <StyledStack direction=\"column\">\n            <SignatureBox>\n              {formatMessage(props.intls, reviewMessages.groomSignature)}\n            </SignatureBox>\n            <SignatureBox>\n              {formatMessage(props.intls, reviewMessages.witnessOneSignature)}\n            </SignatureBox>\n          </StyledStack>\n          <StyledStack direction=\"column\">\n            <SignatureBox>\n              {formatMessage(props.intls, reviewMessages.brideSignature)}\n            </SignatureBox>\n            <SignatureBox>\n              {formatMessage(props.intls, reviewMessages.witnessTwoSignature)}\n            </SignatureBox>\n          </StyledStack>\n        </StyledStack>\n      )\n    } else {\n      return (\n        <SignatureBox>\n          {formatMessage(props.intls, reviewMessages.informantsSignature)}\n        </SignatureBox>\n      )\n    }\n  }",
      "startLine": 834,
      "endLine": 863,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@864-888",
      "type": "function_declaration",
      "name": "renderDocumentBox",
      "text": "function renderDocumentBox(field: IDocumentUploaderWithOptionsFormField) {\n    const documents = (props.declaration.data?.documents?.[field.name] ||\n      []) as IAttachment[]\n    return (\n      <div>\n        <Checkbox\n          name={field.name}\n          value=\"true\"\n          selected={Boolean(documents.length)}\n          disabled\n          label={formatMessage(props.intls, field.label)}\n        ></Checkbox>\n        {documents.length > 0 &&\n          documents.map((doc, i) => (\n            <DocumentTypeBox key={`${doc.title}_${i}`}>\n              {getLabelForDoc(\n                documentSectionFields,\n                doc.optionValues[0],\n                doc.optionValues[1]\n              )}\n            </DocumentTypeBox>\n          ))}\n      </div>\n    )\n  }",
      "startLine": 864,
      "endLine": 888,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/PrintRecord/Body.tsx",
      "language": "tsx"
    },
    {
      "id": "class_declaration@81-116",
      "type": "class_declaration",
      "name": "UnlockView",
      "text": "class UnlockView extends React.Component<IFullProps, IFullState> {\n  constructor(props: IFullProps) {\n    super(props)\n    this.state = {\n      attempt: 0,\n      errorMessage: '',\n      pin: '',\n      resetKey: Date.now()\n    }\n  }\n\n  componentDidMount() {\n    this.screenLockTimer()\n  }\n\n  showErrorMessage() {\n    return (\n      this.state.errorMessage && (\n        <Toast\n          type=\"error\"\n          id=\"errorMsg\"\n          onClose={() => this.setState({ errorMessage: '' })}\n        >\n          {this.state.errorMessage}\n        </Toast>\n      )\n    )\n  }\n\n  onPinProvided = async (pin: string) => {\n    const { intl } = this.props\n    const pinMatched = await pinValidator.isValidPin(pin)\n\n    if (this.state.attempt > MAX_ALLOWED_ATTEMPT) {\n      return\n    }",
      "startLine": 81,
      "endLine": 116,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Unlock/Unlock.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@82-90",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(props: IFullProps) {\n    super(props)\n    this.state = {\n      attempt: 0,\n      errorMessage: '',\n      pin: '',\n      resetKey: Date.now()\n    }\n  }",
      "startLine": 82,
      "endLine": 90,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Unlock/Unlock.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@92-94",
      "type": "method_definition",
      "name": "componentDidMount",
      "text": "componentDidMount() {\n    this.screenLockTimer()\n  }",
      "startLine": 92,
      "endLine": 94,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Unlock/Unlock.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@96-108",
      "type": "method_definition",
      "name": "showErrorMessage",
      "text": "showErrorMessage() {\n    return (\n      this.state.errorMessage && (\n        <Toast\n          type=\"error\"\n          id=\"errorMsg\"\n          onClose={() => this.setState({ errorMessage: '' })}\n        >\n          {this.state.errorMessage}\n        </Toast>\n      )\n    )\n  }",
      "startLine": 96,
      "endLine": 108,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Unlock/Unlock.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@618-620",
      "type": "method_definition",
      "name": "if",
      "text": "if (!props.declarationId || !props.tab) {\n    return null\n  }",
      "startLine": 618,
      "endLine": 620,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/RecordAudit.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@16-19",
      "type": "function_declaration",
      "name": "isValidPin",
      "text": "async function isValidPin(pin: string) {\n  const userPin = await pinLoader.loadUserPin()\n  return await bcrypt.compare(pin, userPin)\n}",
      "startLine": 16,
      "endLine": 19,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Unlock/ComparePINs.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@90-208",
      "type": "function_declaration",
      "name": "ForgotPIN",
      "text": "function ForgotPIN(props: IForgotPINProps) {\n  const [password, setPassword] = useState<string>('')\n  const [touched, setTouched] = useState<boolean>(false)\n  const [error, setError] = useState<string>('')\n  const intl = useIntl()\n  const [verifyingPassword, setVerifyingPassword] = useState<boolean>(false)\n\n  const userDetails = useSelector(getUserDetails)\n  const dispatch = useDispatch()\n  const logout = useCallback(() => {\n    storage.removeItem(SCREEN_LOCK)\n    storage.removeItem(SECURITY_PIN_EXPIRED_AT)\n    dispatch(redirectToAuthentication())\n  }, [dispatch])\n  const language = useSelector(getLanguage)\n  const onForgetPassword = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      e.preventDefault()\n      logout()\n      window.location.assign(\n        window.config.LOGIN_URL + `/forgotten-item?lang=${language}`\n      )\n    },\n    [language, logout]\n  )\n\n  const onSubmit = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault()\n\n      if (!password) {\n        setTouched(true)\n        setError(intl.formatMessage(userMessages.requiredfield))\n        return\n      }\n\n      setVerifyingPassword(true)\n\n      const id = (userDetails && userDetails.userMgntUserID) || ''\n      try {\n        const { data } = await userQueries.verifyPasswordById(id, password)\n\n        if (data && data.verifyPasswordById) {\n          setVerifyingPassword(false)\n          setError('')\n          props.onVerifyPassword()\n        }\n      } catch (e) {\n        setVerifyingPassword(false)\n        setError(intl.formatMessage(errorMessages.passwordSubmissionError))\n      }\n    },\n    [password, userDetails, intl, props]\n  )\n\n  const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value)\n  }, [])\n\n  const onBlur = useCallback(() => {\n    setTouched(true)\n  }, [])\n\n  return (\n    <BackgroundWrapper id=\"forgotPinPage\">\n      <Box id=\"Box\">\n        <Stack direction=\"row\" justifyContent=\"space-between\">\n          <Button type=\"icon\" id=\"action_back\" onClick={props.goBack}>\n            <Icon name=\"ArrowLeft\" />\n          </Button>\n          <Button type=\"icon\" onClick={logout} id=\"logout\">\n            <Icon name=\"SignOut\" />\n          </Button>\n        </Stack>\n        <Stack direction=\"column\">\n          <AvatarLarge\n            name={getUserName(userDetails)}\n            avatar={userDetails?.avatar}\n          />\n        </Stack>\n\n        <StyledForm id=\"password_verification_form\" onSubmit={onSubmit}>\n          <Stack\n            direction=\"column\"\n            gap={18}\n            alignItems=\"stretch\"\n            className=\"button-group\"\n          >\n            <Password\n              id=\"password\"\n              meta={{ touched, error }}\n              input={{\n                onChange,\n                onBlur,\n                value: password\n              }}\n            />\n            <VerifyButton\n              loading={verifyingPassword}\n              type=\"primary\"\n              id=\"form_submit\"\n            >\n              {intl.formatMessage(buttonMessages.verify)}\n            </VerifyButton>\n            <Link id=\"forgot_password\" onClick={onForgetPassword}>\n              {intl.formatMessage(buttonMessages.forgotPassword)}\n            </Link>\n          </Stack>\n        </StyledForm>\n\n        {error && (\n          <Toast type=\"error\" id=\"form_error\" onClose={() => setError('')}>\n            {error}\n          </Toast>\n        )}\n      </Box>\n    </BackgroundWrapper>\n  )\n}",
      "startLine": 90,
      "endLine": 208,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/Unlock/ForgotPIN.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@79-101",
      "type": "function_declaration",
      "name": "SystemUser",
      "text": "function SystemUser({ name }: { name?: string }) {\n  const intl = useIntl()\n  return (\n    <NameAvatar>\n      <HealthSystemLogo />\n      <span>\n        {Boolean(name) ? name : intl.formatMessage(userMessages.system)}\n      </span>\n    </NameAvatar>\n  )\n}\n\nfunction HealthSystemUser({ name }: { name?: string }) {\n  const intl = useIntl()\n  return (\n    <NameAvatar>\n      <HealthSystemLogo>\n        <Box />\n      </HealthSystemLogo>\n      <span>{name ?? intl.formatMessage(userMessages.healthSystem)}</span>\n    </NameAvatar>\n  )\n}",
      "startLine": 79,
      "endLine": 101,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/History.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@126-131",
      "type": "function_declaration",
      "name": "getSystemType",
      "text": "function getSystemType(type: string | undefined) {\n  if (type === SystemType.RecordSearch) {\n    return integrationMessages.recordSearch\n  }\n  return integrationMessages.healthSystem\n}",
      "startLine": 126,
      "endLine": 131,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/History.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@500-526",
      "type": "function_declaration",
      "name": "getStatusLabel",
      "text": "function getStatusLabel(\n  action: Maybe<RegAction> | undefined,\n  regStatus: Maybe<RegStatus> | undefined,\n  intl: IntlShape,\n  performedBy: Maybe<User> | undefined,\n  loggedInUser: UserDetails | null,\n  scopes: Scope[] | null\n) {\n  if (action) {\n    return intl.formatMessage(regActionMessages[action], {\n      regStatus: regStatus?.toLowerCase()\n    })\n  }\n  if (\n    regStatus === RegStatus.Declared &&\n    performedBy?.id === loggedInUser?.userMgntUserID &&\n    scopes?.includes(SCOPES.RECORD_SUBMIT_INCOMPLETE)\n  ) {\n    return intl.formatMessage(recordAuditMessages.sentNotification)\n  }\n  /* We should find a better way of handling started event*/\n  //@ts-ignore\n  if (regStatus === 'STARTED') {\n    return intl.formatMessage(recordAuditMessages.started)\n  }\n  return regStatus ? intl.formatMessage(regStatusMessages[regStatus]) : ''\n}",
      "startLine": 500,
      "endLine": 526,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@528-532",
      "type": "function_declaration",
      "name": "isSystemInitiated",
      "text": "function isSystemInitiated(history: History) {\n  return Boolean(\n    (history.dhis2Notification && !history.user?.id) || history.system\n  )\n}",
      "startLine": 528,
      "endLine": 532,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@534-536",
      "type": "function_declaration",
      "name": "isVerifiedAction",
      "text": "function isVerifiedAction(history: History) {\n  return history.action === RegAction.Verified\n}",
      "startLine": 534,
      "endLine": 536,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@538-540",
      "type": "function_declaration",
      "name": "isFlaggedAsPotentialDuplicate",
      "text": "function isFlaggedAsPotentialDuplicate(history: History) {\n  return history.action === RegAction.FlaggedAsPotentialDuplicate\n}",
      "startLine": 538,
      "endLine": 540,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@49-198",
      "type": "function_declaration",
      "name": "BookmarkAdvancedSearchModal",
      "text": "function BookmarkAdvancedSearchModal({\n  showBookmarkModal,\n  toggleBookmarkModal,\n  setNotificationStatus,\n  setNotificationMessages\n}: IBookmarkModalProps) {\n  const intl = useIntl()\n  const isOnline = useOnlineStatus()\n  const dispatch = useDispatch()\n  const userDetails = useSelector(getUserDetails)\n  const { searchId, bookmarkName, ...advancedSearchParams } = useSelector(\n    getAdvancedSearchParamsState\n  )\n  //remove null and empty properties\n  const filteredAdvancedSearchParams = omitBy(\n    advancedSearchParams,\n    (properties) => properties === null || properties === EMPTY_STRING\n  ) as AdvancedSearchParametersInput\n  const [queryName, setQueryName] = React.useState('')\n  const onChangeQueryName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value\n    setQueryName(value)\n  }\n\n  const [bookmarkAdvancedSearchResult] = useMutation<\n    BookmarkAdvancedSearchMutation,\n    BookmarkAdvancedSearchMutationVariables\n  >(BOOKMARK_ADVANCED_SEARCH_RESULT_MUTATION, {\n    onError() {\n      setNotificationMessages(\n        intl.formatMessage(\n          messagesSearch.advancedSearchBookmarkErrorNotification\n        )\n      )\n      setNotificationStatus(NOTIFICATION_STATUS.ERROR)\n    },\n    onCompleted() {\n      setNotificationMessages(\n        intl.formatMessage(\n          messagesSearch.advancedSearchBookmarkSuccessNotification\n        )\n      )\n      setNotificationStatus(NOTIFICATION_STATUS.SUCCESS)\n    }\n  })\n\n  const bookmarkAdvancedSearchHandler = async () => {\n    const mutatedData = await bookmarkAdvancedSearchResult({\n      variables: {\n        bookmarkSearchInput: {\n          userId: userDetails?.userMgntUserID as string,\n          name: queryName,\n          parameters: {\n            ...filteredAdvancedSearchParams\n          }\n        }\n      }\n    })\n    if (mutatedData.data?.bookmarkAdvancedSearch) {\n      const { __typename, ...rest } = mutatedData.data.bookmarkAdvancedSearch\n      const filteredSearchListData =\n        rest.searchList &&\n        rest.searchList.map((item) => {\n          const { __typename, ...restParams } = item.parameters\n          return {\n            name: item.name,\n            searchId: item.searchId,\n            parameters: restParams\n          }\n        })\n      dispatch(\n        modifyUserDetails({\n          ...userDetails,\n          searches: filteredSearchListData as BookmarkedSeachItem[]\n        })\n      )\n      dispatch(\n        setAdvancedSearchParam({\n          ...advancedSearchParams,\n          searchId: rest.searchList?.[rest.searchList.length - 1].searchId\n        })\n      )\n    }\n  }\n\n  return (\n    <>\n      <ResponsiveModal\n        id=\"bookmarkModal\"\n        show={showBookmarkModal}\n        title={intl.formatMessage(\n          messagesSearch.bookmarkAdvancedSearchModalTitle\n        )}\n        autoHeight={true}\n        actions={[\n          <Button\n            type=\"tertiary\"\n            id=\"cancel\"\n            key=\"cancel\"\n            onClick={() => {\n              toggleBookmarkModal()\n              setQueryName('')\n            }}\n          >\n            {intl.formatMessage(buttonMessages.cancel)}\n          </Button>,\n          <Button\n            type=\"primary\"\n            key=\"bookmark-advanced-search-result\"\n            id=\"bookmark_advanced_search_result\"\n            onClick={async () => {\n              setNotificationMessages(\n                intl.formatMessage(\n                  messagesSearch.advancedSearchBookmarkLoadingNotification\n                )\n              )\n              setNotificationStatus(NOTIFICATION_STATUS.IN_PROGRESS)\n              toggleBookmarkModal()\n              setQueryName('')\n              await bookmarkAdvancedSearchHandler()\n            }}\n            disabled={!Boolean(queryName) || !isOnline}\n          >\n            {intl.formatMessage(buttonMessages.confirm)}\n          </Button>\n        ]}\n        handleClose={() => {\n          toggleBookmarkModal()\n          setQueryName('')\n        }}\n      >\n        <Message>\n          {intl.formatMessage(messagesSearch.bookmarkAdvancedSearchModalBody)}\n        </Message>\n\n        <InputField id=\"queryName\" touched={true} required={false}>\n          <TextInput\n            id=\"queryName\"\n            type=\"text\"\n            placeholder={intl.formatMessage(messagesSearch.placeholder)}\n            touched={true}\n            error={false}\n            value={queryName}\n            onChange={onChangeQueryName}\n          />\n        </InputField>\n      </ResponsiveModal>\n    </>\n  )\n}",
      "startLine": 49,
      "endLine": 198,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/AdvancedSearch/SaveBookmarkModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@16-20",
      "type": "function_declaration",
      "name": "isIDateRangePickerValue",
      "text": "function isIDateRangePickerValue(\n  value: IFormFieldValue\n): value is IDateRangePickerValue {\n  return (value as IDateRangePickerValue).exact !== undefined\n}",
      "startLine": 16,
      "endLine": 20,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/search/advancedSearch/validators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-85",
      "type": "function_declaration",
      "name": "BookmarkAdvancedSearchResult",
      "text": "function BookmarkAdvancedSearchResult() {\n  const advancedSearchState = useSelector(getAdvancedSearchParamsState)\n  const bookmark = Boolean(advancedSearchState.searchId)\n  const [showBookmarkModal, setShowBookmarkModal] = React.useState(false)\n  const [showRemoveBookmarkModal, setShowRemoveBookmarkModal] =\n    React.useState(false)\n  const toggleBookmarkModal = () => {\n    setShowBookmarkModal((prev) => !prev)\n  }\n  const toggleRemoveBookmarkModal = () => {\n    setShowRemoveBookmarkModal((prev) => !prev)\n  }\n  const [notificationMessages, setNotificationMessages] =\n    React.useState(EMPTY_STRING)\n  const [notificationStatus, setNotificationStatus] =\n    React.useState<NOTIFICATION_STATUS>(NOTIFICATION_STATUS.IDLE)\n  return (\n    <>\n      <ToggleIcon\n        id={bookmark ? 'toggleIconFill' : 'toggleIconEmpty'}\n        defaultChecked={bookmark}\n        onClick={() => {\n          if (bookmark) {\n            toggleRemoveBookmarkModal()\n          } else {\n            toggleBookmarkModal()\n          }\n        }}\n        name={'Star'}\n        color={bookmark ? 'yellow' : 'primary'}\n        weight={bookmark ? 'fill' : 'bold'}\n      />\n\n      <BookmarkAdvancedSearchModal\n        showBookmarkModal={showBookmarkModal}\n        toggleBookmarkModal={toggleBookmarkModal}\n        setNotificationStatus={setNotificationStatus}\n        setNotificationMessages={setNotificationMessages}\n      />\n      <RemoveBookmarkAdvancedSearchModal\n        showRemoveBookmarkModal={showRemoveBookmarkModal}\n        toggleRemoveBookmarkModal={toggleRemoveBookmarkModal}\n        setNotificationStatus={setNotificationStatus}\n        setNotificationMessages={setNotificationMessages}\n      />\n      {notificationStatus !== NOTIFICATION_STATUS.IDLE && (\n        <Toast\n          id={`${notificationStatus}-save-bookmark-notification`}\n          type={\n            notificationStatus === NOTIFICATION_STATUS.IN_PROGRESS\n              ? 'loading'\n              : notificationStatus === NOTIFICATION_STATUS.ERROR\n                ? 'error'\n                : 'success'\n          }\n          onClose={() => {\n            setNotificationStatus(NOTIFICATION_STATUS.IDLE)\n          }}\n        >\n          {notificationMessages}\n        </Toast>\n      )}\n    </>\n  )\n}",
      "startLine": 21,
      "endLine": 85,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/AdvancedSearch/BookmarkAdvancedSearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@61-87",
      "type": "function_declaration",
      "name": "retrieveUniqueComments",
      "text": "function retrieveUniqueComments(\n  histories: History[],\n  actionDetailsData: History,\n  previousHistoryItemIndex: number\n) {\n  if (!Array.isArray(actionDetailsData.comments)) {\n    return []\n  }\n\n  if (previousHistoryItemIndex === -1) {\n    return actionDetailsData.comments\n      .map((comment) => comment?.comment)\n      .map((comment) => ({ comment }))\n  }\n\n  const comments: IDynamicValues[] = []\n  actionDetailsData.comments.forEach((item, index) => {\n    if (\n      (histories[previousHistoryItemIndex].comments || [])[index]?.comment !==\n      item?.comment\n    ) {\n      comments.push({ comment: item?.comment })\n    }\n  })\n\n  return comments\n}",
      "startLine": 61,
      "endLine": 87,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/ActionDetailsModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@89-97",
      "type": "function_declaration",
      "name": "retrieveCorrectionComment",
      "text": "function retrieveCorrectionComment(actionDetailsData: History) {\n  if (!Array.isArray(actionDetailsData.comments)) {\n    return []\n  }\n\n  const comment = actionDetailsData.comments[1]?.comment || ''\n\n  return [{ comment }]\n}",
      "startLine": 89,
      "endLine": 97,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/ActionDetailsModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@99-111",
      "type": "function_declaration",
      "name": "getHistories",
      "text": "function getHistories(draft: IDeclaration | null) {\n  const histories: History[] =\n    draft?.data.history && Array.isArray(draft.data.history)\n      ? draft.data.history.sort((prevItem, nextItem) => {\n          return new Date(prevItem.date).getTime() >\n            new Date(nextItem.date).getTime()\n            ? 1\n            : -1\n        })\n      : []\n\n  return histories\n}",
      "startLine": 99,
      "endLine": 111,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/ActionDetailsModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@116-163",
      "type": "function_declaration",
      "name": "prepareComments",
      "text": "function prepareComments(\n  actionDetailsData: History,\n  draft: IDeclaration | null\n) {\n  if (\n    !draft ||\n    (actionDetailsData.action &&\n      actionDetailsData.action !== RegAction.RequestedCorrection &&\n      actionDetailsData.action !== RegAction.Corrected)\n  ) {\n    return []\n  }\n\n  const histories = getHistories(draft)\n  const currentHistoryItemIndex = histories\n    .filter(({ regStatus }: Partial<History>) => {\n      return regStatus !== RegStatus.WaitingValidation\n    })\n    .findIndex((item) => item.date === actionDetailsData.date)\n\n  const previousHistoryItemIndex =\n    currentHistoryItemIndex < 0\n      ? currentHistoryItemIndex\n      : currentHistoryItemIndex - 1\n\n  if (\n    [RegStatus.Rejected, RegStatus.Archived].includes(\n      actionDetailsData.regStatus as RegStatus\n    )\n  ) {\n    return actionDetailsData.statusReason?.text\n      ? [{ comment: actionDetailsData.statusReason.text }]\n      : []\n  }\n\n  if (\n    [RegAction.RequestedCorrection, RegAction.Corrected].includes(\n      actionDetailsData.action as RegAction\n    )\n  )\n    return retrieveCorrectionComment(actionDetailsData)\n\n  return retrieveUniqueComments(\n    histories,\n    actionDetailsData,\n    previousHistoryItemIndex\n  )\n}",
      "startLine": 116,
      "endLine": 163,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/RecordAudit/ActionDetailsModal.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@88-101",
      "type": "function_declaration",
      "name": "getRejectionReasonDisplayValue",
      "text": "function getRejectionReasonDisplayValue(reason: string) {\n  switch (reason.toLowerCase()) {\n    case 'duplicate':\n      return rejectMessages.rejectionReasonDuplicate\n    case 'misspelling':\n      return rejectMessages.rejectionReasonMisspelling\n    case 'missing_supporting_doc':\n      return rejectMessages.rejectionReasonMissingSupportingDoc\n    case 'other':\n      return rejectMessages.rejectionReasonOther\n    default:\n      return rejectMessages.rejectionReasonOther\n  }\n}",
      "startLine": 88,
      "endLine": 101,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SearchResult/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@115-540",
      "type": "function_declaration",
      "name": "SearchResultView",
      "text": "function SearchResultView(props: ISearchResultProps) {\n  const navigate = useNavigate()\n  const location = useLocation()\n\n  const { width } = useWindowSize()\n\n  const getColumns = () => {\n    if (width > props.theme.grid.breakpoints.lg) {\n      return [\n        {\n          width: 35,\n          label: props.intl.formatMessage(constantsMessages.name),\n          key: COLUMNS.ICON_WITH_NAME\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.event),\n          width: 20,\n          key: COLUMNS.EVENT\n        },\n        {\n          label: props.intl.formatMessage(constantsMessages.eventDate),\n          width: 20,\n          key: COLUMNS.DATE_OF_EVENT\n        },\n        {\n          width: 25,\n          alignment: ColumnContentAlignment.RIGHT,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true\n        }\n      ]\n    } else {\n      return [\n        {\n          label: props.intl.formatMessage(constantsMessages.name),\n          width: 70,\n          key: COLUMNS.ICON_WITH_NAME_EVENT\n        },\n        {\n          width: 30,\n          alignment: ColumnContentAlignment.RIGHT,\n          key: COLUMNS.ACTIONS,\n          isActionColumn: true\n        }\n      ]\n    }\n  }\n\n  function userHasRegisterScope() {\n    return props.scope && props.scope.includes(SCOPES.RECORD_REGISTER)\n  }\n\n  function userHasValidateScope() {\n    const validateScopes = [\n      SCOPES.RECORD_REGISTER,\n      SCOPES.RECORD_SUBMIT_FOR_APPROVAL,\n      SCOPES.RECORD_SUBMIT_FOR_UPDATES\n    ] as Scope[]\n\n    return (\n      props.scope && props.scope.some((scope) => validateScopes.includes(scope))\n    )\n  }\n\n  function hasIssueScope() {\n    return props.scope?.includes(SCOPES.RECORD_PRINT_ISSUE_CERTIFIED_COPIES)\n  }\n\n  function hasPrintScope() {\n    return props.scope?.includes(SCOPES.RECORD_PRINT_ISSUE_CERTIFIED_COPIES)\n  }\n\n  function canSearchAnywhere() {\n    const searchScopes: Scope[] = [\n      SCOPES.SEARCH_BIRTH,\n      SCOPES.SEARCH_DEATH,\n      SCOPES.SEARCH_MARRIAGE\n    ]\n    return props.scope?.some((scope) => searchScopes.includes(scope))\n  }\n\n  const transformSearchContent = (data: QueryData) => {\n    if (!data || !data.results) {\n      return []\n    }\n\n    const transformedData = transformData(data, props.intl)\n\n    const processingDeclarationIds = getProcessingDeclarationIds(\n      props.outboxDeclarations\n    )\n\n    return transformedData\n      .filter(({ id }) => !processingDeclarationIds.includes(id))\n      .map((reg, index) => {\n        const foundDeclaration = props.outboxDeclarations.find(\n          (declaration) => declaration.id === reg.id\n        )\n        const actions: IAction[] = []\n        const downloadStatus =\n          (foundDeclaration && foundDeclaration.downloadStatus) || undefined\n\n        const declarationIsRequestedCorrection =\n          reg.declarationStatus === 'REQUESTED_CORRECTION'\n        const declarationIsRegistered = reg.declarationStatus === 'REGISTERED'\n        const declarationIsCertified = reg.declarationStatus === 'CERTIFIED'\n        const declarationIsRejected = reg.declarationStatus === 'REJECTED'\n        const declarationIsValidated = reg.declarationStatus === 'VALIDATED'\n        const declarationIsInProgress = reg.declarationStatus === 'IN_PROGRESS'\n        const declarationIsIssued = reg.declarationStatus === 'ISSUED'\n        const isDeclared = reg.declarationStatus === 'DECLARED'\n        const declarationIsCorrectionRequested =\n          reg.declarationStatus === 'CORRECTION_REQUESTED'\n        const isDuplicate =\n          reg.duplicates &&\n          reg.duplicates.length > 0 &&\n          reg.declarationStatus !== SUBMISSION_STATUS.CERTIFIED &&\n          reg.declarationStatus !== SUBMISSION_STATUS.REGISTERED\n        const { intl, userDetails } = props\n\n        const search = location.search\n        const params = new URLSearchParams(search)\n        const [searchText, searchType] = [\n          params.get('searchText'),\n          params.get('searchType')\n        ]\n        const isDeclarationReviewableByRegistrar =\n          declarationIsRejected ||\n          declarationIsValidated ||\n          declarationIsCorrectionRequested ||\n          isDeclared ||\n          declarationIsInProgress\n\n        const isDeclarationReviewableByRegAgent =\n          isDeclared || declarationIsInProgress || declarationIsRejected\n\n        const shouldShowReviewButton =\n          (userHasRegisterScope() && isDeclarationReviewableByRegistrar) ||\n          (userHasValidateScope() && isDeclarationReviewableByRegAgent)\n        if (width > props.theme.grid.breakpoints.lg) {\n          if (\n            (declarationIsRegistered || declarationIsIssued) &&\n            hasPrintScope()\n          ) {\n            actions.push({\n              label: props.intl.formatMessage(buttonMessages.print),\n              handler: (\n                e: React.MouseEvent<HTMLButtonElement, MouseEvent> | undefined\n              ) => {\n                e && e.stopPropagation()\n\n                navigate(\n                  generatePrintCertificateUrl({\n                    registrationId: reg.id,\n                    event: reg.event\n                  })\n                )\n              },\n              disabled: downloadStatus !== DOWNLOAD_STATUS.DOWNLOADED\n            })\n          } else if (declarationIsCertified && hasIssueScope()) {\n            actions.push({\n              label: props.intl.formatMessage(buttonMessages.issue),\n              handler: (\n                e: React.MouseEvent<HTMLButtonElement, MouseEvent> | undefined\n              ) => {\n                e && e.stopPropagation()\n\n                navigate(\n                  generateIssueCertificateUrl({ registrationId: reg.id })\n                )\n              },\n              disabled: downloadStatus !== DOWNLOAD_STATUS.DOWNLOADED\n            })\n          } else if (shouldShowReviewButton) {\n            actions.push({\n              label:\n                declarationIsRejected || declarationIsInProgress\n                  ? props.intl.formatMessage(constantsMessages.update)\n                  : props.intl.formatMessage(constantsMessages.review),\n              handler: () =>\n                navigate(\n                  generateGoToPageUrl({\n                    pageRoute:\n                      reg.declarationStatus === 'CORRECTION_REQUESTED'\n                        ? REVIEW_CORRECTION\n                        : REVIEW_EVENT_PARENT_FORM_PAGE,\n                    declarationId: reg.id,\n                    pageId: 'review',\n                    event: reg.event.toLowerCase()\n                  })\n                ),\n              disabled: downloadStatus !== DOWNLOAD_STATUS.DOWNLOADED\n            })\n          }\n        }\n        actions.push({\n          actionComponent: (\n            <DownloadButton\n              key={reg.id}\n              downloadConfigs={{\n                event: reg.event,\n                compositionId: reg.id,\n                assignment:\n                  foundDeclaration?.assignmentStatus ??\n                  reg.assignment ??\n                  undefined,\n                refetchQueries: [\n                  {\n                    query: SEARCH_EVENTS,\n                    variables: {\n                      advancedSearchParameters: {\n                        trackingId:\n                          searchType === SearchCriteria.TRACKING_ID\n                            ? searchText\n                            : '',\n                        nationalId:\n                          searchType === SearchCriteria.NATIONAL_ID\n                            ? searchText\n                            : '',\n                        registrationNumber:\n                          searchType === SearchCriteria.REGISTRATION_NUMBER\n                            ? searchText\n                            : '',\n                        contactNumber:\n                          searchType === SearchCriteria.PHONE_NUMBER\n                            ? convertToMSISDN(\n                                searchText!,\n                                window.config.COUNTRY\n                              )\n                            : '',\n                        name:\n                          searchType === SearchCriteria.NAME ? searchText : '',\n                        declarationLocationId:\n                          !canSearchAnywhere() && userDetails\n                            ? getUserLocation(userDetails).id\n                            : ''\n                      },\n                      sort: SEARCH_RESULT_SORT\n                    }\n                  }\n                ],\n                action:\n                  ((declarationIsRegistered || declarationIsCertified) &&\n                    DownloadAction.LOAD_CERTIFICATE_DECLARATION) ||\n                  (declarationIsRequestedCorrection &&\n                    DownloadAction.LOAD_REQUESTED_CORRECTION_DECLARATION) ||\n                  DownloadAction.LOAD_REVIEW_DECLARATION\n              }}\n              status={downloadStatus as DOWNLOAD_STATUS}\n              declarationStatus={reg.declarationStatus as SUBMISSION_STATUS}\n            />\n          )\n        })\n        const event =\n          (reg.event &&\n            intl.formatMessage(\n              dynamicConstantsMessages[reg.event.toLowerCase()]\n            )) ||\n          ''\n        const dateOfEvent =\n          reg.dateOfEvent && formattedDuration(new Date(reg.dateOfEvent))\n        const isValidatedOnReview =\n          reg.declarationStatus === SUBMISSION_STATUS.VALIDATED &&\n          userHasRegisterScope()\n            ? true\n            : false\n        const isArchived = reg.declarationStatus === SUBMISSION_STATUS.ARCHIVED\n        const NameComponent = reg.name ? (\n          <NameContainer\n            id={`name_${index}`}\n            onClick={() =>\n              navigate(\n                formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                  tab: 'search',\n                  declarationId: reg.id\n                })\n              )\n            }\n          >\n            {reg.name}\n          </NameContainer>\n        ) : (\n          <NoNameContainer\n            id={`name_${index}`}\n            onClick={() =>\n              navigate(\n                formatUrl(routes.DECLARATION_RECORD_AUDIT, {\n                  tab: 'search',\n                  declarationId: reg.id\n                })\n              )\n            }\n          >\n            {intl.formatMessage(constantsMessages.noNameProvided)}\n          </NoNameContainer>\n        )\n        return {\n          ...reg,\n          event,\n          name: reg.name && reg.name.toLowerCase(),\n          iconWithName: (\n            <IconWithName\n              status={reg.declarationStatus}\n              name={NameComponent}\n              isValidatedOnReview={isValidatedOnReview}\n              isDuplicate={isDuplicate}\n              isArchived={isArchived}\n            />\n          ),\n          iconWithNameEvent: (\n            <IconWithNameEvent\n              status={reg.declarationStatus}\n              name={NameComponent}\n              event={event}\n              isDuplicate={isDuplicate}\n              isValidatedOnReview={isValidatedOnReview}\n              isArchived={isArchived}\n            />\n          ),\n          dateOfEvent,\n          actions\n        }\n      })\n  }\n\n  const { intl } = props\n  const search = location.search\n  const params = new URLSearchParams(search)\n  const [searchText, searchType] = [\n    params.get('searchText'),\n    params.get('searchType')\n  ]\n  return (\n    <Frame\n      header={\n        <Header\n          searchText={searchText!}\n          selectedSearchType={searchType!}\n          mobileSearchBar={true}\n          enableMenuSelection={false}\n        />\n      }\n      navigation={<Navigation />}\n      skipToContentText={intl.formatMessage(\n        constantsMessages.skipToMainContent\n      )}\n    >\n      {searchText && searchType && (\n        <Query<SearchEventsQuery>\n          query={SEARCH_EVENTS}\n          variables={{\n            advancedSearchParameters: {\n              trackingId:\n                searchType === SearchCriteria.TRACKING_ID ? searchText : '',\n              nationalId:\n                searchType === SearchCriteria.NATIONAL_ID ? searchText : '',\n              registrationNumber:\n                searchType === SearchCriteria.REGISTRATION_NUMBER\n                  ? searchText\n                  : '',\n              contactNumber:\n                searchType === SearchCriteria.PHONE_NUMBER\n                  ? convertToMSISDN(searchText, window.config.COUNTRY)\n                  : '',\n              contactEmail:\n                searchType === SearchCriteria.EMAIL ? searchText : '',\n              name: searchType === SearchCriteria.NAME ? searchText : ''\n            },\n            sort: SEARCH_RESULT_SORT\n          }}\n          fetchPolicy=\"cache-and-network\"\n        >\n          {({ loading, error, data }) => {\n            const total = loading\n              ? -1\n              : data?.searchEvents?.results?.length || 0\n            return (\n              <WQContentWrapper\n                title={intl.formatMessage(messages.searchResultFor, {\n                  param: searchText\n                })}\n                isMobileSize={width < props.theme.grid.breakpoints.lg}\n                noResultText={intl.formatMessage(messages.noResultFor, {\n                  param: searchText\n                })}\n                noContent={total < 1 && !loading}\n              >\n                {loading ? (\n                  <div id=\"search_loader\">\n                    <LoadingIndicator loading={true} />\n                  </div>\n                ) : error ? (\n                  <ErrorText id=\"search-result-error-text\">\n                    {intl.formatMessage(errorMessages.queryError)}\n                  </ErrorText>\n                ) : (\n                  data?.searchEvents &&\n                  total > 0 && (\n                    <>\n                      <ReactTooltip id=\"validateTooltip\">\n                        <ToolTipContainer>\n                          {props.intl.formatMessage(\n                            registrarHomeMessages.validatedDeclarationTooltipForRegistrar\n                          )}\n                        </ToolTipContainer>\n                      </ReactTooltip>\n                      <Workqueue\n                        content={transformSearchContent(data.searchEvents)}\n                        columns={getColumns()}\n                        noResultText={intl.formatMessage(\n                          constantsMessages.noResults\n                        )}\n                        hideLastBorder={true}\n                      />\n                    </>\n                  )\n                )}\n              </WQContentWrapper>\n            )\n          }}\n        </Query>\n      )}\n    </Frame>\n  )\n}",
      "startLine": 115,
      "endLine": 540,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SearchResult/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@163-165",
      "type": "function_declaration",
      "name": "userHasRegisterScope",
      "text": "function userHasRegisterScope() {\n    return props.scope && props.scope.includes(SCOPES.RECORD_REGISTER)\n  }",
      "startLine": 163,
      "endLine": 165,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SearchResult/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@167-177",
      "type": "function_declaration",
      "name": "userHasValidateScope",
      "text": "function userHasValidateScope() {\n    const validateScopes = [\n      SCOPES.RECORD_REGISTER,\n      SCOPES.RECORD_SUBMIT_FOR_APPROVAL,\n      SCOPES.RECORD_SUBMIT_FOR_UPDATES\n    ] as Scope[]\n\n    return (\n      props.scope && props.scope.some((scope) => validateScopes.includes(scope))\n    )\n  }",
      "startLine": 167,
      "endLine": 177,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SearchResult/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@179-181",
      "type": "function_declaration",
      "name": "hasIssueScope",
      "text": "function hasIssueScope() {\n    return props.scope?.includes(SCOPES.RECORD_PRINT_ISSUE_CERTIFIED_COPIES)\n  }",
      "startLine": 179,
      "endLine": 181,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SearchResult/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@183-185",
      "type": "function_declaration",
      "name": "hasPrintScope",
      "text": "function hasPrintScope() {\n    return props.scope?.includes(SCOPES.RECORD_PRINT_ISSUE_CERTIFIED_COPIES)\n  }",
      "startLine": 183,
      "endLine": 185,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SearchResult/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@187-194",
      "type": "function_declaration",
      "name": "canSearchAnywhere",
      "text": "function canSearchAnywhere() {\n    const searchScopes: Scope[] = [\n      SCOPES.SEARCH_BIRTH,\n      SCOPES.SEARCH_DEATH,\n      SCOPES.SEARCH_MARRIAGE\n    ]\n    return props.scope?.some((scope) => searchScopes.includes(scope))\n  }",
      "startLine": 187,
      "endLine": 194,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/SearchResult/SearchResult.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-15",
      "type": "function_declaration",
      "name": "getAvailableLanguages",
      "text": "function getAvailableLanguages() {\n  return window.config.LANGUAGES.split(',')\n}",
      "startLine": 13,
      "endLine": 15,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-19",
      "type": "function_declaration",
      "name": "getDefaultLanguage",
      "text": "function getDefaultLanguage() {\n  return getAvailableLanguages()[0]\n}",
      "startLine": 17,
      "endLine": 19,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-26",
      "type": "function_declaration",
      "name": "getPreferredLanguage",
      "text": "async function getPreferredLanguage() {\n  const languageInUrl = new URLSearchParams(window.location.search).get('lang')\n  return (\n    languageInUrl ?? (await storage.getItem('language')) ?? getDefaultLanguage()\n  )\n}",
      "startLine": 21,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-30",
      "type": "function_declaration",
      "name": "storeLanguage",
      "text": "function storeLanguage(language: string) {\n  storage.setItem('language', language)\n}",
      "startLine": 28,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@605-610",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n    !offlineData[OFFLINE_LOCATIONS_KEY] ||\n    !offlineData[OFFLINE_LOCATIONS_KEY][locationId]\n  ) {\n    return\n  }",
      "startLine": 605,
      "endLine": 610,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/search/advancedSearch/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@41-142",
      "type": "function_declaration",
      "name": "RemoveBookmarkAdvancedSearchModal",
      "text": "function RemoveBookmarkAdvancedSearchModal({\n  showRemoveBookmarkModal,\n  toggleRemoveBookmarkModal,\n  setNotificationStatus,\n  setNotificationMessages\n}: IRemoveBookmarkModalProps) {\n  const intl = useIntl()\n  const dispatch = useDispatch()\n  const { searchId, ...rest } = useSelector(getAdvancedSearchParamsState)\n  const userDetails = useSelector(getUserDetails)\n  const isOnline = useOnlineStatus()\n\n  const [removeAdvancedSearchResultBookmark] = useMutation<\n    RemoveBookmarkedAdvancedSearchMutation,\n    RemoveBookmarkedAdvancedSearchMutationVariables\n  >(REMOVE_ADVANCED_SEARCH_RESULT_BOOKMARK_MUTATION, {\n    onError() {\n      setNotificationMessages(\n        intl.formatMessage(\n          messagesSearch.advancedSearchBookmarkErrorNotification\n        )\n      )\n      setNotificationStatus(NOTIFICATION_STATUS.ERROR)\n    },\n    onCompleted() {\n      setNotificationMessages(\n        intl.formatMessage(\n          messagesSearch.removedAdvancedSearchBookmarkSuccessNotification\n        )\n      )\n      setNotificationStatus(NOTIFICATION_STATUS.SUCCESS)\n    }\n  })\n\n  const removeAdvancedSearchBookmarkHandler = async () => {\n    const mutatedData = await removeAdvancedSearchResultBookmark({\n      variables: {\n        removeBookmarkedSearchInput: {\n          userId: String(userDetails?.userMgntUserID),\n          searchId: String(searchId)\n        }\n      }\n    })\n    if (mutatedData.data?.removeBookmarkedAdvancedSearch) {\n      dispatch(\n        modifyUserDetails({\n          ...userDetails,\n          searches: mutatedData.data.removeBookmarkedAdvancedSearch\n            .searchList as BookmarkedSeachItem[]\n        })\n      )\n      dispatch(setAdvancedSearchParam({ searchId: EMPTY_STRING, ...rest }))\n    }\n  }\n  return (\n    <>\n      <ResponsiveModal\n        id=\"removeBookmarkModal\"\n        show={showRemoveBookmarkModal}\n        title={intl.formatMessage(\n          messagesSearch.removeBookmarkAdvancedSearchModalTitle\n        )}\n        autoHeight={true}\n        actions={[\n          <Button\n            type=\"tertiary\"\n            id=\"cancel\"\n            key=\"cancel\"\n            onClick={toggleRemoveBookmarkModal}\n          >\n            {intl.formatMessage(buttonMessages.cancel)}\n          </Button>,\n          <Button\n            key=\"remove-advanced-search-bookmark\"\n            type=\"primary\"\n            id=\"remove_advanced_search_bookmark\"\n            onClick={async () => {\n              setNotificationMessages(\n                intl.formatMessage(\n                  messagesSearch.removeAdvancedSearchBookmarkLoadingNotification\n                )\n              )\n              setNotificationStatus(NOTIFICATION_STATUS.IN_PROGRESS)\n              toggleRemoveBookmarkModal()\n              await removeAdvancedSearchBookmarkHandler()\n            }}\n            disabled={!isOnline}\n          >\n            {intl.formatMessage(buttonMessages.confirm)}\n          </Button>\n        ]}\n        handleClose={toggleRemoveBookmarkModal}\n      >\n        <Message>\n          {intl.formatMessage(\n            messagesSearch.removeBookmarkAdvancedSearchModalBody\n          )}\n        </Message>\n      </ResponsiveModal>\n    </>\n  )\n}",
      "startLine": 41,
      "endLine": 142,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/views/AdvancedSearch/RemoveBookmarkModal.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@106-164",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case actions.CHANGE_LANGUAGE:\n      const messages = getNextMessages(action.payload.language, state.languages)\n      let language = action.payload.language\n\n      if (!state.languages[language]) {\n        language = getDefaultLanguage()\n      }\n\n      return loop(\n        {\n          ...state,\n          language,\n          messages\n        },\n        Cmd.run(() => storeLanguage(language))\n      )\n\n    case offlineActions.READY:\n    case offlineActions.UPDATED:\n      const languages = action.payload.languages\n      const loadedLanguagesState: ILanguageState = languages.reduce(\n        (indexedByLang, language) => ({\n          ...indexedByLang,\n          [language.lang]: {\n            ...language,\n            messages: {\n              ...state.languages[language.lang].messages,\n              ...language.messages\n            }\n          }\n        }),\n        {}\n      )\n\n      const languagesWithLocations = formatLocationLanguageState(\n        Object.values(action.payload.locations),\n        loadedLanguagesState\n      )\n\n      const languagesWithFacilities = formatLocationLanguageState(\n        Object.values(action.payload.facilities),\n        languagesWithLocations\n      )\n\n      const updatedMessages = {\n        ...getNextMessages(state.language, state.languages),\n        ...languagesWithFacilities[state.language].messages\n      }\n\n      return {\n        ...state,\n        messages: updatedMessages,\n        languages: languagesWithFacilities\n      }\n\n    default:\n      return state\n  }",
      "startLine": 106,
      "endLine": 164,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/i18n/reducer.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@129-137",
      "type": "method_definition",
      "name": "switch",
      "text": "switch (action.type) {\n    case actions.SET_ADVANCED_SEARCH_PARAM: {\n      return {\n        ...action.payload\n      }\n    }\n    default:\n      return state\n  }",
      "startLine": 129,
      "endLine": 137,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/search/advancedSearch/reducer.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-41",
      "type": "function_declaration",
      "name": "getSchema",
      "text": "function getSchema() {\n  const schema = makeExecutableSchema({\n    typeDefs: schemaString,\n    /*\n     * This disables the following warnings:\n     *\n     * Type \"EventSearchSet\" is missing a \"resolveType\" resolver.\n     * Pass false into \"resolverValidationOptions.requireResolversForResolveType\" to disable this warning.\n     */\n    resolverValidationOptions: {\n      requireResolversForResolveType: false\n    }\n  })\n\n  addMockFunctionsToSchema({\n    schema,\n    mocks: {\n      Date: () => {\n        return new Date()\n      }\n    }\n  })\n\n  return schema\n}",
      "startLine": 17,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/graphql-schema-mock.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-165",
      "type": "function_declaration",
      "name": "testDataGenerator",
      "text": "function testDataGenerator() {\n  const user = {\n    token: {\n      fieldAgent:\n        'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJyZWNvcmQuZGVjbGFyZS1iaXJ0aCIsInJlY29yZC5kZWNsYXJlLWRlYXRoIiwicmVjb3JkLmRlY2xhcmUtbWFycmlhZ2UiLCJyZWNvcmQuZGVjbGFyYXRpb24tc3VibWl0LWluY29tcGxldGUiLCJyZWNvcmQuZGVjbGFyYXRpb24tc3VibWl0LWZvci1yZXZpZXciLCJzZWFyY2guYmlydGgiLCJzZWFyY2guZGVhdGgiLCJzZWFyY2gubWFycmlhZ2UiLCJkZW1vIl0sImlhdCI6MTc0Mzc2NTY1NywiZXhwIjoxNzQ0MzcwNDU3LCJhdWQiOlsib3BlbmNydnM6YXV0aC11c2VyIiwib3BlbmNydnM6dXNlci1tZ250LXVzZXIiLCJvcGVuY3J2czpoZWFydGgtdXNlciIsIm9wZW5jcnZzOmdhdGV3YXktdXNlciIsIm9wZW5jcnZzOm5vdGlmaWNhdGlvbi11c2VyIiwib3BlbmNydnM6d29ya2Zsb3ctdXNlciIsIm9wZW5jcnZzOnNlYXJjaC11c2VyIiwib3BlbmNydnM6bWV0cmljcy11c2VyIiwib3BlbmNydnM6Y291bnRyeWNvbmZpZy11c2VyIiwib3BlbmNydnM6d2ViaG9va3MtdXNlciIsIm9wZW5jcnZzOmNvbmZpZy11c2VyIiwib3BlbmNydnM6ZG9jdW1lbnRzLXVzZXIiXSwiaXNzIjoib3BlbmNydnM6YXV0aC1zZXJ2aWNlIiwic3ViIjoiNjdlZjdmODNkNmE5Y2I5MmU5ZWRhYTk5In0.dGtl7zhEeMWK05KSJqGjRzHVxjSOV1d-5naUEENTTU_iA7NeCKaKXAbiJRWDTqyQgmnF_Rl1WCxrVYgmwZWWkRZ1FuPDwEOIuYcf5ZtLamiR-Bs0cS0V3D9xXuzAnawB5hWOlZYbopihXVeI0tOAy7_Zd3KCzUisDcGEi1I6m8jZ11jUdOevM1wWLDmr69pz4ZgSnGbBxqyXis138xnqL6-kExExzvG8o59-1sn98NO83PL7vole9-EZbZj8VKlJ8YKYA6GYNEeJZdKTh960JNMJrjBHn87JfeGH-nnBv3RGmyNYv7d7FEIRJacSyKBRz_gD6RWzLvzjWWYRbJ294A',\n      registrationAgent:\n        'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJyZWNvcmQucmVhZCIsInJlY29yZC5kZWNsYXJlLWJpcnRoIiwicmVjb3JkLmRlY2xhcmUtZGVhdGgiLCJyZWNvcmQuZGVjbGFyZS1tYXJyaWFnZSIsInJlY29yZC5kZWNsYXJhdGlvbi1lZGl0IiwicmVjb3JkLmRlY2xhcmF0aW9uLXN1Ym1pdC1mb3ItYXBwcm92YWwiLCJyZWNvcmQuZGVjbGFyYXRpb24tc3VibWl0LWZvci11cGRhdGVzIiwicmVjb3JkLmRlY2xhcmF0aW9uLWFyY2hpdmUiLCJyZWNvcmQuZGVjbGFyYXRpb24tcmVpbnN0YXRlIiwicmVjb3JkLnJlZ2lzdHJhdGlvbi1yZXF1ZXN0LWNvcnJlY3Rpb24iLCJyZWNvcmQuZGVjbGFyYXRpb24tcHJpbnQtc3VwcG9ydGluZy1kb2N1bWVudHMiLCJyZWNvcmQuZXhwb3J0LXJlY29yZHMiLCJyZWNvcmQucmVnaXN0cmF0aW9uLXByaW50Jmlzc3VlLWNlcnRpZmllZC1jb3BpZXMiLCJwZXJmb3JtYW5jZS5yZWFkIiwicGVyZm9ybWFuY2UucmVhZC1kYXNoYm9hcmRzIiwib3JnYW5pc2F0aW9uLnJlYWQtbG9jYXRpb25zOm15LW9mZmljZSIsInNlYXJjaC5iaXJ0aCIsInNlYXJjaC5kZWF0aCIsInNlYXJjaC5tYXJyaWFnZSIsImRlbW8iXSwiaWF0IjoxNzQzNzY1NTc3LCJleHAiOjE3NDQzNzAzNzcsImF1ZCI6WyJvcGVuY3J2czphdXRoLXVzZXIiLCJvcGVuY3J2czp1c2VyLW1nbnQtdXNlciIsIm9wZW5jcnZzOmhlYXJ0aC11c2VyIiwib3BlbmNydnM6Z2F0ZXdheS11c2VyIiwib3BlbmNydnM6bm90aWZpY2F0aW9uLXVzZXIiLCJvcGVuY3J2czp3b3JrZmxvdy11c2VyIiwib3BlbmNydnM6c2VhcmNoLXVzZXIiLCJvcGVuY3J2czptZXRyaWNzLXVzZXIiLCJvcGVuY3J2czpjb3VudHJ5Y29uZmlnLXVzZXIiLCJvcGVuY3J2czp3ZWJob29rcy11c2VyIiwib3BlbmNydnM6Y29uZmlnLXVzZXIiLCJvcGVuY3J2czpkb2N1bWVudHMtdXNlciJdLCJpc3MiOiJvcGVuY3J2czphdXRoLXNlcnZpY2UiLCJzdWIiOiI2N2VmN2Y4M2Q2YTljYjkyZTllZGFhYTEifQ.cuRti6UG2ZyvI3zeGRv3ke0Vp1L1aK1jJiIQoHZF4YrZcLyvkeYDV6T0B0lPq9MRCe29NWm6gK5iJgwGwGX8eXjDMs-BlNjB07gojVrHSQfoRt7eAQOUgwY7g9o3CXQuGlr1pawVaWbJXyrLjXruZDpty_guSLideFiECXAwA_TnCk3Vl3xs32wiXI_QO55dfRx7jYc4sWcoTf3pk7oEBPuBz4XERjkDA9h9rw08LMFILAUJdVKapYqdvTNQ6qw1dsmdCZKYYA7sZsQuESYm8pi0JpD3WHARZzS_ZiLi7Ni4DavV7xIyABAcxmYUTNWZ02osFsmFLxyi43zCC_ufTQ',\n      localRegistrar:\n        'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJyZWNvcmQucmVhZCIsInJlY29yZC5kZWNsYXJlLWJpcnRoIiwicmVjb3JkLmRlY2xhcmUtZGVhdGgiLCJyZWNvcmQuZGVjbGFyZS1tYXJyaWFnZSIsInJlY29yZC5kZWNsYXJhdGlvbi1lZGl0IiwicmVjb3JkLmRlY2xhcmF0aW9uLXN1Ym1pdC1mb3ItdXBkYXRlcyIsInJlY29yZC5yZXZpZXctZHVwbGljYXRlcyIsInJlY29yZC5kZWNsYXJhdGlvbi1hcmNoaXZlIiwicmVjb3JkLmRlY2xhcmF0aW9uLXJlaW5zdGF0ZSIsInJlY29yZC5yZWdpc3RlciIsInJlY29yZC5yZWdpc3RyYXRpb24tY29ycmVjdCIsInJlY29yZC5kZWNsYXJhdGlvbi1wcmludC1zdXBwb3J0aW5nLWRvY3VtZW50cyIsInJlY29yZC5leHBvcnQtcmVjb3JkcyIsInJlY29yZC51bmFzc2lnbi1vdGhlcnMiLCJyZWNvcmQucmVnaXN0cmF0aW9uLXByaW50Jmlzc3VlLWNlcnRpZmllZC1jb3BpZXMiLCJyZWNvcmQuY29uZmlybS1yZWdpc3RyYXRpb24iLCJyZWNvcmQucmVqZWN0LXJlZ2lzdHJhdGlvbiIsInBlcmZvcm1hbmNlLnJlYWQiLCJwZXJmb3JtYW5jZS5yZWFkLWRhc2hib2FyZHMiLCJwcm9maWxlLmVsZWN0cm9uaWMtc2lnbmF0dXJlIiwib3JnYW5pc2F0aW9uLnJlYWQtbG9jYXRpb25zOm15LW9mZmljZSIsInVzZXIucmVhZDpteS1vZmZpY2UiLCJzZWFyY2guYmlydGgiLCJzZWFyY2guZGVhdGgiLCJzZWFyY2gubWFycmlhZ2UiLCJkZW1vIl0sImlhdCI6MTc0Mzc0OTAxMSwiZXhwIjoxNzQ0MzUzODExLCJhdWQiOlsib3BlbmNydnM6YXV0aC11c2VyIiwib3BlbmNydnM6dXNlci1tZ250LXVzZXIiLCJvcGVuY3J2czpoZWFydGgtdXNlciIsIm9wZW5jcnZzOmdhdGV3YXktdXNlciIsIm9wZW5jcnZzOm5vdGlmaWNhdGlvbi11c2VyIiwib3BlbmNydnM6d29ya2Zsb3ctdXNlciIsIm9wZW5jcnZzOnNlYXJjaC11c2VyIiwib3BlbmNydnM6bWV0cmljcy11c2VyIiwib3BlbmNydnM6Y291bnRyeWNvbmZpZy11c2VyIiwib3BlbmNydnM6d2ViaG9va3MtdXNlciIsIm9wZW5jcnZzOmNvbmZpZy11c2VyIiwib3BlbmNydnM6ZG9jdW1lbnRzLXVzZXIiXSwiaXNzIjoib3BlbmNydnM6YXV0aC1zZXJ2aWNlIiwic3ViIjoiNjdlZjdmODNkNmE5Y2I5MmU5ZWRhYWE5In0.Vn92CQoFto9QTH9YFjtzDAGcATlX37iviVLb6OBeiBzmsDSQZKO2ZGvhQBmjQS01O-SZ0f1D4qlgMaMkgyjKq-8QuwbxTHDG35wRIwBe_1NJ7VQFbhDJx-Sz70Pb4LgQdNaRpZBTOGaEkNNOWlO_Z4z5a9IW1SXg52ApprpwLHvpiQDalZ-sRWlmyjObqx8qdcNMCtxWaPRJaoR4Y7TM4MbKuS-Sx74P2UK5jel8QsHP6qG2iM7cTnq0L1PVAYrf5gT3IHqQGDwt4HrlZV-NyfId9FyRQCTjYrvgYM4gnHddtf7oaDk3fB5b5zc73HRYotvRibm99ncjD7-iOvyJtA'\n    },\n    id: {\n      // If token is changed, id should also change accordingly\n      localRegistrar: '67ef7f83d6a9cb92e9edaaa9',\n      registrationAgent: '67ef7f83d6a9cb92e9edaaa1',\n      fieldAgent: '67ef7f83d6a9cb92e9edaa99'\n    },\n    fieldAgent: () =>\n      ({\n        id: getUUID(),\n        userMgntUserID: getUUID(),\n        creationDate: '1736421510056',\n        username: 'k.bwalya',\n        practitionerId: getUUID(),\n        mobile: '+260911111111',\n        email: 'kalushabwalya17@gmail.com',\n        role: {\n          label: {\n            id: 'userRole.socialWorker',\n            defaultMessage: 'Social Worker',\n            description: 'Name for user role Social Worker',\n            __typename: 'I18nMessage'\n          },\n          __typename: 'UserRole'\n        },\n        status: Status.Active,\n        name: [\n          {\n            use: 'en',\n            firstNames: 'Kalusha',\n            familyName: 'Bwalya',\n            __typename: 'HumanName'\n          }\n        ],\n        primaryOffice: {\n          id: '028d2c85-ca31-426d-b5d1-2cef545a4902',\n          name: 'Ibombo District Office',\n          alias: ['Ibombo District Office'],\n          status: 'active',\n          __typename: 'Location'\n        },\n        localRegistrar: null,\n        avatar: null,\n        searches: [],\n        __typename: 'User'\n      }) satisfies FetchUserQuery['getUser'],\n    registrationAgent: () =>\n      ({\n        id: getUUID(),\n        userMgntUserID: getUUID(),\n        creationDate: '1736421510209',\n        username: 'f.katongo',\n        practitionerId: getUUID(),\n        mobile: '+260922222222',\n        email: 'kalushabwalya17+@gmail.com',\n        role: {\n          label: {\n            id: 'userRole.registrationAgent',\n            defaultMessage: 'Registration Agent',\n            description: 'Name for user role Registration Agent',\n            __typename: 'I18nMessage'\n          },\n          __typename: 'UserRole'\n        },\n        status: Status.Active,\n        name: [\n          {\n            use: 'en',\n            firstNames: 'Felix',\n            familyName: 'Katongo',\n            __typename: 'HumanName'\n          }\n        ],\n        primaryOffice: {\n          id: '028d2c85-ca31-426d-b5d1-2cef545a4902',\n          name: 'Ibombo District Office',\n          alias: ['Ibombo District Office'],\n          status: 'active',\n          __typename: 'Location'\n        },\n        localRegistrar: null,\n        avatar: null,\n        searches: [],\n        __typename: 'User'\n      }) satisfies FetchUserQuery['getUser'],\n    localRegistrar: () =>\n      ({\n        id: getUUID(),\n        userMgntUserID: getUUID(),\n        creationDate: '1737725915295',\n        username: 'k.mweene',\n        practitionerId: getUUID(),\n        mobile: '+260933333333',\n        email: 'kalushabwalya1.7@gmail.com',\n        role: {\n          label: {\n            id: 'userRole.localRegistrar',\n            defaultMessage: 'Local Registrar',\n            description: 'Name for user role Local Registrar',\n            __typename: 'I18nMessage'\n          },\n          __typename: 'UserRole'\n        },\n        status: Status.Active,\n        name: [\n          {\n            use: 'en',\n            firstNames: 'Kennedy',\n            familyName: 'Mweene',\n            __typename: 'HumanName'\n          }\n        ],\n        primaryOffice: {\n          id: '028d2c85-ca31-426d-b5d1-2cef545a4902',\n          name: 'Ibombo District Office',\n          alias: ['Ibombo District Office'],\n          status: 'active',\n          __typename: 'Location'\n        },\n        localRegistrar: {\n          name: [\n            {\n              use: 'en',\n              firstNames: 'Kennedy',\n              familyName: 'Mweene',\n              __typename: 'HumanName'\n            }\n          ],\n          role: 'LOCAL_REGISTRAR',\n          signature: null,\n          __typename: 'LocalRegistrar'\n        },\n        avatar: null,\n        searches: [],\n        __typename: 'User'\n      }) satisfies FetchUserQuery['getUser']\n  }\n\n  return { event: eventPayloadGenerator, user }\n}",
      "startLine": 17,
      "endLine": 165,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/test-data-generators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-53",
      "type": "function_declaration",
      "name": "syncRegistrarWorkqueue",
      "text": "async function syncRegistrarWorkqueue(\n  userId: string,\n  locationId: string,\n  reviewStatuses: string[],\n  pageSize: number,\n  inProgressSkip: number,\n  healthSystemSkip: number,\n  reviewSkip: number,\n  rejectSkip: number,\n  sentForReviewSkip: number,\n  approvalSkip: number,\n  externalValidationSkip: number,\n  printSkip: number,\n  issueSkip: number\n) {\n  try {\n    const queryResult = await client.query({\n      query: REGISTRATION_HOME_QUERY,\n      variables: {\n        userId,\n        declarationLocationId: locationId,\n        pageSize,\n        reviewStatuses: reviewStatuses,\n        inProgressSkip: inProgressSkip,\n        healthSystemSkip: healthSystemSkip,\n        reviewSkip: reviewSkip,\n        rejectSkip: rejectSkip,\n        sentForReviewSkip,\n        approvalSkip: approvalSkip,\n        externalValidationSkip: externalValidationSkip,\n        printSkip: printSkip,\n        issueSkip: issueSkip\n      },\n      fetchPolicy: 'no-cache'\n    })\n    return queryResult.data\n  } catch (exception) {\n    return undefined\n  }\n}",
      "startLine": 14,
      "endLine": 53,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/ListSyncController.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@12-26",
      "type": "function_declaration",
      "name": "formatTimeDuration",
      "text": "function formatTimeDuration(timeInSeconds: number) {\n  const seconds = timeInSeconds % 60\n  timeInSeconds = Math.floor(timeInSeconds / 60)\n  const minutes = timeInSeconds % 60\n  timeInSeconds = Math.floor(timeInSeconds / 60)\n  const hours = timeInSeconds % 24\n  const days = Math.floor(timeInSeconds / 24)\n\n  return {\n    days: ('0' + days).slice(-2),\n    hours: ('0' + hours).slice(-2),\n    minutes: ('0' + minutes).slice(-2),\n    seconds: ('0' + seconds).slice(-2)\n  }\n}",
      "startLine": 12,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/DateUtils.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@54-152",
      "type": "class_declaration",
      "name": "SubmissionController",
      "text": "class SubmissionController {\n  private store: AppStore\n  public syncRunning = false\n  private syncCount = 0\n\n  constructor(store: AppStore) {\n    this.store = store\n  }\n\n  public start = () => {\n    setInterval(() => {\n      this.sync()\n    }, INTERVAL_TIME)\n  }\n\n  private getDeclarations = () =>\n    this.store.getState().declarationsState.declarations || []\n\n  private getSubmitableDeclarations = () => {\n    return this.getDeclarations().filter(\n      (app: IDeclaration) =>\n        app.submissionStatus &&\n        ALLOWED_STATUS_FOR_RETRY.includes(app.submissionStatus as IRetryStatus)\n    )\n  }\n  public requeueHangingDeclarations = () => {\n    const now = Date.now()\n    this.getDeclarations()\n      .filter((app: IDeclaration) => {\n        return (\n          app.submissionStatus &&\n          INPROGRESS_STATUS.includes(\n            app.submissionStatus as IInProgressStatus\n          ) &&\n          app.modifiedOn &&\n          differenceInMinutes(now, app.modifiedOn) > HANGING_EXPIRE_MINUTES\n        )\n      })\n      .forEach((app: IDeclaration) => {\n        const action = app.action\n        if (action && isSubmissionAction(action)) {\n          this.store.dispatch(\n            declarationReadyForStatusChange({\n              ...app,\n              action\n            })\n          )\n        }\n      })\n  }\n  /* eslint-disable no-console */\n\n  public sync = () => {\n    const firstSync = this.syncCount === 0\n    this.syncCount++\n    console.debug(`[${this.syncCount}] Starting sync...`)\n    if (!isNavigatorOnline() || this.syncRunning) {\n      console.debug(\n        `[${this.syncCount}] Sync exiting early (offline or already syncing)`\n      )\n      return\n    }\n\n    this.syncRunning = true\n\n    this.requeueHangingDeclarations()\n    const submitableDeclarations = this.getSubmitableDeclarations()\n\n    if (firstSync) {\n      const failedDeclarations = this.getDeclarations().filter(\n        (declaration) =>\n          declaration.submissionStatus === SUBMISSION_STATUS.FAILED\n      )\n\n      submitableDeclarations.push(...failedDeclarations)\n      console.debug(\n        `[${this.syncCount}] First sync, adding ${failedDeclarations.length} failed declarations`\n      )\n    }\n\n    console.debug(\n      `[${this.syncCount}] Syncing ${submitableDeclarations.length} declarations`\n    )\n    for (const declaration of submitableDeclarations) {\n      const action = declaration.action\n      if (action && isSubmissionAction(action)) {\n        this.store.dispatch(\n          declarationReadyForStatusChange({\n            ...declaration,\n            action\n          })\n        )\n      }\n    }\n\n    this.syncRunning = false\n    console.debug(`[${this.syncCount}] Finish sync.`)\n  }\n}",
      "startLine": 54,
      "endLine": 152,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/SubmissionController.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@59-61",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(store: AppStore) {\n    this.store = store\n  }",
      "startLine": 59,
      "endLine": 61,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/SubmissionController.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-44",
      "type": "function_declaration",
      "name": "waitFor",
      "text": "async function waitFor(condition: () => boolean) {\n  return new Promise<void>((resolve, reject) => {\n    let remainingTime = MAX_TIME\n\n    const intervalId = setInterval(() => {\n      if (remainingTime < 0) {\n        clearInterval(intervalId)\n        return reject(\n          new Error(\n            `Condition was not met in ${MAX_TIME}ms: \\n\\n${condition.toString()}`\n          )\n        )\n      }\n\n      let result = false\n      try {\n        result = condition()\n      } catch (err) {}\n\n      if (result) {\n        clearInterval(intervalId)\n        return resolve()\n      }\n\n      remainingTime = remainingTime - INTERVAL\n    }, INTERVAL)\n  })\n}",
      "startLine": 17,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/wait-for-element.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@29-32",
      "type": "method_definition",
      "name": "transform",
      "text": "transform(code: string) {\n        if (code.match(/eval\\( | getConditionalActionsForField/))\n          return { moduleSideEffects: 'no-treeshake' as const }\n      }",
      "startLine": 29,
      "endLine": 32,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/vite.config.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@39-43",
      "type": "method_definition",
      "name": "transformIndexHtml",
      "text": "transformIndexHtml(html: string) {\n        return html.replace(/%(.*?)%/g, function (_, p1) {\n          return env[p1]\n        })\n      }",
      "startLine": 39,
      "endLine": 43,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/vite.config.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@44-55",
      "type": "method_definition",
      "name": "onUnhandledRequest",
      "text": "onUnhandledRequest(req, print) {\n    if (\n      new URL(req.url).pathname.startsWith('/src/') ||\n      new URL(req.url).pathname.startsWith('/@fs') ||\n      new URL(req.url).pathname.startsWith('/node_modules') ||\n      new URL(req.url).pathname.startsWith('/images')\n    ) {\n      return\n    }\n\n    print.warning()\n  }",
      "startLine": 44,
      "endLine": 55,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/.storybook/preview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@120-125",
      "type": "function_declaration",
      "name": "clearStorage",
      "text": "async function clearStorage() {\n  const databases = await window.indexedDB.databases()\n  for (const db of databases) {\n    window.indexedDB.deleteDatabase(db.name!)\n  }\n}",
      "startLine": 120,
      "endLine": 125,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/.storybook/preview.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@163-180",
      "type": "function_declaration",
      "name": "createGraphQLClient",
      "text": "function createGraphQLClient() {\n  const schema = getSchema()\n  return new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new ApolloLink((operation) => {\n      return new Observable((observer) => {\n        const { query, operationName, variables } = operation\n\n        graphql(schema, print(query), null, null, variables, operationName)\n          .then((result) => {\n            observer.next(result)\n            observer.complete()\n          })\n          .catch(observer.error.bind(observer))\n      })\n    })\n  })\n}",
      "startLine": 163,
      "endLine": 180,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/util.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@182-188",
      "type": "function_declaration",
      "name": "getInitialState",
      "text": "function getInitialState(): IStoreState {\n  const { store: mockStore } = createStore()\n\n  mockStore.dispatch({ type: 'NOOP' })\n\n  return mockStore.getState()\n}",
      "startLine": 182,
      "endLine": 188,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/util.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@190-192",
      "type": "function_declaration",
      "name": "waitForReady",
      "text": "function waitForReady(app: ReactWrapper) {\n  return waitForElement(app, '#readyDeclaration')\n}",
      "startLine": 190,
      "endLine": 192,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/util.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@521-525",
      "type": "method_definition",
      "name": "for",
      "text": "for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key + appendString] = obj[key]\n    }\n  }",
      "startLine": 521,
      "endLine": 525,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 18,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/util.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@1038-1040",
      "type": "method_definition",
      "name": "if",
      "text": "if (apolloClient) {\n      return <ApolloProvider client={apolloClient}>{node}</ApolloProvider>\n    }",
      "startLine": 1038,
      "endLine": 1040,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/util.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@1042-1165",
      "type": "method_definition",
      "name": "return",
      "text": "return (\n      <MockedProvider\n        mocks={graphqlMocks}\n        addTypename={false}\n        defaultOptions={{\n          watchQuery: { fetchPolicy: 'no-cache' },\n          query: { fetchPolicy: 'no-cache' }\n        }}\n      >\n        {node}\n      </MockedProvider>\n    )\n  }\n  const router = createMemoryRouter(\n    [\n      {\n        path,\n        element: node\n      }\n    ],\n    { initialEntries }\n  )\n\n  function PropProxy() {\n    return withGraphQL(\n      <Provider store={store}>\n        <I18nContainer>\n          <ThemeProvider theme={getTheme()}>\n            <RouterProvider router={router} />\n          </ThemeProvider>\n        </I18nContainer>\n      </Provider>\n    )\n  }\n\n  return { component: mount(<PropProxy />, options), router }\n}\n\n/**\n * Create a test component with the given node and store.\n * Returns component route\n */\nexport type TestComponentWithRouteMock = {\n  component: ReactWrapper<{}, {}>\n  router: Awaited<ReturnType<typeof createTestComponent>>['router']\n}\n\nexport const getFileFromBase64String = (\n  base64String: string,\n  name: string,\n  contentType: string\n): File => {\n  const byteCharacters = atob(base64String)\n  const bytesLength = byteCharacters.length\n  const slicesCount = Math.ceil(bytesLength / 1024)\n  const byteArrays = new Array(slicesCount)\n\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    const begin = sliceIndex * 1024\n    const end = Math.min(begin + 1024, bytesLength)\n\n    const bytes = new Array(end - begin)\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0)\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes)\n  }\n  return new File(byteArrays, name, {\n    type: contentType\n  })\n}\n\nexport async function goToSection(component: ReactWrapper, nth: number) {\n  for (let i = 0; i < nth; i++) {\n    await flushPromises()\n    await waitForElement(component, '#next_section')\n    component.find('#next_section').hostNodes().simulate('click')\n    await flushPromises()\n    component.update()\n  }\n}\n\nexport async function goToEndOfForm(component: ReactWrapper) {\n  await goToSection(component, 6)\n  await waitForElement(component, '#review_header')\n}\n\nexport async function goToDocumentsSection(component: ReactWrapper) {\n  await goToSection(component, 4)\n  await waitForElement(component, '#form_section_id_documents-view-group')\n}\n\nexport async function goToFatherSection(component: ReactWrapper) {\n  await goToSection(component, 3)\n  await waitForElement(component, '#form_section_id_father-view-group')\n}\n\nexport async function goToMotherSection(component: ReactWrapper) {\n  await goToSection(component, 2)\n  await waitForElement(component, '#form_section_id_mother-view-group')\n}\n\nexport async function goToChildSection(component: ReactWrapper) {\n  await goToSection(component, 1)\n  await waitForElement(component, '#form_section_id_child-view-group')\n}\n\nexport async function getRegisterFormFromStore(\n  store: Store<IStoreState, AnyAction>,\n  event: EventType\n) {\n  store.dispatch(setOfflineData(userDetails))\n  const state = store.getState()\n  return getRegisterForm(state)[event]\n}\n\nexport async function getReviewFormFromStore(\n  store: Store<IStoreState, AnyAction>,\n  event: EventType\n) {\n  store.dispatch(setOfflineData(userDetails))\n  const state = store.getState()\n  return getReviewForm(state)![event]\n}",
      "startLine": 1042,
      "endLine": 1165,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/util.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@1175-1224",
      "type": "method_definition",
      "name": "loginAsFieldAgent",
      "text": "loginAsFieldAgent(store: AppStore) {\n  return store.dispatch(\n    setUserDetails({\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      data: {\n        getUser: {\n          id: '5eba726866458970cf2e23c2',\n          username: 'a.alhasan',\n          creationDate: '2022-10-03T10:42:46.920Z',\n          userMgntUserID: '5eba726866458970cf2e23c2',\n          practitionerId: '778464c0-08f8-4fb7-8a37-b86d1efc462a',\n          mobile: '+8801711111111',\n          role: {\n            label: {\n              id: 'userRoles.CHA',\n              defaultMessage: 'CHA',\n              description: 'CHA'\n            }\n          },\n          status: Status.Active,\n          name: [\n            {\n              use: 'en',\n              firstNames: 'Shakib',\n              familyName: 'Al Hasan'\n            }\n          ],\n          primaryOffice: {\n            id: '0d8474da-0361-4d32-979e-af91f012340a',\n            name: 'Kaliganj Union Sub Center',\n            status: 'active',\n            alias: ['বানিয়াজান']\n          },\n          localRegistrar: {\n            name: [\n              {\n                use: 'en',\n                firstNames: 'Mohammad',\n                familyName: 'Ashraful'\n              }\n            ],\n            role: 'LOCAL_REGISTRAR',\n            signature: undefined\n          }\n        }\n      }\n    })\n  )\n}",
      "startLine": 1175,
      "endLine": 1224,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/src/tests/util.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@22-24",
      "type": "method_definition",
      "name": "if",
      "text": "if ('errors' in response) {\n    raise(inspect(response.errors))\n  }",
      "startLine": 22,
      "endLine": 24,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/data-seeder/src/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@101-114",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n        parentStats.population <\n        parentStats.male_population + parentStats.female_population\n      ) {\n        statisticsErrors.push(\n          new Error(\n            `Location: ${\n              location.name\n            }, year: ${year} -> Sum of male population and female population ${\n              parentStats.male_population + parentStats.female_population\n            } is higher than the total population ${parentStats.population}`\n          )\n        )\n      }",
      "startLine": 101,
      "endLine": 114,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/data-seeder/src/locations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@66-72",
      "type": "function_declaration",
      "name": "getTokenPayload",
      "text": "function getTokenPayload(token: string): TokenPayload {\n  try {\n    return decode<TokenPayload>(token)\n  } catch (err) {\n    raise(`getTokenPayload: Error occurred during token decode : ${err}`)\n  }\n}",
      "startLine": 66,
      "endLine": 72,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/data-seeder/src/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@74-93",
      "type": "function_declaration",
      "name": "deactivateSuperuser",
      "text": "async function deactivateSuperuser(token: string) {\n  const { sub } = getTokenPayload(token)\n  const res = await fetch(`${env.GATEWAY_HOST}/graphql`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      query: deactivateUserMutation,\n      variables: {\n        userId: sub,\n        action: 'DEACTIVATE',\n        reason: 'Remove super user'\n      }\n    })\n  })\n\n  parseGQLResponse(await res.json())\n}",
      "startLine": 74,
      "endLine": 93,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/data-seeder/src/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@95-110",
      "type": "function_declaration",
      "name": "main",
      "text": "async function main() {\n  const token = await getToken()\n\n  // eslint-disable-next-line no-console\n  console.log('Seeding locations for v1 system')\n  await seedLocations(token)\n\n  // eslint-disable-next-line no-console\n  console.log('Seeding locations for v2 system (events)')\n  await seedLocationsForV2Events(token)\n\n  // eslint-disable-next-line no-console\n  console.log('Seeding users')\n  await seedUsers(token)\n  await deactivateSuperuser(token)\n}",
      "startLine": 95,
      "endLine": 110,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/data-seeder/src/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-23",
      "type": "function_declaration",
      "name": "getAbsolutePath",
      "text": "function getAbsolutePath(value: string): any {\n  return dirname(require.resolve(join(value, 'package.json')))\n}",
      "startLine": 21,
      "endLine": 23,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/.storybook/main.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@80-138",
      "type": "function_declaration",
      "name": "getUsers",
      "text": "async function getUsers(token: string) {\n  const url = new URL('users', env.COUNTRY_CONFIG_HOST).toString()\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  })\n  if (!res.ok) {\n    raise(`Expected to get the users from ${url}`)\n  }\n\n  const parsedUsers = UserSchema.safeParse(await res.json())\n\n  if (!parsedUsers.success) {\n    raise(\n      fromZodError(parsedUsers.error, {\n        prefix: `Error validating users metadata returned from ${url}`\n      })\n    )\n  }\n\n  const userRoles = parsedUsers.data.map((user) => user.role)\n\n  const rolesUrl = joinURL(env.COUNTRY_CONFIG_HOST, 'roles')\n\n  const rolesResponse = await fetch(rolesUrl)\n\n  if (!rolesResponse.ok) raise(`Error fetching roles: ${rolesResponse.status}`)\n\n  const parsedRoles = RoleSchema.safeParse(await rolesResponse.json())\n\n  if (!parsedRoles.success) {\n    raise(\n      fromZodError(parsedRoles.error, {\n        prefix: `Validation failed for roles returned from ${rolesUrl}`\n      }).message\n    )\n  }\n\n  const allRoles = parsedRoles.data\n\n  let isConfigUpdateAllScopeAvailable = false\n  const configScope = 'config.update:all' as const\n\n  for (const userRole of userRoles) {\n    const currRole = allRoles.find((role) => role.id === userRole)\n    if (!currRole)\n      raise(`Role with id ${userRole} is not found in roles.ts file`)\n    if (currRole.scopes.includes(configScope))\n      isConfigUpdateAllScopeAvailable = true\n  }\n\n  if (!isConfigUpdateAllScopeAvailable) {\n    raise(`At least one user with ${configScope} scope must be created`)\n  }\n  return parsedUsers.data\n}",
      "startLine": 80,
      "endLine": 138,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/data-seeder/src/users.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@185-199",
      "type": "function_declaration",
      "name": "callCreateUserMutation",
      "text": "async function callCreateUserMutation(token: string, userPayload: unknown) {\n  return fetch(`${env.GATEWAY_HOST}/graphql`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      query: createUserMutation,\n      variables: {\n        user: userPayload\n      }\n    })\n  })\n}",
      "startLine": 185,
      "endLine": 199,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/data-seeder/src/users.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@201-264",
      "type": "function_declaration",
      "name": "seedUsers",
      "text": "async function seedUsers(token: string) {\n  const rawUsers = await getUsers(token)\n\n  for (const userMetadata of rawUsers) {\n    const {\n      givenNames,\n      familyName,\n      primaryOfficeId: officeIdentifier,\n      username,\n      ...user\n    } = userMetadata\n\n    if (await userAlreadyExists(token, username)) {\n      // eslint-disable-next-line no-console\n      console.log(\n        `User with the username \"${username}\" already exists. Skipping user \"${username}\"`\n      )\n      continue\n    }\n\n    const primaryOffice = await getOfficeIdFromIdentifier(officeIdentifier)\n    if (!primaryOffice) {\n      // eslint-disable-next-line no-console\n      console.log(\n        `No office found with id ${officeIdentifier}. Skipping user \"${username}\"`\n      )\n      continue\n    }\n\n    const userPayload = {\n      ...user,\n      name: [\n        {\n          use: 'en',\n          familyName,\n          firstNames: givenNames\n        }\n      ],\n      ...(env.ACTIVATE_USERS && { status: 'active' }),\n      primaryOffice,\n      username\n    }\n    let tryNumber = 0\n    let jsonRes\n    let res\n\n    do {\n      ++tryNumber\n      if (tryNumber > 1) {\n        await delay(RETRY_DELAY_IN_MILLISECONDS)\n        // eslint-disable-next-line no-console\n        console.log('Trying again for time: ', tryNumber)\n      }\n      res = await callCreateUserMutation(token, userPayload)\n      jsonRes = await res.json()\n    } while (\n      tryNumber < MAX_RETRY &&\n      'errors' in jsonRes &&\n      jsonRes.errors[0].extensions?.code === 'INTERNAL_SERVER_ERROR'\n    )\n\n    parseGQLResponse(jsonRes)\n  }\n}",
      "startLine": 201,
      "endLine": 264,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/data-seeder/src/users.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-52",
      "type": "function_declaration",
      "name": "getEventLabelFromBundle",
      "text": "function getEventLabelFromBundle(bundle: Bundle) {\n  const composition = getComposition(bundle)\n  if (\n    composition.type.coding?.[0].code === 'birth-declaration' ||\n    composition.type.coding?.[0].code === 'birth-notification'\n  ) {\n    return 'BirthRegistration'\n  } else if (\n    composition.type.coding?.[0].code === 'death-declaration' ||\n    composition.type.coding?.[0].code === 'death-notification'\n  ) {\n    return 'DeathRegistration'\n  } else {\n    return 'MarriageRegistration'\n  }\n}",
      "startLine": 37,
      "endLine": 52,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/record.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@178-184",
      "type": "function_declaration",
      "name": "getScopes",
      "text": "function getScopes(authHeader: IAuthHeader): RawScopes[] {\n  if (!authHeader || !authHeader.Authorization) {\n    return []\n  }\n  const tokenPayload = getTokenPayload(authHeader.Authorization.split(' ')[1])\n  return tokenPayload.scope || []\n}",
      "startLine": 178,
      "endLine": 184,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/authentication.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@186-188",
      "type": "function_declaration",
      "name": "hasScope",
      "text": "function hasScope(authHeader: IAuthHeader, scope: Scope) {\n  return getScopes(authHeader).includes(scope)\n}",
      "startLine": 186,
      "endLine": 188,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/authentication.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@190-193",
      "type": "function_declaration",
      "name": "inScope",
      "text": "function inScope(authHeader: IAuthHeader, scopes: Scope[]) {\n  const tokenScopes = getScopes(authHeader)\n  return scopes.some((scope) => tokenScopes.includes(scope))\n}",
      "startLine": 190,
      "endLine": 193,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/authentication.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@42-46",
      "type": "function_declaration",
      "name": "isPractitionerRole",
      "text": "function isPractitionerRole<T extends Resource>(\n  resource: T\n): resource is T & PractitionerRole {\n  return resource.resourceType === 'PractitionerRole'\n}",
      "startLine": 42,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/practitioner.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-30",
      "type": "function_declaration",
      "name": "init",
      "text": "function init() {\n  if (process.env.NODE_ENV === 'production') {\n    const path = pkgUp.sync()\n\n    require('elastic-apm-node').start({\n      // Override service name from package.json\n      // Allowed characters: a-z, A-Z, 0-9, -, _, and space\n      serviceName: require(path!).name.replace('@', '').replace('/', '_'),\n      // Set custom APM Server URL (default: http://localhost:8200)\n      serverUrl: process.env.APN_SERVICE_URL || 'http://localhost:8200',\n      // Docker swarm provides this environment variale\n      containerId: process.env.HOSTNAME\n    })\n  }\n}",
      "startLine": 16,
      "endLine": 30,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/monitoring.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-17",
      "type": "function_declaration",
      "name": "isPatient",
      "text": "function isPatient<T extends Resource>(\n  resource: T\n): resource is T & Patient {\n  return resource.resourceType === 'Patient'\n}",
      "startLine": 13,
      "endLine": 17,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/patient.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@154-160",
      "type": "function_declaration",
      "name": "isCorrectionRequestedTask",
      "text": "function isCorrectionRequestedTask(\n  task: Task\n): task is CorrectionRequestedTask {\n  return task.businessStatus.coding.some(\n    ({ code }) => code === 'CORRECTION_REQUESTED'\n  )\n}",
      "startLine": 154,
      "endLine": 160,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/task.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@187-197",
      "type": "function_declaration",
      "name": "getTaskFromSavedBundle",
      "text": "function getTaskFromSavedBundle<T extends SavedBundle>(\n  bundle: T\n): SavedTask {\n  const task = bundle.entry.map(({ resource }) => resource).find(isTask)\n\n  if (!task || !isSaved(task)) {\n    throw new Error('No task found in bundle')\n  }\n\n  return task\n}",
      "startLine": 187,
      "endLine": 197,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/task.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-35",
      "type": "function_declaration",
      "name": "ensureCacheExists",
      "text": "async function ensureCacheExists(cacheName: string) {\n  const cacheNames = await caches.keys()\n  if (!cacheNames.includes(cacheName)) {\n    await caches.open(cacheName)\n    // eslint-disable-next-line no-console\n    console.log(`Cache \"${cacheName}\" created.`)\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(`Cache \"${cacheName}\" already exists.`)\n  }\n}",
      "startLine": 25,
      "endLine": 35,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/client/.storybook/default-request-handlers.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@207-224",
      "type": "function_declaration",
      "name": "addRelatesToToComposition",
      "text": "function addRelatesToToComposition(\n  composition: Composition | SavedComposition,\n  relatesTo: NonNullable<Composition['relatesTo']>\n) {\n  return {\n    ...composition,\n    relatesTo: (composition.relatesTo ?? [])\n      .filter(\n        (rlt) =>\n          !relatesTo.some((r) => {\n            return (\n              r.targetReference?.reference === rlt.targetReference?.reference\n            )\n          })\n      )\n      .concat(relatesTo)\n  }\n}",
      "startLine": 207,
      "endLine": 224,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/composition.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@226-236",
      "type": "function_declaration",
      "name": "findCompositionIdFromTransactionResponse",
      "text": "function findCompositionIdFromTransactionResponse({\n  entry\n}: TransactionResponse) {\n  const compositionResponse = entry?.find(({ response }) =>\n    response?.location?.startsWith('/fhir/Composition')\n  )\n\n  return compositionResponse\n    ? urlReferenceToUUID(compositionResponse.response.location)\n    : null\n}",
      "startLine": 226,
      "endLine": 236,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/composition.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@114-116",
      "type": "method_definition",
      "name": "for",
      "text": "for (const item of obj) {\n      values = values.concat(createListOfAllObjectValues(item))\n    }",
      "startLine": 114,
      "endLine": 116,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/transformers/fhir-builders.test.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@118-122",
      "type": "method_definition",
      "name": "for",
      "text": "for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        values = values.concat(createListOfAllObjectValues(obj[key]))\n      }\n    }",
      "startLine": 118,
      "endLine": 122,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 12,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/transformers/fhir-builders.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@49-67",
      "type": "function_declaration",
      "name": "findObservationByCode",
      "text": "function findObservationByCode(\n  bundle: Saved<Bundle>,\n  code: ObservationCode\n) {\n  const encounter = findEncounterFromRecord(bundle)\n\n  if (!encounter) {\n    return undefined\n  }\n\n  return bundle.entry\n    .map((x) => x.resource)\n    .filter(isObservation)\n    .find(\n      (observation) =>\n        observation.context?.reference == `Encounter/${encounter.id}` &&\n        observation.code?.coding?.[0].code == code\n    )\n}",
      "startLine": 49,
      "endLine": 67,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/observation.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-29",
      "type": "function_declaration",
      "name": "getAuthHeader",
      "text": "function getAuthHeader(request: Hapi.Request) {\n  return {\n    Authorization: request.headers.authorization,\n    'x-correlation-id': request.headers['x-correlation-id'] || uniqueId(),\n    'x-real-ip': request.headers['x-real-ip'] || request.info?.remoteAddress,\n    'x-real-user-agent': request.headers['user-agent']\n  }\n}",
      "startLine": 22,
      "endLine": 29,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/http.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@31-34",
      "type": "function_declaration",
      "name": "joinURL",
      "text": "function joinURL(base: string, path: string) {\n  const baseWithSlash = base.endsWith('/') ? base : base + '/'\n  return new URL(path, baseWithSlash)\n}",
      "startLine": 31,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/http.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@36-41",
      "type": "class_declaration",
      "name": "NotFound",
      "text": "class NotFound extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'NotFound'\n  }\n}",
      "startLine": 36,
      "endLine": 41,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/http.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@37-40",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(message: string) {\n    super(message)\n    this.name = 'NotFound'\n  }",
      "startLine": 37,
      "endLine": 40,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/http.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@49-51",
      "type": "method_definition",
      "name": "if",
      "text": "if (res.status === 404) {\n      throw new NotFound(res.statusText)\n    }",
      "startLine": 49,
      "endLine": 51,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 7,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/http.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@590-592",
      "type": "method_definition",
      "name": "if",
      "text": "if (entry.resource && entry.resource.resourceType === 'Task') {\n        return true\n      }",
      "startLine": 590,
      "endLine": 592,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/transformers/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@78-99",
      "type": "function_declaration",
      "name": "findLastOfficeFromSavedBundle",
      "text": "function findLastOfficeFromSavedBundle<T extends SavedBundle>(\n  bundle: T\n) {\n  const task = getTaskFromSavedBundle(bundle)\n  const regLastOfficeExtension = findExtension(\n    `${OPENCRVS_SPECIFICATION_URL}extension/regLastOffice`,\n    task.extension\n  )\n  if (!regLastOfficeExtension) {\n    throw new Error(\n      `regLastOffice extension wasn't found in task in bundle ${bundle.id}`\n    )\n  }\n  const officeId = resourceIdentifierToUUID(\n    regLastOfficeExtension.valueReference.reference\n  )\n  const office = findResourceFromBundleById<SavedOffice>(bundle, officeId)\n  if (!office) {\n    throw new Error(`Office wasn't found in a saved bundle ${bundle.id}`)\n  }\n  return office\n}",
      "startLine": 78,
      "endLine": 99,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@101-116",
      "type": "function_declaration",
      "name": "findLastOfficeLocationFromSavedBundle",
      "text": "function findLastOfficeLocationFromSavedBundle<T extends SavedBundle>(\n  bundle: T\n) {\n  const office = findLastOfficeFromSavedBundle(bundle)\n  const locationId = resourceIdentifierToUUID(office.partOf.reference)\n  const officeLocation = findResourceFromBundleById<SavedOffice>(\n    bundle,\n    locationId\n  )\n  if (!officeLocation) {\n    throw new Error(\n      `Office's location (parent location) wasn't found in a saved bundle ${bundle.id}`\n    )\n  }\n  return officeLocation\n}",
      "startLine": 101,
      "endLine": 116,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@118-122",
      "type": "function_declaration",
      "name": "isHealthFacility",
      "text": "function isHealthFacility(\n  location: Location\n): location is HealthFacility {\n  return location.type?.coding?.[0].code === 'HEALTH_FACILITY'\n}",
      "startLine": 118,
      "endLine": 122,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@124-126",
      "type": "function_declaration",
      "name": "isOffice",
      "text": "function isOffice(location: Location): location is Office {\n  return location.type?.coding?.[0].code === 'CRVS_OFFICE'\n}",
      "startLine": 124,
      "endLine": 126,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-62",
      "type": "function_declaration",
      "name": "isURLReference",
      "text": "function isURLReference(id: string): id is URLReference {\n  return id.startsWith('/fhir')\n}",
      "startLine": 60,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-66",
      "type": "function_declaration",
      "name": "isURNReference",
      "text": "function isURNReference(id: string): id is URNReference {\n  return id.startsWith('urn:uuid:')\n}",
      "startLine": 64,
      "endLine": 66,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@68-71",
      "type": "function_declaration",
      "name": "urlReferenceToUUID",
      "text": "function urlReferenceToUUID(reference: URLReference) {\n  const urlParts = reference.split('/')\n  return urlParts[urlParts.length - 3] as UUID\n}",
      "startLine": 68,
      "endLine": 71,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@73-76",
      "type": "function_declaration",
      "name": "urlReferenceToResourceIdentifier",
      "text": "function urlReferenceToResourceIdentifier(reference: URLReference) {\n  const urlParts = reference.split('/')\n  return urlParts.slice(2, 4).join('/') as ResourceIdentifier\n}",
      "startLine": 73,
      "endLine": 76,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@78-83",
      "type": "function_declaration",
      "name": "resourceIdentifierToUUID",
      "text": "function resourceIdentifierToUUID(\n  resourceIdentifier: ResourceIdentifier\n) {\n  const urlParts = resourceIdentifier.split('/')\n  return urlParts[urlParts.length - 1] as UUID\n}",
      "startLine": 78,
      "endLine": 83,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-21",
      "type": "function_declaration",
      "name": "isBase64FileString",
      "text": "function isBase64FileString(str: string) {\n  if (str === '' || str.trim() === '') {\n    return false\n  }\n  const strSplit = str.split(':')\n  return strSplit.length > 0 && strSplit[0] === 'data'\n}",
      "startLine": 15,
      "endLine": 21,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/documents.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@45-49",
      "type": "function_declaration",
      "name": "isDeclarationActionConfig",
      "text": "function isDeclarationActionConfig(\n  action: ActionConfig\n): action is DeclarationActionConfig {\n  return DeclarationActions.safeParse(action.type).success\n}",
      "startLine": 45,
      "endLine": 49,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@51-55",
      "type": "function_declaration",
      "name": "getDeclarationFields",
      "text": "function getDeclarationFields(\n  configuration: EventConfig\n): FieldConfig[] {\n  return configuration.declaration.pages.flatMap(({ fields }) => fields)\n}",
      "startLine": 51,
      "endLine": 55,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@57-59",
      "type": "function_declaration",
      "name": "getDeclarationPages",
      "text": "function getDeclarationPages(configuration: EventConfig) {\n  return configuration.declaration.pages\n}",
      "startLine": 57,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@61-63",
      "type": "function_declaration",
      "name": "getDeclaration",
      "text": "function getDeclaration(configuration: EventConfig) {\n  return configuration.declaration\n}",
      "startLine": 61,
      "endLine": 63,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@84-86",
      "type": "function_declaration",
      "name": "getAllAnnotationFields",
      "text": "function getAllAnnotationFields(config: EventConfig): FieldConfig[] {\n  return flattenDeep(config.actions.map(getActionAnnotationFields))\n}",
      "startLine": 84,
      "endLine": 86,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@227-249",
      "type": "function_declaration",
      "name": "getActionVerificationPageIds",
      "text": "function getActionVerificationPageIds(\n  actionConfig: ActionConfig,\n  annotation: ActionUpdate\n): string[] {\n  if (actionConfig.type === ActionType.REQUEST_CORRECTION) {\n    return [\n      ...getVisibleVerificationPageIds(actionConfig.onboardingForm, annotation),\n      ...getVisibleVerificationPageIds(\n        actionConfig.additionalDetailsForm,\n        annotation\n      )\n    ]\n  }\n\n  if (actionConfig.type === ActionType.PRINT_CERTIFICATE) {\n    return getVisibleVerificationPageIds(\n      actionConfig.printForm.pages,\n      annotation\n    )\n  }\n\n  return []\n}",
      "startLine": 227,
      "endLine": 249,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@251-268",
      "type": "function_declaration",
      "name": "omitHiddenAnnotationFields",
      "text": "function omitHiddenAnnotationFields(\n  actionConfig: ActionConfig,\n  declaration: EventState,\n  annotation: ActionUpdate\n) {\n  const annotationFields = getActionAnnotationFields(actionConfig)\n\n  const visibleVerificationPageIds = getActionVerificationPageIds(\n    actionConfig,\n    annotation\n  )\n\n  return omitHiddenFields(\n    annotationFields,\n    { ...declaration, ...annotation },\n    visibleVerificationPageIds\n  )\n}",
      "startLine": 251,
      "endLine": 268,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@53-61",
      "type": "function_declaration",
      "name": "fieldConfigsToActionPayload",
      "text": "function fieldConfigsToActionPayload(fields: FieldConfig[]) {\n  return fields.reduce(\n    (acc, field, i) => ({\n      ...acc,\n      [field.id]: mapFieldTypeToMockValue(field, i)\n    }),\n    {}\n  )\n}",
      "startLine": 53,
      "endLine": 61,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/test.utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@63-84",
      "type": "function_declaration",
      "name": "generateActionDeclarationInput",
      "text": "function generateActionDeclarationInput(\n  configuration: EventConfig,\n  action: ActionType\n): EventState {\n  const parsed = DeclarationUpdateActions.safeParse(action)\n  if (parsed.success) {\n    const fields = getDeclarationFields(configuration)\n\n    const declarationConfig = getDeclaration(configuration)\n\n    const declaration = fieldConfigsToActionPayload(fields)\n\n    // Strip away hidden or disabled fields from mock action declaration\n    // If this is not done, the mock data might contain hidden or disabled fields, which will cause validation errors\n    return omitHiddenPaginatedFields(declarationConfig, declaration)\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn(`${action} is not a declaration action. Setting data as {}.`)\n\n  return {}\n}",
      "startLine": 63,
      "endLine": 84,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/test.utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@86-119",
      "type": "function_declaration",
      "name": "generateActionAnnotationInput",
      "text": "function generateActionAnnotationInput(\n  configuration: EventConfig,\n  action: ActionType\n) {\n  const actionConfig: ActionConfig | undefined = configuration.actions.find(\n    (ac) => ac.type === action\n  )\n\n  const annotationFields = actionConfig\n    ? getActionAnnotationFields(actionConfig)\n    : []\n\n  const annotation = fieldConfigsToActionPayload(annotationFields)\n\n  const visibleVerificationPageIds = getVisibleVerificationPageIds(\n    findRecordActionPages(configuration, action),\n    annotation\n  )\n\n  const visiblePageVerificationMap = visibleVerificationPageIds.reduce(\n    (acc, pageId) => ({\n      ...acc,\n      [pageId]: true\n    }),\n    {}\n  )\n\n  const fieldBasedPayload = omitHiddenFields(annotationFields, annotation)\n\n  return {\n    ...fieldBasedPayload,\n    ...visiblePageVerificationMap\n  }\n}",
      "startLine": 86,
      "endLine": 119,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/test.utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-43",
      "type": "function_declaration",
      "name": "getActionRequests",
      "text": "function getActionRequests(actionType: ActionType, actions: Action[]) {\n  const filtered = actions.filter((action) => action.type === actionType)\n\n  const accept = filtered.find(\n    (action) => action.status === ActionStatus.Accepted\n  )\n\n  const request = filtered.find(\n    (action) => action.status === ActionStatus.Requested\n  )\n\n  const reject = filtered.find(\n    (action) => action.status === ActionStatus.Rejected\n  )\n\n  return {\n    reject,\n    accept,\n    request\n  }\n}",
      "startLine": 23,
      "endLine": 43,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@51-79",
      "type": "function_declaration",
      "name": "getDeclarationActionCreationMetadata",
      "text": "function getDeclarationActionCreationMetadata(\n  actionType: ActionType,\n  actions: Action[]\n) {\n  const { accept: acceptAction, request: requestAction } = getActionRequests(\n    actionType,\n    actions\n  )\n\n  if (!acceptAction) {\n    return null\n  }\n\n  const registrationNumber =\n    acceptAction.type === ActionType.REGISTER\n      ? (acceptAction as RegisterAction).registrationNumber\n      : null\n\n  return {\n    // When 3rd party API returns 200 OK, we assume that the request was accepted, and persist single 'accepted' action.\n    createdAt: requestAction?.createdAt ?? acceptAction.createdAt,\n    createdBy: requestAction?.createdBy ?? acceptAction.createdBy,\n    createdAtLocation:\n      requestAction?.createdAtLocation ?? acceptAction.createdAtLocation,\n    acceptedAt: acceptAction.createdAt,\n    createdByRole: requestAction?.createdByRole ?? acceptAction.createdByRole,\n    registrationNumber\n  }\n}",
      "startLine": 51,
      "endLine": 79,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@88-120",
      "type": "function_declaration",
      "name": "getDeclarationActionUpdateMetadata",
      "text": "function getDeclarationActionUpdateMetadata(actions: Action[]) {\n  const createAction = getOrThrow(\n    actions.find((action) => action.type === ActionType.CREATE),\n    `Event has no ${ActionType.CREATE} action`\n  )\n\n  return [ActionType.DECLARE, ActionType.VALIDATE, ActionType.REGISTER].reduce(\n    (metadata, actionType) => {\n      const { accept, request } = getActionRequests(actionType, actions)\n\n      return {\n        createdAt:\n          request?.createdAt ?? accept?.createdAt ?? metadata.createdAt,\n        createdBy:\n          request?.createdBy ?? accept?.createdBy ?? metadata.createdBy,\n        createdAtLocation:\n          request?.createdAtLocation ??\n          accept?.createdAtLocation ??\n          metadata.createdAtLocation,\n        createdByRole:\n          request?.createdByRole ??\n          accept?.createdByRole ??\n          metadata.createdByRole\n      }\n    },\n    {\n      createdAt: createAction.createdAt,\n      createdBy: createAction.createdBy,\n      createdAtLocation: createAction.createdAtLocation,\n      createdByRole: createAction.createdByRole\n    }\n  )\n}",
      "startLine": 88,
      "endLine": 120,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@126-137",
      "type": "function_declaration",
      "name": "getLegalStatuses",
      "text": "function getLegalStatuses(actions: Action[]) {\n  return {\n    [EventStatus.DECLARED]: getDeclarationActionCreationMetadata(\n      ActionType.DECLARE,\n      actions\n    ),\n    [EventStatus.REGISTERED]: getDeclarationActionCreationMetadata(\n      ActionType.REGISTER,\n      actions\n    )\n  }\n}",
      "startLine": 126,
      "endLine": 137,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-66",
      "type": "function_declaration",
      "name": "getStatusFromActions",
      "text": "function getStatusFromActions(actions: Array<Action>) {\n  // If the event has any rejected action, we consider the event to be rejected.\n  const hasRejectedAction = actions.some(\n    (a) => a.status === ActionStatus.Rejected\n  )\n\n  if (hasRejectedAction) {\n    return EventStatus.REJECTED\n  }\n\n  return actions.reduce<EventStatus>((status, action) => {\n    switch (action.type) {\n      case ActionType.CREATE:\n        return EventStatus.CREATED\n      case ActionType.DECLARE:\n        return EventStatus.DECLARED\n      case ActionType.VALIDATE:\n        return EventStatus.VALIDATED\n      case ActionType.REGISTER:\n        return EventStatus.REGISTERED\n      case ActionType.REJECT:\n        return EventStatus.REJECTED\n      case ActionType.ARCHIVE:\n        return EventStatus.ARCHIVED\n      case ActionType.NOTIFY:\n        return EventStatus.NOTIFIED\n      case ActionType.PRINT_CERTIFICATE:\n        return EventStatus.CERTIFIED\n      case ActionType.ASSIGN:\n      case ActionType.UNASSIGN:\n      case ActionType.REQUEST_CORRECTION:\n      case ActionType.APPROVE_CORRECTION:\n      case ActionType.MARKED_AS_DUPLICATE:\n      case ActionType.REJECT_CORRECTION:\n      case ActionType.READ:\n      default:\n        return status\n    }\n  }, EventStatus.CREATED)\n}",
      "startLine": 27,
      "endLine": 66,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@68-105",
      "type": "function_declaration",
      "name": "getFlagsFromActions",
      "text": "function getFlagsFromActions(actions: Action[]): Flag[] {\n  const sortedactions = actions.sort((a, b) =>\n    a.createdAt.localeCompare(b.createdAt)\n  )\n  const actionStatus = sortedactions.reduce(\n    (actionStatuses, { type, status }) => ({\n      ...actionStatuses,\n      [type]: status\n    }),\n    {} as Record<ActionType, ActionStatus>\n  )\n\n  const flags = Object.entries(actionStatus)\n    .filter(([, status]) => status !== ActionStatus.Accepted)\n    .map(([type, status]) => {\n      const flag = `${type.toLowerCase()}:${status.toLowerCase()}`\n      return flag satisfies Flag\n    })\n\n  const isCertificatePrinted = sortedactions.reduce<boolean>(\n    (prev, { type }) => {\n      if (type === ActionType.PRINT_CERTIFICATE) {\n        return true\n      }\n      if (type === ActionType.APPROVE_CORRECTION) {\n        return false\n      }\n      return prev\n    },\n    false\n  )\n\n  if (isCertificatePrinted) {\n    flags.push(CustomFlags.CERTIFICATE_PRINTED)\n  }\n\n  return flags\n}",
      "startLine": 68,
      "endLine": 105,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@107-118",
      "type": "function_declaration",
      "name": "getAssignedUserFromActions",
      "text": "function getAssignedUserFromActions(actions: Array<ActionDocument>) {\n  return actions.reduce<null | string>((user, action) => {\n    if (action.type === ActionType.ASSIGN) {\n      return action.assignedTo\n    }\n    if (action.type === ActionType.UNASSIGN) {\n      return null\n    }\n\n    return user\n  }, null)\n}",
      "startLine": 107,
      "endLine": 118,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@194-198",
      "type": "function_declaration",
      "name": "getAcceptedActions",
      "text": "function getAcceptedActions(event: EventDocument): ActionDocument[] {\n  return event.actions.filter(\n    (a): a is ActionDocument => a.status === ActionStatus.Accepted\n  )\n}",
      "startLine": 194,
      "endLine": 198,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@207-250",
      "type": "function_declaration",
      "name": "getCurrentEventState",
      "text": "function getCurrentEventState(event: EventDocument): EventIndex {\n  const creationAction = event.actions.find(\n    (action) => action.type === ActionType.CREATE\n  )\n\n  if (!creationAction) {\n    throw new Error(`Event ${event.id} has no creation action`)\n  }\n\n  const acceptedActions = getAcceptedActions(event)\n\n  const declarationUpdateMetadata = getDeclarationActionUpdateMetadata(\n    event.actions\n  )\n\n  const declaration = aggregateActionDeclarations(acceptedActions)\n\n  const dateOfEvent =\n    ZodDate.safeParse(\n      event.dateOfEvent?.fieldId\n        ? declaration[event.dateOfEvent.fieldId]\n        : event[DEFAULT_DATE_OF_EVENT_PROPERTY]\n    ).data ?? null\n\n  return deepDropNulls({\n    id: event.id,\n    type: event.type,\n    status: getStatusFromActions(event.actions),\n    legalStatuses: getLegalStatuses(event.actions),\n    createdAt: creationAction.createdAt,\n    createdBy: creationAction.createdBy,\n    createdAtLocation: creationAction.createdAtLocation,\n    updatedAt: declarationUpdateMetadata.createdAt,\n    assignedTo: getAssignedUserFromActions(acceptedActions),\n    updatedBy: declarationUpdateMetadata.createdBy,\n    updatedAtLocation: declarationUpdateMetadata.createdAtLocation,\n    declaration,\n    trackingId: event.trackingId,\n    // @TODO: unify this with rest of the code. It will trip us if updatedBy has different rules than updatedByUserRole\n    updatedByUserRole: declarationUpdateMetadata.createdByRole,\n    dateOfEvent,\n    flags: getFlagsFromActions(event.actions)\n  })\n}",
      "startLine": 207,
      "endLine": 250,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@255-289",
      "type": "function_declaration",
      "name": "getCurrentEventStateWithDrafts",
      "text": "function getCurrentEventStateWithDrafts(\n  event: EventDocument,\n  drafts: Draft[]\n): EventIndex {\n  const actions = event.actions\n    .slice()\n    .sort((a, b) => a.createdAt.localeCompare(b.createdAt))\n\n  const activeDrafts = findActiveDrafts(event, drafts)\n    .map((draft) => draft.action)\n    .flatMap((action) => {\n      /*\n       * If the action encountered is \"REQUEST_CORRECTION\", we want to pretend like it was approved\n       * so previews etc are shown correctly\n       */\n      if (action.type === ActionType.REQUEST_CORRECTION) {\n        return [\n          action,\n          {\n            ...action,\n            type: ActionType.APPROVE_CORRECTION\n          }\n        ] as ActionDocument[]\n      }\n      return [action] as ActionDocument[]\n    })\n\n  const actionWithDrafts = [...actions, ...activeDrafts].sort()\n  const withDrafts: EventDocument = {\n    ...event,\n    actions: actionWithDrafts\n  }\n\n  return getCurrentEventState(withDrafts)\n}",
      "startLine": 255,
      "endLine": 289,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@291-313",
      "type": "function_declaration",
      "name": "applyDraftsToEventIndex",
      "text": "function applyDraftsToEventIndex(\n  eventIndex: EventIndex,\n  drafts: Draft[]\n) {\n  const indexedAt = eventIndex.updatedAt\n\n  const activeDrafts = drafts\n    .filter(({ createdAt }) => new Date(createdAt) > new Date(indexedAt))\n    .map((draft) => draft.action)\n    .sort()\n\n  if (activeDrafts.length === 0) {\n    return eventIndex\n  }\n\n  return {\n    ...eventIndex,\n    declaration: {\n      ...eventIndex.declaration,\n      ...activeDrafts[activeDrafts.length - 1].declaration\n    }\n  }\n}",
      "startLine": 291,
      "endLine": 313,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@321-329",
      "type": "function_declaration",
      "name": "getAnnotationFromDrafts",
      "text": "function getAnnotationFromDrafts(drafts: Draft[]) {\n  const actions = drafts.map((draft) => draft.action)\n\n  const annotation = actions.reduce((ann, action) => {\n    return deepMerge(ann, action.annotation ?? {})\n  }, {})\n\n  return deepDropNulls(annotation)\n}",
      "startLine": 321,
      "endLine": 329,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/state/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@760-772",
      "type": "function_declaration",
      "name": "createEducationalAttainmentBuilder",
      "text": "function createEducationalAttainmentBuilder(\n  resource: Patient,\n  fieldValue: string\n) {\n  if (!resource.extension) {\n    resource.extension = []\n  }\n\n  resource.extension = setExtension(resource.extension, {\n    url: `${OPENCRVS_SPECIFICATION_URL}extension/educational-attainment`,\n    valueString: fieldValue\n  })\n}",
      "startLine": 760,
      "endLine": 772,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fhir/transformers/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-16",
      "type": "function_declaration",
      "name": "generateTransactionId",
      "text": "function generateTransactionId() {\n  return getUUID()\n}",
      "startLine": 14,
      "endLine": 16,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/transactions.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@104-106",
      "type": "function_declaration",
      "name": "hasAnyOfScopes",
      "text": "function hasAnyOfScopes(a: Scope[], b: Scope[]) {\n  return intersection(a, b).length > 0\n}",
      "startLine": 104,
      "endLine": 106,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/scopes.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@108-135",
      "type": "function_declaration",
      "name": "filterUnallowedActions",
      "text": "function filterUnallowedActions(\n  actions: ActionType[],\n  userScopes: Scope[]\n): ActionType[] {\n  const allowedActions = actions.filter((action) => {\n    const requiredScopes = ACTION_ALLOWED_SCOPES[action]\n\n    if (requiredScopes === null) {\n      return true\n    }\n\n    return hasAnyOfScopes(userScopes, requiredScopes)\n  })\n  // Check if the user can perform any action other than READ, ASSIGN, or UNASSIGN\n  const hasOtherAllowedActions = allowedActions.some(\n    (action) =>\n      action !== ActionType.READ &&\n      action !== ActionType.ASSIGN &&\n      action !== ActionType.UNASSIGN\n  )\n\n  if (hasOtherAllowedActions) {\n    return allowedActions\n  }\n\n  // If the user can only perform READ, restrict them from ASSIGN or UNASSIGN\n  return [ActionType.READ]\n}",
      "startLine": 108,
      "endLine": 135,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/scopes.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@58-62",
      "type": "function_declaration",
      "name": "isFieldValue",
      "text": "function isFieldValue(\n  value: FieldConfigDefaultValue\n): value is FieldValue {\n  return FieldValue.safeParse(value).success\n}",
      "startLine": 58,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/TemplateConfig.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@68-83",
      "type": "function_declaration",
      "name": "isFieldValueWithoutTemplates",
      "text": "function isFieldValueWithoutTemplates(\n  value: FieldConfigDefaultValue\n): value is FieldValue {\n  if (isTemplateVariable(value)) {\n    return false\n  }\n\n  if (\n    typeof value === 'object' &&\n    Object.values(value).some((val) => isTemplateVariable(val))\n  ) {\n    return false\n  }\n\n  return true\n}",
      "startLine": 68,
      "endLine": 83,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/TemplateConfig.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@85-109",
      "type": "function_declaration",
      "name": "isFieldConfigDefaultValue",
      "text": "function isFieldConfigDefaultValue(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any\n): value is FieldConfigDefaultValue {\n  if (!value) {\n    return false\n  }\n\n  if (isFieldValue(value)) {\n    return true\n  }\n\n  if (isTemplateVariable(value)) {\n    return true\n  }\n\n  if (\n    typeof value === 'object' &&\n    Object.values(value).every((v) => typeof v === 'object' && v !== null)\n  ) {\n    return Object.values(value).every((v) => isFieldConfigDefaultValue(v))\n  }\n\n  return false\n}",
      "startLine": 85,
      "endLine": 109,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/events/TemplateConfig.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@50-54",
      "type": "function_declaration",
      "name": "savedPractitioner",
      "text": "function savedPractitioner(\n  overrides = {} as Partial<SavedPractitioner>\n) {\n  return { ...defaultSavedPractitioner, ...overrides } as SavedPractitioner\n}",
      "startLine": 50,
      "endLine": 54,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fixtures/practitioner.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-56",
      "type": "function_declaration",
      "name": "savedLocation",
      "text": "function savedLocation(overrides = {} as Partial<SavedLocation>) {\n  return { ...defaultSavedLocation, ...overrides } as SavedLocation\n}",
      "startLine": 54,
      "endLine": 56,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fixtures/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@131-135",
      "type": "function_declaration",
      "name": "savedAdministrativeLocation",
      "text": "function savedAdministrativeLocation(\n  overrides = {} as Partial<SavedLocation>\n) {\n  return { ...defaultAdministrativeLocation, ...overrides } as SavedLocation\n}",
      "startLine": 131,
      "endLine": 135,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/fixtures/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-34",
      "type": "function_declaration",
      "name": "validate",
      "text": "function validate(schema: JSONSchema, data: ConditionalParameters) {\n  return ajv.validate(schema, data)\n}",
      "startLine": 32,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@36-44",
      "type": "function_declaration",
      "name": "isConditionMet",
      "text": "function isConditionMet(\n  conditional: JSONSchema,\n  values: Record<string, unknown>\n) {\n  return validate(conditional, {\n    $form: values,\n    $now: formatISO(new Date(), { representation: 'date' })\n  })\n}",
      "startLine": 36,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-56",
      "type": "function_declaration",
      "name": "getConditionalActionsForField",
      "text": "function getConditionalActionsForField(\n  field: FieldConfig,\n  values: ConditionalParameters\n) {\n  if (!field.conditionals) {\n    return []\n  }\n  return field.conditionals\n    .filter((conditional) => validate(conditional.conditional, values))\n    .map((conditional) => conditional.type)\n}",
      "startLine": 46,
      "endLine": 56,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@58-65",
      "type": "function_declaration",
      "name": "areConditionsMet",
      "text": "function areConditionsMet(\n  conditions: FieldConditional[],\n  values: Record<string, unknown>\n) {\n  return conditions.every((condition) =>\n    isConditionMet(condition.conditional, values)\n  )\n}",
      "startLine": 58,
      "endLine": 65,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@67-88",
      "type": "function_declaration",
      "name": "isFieldConditionMet",
      "text": "function isFieldConditionMet(\n  field: FieldConfig,\n  form: ActionUpdate | EventState,\n  conditionalType: ConditionalType\n) {\n  const hasRule = (field.conditionals ?? []).some(\n    (conditional) => conditional.type === conditionalType\n  )\n\n  if (!hasRule) {\n    return true\n  }\n\n  const validConditionals = getConditionalActionsForField(field, {\n    $form: form,\n    $now: formatISO(new Date(), {\n      representation: 'date'\n    })\n  })\n\n  return validConditionals.includes(conditionalType)\n}",
      "startLine": 67,
      "endLine": 88,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@90-95",
      "type": "function_declaration",
      "name": "isFieldVisible",
      "text": "function isFieldVisible(\n  field: FieldConfig,\n  form: ActionUpdate | EventState\n) {\n  return isFieldConditionMet(field, form, ConditionalType.SHOW)\n}",
      "startLine": 90,
      "endLine": 95,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@97-100",
      "type": "function_declaration",
      "name": "isFieldEmptyAndNotRequired",
      "text": "function isFieldEmptyAndNotRequired(field: FieldConfig, form: ActionUpdate) {\n  const fieldValue = form[field.id]\n  return !field.required && (fieldValue === undefined || fieldValue === '')\n}",
      "startLine": 97,
      "endLine": 100,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@102-107",
      "type": "function_declaration",
      "name": "isFieldEnabled",
      "text": "function isFieldEnabled(\n  field: FieldConfig,\n  form: ActionUpdate | EventState\n) {\n  return isFieldConditionMet(field, form, ConditionalType.ENABLE)\n}",
      "startLine": 102,
      "endLine": 107,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@110-118",
      "type": "function_declaration",
      "name": "isFieldDisplayedOnReview",
      "text": "function isFieldDisplayedOnReview(\n  field: FieldConfig,\n  form: ActionUpdate | EventState\n) {\n  return (\n    isFieldVisible(field, form) &&\n    isFieldConditionMet(field, form, ConditionalType.DISPLAY_ON_REVIEW)\n  )\n}",
      "startLine": 110,
      "endLine": 118,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@149-155",
      "type": "function_declaration",
      "name": "createIntlError",
      "text": "function createIntlError(message: TranslationConfig) {\n  return {\n    message: {\n      message\n    }\n  }\n}",
      "startLine": 149,
      "endLine": 155,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@161-210",
      "type": "function_declaration",
      "name": "zodToIntlErrorMap",
      "text": "function zodToIntlErrorMap(issue: ZodIssueOptionalMessage, _ctx: ErrorMapCtx) {\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n  switch (issue.code) {\n    case 'invalid_string': {\n      if (_ctx.data === '') {\n        return createIntlError(errorMessages.requiredField)\n      }\n\n      if (issue.validation === 'date') {\n        return createIntlError(errorMessages.invalidDate)\n      }\n\n      if (issue.validation === 'email') {\n        return createIntlError(errorMessages.invalidEmail)\n      }\n\n      break\n    }\n\n    case 'invalid_type': {\n      if (issue.expected !== issue.received && issue.received === 'undefined') {\n        return createIntlError(errorMessages.requiredField)\n      }\n\n      break\n    }\n    case 'too_small': {\n      if (issue.message === undefined) {\n        return createIntlError(errorMessages.requiredField)\n      }\n\n      break\n    }\n    case 'invalid_union': {\n      for (const { issues } of issue.unionErrors) {\n        for (const e of issues) {\n          if (\n            zodToIntlErrorMap(e, _ctx).message.message.id !==\n            'v2.error.required'\n          ) {\n            return createIntlError(errorMessages.invalidInput)\n          }\n        }\n      }\n      return createIntlError(errorMessages.requiredField)\n    }\n  }\n\n  return createIntlError(errorMessages.invalidInput)\n}",
      "startLine": 161,
      "endLine": 210,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@230-242",
      "type": "function_declaration",
      "name": "runCustomFieldValidations",
      "text": "function runCustomFieldValidations({\n  field,\n  conditionalParameters\n}: {\n  field: FieldConfig\n  conditionalParameters: ConditionalParameters\n}) {\n  return (field.validation ?? [])\n    .filter((validation) => {\n      return !validate(validation.validator, conditionalParameters)\n    })\n    .map((validation) => ({ message: validation.message }))\n}",
      "startLine": 230,
      "endLine": 242,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@249-269",
      "type": "function_declaration",
      "name": "validateFieldInput",
      "text": "function validateFieldInput({\n  field,\n  value\n}: {\n  field: FieldConfig\n  value: FieldUpdateValue\n}) {\n  const rawError = mapFieldTypeToZod(field.type, field.required).safeParse(\n    value,\n    {\n      // @ts-expect-error\n      errorMap: zodToIntlErrorMap\n    }\n  )\n\n  // We have overridden the standard error messages\n  return (rawError.error?.issues.map((issue) => issue.message) ??\n    []) as unknown as {\n    message: TranslationConfig\n  }[]\n}",
      "startLine": 249,
      "endLine": 269,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@271-306",
      "type": "function_declaration",
      "name": "runFieldValidations",
      "text": "function runFieldValidations({\n  field,\n  values\n}: {\n  field: FieldConfig\n  values: ActionUpdate\n}) {\n  if (\n    !isFieldVisible(field, values) ||\n    isFieldEmptyAndNotRequired(field, values)\n  ) {\n    return {\n      errors: []\n    }\n  }\n\n  const conditionalParameters = {\n    $form: values,\n    $now: formatISO(new Date(), { representation: 'date' })\n  }\n\n  const fieldValidationResult = validateFieldInput({\n    field,\n    value: values[field.id]\n  })\n\n  const customValidationResults = runCustomFieldValidations({\n    field,\n    conditionalParameters\n  })\n\n  return {\n    // Assumes that custom validation errors are based on the field type, and extend the validation.\n    errors: [...fieldValidationResult, ...customValidationResults]\n  }\n}",
      "startLine": 271,
      "endLine": 306,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/validate.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@36-44",
      "type": "function_declaration",
      "name": "maskEmail",
      "text": "function maskEmail(email: string) {\n  if (email.length <= 10)\n    return `${email.at(0)}${'*'.repeat(email.length - 2)}${email.at(-1)}`\n\n  // The regex matches everything EXCEPT the first 3 and last 4 characters.\n  return email.replace(/(?<=.{3}).*(?=.{4})/, (match) =>\n    '*'.repeat(match.length)\n  )\n}",
      "startLine": 36,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/logger.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-52",
      "type": "function_declaration",
      "name": "maskSms",
      "text": "function maskSms(sms: string) {\n  if (sms.length <= 8)\n    return `${sms.at(0)}${'*'.repeat(sms.length - 2)}${sms.at(-1)}`\n\n  // The regex matches everything EXCEPT the first 3 and last 2 characters.\n  return sms.replace(/(?<=.{3}).*(?=.{2})/, (match) => '*'.repeat(match.length))\n}",
      "startLine": 46,
      "endLine": 52,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/logger.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-26",
      "type": "function_declaration",
      "name": "defineConditional",
      "text": "function defineConditional(schema: any) {\n  return schema as JSONSchema\n}",
      "startLine": 24,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@76-78",
      "type": "function_declaration",
      "name": "alwaysTrue",
      "text": "function alwaysTrue(): AjvJSONSchema {\n  return {}\n}",
      "startLine": 76,
      "endLine": 78,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@85-91",
      "type": "function_declaration",
      "name": "and",
      "text": "function and(...conditions: AjvJSONSchema[]): JSONSchema {\n  return defineConditional({\n    type: 'object',\n    allOf: conditions,\n    required: []\n  })\n}",
      "startLine": 85,
      "endLine": 91,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@98-104",
      "type": "function_declaration",
      "name": "or",
      "text": "function or(...conditions: AjvJSONSchema[]): JSONSchema {\n  return defineConditional({\n    type: 'object',\n    anyOf: conditions,\n    required: []\n  })\n}",
      "startLine": 98,
      "endLine": 104,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@111-117",
      "type": "function_declaration",
      "name": "not",
      "text": "function not(condition: AjvJSONSchema): JSONSchema {\n  return defineConditional({\n    type: 'object',\n    not: condition,\n    required: []\n  })\n}",
      "startLine": 111,
      "endLine": 117,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@124-126",
      "type": "function_declaration",
      "name": "never",
      "text": "function never(): JSONSchema {\n  return not(alwaysTrue())\n}",
      "startLine": 124,
      "endLine": 126,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@159-191",
      "type": "function_declaration",
      "name": "createEventConditionals",
      "text": "function createEventConditionals() {\n  return {\n    /**\n     * Checks if the event contains a specific action type.\n     * @param action - The action type to check for.\n     */\n    hasAction: (action: ActionType) =>\n      defineConditional({\n        type: 'object',\n        properties: {\n          $event: {\n            type: 'object',\n            properties: {\n              actions: {\n                type: 'array',\n                contains: {\n                  type: 'object',\n                  properties: {\n                    type: {\n                      const: action\n                    }\n                  },\n                  required: ['type']\n                }\n              }\n            },\n            required: ['actions']\n          }\n        },\n        required: ['$event']\n      })\n  }\n}",
      "startLine": 159,
      "endLine": 191,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@193-197",
      "type": "function_declaration",
      "name": "getDateFromNow",
      "text": "function getDateFromNow(days: number) {\n  return new Date(Date.now() - days * 24 * 60 * 60 * 1000)\n    .toISOString()\n    .split('T')[0]\n}",
      "startLine": 193,
      "endLine": 197,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@219-236",
      "type": "function_declaration",
      "name": "getDateRangeToFieldReference",
      "text": "function getDateRangeToFieldReference(\n  fieldId: string,\n  comparedFieldId: string,\n  clause: 'formatMinimum' | 'formatMaximum'\n) {\n  return {\n    type: 'object',\n    properties: {\n      [fieldId]: {\n        type: 'string',\n        format: 'date',\n        [clause]: { $data: `1/${comparedFieldId}` }\n      },\n      [comparedFieldId]: { type: 'string', format: 'date' }\n    },\n    required: [fieldId]\n  }\n}",
      "startLine": 219,
      "endLine": 236,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@239-241",
      "type": "function_declaration",
      "name": "isFieldReference",
      "text": "function isFieldReference(value: unknown): value is FieldReference {\n  return typeof value === 'object' && value !== null && '_fieldId' in value\n}",
      "startLine": 239,
      "endLine": 241,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@252-324",
      "type": "function_declaration",
      "name": "createFieldConditionals",
      "text": "function createFieldConditionals(fieldId: string) {\n  const getDateRange = (\n    date: string,\n    clause: 'formatMinimum' | 'formatMaximum'\n  ) => ({\n    type: 'object',\n    properties: {\n      [fieldId]: {\n        type: 'string',\n        format: 'date',\n        [clause]: date\n      }\n    },\n    required: [fieldId]\n  })\n\n  return {\n    isAfter: () => ({\n      days: (days: number) => ({\n        inPast: () =>\n          defineFormConditional(\n            getDateRange(getDateFromNow(days), 'formatMinimum')\n          ),\n        inFuture: () =>\n          defineFormConditional(\n            getDateRange(getDateFromNow(-days), 'formatMinimum')\n          )\n      }),\n      date: (date: string | FieldReference) => {\n        if (isFieldReference(date)) {\n          const comparedFieldId = date._fieldId\n          return defineFormConditional(\n            getDateRangeToFieldReference(\n              fieldId,\n              comparedFieldId,\n              'formatMinimum'\n            )\n          )\n        }\n\n        return defineFormConditional(getDateRange(date, 'formatMinimum'))\n      },\n      now: () =>\n        defineFormConditional(getDateRange(getDateFromNow(0), 'formatMinimum'))\n    }),\n    isBefore: () => ({\n      days: (days: number) => ({\n        inPast: () =>\n          defineFormConditional(\n            getDateRange(getDateFromNow(days), 'formatMaximum')\n          ),\n        inFuture: () =>\n          defineFormConditional(\n            getDateRange(getDateFromNow(-days), 'formatMaximum')\n          )\n      }),\n      date: (date: string | FieldReference) => {\n        if (isFieldReference(date)) {\n          const comparedFieldId = date._fieldId\n          return defineFormConditional(\n            getDateRangeToFieldReference(\n              fieldId,\n              comparedFieldId,\n              'formatMaximum'\n            )\n          )\n        }\n\n        return defineFormConditional(getDateRange(date, 'formatMaximum'))\n      },\n      now: () =>\n        defineFormConditional(getDateRange(getDateFromNow(0), 'formatMaximum'))\n    }),",
      "startLine": 252,
      "endLine": 324,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-18",
      "type": "function_declaration",
      "name": "getUUID",
      "text": "function getUUID() {\n  return uuidv4() as UUID\n}",
      "startLine": 16,
      "endLine": 18,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/uuid.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@285-318",
      "type": "function_declaration",
      "name": "parseScope",
      "text": "function parseScope(scope: string) {\n  const maybeLiteralScope = LiteralScopes.safeParse(scope)\n  if (maybeLiteralScope.success) {\n    return {\n      type: maybeLiteralScope.data\n    }\n  }\n\n  const maybeConfigurableScope = rawConfigurableScope.safeParse(scope)\n  if (!maybeConfigurableScope.success) {\n    return\n  }\n\n  const rawScope = maybeConfigurableScope.data\n  const [, type, rawOptions] = rawScope.match(rawConfigurableScopeRegex) ?? []\n\n  // Different options are separated by commas, and each option value is separated by a pipe e.g.:\n  // record.digitise[event=v2.birth|tennis-club-membership, my-jurisdiction]\n  const options = rawOptions\n    .split(',')\n    .reduce((acc: Record<string, string[]>, option) => {\n      const [key, value] = option.split('=')\n      acc[key] = value.split('|')\n      return acc\n    }, {})\n\n  const parsedScope = {\n    type,\n    options\n  }\n\n  const result = ConfigurableScopes.safeParse(parsedScope)\n  return result.success ? result.data : undefined\n}",
      "startLine": 285,
      "endLine": 318,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/scopes.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@331-337",
      "type": "function_declaration",
      "name": "stringifyScope",
      "text": "function stringifyScope(scope: ConfigurableScopes) {\n  const options = Object.entries(scope.options)\n    .map(([key, value]) => `${key}=${value.join('|')}`)\n    .join(',')\n\n  return `${scope.type}[${options}]`\n}",
      "startLine": 331,
      "endLine": 337,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/scopes.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-42",
      "type": "function_declaration",
      "name": "getFieldParams",
      "text": "function getFieldParams(form: Record<string, unknown> = DEFAULT_FORM) {\n  return {\n    $form: form,\n    $now: formatISO(new Date(), { representation: 'date' })\n  } satisfies ConditionalParameters\n}",
      "startLine": 37,
      "endLine": 42,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/conditionals/conditionals.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-59",
      "type": "function_declaration",
      "name": "createSearchConfig",
      "text": "function createSearchConfig<T extends {}>(baseField: T) {\n  return {\n    /**\n     * Creates a range configuration for the specified field.\n     *\n     * @returns An object containing the field ID and a configuration object with a type of 'range'.\n     *\n     * @example event('legalStatus.REGISTERED.createdAt').range()\n     * // {\n     * //   ...\n     * //   config: { type: 'range' }\n     * // }\n     */\n    range: () => ({\n      ...baseField,\n      config: { type: 'range' as const }\n    }),\n    /**\n     * Creates a configuration for exact matching of the specified field.\n     * @returns  An object containing the field ID and a configuration object with a type of 'exact'.\n     * @example field('dob').exact()\n     * // {\n     * //   ...\n     * //   config: { type: 'exact' }\n     * // }\n     */\n    exact: () => ({\n      ...baseField,\n      config: { type: 'exact' as const }\n    }),\n    /**\n     * Creates a configuration for fuzzy matching of the specified field.\n     * @returns  An object containing the field ID and a configuration object with a type of 'exact'.\n     * @example field('name').fuzzy()\n     * // {\n     * //   ...\n     * //   config: { type: 'fuzzy' }\n     * // }\n     */\n    fuzzy: () => ({\n      ...baseField,\n      config: { type: 'fuzzy' as const }\n    })\n  }\n}",
      "startLine": 15,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/commons/src/searchConfigs.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@18-26",
      "type": "function_declaration",
      "name": "getNetworkAddress",
      "text": "function getNetworkAddress() {\n  const interfaces = networkInterfaces()\n  return []\n    .concat(...Object.values(interfaces))\n    .filter(\n      (iface: NetworkInterfaceInfo) =>\n        'IPv4' === iface.family && !iface.internal\n    )[0]\n}",
      "startLine": 18,
      "endLine": 26,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/mobile-proxy/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-85",
      "type": "function_declaration",
      "name": "init",
      "text": "async function init() {\n  const url = await ngrok.connect({\n    proto: 'http', // http|tcp|tls, defaults to http\n    addr: 3000, // port or network address, defaults to 80\n    authtoken: process.env.AUTH_TOKEN, // your authtoken from ngrok.com\n    region: 'eu'\n  })\n\n  const loginConfig = readFileSync(join(__dirname, '../login/public/config.js'))\n\n  writeFileSync(\n    join(__dirname, '../login/public/config.js'),\n    loginConfig\n      .toString()\n      .replace(/localhost/g, iface.address)\n      .replace(/(CLIENT_APP_URL: ).*,/, `$1 '${url}',`)\n  )\n\n  const clientConfig = readFileSync(\n    join(__dirname, '../client/public/config.js')\n  )\n\n  writeFileSync(\n    join(__dirname, '../client/public/config.js'),\n    clientConfig\n      .toString()\n      .replace(/(API_GATEWAY_URL: ).*,/, `$1 '/gateway/',`)\n      .replace(/(COUNTRY_CONFIG_URL: ).*,/, `$1 '/countryconfig',`)\n  )\n\n  console.log('Proxy is running:', url)\n}",
      "startLine": 54,
      "endLine": 85,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/mobile-proxy/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@13-30",
      "type": "function_declaration",
      "name": "ChevronLeft",
      "text": "function ChevronLeft(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"#4C68C1\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"ph-caret-left\"\n      {...props}\n    >\n      <path d=\"M15 18l-6-6 6-6\" />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/ChevronLeft.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-30",
      "type": "function_declaration",
      "name": "Search",
      "text": "function Search(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"#4C68C1\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"ph-caret-down\"\n      {...props}\n    >\n      <path d=\"M9 18l6-6-6-6\" />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/Search.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-33",
      "type": "function_declaration",
      "name": "Calendar",
      "text": "function Calendar(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg width={18} height={18} viewBox=\"0 0 18 18\" fill=\"none\" {...props}>\n      <path\n        clipRule=\"evenodd\"\n        d=\"M2.25 5a2 2 0 012-2h9.5a2 2 0 012 2v9.5a2 2 0 01-2 2h-9.5a2 2 0 01-2-2V5z\"\n        stroke=\"#4C68C1\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M12 1.5v3M6 1.5v3M2.25 7.5h13.5\"\n        stroke=\"#4C68C1\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/Calendar.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@14-57",
      "type": "function_declaration",
      "name": "Condition",
      "text": "function Condition({\n  color = 'primary',\n  ...props\n}: { color?: keyof typeof colors } & React.HTMLAttributes<SVGElement>) {\n  return (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M4.75 2.375V11.875\"\n        stroke={colors[color]}\n        stroke-width=\"1.58333\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <path\n        d=\"M14.25 7.125C15.5617 7.125 16.625 6.06168 16.625 4.75C16.625 3.43832 15.5617 2.375 14.25 2.375C12.9383 2.375 11.875 3.43832 11.875 4.75C11.875 6.06168 12.9383 7.125 14.25 7.125Z\"\n        stroke={colors[color]}\n        stroke-width=\"1.58333\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <path\n        d=\"M4.75 16.625C6.06168 16.625 7.125 15.5617 7.125 14.25C7.125 12.9383 6.06168 11.875 4.75 11.875C3.43832 11.875 2.375 12.9383 2.375 14.25C2.375 15.5617 3.43832 16.625 4.75 16.625Z\"\n        stroke={colors[color]}\n        stroke-width=\"1.58333\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <path\n        d=\"M14.25 7.125C14.25 9.01467 13.4993 10.8269 12.1631 12.1631C10.8269 13.4993 9.01467 14.25 7.125 14.25\"\n        stroke={colors[color]}\n        stroke-width=\"1.58333\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n    </svg>\n  )\n}",
      "startLine": 14,
      "endLine": 57,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/Condition.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-33",
      "type": "function_declaration",
      "name": "CalendarGrey",
      "text": "function CalendarGrey(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" {...props}>\n      <path\n        clipRule=\"evenodd\"\n        d=\"M3 6a2 2 0 012-2h14a2 2 0 012 2v14a2 2 0 01-2 2H5a2 2 0 01-2-2V6z\"\n        stroke=\"#35495D\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M16 2v4M8 2v4M3 10h18\"\n        stroke=\"#35495D\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/CalendarGrey.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@21-26",
      "type": "function_declaration",
      "name": "CountryLogo",
      "text": "function CountryLogo({\n  size = 'medium',\n  ...props\n}: React.ImgHTMLAttributes<HTMLImageElement> & { size?: ISize }) {\n  return <Logo alt=\"country-logo\" size={size} {...props} />\n}",
      "startLine": 21,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/CountryLogo.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-36",
      "type": "function_declaration",
      "name": "MapPin",
      "text": "function MapPin(\n  props: React.SVGProps<SVGSVGElement> & { color?: string }\n) {\n  return (\n    <svg width={18} height={20} viewBox=\"0 0 18 20\" fill=\"none\" {...props}>\n      <path\n        clipRule=\"evenodd\"\n        d=\"M15.75 8.5c0 5.25-6.75 9.75-6.75 9.75s-6.75-4.5-6.75-9.75a6.75 6.75 0 0113.5 0v0z\"\n        stroke={props.color ? props.color : '#4C68C1'}\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        clipRule=\"evenodd\"\n        d=\"M9 10.75a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z\"\n        stroke={props.color ? props.color : '#4C68C1'}\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 36,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/MapPin.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-26",
      "type": "function_declaration",
      "name": "StatusWaitingValidation",
      "text": "function StatusWaitingValidation(\n  props: React.HTMLAttributes<SVGElement>\n) {\n  return (\n    <svg width={16} height={16} viewBox=\"0 0 16 16\" fill=\"none\" {...props}>\n      <path\n        d=\"M8 16A8 8 0 108 0a8 8 0 000 16z\"\n        fill=\"#35495D\"\n        fillOpacity={0.5}\n      />\n      <path d=\"M8 12a4 4 0 100-8 4 4 0 000 8z\" fill=\"#35495D\" />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 26,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/StatusWaitingValidation.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-30",
      "type": "function_declaration",
      "name": "ChevronDown",
      "text": "function ChevronDown(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"#4C68C1\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"ph-caret-down\"\n      {...props}\n    >\n      <path d=\"M9 18l6-6-6-6\" />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/ChevronDown.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@14-35",
      "type": "function_declaration",
      "name": "Trash",
      "text": "function Trash({\n  color = 'primary',\n  ...props\n}: { color?: keyof typeof colors } & React.HTMLAttributes<SVGElement>) {\n  return (\n    <svg\n      width=\"20\"\n      height=\"22\"\n      viewBox=\"0 0 20 22\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M8.00002 2C7.7348 2 7.48045 2.10536 7.29291 2.29289C7.10537 2.48043 7.00002 2.73478 7.00002 3V3.99998H13V3C13 2.73478 12.8947 2.48043 12.7071 2.29289C12.5196 2.10536 12.2652 2 12 2H8.00002ZM15 3.99998V3C15 2.20435 14.6839 1.44129 14.1213 0.87868C13.5587 0.316071 12.7957 0 12 0H8.00002C7.20437 0 6.44131 0.316071 5.8787 0.87868C5.31609 1.44129 5.00002 2.20435 5.00002 3V3.99999L1 3.99998C0.447715 3.99998 0 4.4477 0 4.99998C0 5.55227 0.447715 5.99998 1 5.99998H2L2.00002 19C2.00002 19.7956 2.31609 20.5587 2.8787 21.1213C3.4413 21.6839 4.20437 22 5.00002 22H15C15.7957 22 16.5587 21.6839 17.1213 21.1213C17.6839 20.5587 18 19.7957 18 19V5.99998H19C19.5523 5.99998 20 5.55227 20 4.99998C20 4.4477 19.5523 3.99998 19 3.99998H15ZM6.00519 5.99999C6.00347 6 6.00174 6 6.00002 6C5.99829 6 5.99656 6 5.99484 5.99999L4 5.99998L4.00002 19C4.00002 19.2652 4.10537 19.5196 4.29291 19.7071C4.48044 19.8946 4.7348 20 5.00002 20H15C15.2652 20 15.5196 19.8946 15.7071 19.7071C15.8947 19.5196 16 19.2652 16 19V6L14.0027 6C14.0018 6 14.0009 6 14 6C13.9991 6 13.9982 6 13.9973 6L6.00519 5.99999ZM7.99998 9C8.55227 9 8.99998 9.44771 8.99998 10V16C8.99998 16.5523 8.55227 17 7.99998 17C7.4477 17 6.99998 16.5523 6.99998 16V10C6.99998 9.44771 7.4477 9 7.99998 9ZM12 9C12.5523 9 13 9.44771 13 10V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V10C11 9.44771 11.4477 9 12 9Z\"\n        fill={colors[color]}\n      />\n    </svg>\n  )\n}",
      "startLine": 14,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/Trash.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-30",
      "type": "function_declaration",
      "name": "ChevronRight",
      "text": "function ChevronRight(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"#4C68C1\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"ph-caret-right\"\n      {...props}\n    >\n      <path d=\"M9 18l6-6-6-6\" />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/ChevronRight.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-49",
      "type": "function_declaration",
      "name": "Tooltip",
      "text": "function Tooltip(props: React.HTMLAttributes<SVGElement>) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M9.3811 9.29988C9.818 8.05792 11.0869 7.31215 12.3846 7.53472C13.6822 7.7573 14.6301 8.88332 14.6281 10.1999C14.6281 11.9999 11.9281 12.8999 11.9281 12.8999\"\n        stroke=\"#222222\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21Z\"\n        stroke=\"#222222\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <circle\n        cx=\"12.0001\"\n        cy=\"16.5001\"\n        r=\"0.5\"\n        fill=\"#222222\"\n        stroke=\"#222222\"\n        strokeWidth=\"0.8\"\n      />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 49,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/Tooltip.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@19-38",
      "type": "function_declaration",
      "name": "Activity",
      "text": "function Activity(\n  props: React.HTMLAttributes<SVGElement> & IPropsActivity\n) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M9.75001 5C10.0728 5 10.3594 5.20657 10.4615 5.51283L14.25 16.8783L15.7885 12.2628C15.8906 11.9566 16.1772 11.75 16.5 11.75H19.5C19.9142 11.75 20.25 12.0858 20.25 12.5C20.25 12.9142 19.9142 13.25 19.5 13.25H17.0406L14.9615 19.4872C14.8594 19.7934 14.5728 20 14.25 20C13.9272 20 13.6406 19.7934 13.5385 19.4872L9.75001 8.12171L8.21153 12.7372C8.10944 13.0434 7.82284 13.25 7.50001 13.25H4.50001C4.0858 13.25 3.75001 12.9142 3.75001 12.5C3.75001 12.0858 4.0858 11.75 4.50001 11.75H6.95944L9.0385 5.51283C9.14059 5.20657 9.42719 5 9.75001 5Z\"\n        fill={props.stroke || 'currentColor'}\n      />\n    </svg>\n  )\n}",
      "startLine": 19,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/Activity.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@14-35",
      "type": "function_declaration",
      "name": "ArrowUp",
      "text": "function ArrowUp({\n  color = 'primary',\n  ...props\n}: { color?: keyof typeof colors } & React.HTMLAttributes<SVGElement>) {\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.99998 1.52588e-05C8.2652 1.49012e-05 8.51955 0.105371 8.70709 0.292908L15.7071 7.29291C16.0976 7.68343 16.0976 8.3166 15.7071 8.70712C15.3166 9.09765 14.6834 9.09765 14.2929 8.70712L8.99998 3.41422V15C8.99998 15.5523 8.55227 16 7.99998 16C7.4477 16 6.99998 15.5523 6.99998 15V3.41423L1.70711 8.70712C1.31658 9.09765 0.683419 9.09765 0.292894 8.70712C-0.0976307 8.3166 -0.0976314 7.68343 0.292892 7.29291L7.29288 0.292909C7.48041 0.105373 7.73477 1.55568e-05 7.99998 1.52588e-05Z\"\n        fill={colors[color]}\n      />\n    </svg>\n  )\n}",
      "startLine": 14,
      "endLine": 35,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/ArrowUp.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-30",
      "type": "function_declaration",
      "name": "Box",
      "text": "function Box() {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M10.6266 1.61962C11.0442 1.37884 11.5179 1.25209 12 1.25209C12.4821 1.25209 12.9557 1.37883 13.3734 1.61959C13.3739 1.6199 13.3745 1.62021 13.375 1.62052L20.375 5.62051C20.7204 5.81995 21.0175 6.09161 21.2464 6.41582C21.2973 6.46419 21.3423 6.52059 21.3792 6.58448C21.4115 6.64031 21.4358 6.69857 21.4525 6.75794C21.6473 7.14202 21.7496 7.56719 21.75 7.99927V16C21.7495 16.4823 21.6222 16.9567 21.3809 17.3742C21.1395 17.7917 20.7926 18.1384 20.375 18.3796L20.3721 18.3812L13.375 22.3796C13.3745 22.3799 13.3739 22.3802 13.3734 22.3805C13.0695 22.5556 12.736 22.6705 12.3912 22.72C12.2773 22.7898 12.1434 22.83 12 22.83C11.8566 22.83 11.7227 22.7898 11.6088 22.72C11.2639 22.6705 10.9304 22.5556 10.6265 22.3804C10.626 22.3801 10.6255 22.3799 10.625 22.3796L3.6279 18.3812L3.625 18.3796C3.20736 18.1384 2.86047 17.7917 2.61913 17.3742C2.3778 16.9567 2.2505 16.4831 2.25 16.0008L2.25 8.00004C2.25044 7.5679 2.35271 7.14191 2.54761 6.75779C2.56426 6.69848 2.58854 6.64027 2.62081 6.58448C2.65774 6.52063 2.70265 6.46427 2.75354 6.41592C2.98249 6.09166 3.27954 5.81997 3.625 5.62052L3.62789 5.61885L10.6266 1.61962ZM3.75 8.10412V15.9996C3.75029 16.2187 3.80815 16.4339 3.91779 16.6235C4.02724 16.8129 4.18445 16.9702 4.37371 17.0798C4.37414 17.08 4.37457 17.0803 4.375 17.0805L11.25 21.0091V12.4426L3.75 8.10412ZM12.75 12.4426V21.0091L19.625 17.0805C19.6254 17.0803 19.6259 17.08 19.6263 17.0798C19.8156 16.9702 19.9728 16.8129 20.0822 16.6235C20.1919 16.4338 20.2498 16.2185 20.25 15.9993V8.10414L12.75 12.4426ZM19.4626 6.82675L12.625 2.91956C12.435 2.80985 12.2194 2.75209 12 2.75209C11.7806 2.75209 11.565 2.80985 11.375 2.91956L11.3721 2.92122L4.53744 6.82674L12 11.1436L19.4626 6.82675Z\"\n        fill=\"#2F363D\"\n      />\n    </svg>\n  )\n}",
      "startLine": 13,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/icons/Box.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@38-45",
      "type": "function_declaration",
      "name": "WarningMessage",
      "text": "function WarningMessage(props: IWarningProps) {\n  return (\n    <Container ignoreMediaQuery={props.ignoreMediaQuery}>\n      <Warning />\n      <StyledParagraph>{props.children}</StyledParagraph>\n    </Container>\n  )\n}",
      "startLine": 38,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/WarningMessage/WarningMessage.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@113-146",
      "type": "function_declaration",
      "name": "ListUser",
      "text": "function ListUser({ rows, labelHeader, valueHeader }: IListUserProps) {\n  return (\n    <React.Fragment>\n      <UserHeader>\n        <thead>\n          <tr>\n            <th colSpan={2}>{labelHeader}</th>\n            <th>{valueHeader}</th>\n            <th></th>\n          </tr>\n        </thead>\n      </UserHeader>\n      {rows.map((row, index) => (\n        <UserRow key={index}>\n          <tbody>\n            <tr>\n              {row.avatar && <td>{row.avatar}</td>}\n              {row.label && <td>{row.label}</td>}\n              {row.value && <td>{row.value}</td>}\n              {row.status && <td>{row.status}</td>}\n              {row.actions ? (\n                <td>\n                  <ActionsContainer>{row.actions}</ActionsContainer>\n                </td>\n              ) : (\n                row.actions && <td></td>\n              )}\n            </tr>\n          </tbody>\n        </UserRow>\n      ))}\n    </React.Fragment>\n  )\n}",
      "startLine": 113,
      "endLine": 146,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/ListUser/ListUser.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@59-68",
      "type": "function_declaration",
      "name": "Toggle",
      "text": "function Toggle(props: React.HTMLAttributes<HTMLInputElement>) {\n  const { defaultChecked } = props\n  return (\n    <CheckBoxWrapper>\n      <CheckBoxLabel checked={!!defaultChecked}>\n        <CheckBox type=\"checkbox\" {...props} />\n      </CheckBoxLabel>\n    </CheckBoxWrapper>\n  )\n}",
      "startLine": 59,
      "endLine": 68,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Toggle/Toggle.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@35-42",
      "type": "function_declaration",
      "name": "LabelValuePair",
      "text": "function LabelValuePair({ label, value }: IInfo) {\n  return (\n    <LabelValuePairContainer>\n      <Label>{label}: </Label>\n      <Value>{value}</Value>\n    </LabelValuePairContainer>\n  )\n}",
      "startLine": 35,
      "endLine": 42,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/ViewData/LabelValuePair.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@65-67",
      "type": "method_definition",
      "name": "if",
      "text": "if (locked) {\n    return <LockedBox />\n  }",
      "startLine": 65,
      "endLine": 67,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Summary/components/Row.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@120-168",
      "type": "function_declaration",
      "name": "ListConfig",
      "text": "function ListConfig({\n  labelHeader,\n  valueHeader,\n  rows\n}: IListConfigRowProps) {\n  const hideHeader = labelHeader !== undefined || valueHeader !== undefined\n  return (\n    <React.Fragment>\n      {hideHeader && (\n        <ConfigHeader>\n          <thead>\n            <tr>\n              <th>{labelHeader}</th>\n              <th></th>\n              <th></th>\n              <th></th>\n            </tr>\n          </thead>\n        </ConfigHeader>\n      )}\n      {rows.map((row, index) => (\n        <ConfigRow key={index}>\n          <tbody>\n            <tr>\n              {row.label && (\n                <td>\n                  {row.label}\n                  {row.labelDescription && (\n                    <Text variant=\"reg14\" element=\"p\" color=\"supportingCopy\">\n                      {row.labelDescription}\n                    </Text>\n                  )}\n                </td>\n              )}\n              {row.value && <td>{row.value}</td>}\n              {row.actions ? (\n                <td>\n                  <ActionsContainer>{row.actions}</ActionsContainer>\n                </td>\n              ) : (\n                <td></td>\n              )}\n            </tr>\n          </tbody>\n        </ConfigRow>\n      ))}\n    </React.Fragment>\n  )\n}",
      "startLine": 120,
      "endLine": 168,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/ListConfig/ListConfig.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@55-71",
      "type": "function_declaration",
      "name": "Frame",
      "text": "function Frame({\n  header,\n  navigation,\n  skipToContentText,\n  children\n}: FrameProps) {\n  return (\n    <FrameGrid>\n      <SkipToContent>{skipToContentText}</SkipToContent>\n      <FrameNavigation>{navigation}</FrameNavigation>\n      <FrameHeader id=\"page-title\">{header}</FrameHeader>\n      <FrameMainContent id={MAIN_CONTENT_ANCHOR_ID}>\n        {children}\n      </FrameMainContent>\n    </FrameGrid>\n  )\n}",
      "startLine": 55,
      "endLine": 71,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Frame/Frame.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@53-84",
      "type": "function_declaration",
      "name": "CopyButton",
      "text": "function CopyButton({\n  data,\n  copyLabel,\n  copiedLabel,\n  timeout = 3000,\n  ...props\n}: ICopyProps) {\n  const [clipToCopy, setClipToCopy] = useCopyToClipboard()\n  return (\n    <Button\n      type=\"tertiary\"\n      onClick={() => setClipToCopy(data, timeout)}\n      {...props}\n    >\n      {clipToCopy ? (\n        <>\n          <Icon color=\"green\" name=\"CheckSquare\" />\n          <Text variant=\"bold14\" color=\"green\" element=\"span\">\n            {copiedLabel}\n          </Text>\n        </>\n      ) : (\n        <>\n          <Icon name=\"Copy\" />\n          <Text variant=\"bold14\" color=\"primary\" element=\"span\">\n            {copyLabel}\n          </Text>\n        </>\n      )}\n    </Button>\n  )\n}",
      "startLine": 53,
      "endLine": 84,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/CopyButton/CopyButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@30-40",
      "type": "function_declaration",
      "name": "BulletList",
      "text": "function BulletList({ id, font, items }: BulletListProps) {\n  return (\n    <List id={id}>\n      <Text variant={font} element=\"p\" color=\"grey600\">\n        {items.map((items) => (\n          <ListItem key={items}>{items}</ListItem>\n        ))}\n      </Text>\n    </List>\n  )\n}",
      "startLine": 30,
      "endLine": 40,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/BulletList/BulletList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@29-38",
      "type": "function_declaration",
      "name": "ErrorText",
      "text": "function ErrorText(props: IErrorTextProps) {\n  return (\n    <Container id={props.id}>\n      <Warning />\n      <Text variant=\"bold16\" element=\"span\" color=\"negative\">\n        {props.children}\n      </Text>\n    </Container>\n  )\n}",
      "startLine": 29,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/ErrorText/ErrorText.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@147-157",
      "type": "function_declaration",
      "name": "getSelectedOption",
      "text": "function getSelectedOption(\n  value: string,\n  options: ISelectOption[]\n): ISelectOption | null {\n  const selectedOption = options.find((x: ISelectOption) => x.value === value)\n  if (selectedOption) {\n    return selectedOption\n  }\n\n  return null\n}",
      "startLine": 147,
      "endLine": 157,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Select/Select.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@122-126",
      "type": "method_definition",
      "name": "handleChange",
      "text": "handleChange(item: T) {\n    if (props.onChange) {\n      props.onChange(item)\n    }\n  }",
      "startLine": 122,
      "endLine": 126,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Select/Select2.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@29-39",
      "type": "function_declaration",
      "name": "NumberedList",
      "text": "function NumberedList({ id, font, items }: NumberedListProps) {\n  return (\n    <List id={id}>\n      <Text variant={font} element=\"p\" color=\"grey600\">\n        {items.map((items) => (\n          <ListItem key={items}>{items}</ListItem>\n        ))}\n      </Text>\n    </List>\n  )\n}",
      "startLine": 29,
      "endLine": 39,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/NumberedList/NumberedList.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@15-29",
      "type": "function_declaration",
      "name": "ToggleIcon",
      "text": "function ToggleIcon({\n  name,\n  size = 'medium',\n  color = 'currentColor',\n  weight = 'fill',\n  ...rest\n}: IconProps & React.HTMLAttributes<HTMLButtonElement>) {\n  return (\n    <>\n      <Button type=\"icon\" {...rest}>\n        <Icon name={name} color={color} weight={weight}></Icon>\n      </Button>\n    </>\n  )\n}",
      "startLine": 15,
      "endLine": 29,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/ToggleIcon/ToggleIcon.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@32-48",
      "type": "function_declaration",
      "name": "Icon",
      "text": "function Icon({\n  name,\n  size = 'medium',\n  color = 'currentColor',\n  weight = 'bold',\n  ...rest\n}: IconProps) {\n  const IconComponent = icons[name]\n  return (\n    <IconComponent\n      color={color === 'currentColor' ? 'currentColor' : colors[color]}\n      size={IconSize[size]}\n      weight={weight}\n      {...rest}\n    />\n  )\n}",
      "startLine": 32,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Icon/Icon.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@71-94",
      "type": "function_declaration",
      "name": "CustomizedDot",
      "text": "function CustomizedDot(props: ICustomisedDot) {\n  const { cx, cy, theme } = props\n\n  return (\n    <svg\n      x={cx - 10}\n      y={cy - 10}\n      width={20}\n      height={20}\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      {...props}\n    >\n      <circle\n        cx={8}\n        cy={8}\n        r={5}\n        fill={theme.colors.white}\n        stroke={theme.colors.yellow}\n        strokeWidth={3}\n      />\n    </svg>\n  )\n}",
      "startLine": 71,
      "endLine": 94,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/LineChart/LineChart.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@108-131",
      "type": "function_declaration",
      "name": "CustomizedAxisTick",
      "text": "function CustomizedAxisTick(props: IThemedAxisTickProps) {\n  const { x, y, payload, theme } = props\n  const values = payload.value.split(' ')\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dy={24}\n        fill={theme.colors.copy}\n        fontFamily={theme.fontFamily}\n        fontSize={12}\n        fontWeight=\"normal\"\n      >\n        {values.map((value, i) => (\n          <tspan textAnchor=\"middle\" x=\"0\" dy={`${i > 0 ? 18 : 24}`}>\n            {value}\n          </tspan>\n        ))}\n      </text>\n    </g>\n  )\n}",
      "startLine": 108,
      "endLine": 131,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/LineChart/LineChart.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@134-227",
      "type": "method_definition",
      "name": "render",
      "text": "render() {\n    const {\n      data,\n      mouseMoveHandler,\n      mouseLeaveHandler,\n      dataKeys,\n      theme,\n      tooltipContent,\n      legendContent,\n      chartTop,\n      chartRight,\n      chartBottom,\n      chartLeft,\n      maximizeXAxisInterval,\n      legendLayout\n    } = this.props\n    return (\n      <Container>\n        <ResponsiveContainer height={500}>\n          <Recharts.LineChart\n            data={data}\n            margin={{\n              top: chartTop,\n              right: chartRight,\n              bottom: chartBottom,\n              left: chartLeft\n            }}\n            onMouseMove={mouseMoveHandler}\n            onMouseLeave={mouseLeaveHandler}\n          >\n            <CartesianGrid\n              vertical={false}\n              strokeDasharray=\"3 3\"\n              horizontal={maximizeXAxisInterval ? false : true}\n            />\n            {(maximizeXAxisInterval && (\n              <XAxis\n                interval={data.length - 2}\n                tickLine={false}\n                dataKey=\"label\"\n              />\n            )) || (\n              <XAxis\n                tickLine={false}\n                dataKey=\"label\"\n                tick={(props: IAxisTickProps) => (\n                  <CustomizedAxisTick {...props} theme={theme} />\n                )}\n              />\n            )}\n            {!maximizeXAxisInterval && (\n              <YAxis interval={1} axisLine={false} tickLine={false} />\n            )}\n\n            <Line\n              dataKey={dataKeys[0]}\n              stroke={theme.colors.grey200}\n              dot={false}\n              activeDot={false}\n              strokeWidth={3}\n            />\n            <Line\n              dataKey={dataKeys[1]}\n              stroke={theme.colors.tealLight}\n              dot={false}\n              activeDot={false}\n              strokeWidth={3}\n            />\n            <Line\n              dataKey={dataKeys[2]}\n              stroke={theme.colors.teal}\n              dot={false}\n              activeDot={(dotProps: ICustomisedDot) => (\n                <CustomizedDot {...dotProps} theme={theme} />\n              )}\n              strokeWidth={3}\n            />\n\n            <Tooltip\n              cursor={{ stroke: theme.colors.yellow }}\n              content={tooltipContent}\n            />\n\n            <Legend\n              content={legendContent}\n              layout={legendLayout}\n              verticalAlign=\"top\"\n              align=\"right\"\n            />\n          </Recharts.LineChart>\n        </ResponsiveContainer>\n      </Container>\n    )\n  }",
      "startLine": 134,
      "endLine": 227,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/LineChart/LineChart.tsx",
      "language": "tsx"
    },
    {
      "id": "class_declaration@48-94",
      "type": "class_declaration",
      "name": "ReactPanZoom",
      "text": "class ReactPanZoom extends React.PureComponent<\n  IReactPanZoomProps,\n  IReactPanZoomStateType\n> {\n  // In strict null checking setting default props doesn't seem to work. Hence the non-null assertion.\n  // :crossedfingers: it shouldn't be deprecated. Or the very least support defaultProps semantics as proposed\n  // in this PR: https://github.com/Microsoft/TypeScript/issues/23812\n  public static defaultProps: Partial<IReactPanZoomProps> = {\n    enablePan: true,\n    onPan: () => undefined,\n    onReset: () => undefined,\n    pandx: 0,\n    pandy: 0,\n    zoom: 0,\n    rotation: 0\n  }\n\n  private panWrapper: HTMLDivElement | null\n\n  private panContainer: HTMLDivElement | null\n  private getInitialState = () => {\n    const { pandx, pandy, zoom } = this.props\n    const defaultDragData = {\n      dx: pandx!,\n      dy: pandy!,\n      x: 0,\n      y: 0\n    }\n    return {\n      comesFromDragging: false,\n      dragData: defaultDragData,\n      dragging: false,\n      matrixData: [\n        zoom!,\n        0,\n        0,\n        zoom!,\n        pandx!,\n        pandy! // [zoom, skew, skew, zoom, dx, dy]\n      ],\n      mouseDown: false\n    }\n  }\n  public state = this.getInitialState()\n\n  public componentDidUpdate(prevProps: IReactPanZoomProps) {\n    const { matrixData }",
      "startLine": 48,
      "endLine": 94,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/DocumentViewer/components/PanDraggable.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@128-130",
      "type": "method_definition",
      "name": "if",
      "text": "if (typeof page === 'number') {\n      onPageChange(page)\n    }",
      "startLine": 128,
      "endLine": 130,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Pagination/Pagination.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@113-118",
      "type": "method_definition",
      "name": "if",
      "text": "if (\n      dialogRef.current &&\n      !dialogRef.current.contains(event.target as Node)\n    ) {\n      handleClose()\n    }",
      "startLine": 113,
      "endLine": 118,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 14,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Dialog/Dialog.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@13-32",
      "type": "function_declaration",
      "name": "useWindowSize",
      "text": "function useWindowSize() {\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  })\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n    window.addEventListener('resize', handleResize)\n    handleResize()\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return windowSize\n}",
      "startLine": 13,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/hooks/useWindowSize.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-25",
      "type": "function_declaration",
      "name": "handleResize",
      "text": "function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }",
      "startLine": 20,
      "endLine": 25,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 9,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/hooks/useWindowSize.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-63",
      "type": "function_declaration",
      "name": "isValidMinutes",
      "text": "function isValidMinutes(minutes: string) {\n  if (minutes.length !== 2) {\n    return false\n  }\n  const parsed = Number(minutes)\n  if (isNaN(parsed)) {\n    return false\n  }\n  return parsed >= 0 && parsed <= 59\n}",
      "startLine": 54,
      "endLine": 63,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@65-75",
      "type": "function_declaration",
      "name": "isValidHours",
      "text": "function isValidHours(hours: string, use12HourFormat: boolean) {\n  if (hours.length !== 2) return false\n\n  const parsed = Number(hours)\n\n  if (isNaN(parsed)) return false\n\n  return use12HourFormat\n    ? parsed >= 1 && parsed <= 12\n    : parsed >= 0 && parsed <= 23\n}",
      "startLine": 65,
      "endLine": 75,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@77-215",
      "type": "function_declaration",
      "name": "TimeInput12",
      "text": "function TimeInput12(props: ITimeFieldProps) {\n  const {\n    id,\n    meta,\n    focusInput,\n    notice,\n    ignorePlaceHolder,\n    onChange,\n    ...otherProps\n  } = props\n\n  const [state, setState] = React.useState({\n    hh: '',\n    mm: ''\n  })\n\n  const [amPm, setAmPm] = React.useState<string>('AM') // Default to AM for 12-hour format\n\n  React.useEffect(() => {\n    function getInitialState(time: string): IState {\n      const [hh, mm, meridiem] = time.split(/[:\\s]/)\n\n      setAmPm(meridiem)\n\n      return { hh: hh || '', mm: mm || '' }\n    }\n\n    const isValidTime = (time: string) => {\n      const cleanTime = time.replace(/\\s?(AM|PM)$/i, '')\n      const parts = cleanTime.split(':')\n\n      if (parts.length !== 2) return false\n\n      return isValidHours(parts[0], true) && isValidMinutes(parts[1])\n    }\n\n    if (props.value && isValidTime(props.value)) {\n      setState(getInitialState(props.value))\n    }\n  }, [props.value])\n\n  const hh = React.useRef<HTMLInputElement>(null)\n  const mm = React.useRef<HTMLInputElement>(null)\n\n  function change(event: React.ChangeEvent<HTMLInputElement>) {\n    const val = event.target.value\n    if (event.target.id.includes('hh')) {\n      if (val === '00' || Number(val) < 0 || Number(val) > 12) return\n      if (val.length === 2 && mm?.current !== null) {\n        mm.current.focus()\n      }\n      setState((state) => ({ ...state, hh: val }))\n    } else if (event.target.id.includes('mm')) {\n      if (Number(val) < 0 || Number(val) > 59 || val.length > 2) return\n      setState((state) => ({ ...state, mm: val }))\n    }\n  }\n\n  function padStart(part: 'hh' | 'mm') {\n    return (event: React.FocusEvent<HTMLInputElement>) => {\n      let val = event.target.value\n      if (part === 'hh' && (!val || val === '0')) {\n        val = '01'\n      }\n      const paddedValue = val.padStart(2, '0')\n\n      setState((state) => ({ ...state, [part]: paddedValue }))\n    }\n  }\n\n  React.useEffect(() => {\n    if (isValidHours(state.hh, true) && isValidMinutes(state.mm)) {\n      onChange(getFormattedValue(state, true, amPm))\n    }\n  }, [state, amPm, onChange])\n\n  return (\n    <Container id={id}>\n      <TextInput\n        {...otherProps}\n        id={`${id}-hh`}\n        ref={hh}\n        error={Boolean(meta && meta.error)}\n        isDisabled={props.disabled}\n        touched={meta && meta.touched}\n        focusInput={focusInput}\n        type=\"number\"\n        placeholder={ignorePlaceHolder ? '' : 'hh'}\n        min={1}\n        max={12}\n        value={state.hh}\n        onChange={change}\n        onBlur={padStart('hh')}\n        onWheel={(event: React.WheelEvent<HTMLInputElement>) => {\n          event.currentTarget.blur()\n        }}\n      />\n      <TextInput\n        {...otherProps}\n        id={`${id}-mm`}\n        ref={mm}\n        error={Boolean(meta && meta.error)}\n        isDisabled={props.disabled}\n        touched={meta && meta.touched}\n        focusInput={focusInput}\n        type=\"number\"\n        placeholder={ignorePlaceHolder ? '' : 'mm'}\n        min={0}\n        max={59}\n        value={state.mm}\n        onChange={change}\n        onBlur={padStart('mm')}\n        onWheel={(event: React.WheelEvent<HTMLInputElement>) => {\n          event.currentTarget.blur()\n        }}\n      />\n      <Select\n        {...props}\n        id={`${id}-amPm`}\n        error={Boolean(meta && meta.error)}\n        touched={meta && meta.touched}\n        focusInput={focusInput}\n        placeholder={ignorePlaceHolder ? '' : 'mm'}\n        options={[\n          {\n            label: 'AM',\n            value: 'AM'\n          },\n          {\n            label: 'PM',\n            value: 'PM'\n          }\n        ]}\n        value={amPm}\n        onChange={(value: string) => setAmPm(value)}\n      />\n    </Container>\n  )\n}",
      "startLine": 77,
      "endLine": 215,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@96-102",
      "type": "function_declaration",
      "name": "getInitialState",
      "text": "function getInitialState(time: string): IState {\n      const [hh, mm, meridiem] = time.split(/[:\\s]/)\n\n      setAmPm(meridiem)\n\n      return { hh: hh || '', mm: mm || '' }\n    }",
      "startLine": 96,
      "endLine": 102,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@121-133",
      "type": "function_declaration",
      "name": "change",
      "text": "function change(event: React.ChangeEvent<HTMLInputElement>) {\n    const val = event.target.value\n    if (event.target.id.includes('hh')) {\n      if (val === '00' || Number(val) < 0 || Number(val) > 12) return\n      if (val.length === 2 && mm?.current !== null) {\n        mm.current.focus()\n      }\n      setState((state) => ({ ...state, hh: val }))\n    } else if (event.target.id.includes('mm')) {\n      if (Number(val) < 0 || Number(val) > 59 || val.length > 2) return\n      setState((state) => ({ ...state, mm: val }))\n    }\n  }",
      "startLine": 121,
      "endLine": 133,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@135-145",
      "type": "function_declaration",
      "name": "padStart",
      "text": "function padStart(part: 'hh' | 'mm') {\n    return (event: React.FocusEvent<HTMLInputElement>) => {\n      let val = event.target.value\n      if (part === 'hh' && (!val || val === '0')) {\n        val = '01'\n      }\n      const paddedValue = val.padStart(2, '0')\n\n      setState((state) => ({ ...state, [part]: paddedValue }))\n    }\n  }",
      "startLine": 135,
      "endLine": 145,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@217-333",
      "type": "function_declaration",
      "name": "TimeInput24",
      "text": "function TimeInput24(props: ITimeFieldProps) {\n  const {\n    id,\n    meta,\n    focusInput,\n    notice,\n    ignorePlaceHolder,\n    onChange,\n    ...otherProps\n  } = props\n\n  const [state, setState] = React.useState({\n    hh: '',\n    mm: ''\n  })\n\n  React.useEffect(() => {\n    function getInitialState(time: string): IState {\n      const dateSegmentVals = time.split(':')\n      return {\n        hh: dateSegmentVals[0],\n        mm: dateSegmentVals[1]\n      }\n    }\n\n    const isValidTime = (time: string) => {\n      const parts = time.split(':')\n\n      if (parts.length !== 2) {\n        return false\n      }\n\n      return isValidHours(parts[0], false) && isValidMinutes(parts[1])\n    }\n\n    if (props.value && isValidTime(props.value)) {\n      setState(getInitialState(props.value))\n    }\n  }, [props.value])\n\n  const hh = React.useRef<HTMLInputElement>(null)\n  const mm = React.useRef<HTMLInputElement>(null)\n\n  function change(event: React.ChangeEvent<HTMLInputElement>) {\n    const val = event.target.value\n    if (event.target.id.includes('hh')) {\n      if (Number(val) < 0 || Number(val) > 23) return\n      if (val.length === 2 && mm?.current !== null) {\n        mm.current.focus()\n      }\n      setState((state) => ({ ...state, hh: val }))\n    } else if (event.target.id.includes('mm')) {\n      if (Number(val) < 0 || Number(val) > 59 || val.length > 2) return\n      setState((state) => ({ ...state, mm: val }))\n    }\n  }\n\n  function padStart(part: 'hh' | 'mm') {\n    return (event: React.FocusEvent<HTMLInputElement>) => {\n      const val = event.target.value\n      if (part === 'hh') {\n        setState((state) => ({ ...state, hh: val.padStart(2, '0') }))\n      } else if (part === 'mm') {\n        setState((state) => ({ ...state, mm: val.padStart(2, '0') }))\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    if (isValidHours(state.hh, false) && isValidMinutes(state.mm)) {\n      onChange(getFormattedValue(state, false))\n    }\n  }, [state, onChange])\n\n  return (\n    <Container id={id}>\n      <TextInput\n        {...otherProps}\n        id={`${id}-hh`}\n        ref={hh}\n        error={Boolean(meta && meta.error)}\n        isDisabled={props.disabled}\n        touched={meta && meta.touched}\n        focusInput={focusInput}\n        type=\"number\"\n        placeholder={ignorePlaceHolder ? '' : 'hh'}\n        min={0}\n        max={23}\n        value={state.hh}\n        onChange={change}\n        onBlur={padStart('hh')}\n        onWheel={(event: React.WheelEvent<HTMLInputElement>) => {\n          event.currentTarget.blur()\n        }}\n      />\n      <TextInput\n        {...otherProps}\n        id={`${id}-mm`}\n        ref={mm}\n        error={Boolean(meta && meta.error)}\n        isDisabled={props.disabled}\n        touched={meta && meta.touched}\n        focusInput={focusInput}\n        type=\"number\"\n        placeholder={ignorePlaceHolder ? '' : 'mm'}\n        min={0}\n        max={59}\n        value={state.mm}\n        onChange={change}\n        onBlur={padStart('mm')}\n        onWheel={(event: React.WheelEvent<HTMLInputElement>) => {\n          event.currentTarget.blur()\n        }}\n      />\n    </Container>\n  )\n}",
      "startLine": 217,
      "endLine": 333,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@234-240",
      "type": "function_declaration",
      "name": "getInitialState",
      "text": "function getInitialState(time: string): IState {\n      const dateSegmentVals = time.split(':')\n      return {\n        hh: dateSegmentVals[0],\n        mm: dateSegmentVals[1]\n      }\n    }",
      "startLine": 234,
      "endLine": 240,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@260-272",
      "type": "function_declaration",
      "name": "change",
      "text": "function change(event: React.ChangeEvent<HTMLInputElement>) {\n    const val = event.target.value\n    if (event.target.id.includes('hh')) {\n      if (Number(val) < 0 || Number(val) > 23) return\n      if (val.length === 2 && mm?.current !== null) {\n        mm.current.focus()\n      }\n      setState((state) => ({ ...state, hh: val }))\n    } else if (event.target.id.includes('mm')) {\n      if (Number(val) < 0 || Number(val) > 59 || val.length > 2) return\n      setState((state) => ({ ...state, mm: val }))\n    }\n  }",
      "startLine": 260,
      "endLine": 272,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@274-283",
      "type": "function_declaration",
      "name": "padStart",
      "text": "function padStart(part: 'hh' | 'mm') {\n    return (event: React.FocusEvent<HTMLInputElement>) => {\n      const val = event.target.value\n      if (part === 'hh') {\n        setState((state) => ({ ...state, hh: val.padStart(2, '0') }))\n      } else if (part === 'mm') {\n        setState((state) => ({ ...state, mm: val.padStart(2, '0') }))\n      }\n    }\n  }",
      "startLine": 274,
      "endLine": 283,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@335-341",
      "type": "function_declaration",
      "name": "TimeField",
      "text": "function TimeField(props: ITimeFieldProps) {\n  return props.use12HourFormat ? (\n    <TimeInput12 {...props} />\n  ) : (\n    <TimeInput24 {...props} />\n  )\n}",
      "startLine": 335,
      "endLine": 341,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/TimeField/TimeField.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@18-33",
      "type": "function_declaration",
      "name": "useToastVisibility",
      "text": "function useToastVisibility({\n  duration,\n  onClose\n}: ToastVisibilityProps) {\n  useEffect(() => {\n    if (duration === null) {\n      return\n    }\n\n    const timer = setTimeout(() => {\n      onClose?.()\n    }, duration)\n\n    return () => clearTimeout(timer)\n  }, [duration, onClose])\n}",
      "startLine": 18,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Toast/useToastVisibility.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@44-47",
      "type": "method_definition",
      "name": "if",
      "text": "if (item && item.tabIndex === 0 && !itemRefs.current.includes(item)) {\n      itemRefs.current.push(item)\n      if (itemRefs.current.length === 1) itemRefs.current[0]?.focus()\n    }",
      "startLine": 44,
      "endLine": 47,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Dropdown/DropdownContext.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@182-184",
      "type": "method_definition",
      "name": "if",
      "text": "if (event.newState === 'open') {\n        setFocusedIndex(0)\n      }",
      "startLine": 182,
      "endLine": 184,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 19,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/Dropdown/Dropdown.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@132-134",
      "type": "method_definition",
      "name": "if",
      "text": "if (event.key === 'Enter') {\n      event.preventDefault()\n    }",
      "startLine": 132,
      "endLine": 134,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/LocationSearch/LocationSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "method_definition@215-217",
      "type": "method_definition",
      "name": "if",
      "text": "if (this.props.searchHandler) {\n      this.props.searchHandler(item)\n    }",
      "startLine": 215,
      "endLine": 217,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 17,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/LocationSearch/LocationSearch.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@146-191",
      "type": "function_declaration",
      "name": "ListViewItemSimplified",
      "text": "function ListViewItemSimplified({\n  image,\n  label,\n  value,\n  className,\n  actions,\n  compactLabel\n}: IListViewItemSimplifiedProps) {\n  return (\n    <React.Fragment>\n      {image && (\n        <ImageContainer className={className} data-test-id=\"list-view-image\">\n          {image}\n        </ImageContainer>\n      )}\n\n      <LabelValueContainer className={className}>\n        <LabelContainer\n          data-test-id=\"list-view-label\"\n          compactLabel={compactLabel}\n        >\n          {label}\n        </LabelContainer>\n\n        {value && (\n          <ValueContainer\n            data-test-id=\"list-view-value\"\n            compactLabel={compactLabel}\n          >\n            {value}\n          </ValueContainer>\n        )}\n      </LabelValueContainer>\n\n      <ActionsContainer className={className} data-test-id=\"list-view-actions\">\n        {actions}\n      </ActionsContainer>\n      <MobileContainer className={className} data-test-id=\"list-view-mobile\">\n        {image && <MobileImageContainer>{image}</MobileImageContainer>}\n        <MobileLabelContainer>{label}</MobileLabelContainer>\n        <MobileActionsContainer>{actions}</MobileActionsContainer>\n        {value && <MobileValueContainer>{value}</MobileValueContainer>}\n      </MobileContainer>\n    </React.Fragment>\n  )\n}",
      "startLine": 146,
      "endLine": 191,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/ListViewSimplified/ListViewSimplified.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@193-216",
      "type": "function_declaration",
      "name": "ListViewSimplified",
      "text": "function ListViewSimplified({\n  className,\n  bottomBorder = false,\n  children,\n  id,\n  rowHeight = 'medium'\n}: {\n  bottomBorder?: boolean\n  className?: string\n  children: React.ReactNode\n  id?: string\n  rowHeight?: IRowListViewSize\n}) {\n  return (\n    <Grid\n      id={id}\n      bottomBorder={bottomBorder}\n      rowHeight={rowHeight}\n      className={className}\n    >\n      {children}\n    </Grid>\n  )\n}",
      "startLine": 193,
      "endLine": 216,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/ListViewSimplified/ListViewSimplified.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@15-24",
      "type": "function_declaration",
      "name": "ArrowExpansionButton",
      "text": "function ArrowExpansionButton(props: IExpansionButtonProps) {\n  return (\n    <StyledButton\n      icon={() => {\n        return props.expanded ? <KeyboardArrowUp /> : <KeyboardArrowDown />\n      }}\n      {...props}\n    />\n  )\n}",
      "startLine": 15,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/buttons/ArrowExpansionButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@46-48",
      "type": "function_declaration",
      "name": "FloatingActionButton",
      "text": "function FloatingActionButton({ icon, ...otherProps }: IButtonProps) {\n  return <ButtonStyled {...otherProps}>{icon && icon()}</ButtonStyled>\n}",
      "startLine": 46,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/buttons/FloatingActionButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@61-83",
      "type": "function_declaration",
      "name": "Action",
      "text": "function Action({\n  title,\n  description,\n  disabled,\n  ...props\n}: IActionProps) {\n  return (\n    <ActionContainer\n      icon={() => (disabled ? <DisabledArrow /> : <ArrowWithGradient />)}\n      {...props}\n    >\n      <div>\n        <ActionTitle disabled={disabled}>{title}</ActionTitle>\n        {description && (\n          <ActionDescription\n            disabled={disabled}\n            dangerouslySetInnerHTML={{ __html: description }}\n          />\n        )}\n      </div>\n    </ActionContainer>\n  )\n}",
      "startLine": 61,
      "endLine": 83,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/buttons/Action.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@79-113",
      "type": "function_declaration",
      "name": "Button",
      "text": "function Button({\n  icon,\n  children,\n  align = ICON_ALIGNMENT.RIGHT,\n  ...otherProps\n}: IButtonProps) {\n  if (icon && children) {\n    return (\n      <ButtonBase {...otherProps}>\n        <Wrapper>\n          {icon && align === ICON_ALIGNMENT.LEFT && (\n            <LeftButtonIcon>{icon()}</LeftButtonIcon>\n          )}\n          <span>{children}</span>\n          {icon && align === ICON_ALIGNMENT.RIGHT && (\n            <RightButtonIcon>{icon()}</RightButtonIcon>\n          )}\n        </Wrapper>\n      </ButtonBase>\n    )\n  } else if (icon && !children) {\n    return (\n      <ButtonBase {...otherProps}>\n        {' '}\n        <IconOnly>{icon()}</IconOnly>\n      </ButtonBase>\n    )\n  } else {\n    return (\n      <ButtonBase {...otherProps}>\n        <CenterWrapper>{children}</CenterWrapper>\n      </ButtonBase>\n    )\n  }\n}",
      "startLine": 79,
      "endLine": 113,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/buttons/TertiaryButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@55-90",
      "type": "function_declaration",
      "name": "Button",
      "text": "function Button({\n  icon,\n  children,\n  align = ICON_ALIGNMENT.RIGHT,\n  size = 'large',\n  ...otherProps\n}: IButtonProps) {\n  if (icon && children) {\n    return (\n      <ButtonBase size={size} {...otherProps}>\n        <Wrapper>\n          {icon && align === ICON_ALIGNMENT.LEFT && (\n            <LeftButtonIcon>{icon()}</LeftButtonIcon>\n          )}\n          {children}\n          {icon && align === ICON_ALIGNMENT.RIGHT && (\n            <RightButtonIcon>{icon()}</RightButtonIcon>\n          )}\n        </Wrapper>\n      </ButtonBase>\n    )\n  } else if (icon && !children) {\n    return (\n      <ButtonBase size={size} {...otherProps}>\n        {' '}\n        <IconOnly>{icon()}</IconOnly>\n      </ButtonBase>\n    )\n  } else {\n    return (\n      <ButtonBase size={size} {...otherProps}>\n        <CenterWrapper>{children}</CenterWrapper>\n      </ButtonBase>\n    )\n  }\n}",
      "startLine": 55,
      "endLine": 90,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/buttons/Button.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@50-59",
      "type": "function_declaration",
      "name": "ExpansionButton",
      "text": "function ExpansionButton(props: IExpansionButtonProps) {\n  return (\n    <StyledButton\n      icon={() => {\n        return props.expanded ? <MinusTransparent /> : <PlusTransparent />\n      }}\n      {...props}\n    />\n  )\n}",
      "startLine": 50,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/buttons/ExpansionButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@75-85",
      "type": "function_declaration",
      "name": "CircleButton",
      "text": "function CircleButton({\n  size = 'large',\n  children,\n  ...props\n}: ICircleButtonProps) {\n  return (\n    <Button size={size} {...props}>\n      {children}\n    </Button>\n  )\n}",
      "startLine": 75,
      "endLine": 85,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/components/src/buttons/CircleButton.tsx",
      "language": "tsx"
    },
    {
      "id": "function_declaration@43-45",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n  mongoose.disconnect()\n}",
      "startLine": 43,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@47-49",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n  return connect()\n}",
      "startLine": 47,
      "endLine": 49,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-106",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  const server = new Hapi.Server({\n    host: HOST,\n    port: PORT,\n    routes: {\n      cors: { origin: ['*'] },\n      response: {\n        failAction: async (req, _2, err: Boom) => {\n          if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`Response validationError: ${err.message}`)\n            throw badRequest(`Invalid response payload returned from handler`)\n          } else {\n            // During development, log and respond with the full error.\n            logger.error(\n              `${req.path} response has a validation error: ${err.message}`\n            )\n            throw err\n          }\n        }\n      },\n      validate: {\n        failAction: async (_, _2, err: Boom) => {\n          if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`ValidationError: ${err.message}`)\n            throw badRequest(`Invalid request payload input`)\n          } else {\n            // During development, log and respond with the full error.\n            logger.error(err.message)\n            throw err\n          }\n        }\n      },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n\n  await server.register(getPlugins())\n\n  server.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:user-mgnt-user'\n    },\n    validate: () => ({\n      isValid: true\n    })\n  })\n\n  server.auth.default('jwt')\n\n  const routes = getRoutes()\n  server.route(routes)\n\n  server.ext({\n    type: 'onRequest',\n    method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }\n  })\n\n  async function start() {\n    await server.start()\n    await database.start()\n    server.log('info', `server started on ${HOST}:${PORT}`)\n  }\n\n  async function stop() {\n    await server.stop()\n    await database.stop()\n    server.log('info', 'server stopped')\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 28,
      "endLine": 106,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@36-40",
      "type": "method_definition",
      "name": "if",
      "text": "if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`Response validationError: ${err.message}`)\n            throw badRequest(`Invalid response payload returned from handler`)\n          }",
      "startLine": 36,
      "endLine": 40,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 17,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@51-55",
      "type": "method_definition",
      "name": "if",
      "text": "if (process.env.NODE_ENV === 'production') {\n            // In prod, log a limited error message and throw the default Bad Request error.\n            logger.error(`ValidationError: ${err.message}`)\n            throw badRequest(`Invalid request payload input`)\n          }",
      "startLine": 51,
      "endLine": 55,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@87-90",
      "type": "method_definition",
      "name": "method",
      "text": "method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }",
      "startLine": 87,
      "endLine": 90,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@93-97",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    await server.start()\n    await database.start()\n    server.log('info', `server started on ${HOST}:${PORT}`)\n  }",
      "startLine": 93,
      "endLine": 97,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@99-103",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    await database.stop()\n    server.log('info', 'server stopped')\n  }",
      "startLine": 99,
      "endLine": 103,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-39",
      "type": "function_declaration",
      "name": "hasDemoScope",
      "text": "function hasDemoScope(request: Hapi.Request): boolean {\n  return hasScope(request, 'demo')\n}",
      "startLine": 37,
      "endLine": 39,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/utils/userUtils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-30",
      "type": "function_declaration",
      "name": "resolveLocationChildren",
      "text": "async function resolveLocationChildren(locationId: UUID) {\n  const response = await fetch(FETCH_ALL_LOCATION_CHILDREN(locationId))\n  if (!response.ok) {\n    throw new Error(\n      \"Couldn't fetch the children of the location from config: \" +\n        (await response.text())\n    )\n  }\n\n  const locations = (await response.json()) as Array<SavedLocation>\n  return locations.map((location) => location.id)\n}",
      "startLine": 19,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/utils/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-34",
      "type": "function_declaration",
      "name": "generateRandomPassword",
      "text": "function generateRandomPassword(demoUser?: boolean) {\n  if (!!demoUser) {\n    return 'test'\n  }\n\n  const length = 6\n  const charset =\n    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n\n  let randomPassword = ''\n  for (let i = 0; i < length; i += 1) {\n    randomPassword += charset.charAt(Math.floor(Math.random() * charset.length))\n  }\n\n  return randomPassword\n}",
      "startLine": 19,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/utils/hash.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@41-46",
      "type": "function_declaration",
      "name": "generateOldHash",
      "text": "function generateOldHash(content: string, salt: string): string {\n  const hash = createHash('sha512')\n  hash.update(salt)\n  hash.update(content)\n  return hash.digest('hex')\n}",
      "startLine": 41,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/utils/hash.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@48-50",
      "type": "function_declaration",
      "name": "generateHash",
      "text": "function generateHash(content: string, salt: string): string {\n  return bcrypt.hashSync(content, salt)\n}",
      "startLine": 48,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/utils/hash.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@52-58",
      "type": "function_declaration",
      "name": "generateSaltedHash",
      "text": "function generateSaltedHash(password: string): ISaltedHash {\n  const salt = bcrypt.genSaltSync(10)\n  return {\n    hash: generateHash(password, salt),\n    salt\n  }\n}",
      "startLine": 52,
      "endLine": 58,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/utils/hash.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-57",
      "type": "function_declaration",
      "name": "countUsersByLocation",
      "text": "async function countUsersByLocation(locationId: UUID | undefined) {\n  // For the whole country\n  const roles = await fetchJSON<Roles>(\n    joinURL(env.COUNTRY_CONFIG_URL, '/roles')\n  )\n  const registrarRoles = roles\n    .filter((role) => role.scopes.includes(SCOPES.RECORD_REGISTER))\n    .map((role) => role.id)\n  if (!locationId) {\n    const resArray = await User.aggregate([\n      {\n        $match: {\n          role: { $in: registrarRoles }\n        }\n      },\n      { $count: 'registrars' }\n    ])\n    return resArray[0] ?? { registrars: 0 }\n  }\n\n  const locationChildren = await resolveLocationChildren(locationId)\n\n  const resArray = await User.aggregate([\n    {\n      $match: {\n        primaryOfficeId: { $in: locationChildren },\n        role: { $in: registrarRoles }\n      }\n    },\n    {\n      $group: { _id: '$primaryOfficeId', registrars: { $addToSet: '$_id' } }\n    },\n    {\n      $project: {\n        _id: 0,\n        registrars: { $size: '$registrars' } // Count the number of unique user ids collected in registrars\n      }\n    }\n  ])\n\n  return resArray[0] ?? { registrars: 0 }\n}",
      "startLine": 16,
      "endLine": 57,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/countUsersByLocation/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-22",
      "type": "function_declaration",
      "name": "countUsersByLocationHandler",
      "text": "async function countUsersByLocationHandler(request: Hapi.Request) {\n  const { locationId } = request.payload as Payload\n  return countUsersByLocation(locationId)\n}",
      "startLine": 19,
      "endLine": 22,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/countUsersByLocation/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-62",
      "type": "function_declaration",
      "name": "verifySecurityAnswer",
      "text": "async function verifySecurityAnswer(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IVerifySecurityAnswer\n\n  const user: IUserModel | null = await User.findById(payload.userId)\n  if (!user) {\n    logger.error(`No user details found by given userid: ${payload.userId}`)\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  const questionAnswers = user.securityQuestionAnswers || []\n\n  const isCorrect = questionAnswers.some(\n    (securityQNA) =>\n      securityQNA.questionKey === payload.questionKey &&\n      generateHash(payload.answer.toLowerCase(), user.salt) ===\n        securityQNA.answerHash\n  )\n\n  if (\n    !user.securityQuestionAnswers ||\n    !isNonEmptyArray(user.securityQuestionAnswers)\n  ) {\n    logger.error(`Unable to get security questions for user: ${payload.userId}`)\n    throw conflict(\"User doesn't have security questions\")\n  }\n\n  return {\n    matched: isCorrect,\n    questionKey: isCorrect\n      ? payload.questionKey\n      : getRandomQuestionKey(user.securityQuestionAnswers, payload.questionKey)\n  }\n}",
      "startLine": 26,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/verifySecurityAnswer/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-72",
      "type": "function_declaration",
      "name": "changePhoneHandler",
      "text": "async function changePhoneHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userUpdateData = request.payload as IChangePasswordPayload\n  const user: IUserModel | null = await User.findById(userUpdateData.userId)\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n  if (!user) {\n    logger.error(\n      `No user details found by given userid: ${userUpdateData.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  if (userUpdateData.phoneNumber) {\n    if (user.status !== statuses.ACTIVE) {\n      logger.error(\n        `User is not in active state for given userid: ${userUpdateData.userId}`\n      )\n      // Don't return a 404 as this gives away that this user account exists\n      throw unauthorized()\n    }\n    user.mobile = userUpdateData.phoneNumber\n  }\n\n  try {\n    await User.update({ _id: user._id }, user)\n  } catch (err) {\n    // return 400 if there is a validation error when updating to mongo\n    return h.response(err.message).code(400)\n  }\n  try {\n    await postUserActionToMetrics(\n      'PHONE_NUMBER_CHANGED',\n      request.headers.authorization,\n      remoteAddress,\n      userAgent\n    )\n  } catch (err) {\n    logger.error(err)\n  }\n  return h.response().code(200)\n}",
      "startLine": 26,
      "endLine": 72,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/changePhone/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-59",
      "type": "function_declaration",
      "name": "changeAvatarHandler",
      "text": "async function changeAvatarHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userUpdateData = request.payload as IChangeAvatarPayload\n\n  const user: IUserModel | null = await User.findById(userUpdateData.userId)\n  if (!user) {\n    logger.error(\n      `No user details found by given userid: ${userUpdateData.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  if (user.status !== statuses.ACTIVE) {\n    logger.error(\n      `User is not in active state for given userid: ${userUpdateData.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  user.avatar = userUpdateData.avatar\n\n  try {\n    await User.update({ _id: user._id }, user)\n  } catch (err) {\n    logger.error(err.message)\n    // return 400 if there is a validation error when updating to mongo\n    return h.response().code(400)\n  }\n  return h.response().code(200)\n}",
      "startLine": 26,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/changeAvatar/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-72",
      "type": "function_declaration",
      "name": "changeEmailHandler",
      "text": "async function changeEmailHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userUpdateData = request.payload as IChangeEmailPayload\n  const user: IUserModel | null = await User.findById(userUpdateData.userId)\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n  if (!user) {\n    logger.error(\n      `No user details found by given userid: ${userUpdateData.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  if (userUpdateData.email) {\n    if (user.status !== statuses.ACTIVE) {\n      logger.error(\n        `User is not in active state for given userid: ${userUpdateData.userId}`\n      )\n      // Don't return a 404 as this gives away that this user account exists\n      throw unauthorized()\n    }\n    user.emailForNotification = userUpdateData.email\n  }\n\n  try {\n    await User.update({ _id: user._id }, user)\n  } catch (err) {\n    // return 400 if there is a validation error when updating to mongo\n    return h.response(err.message).code(400)\n  }\n  try {\n    await postUserActionToMetrics(\n      'EMAIL_ADDRESS_CHANGED',\n      request.headers.authorization,\n      remoteAddress,\n      userAgent\n    )\n  } catch (err) {\n    logger.error(err)\n  }\n  return h.response().code(200)\n}",
      "startLine": 26,
      "endLine": 72,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/changeEmail/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-70",
      "type": "function_declaration",
      "name": "usernameReminderHandler",
      "text": "async function usernameReminderHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { userId } = request.payload as IResendUsernameSMSPayload\n\n  const user = await User.findById(userId)\n\n  if (!user) {\n    throw unauthorized()\n  }\n\n  await sendUserName(\n    user.username,\n    user.name,\n    {\n      Authorization: request.headers.authorization\n    },\n    user.mobile,\n    user.emailForNotification\n  )\n\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  const subjectPractitionerId = user.practitionerId\n\n  try {\n    const systemAdminUser: IUserModel | null = await User.findById(\n      getUserId({ Authorization: request.headers.authorization })\n    )\n    await postUserActionToMetrics(\n      'USERNAME_REMINDER_BY_ADMIN',\n      request.headers.authorization,\n      remoteAddress,\n      userAgent,\n      systemAdminUser?.practitionerId,\n      subjectPractitionerId\n    )\n  } catch (err) {\n    logger.error(err)\n  }\n\n  return h.response(user).code(200)\n}",
      "startLine": 24,
      "endLine": 70,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/usernameSMSReminderInvite/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-50",
      "type": "function_declaration",
      "name": "getUser",
      "text": "async function getUser(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { userId, practitionerId, mobile, email } =\n    request.payload as IVerifyPayload\n  let criteria = {}\n\n  if (userId) {\n    criteria = { ...criteria, _id: userId }\n  }\n  if (practitionerId) {\n    criteria = { ...criteria, practitionerId }\n  }\n  if (mobile) {\n    criteria = { ...criteria, mobile }\n  }\n  if (email) {\n    criteria = { ...criteria, emailForNotification: email }\n  }\n  const user = await User.findOne(criteria)\n\n  if (!user) {\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n  return user\n}",
      "startLine": 23,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/getUser/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@92-128",
      "type": "function_declaration",
      "name": "createSearchHandler",
      "text": "async function createSearchHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userCreateSearchPayload = request.payload as IUserCreateSearchPayload\n  const user: IUserModel | null = await User.findById(\n    userCreateSearchPayload.userId\n  )\n  const mutableUser = user?.toObject() as IUserModel\n\n  if (!mutableUser) {\n    logger.error(\n      `No user details found by given userid: ${userCreateSearchPayload.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  const modifiedPayload = {\n    searchId: uuid(),\n    ...userCreateSearchPayload\n  }\n\n  if (mutableUser.searches) {\n    mutableUser.searches.push(modifiedPayload)\n  } else {\n    mutableUser.searches = [modifiedPayload]\n  }\n\n  try {\n    await User.updateOne({ _id: mutableUser._id }, mutableUser)\n  } catch (err) {\n    // return 400 if there is a validation error when updating to mongo\n    return h.response(err.message).code(400)\n  }\n  return h.response({ searchList: mutableUser.searches }).code(201)\n}",
      "startLine": 92,
      "endLine": 128,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/userSearchRecord/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@130-158",
      "type": "function_declaration",
      "name": "removeSearchHandler",
      "text": "async function removeSearchHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userSearchRemovePayload = request.payload as IUserRemoveSearchPayload\n  const user: IUserModel | null = await User.findById(\n    userSearchRemovePayload.userId\n  )\n  if (!user || !user.searches) {\n    logger.error(\n      `No user or search details found by given userid: ${userSearchRemovePayload.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  const filteredSearchList = user.searches?.filter(\n    (searchData) => searchData.searchId !== userSearchRemovePayload.searchId\n  )\n  user.searches = filteredSearchList\n  try {\n    await User.updateOne({ _id: user._id }, user)\n  } catch (err) {\n    // return 400 if there is a validation error when updating to mongo\n    return h.response(err.message).code(400)\n  }\n\n  return h.response({ searchList: user.searches }).code(200)\n}",
      "startLine": 130,
      "endLine": 158,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/userSearchRecord/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-132",
      "type": "function_declaration",
      "name": "userAuditHandler",
      "text": "async function userAuditHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const auditUserPayload = request.payload as IAuditUserPayload\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  const user: IUserModel | null = await User.findById(auditUserPayload.userId)\n  const systemAdminUser: IUserModel | null = await User.findById(\n    getUserId({ Authorization: request.headers.authorization })\n  )\n\n  if (!user) {\n    logger.error(\n      `No user details found for requested userId: ${auditUserPayload.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  let updatedUserStatus\n  if (AUDIT_ACTION[auditUserPayload.action] === AUDIT_ACTION.REACTIVATE) {\n    updatedUserStatus = statuses.ACTIVE\n  } else if (\n    AUDIT_ACTION[auditUserPayload.action] === AUDIT_ACTION.DEACTIVATE\n  ) {\n    updatedUserStatus = statuses.DEACTIVATED\n  } else {\n    updatedUserStatus = user.status\n  }\n\n  let isCertificateActionOccur = false\n  if (\n    AUDIT_ACTION[auditUserPayload.action] === AUDIT_ACTION.CERTIFICATE_CREATED\n  ) {\n    isCertificateActionOccur = true\n  } else if (\n    AUDIT_ACTION[auditUserPayload.action] === AUDIT_ACTION.CERTIFICATE_CREATED\n  ) {\n    isCertificateActionOccur = true\n  } else if (\n    AUDIT_ACTION[auditUserPayload.action] === AUDIT_ACTION.CERTIFICATE_DELETED\n  ) {\n    isCertificateActionOccur = true\n  }\n\n  if (updatedUserStatus !== user.status || isCertificateActionOccur) {\n    user.status = updatedUserStatus\n\n    const auditData: IAuditHistory = {\n      auditedBy: auditUserPayload.auditedBy,\n      auditedOn: Date.now(),\n      action: AUDIT_ACTION[AUDIT_ACTION[auditUserPayload.action]],\n      reason: AUDIT_REASON[AUDIT_REASON[auditUserPayload.reason]],\n      comment: auditUserPayload.comment\n    }\n\n    if (user.auditHistory) {\n      user.auditHistory.push(auditData)\n    } else {\n      user.auditHistory = [auditData]\n    }\n    if (\n      AUDIT_ACTION[auditUserPayload.action] === AUDIT_ACTION.REACTIVATE ||\n      AUDIT_ACTION[auditUserPayload.action] === AUDIT_ACTION.DEACTIVATE\n    ) {\n      let action\n      if (AUDIT_ACTION[auditUserPayload.action] === AUDIT_ACTION.REACTIVATE) {\n        action = 'REACTIVATE'\n      } else {\n        action = 'DEACTIVATE'\n      }\n      const subjectPractitionerId = user.practitionerId\n      const practitionerId = systemAdminUser!.practitionerId\n\n      try {\n        await postUserActionToMetrics(\n          action,\n          request.headers.authorization,\n          remoteAddress,\n          userAgent,\n          practitionerId,\n          subjectPractitionerId\n        )\n      } catch (err) {\n        logger.error(err)\n      }\n    }\n    try {\n      await User.update({ _id: user._id }, user)\n    } catch (err) {\n      logger.error(err.message)\n      // return 400 if there is a validation error when updating to mongo\n      return h.response().code(400)\n    }\n  }\n  return h.response().code(200)\n}",
      "startLine": 32,
      "endLine": 132,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/userAudit/handler.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@35-50",
      "type": "method_definition",
      "name": "if",
      "text": "if (system) {\n    return {\n      resourceType: 'Practitioner',\n      telecom: [\n        { system: 'phone', value: user.mobile },\n        { system: 'email', value: user.emailForNotification }\n      ],\n      name: [\n        {\n          use: '',\n          family: 'SYSTEM',\n          given: ['AUTOMATED']\n        }\n      ]\n    }\n  }",
      "startLine": 35,
      "endLine": 50,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/createUser/service.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@96-114",
      "type": "method_definition",
      "name": "if",
      "text": "if (system) {\n    return {\n      resourceType: 'PractitionerRole',\n      practitioner: {\n        reference: `Practitioner/${practitionerId}`\n      },\n      code: [\n        {\n          coding: [\n            {\n              system: `http://opencrvs.org/specs/roles`,\n              code: 'AUTOMATED'\n            }\n          ]\n        }\n      ],\n      location: [{ reference: `Location/${user.primaryOfficeId}` }]\n    }\n  }",
      "startLine": 96,
      "endLine": 114,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/createUser/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@222-264",
      "type": "function_declaration",
      "name": "generateUsername",
      "text": "async function generateUsername(\n  names: IUserName[],\n  existingUserName?: string\n) {\n  const { given = [], family = '' } =\n    names.find((name) => name.use === 'en') || {}\n  const initials = given.reduce(\n    (accumulated, current) => accumulated + current.trim().charAt(0),\n    ''\n  )\n\n  let proposedUsername = `${initials}${initials === '' ? '' : '.'}${family\n    .trim()\n    .replace(/ /g, '-')}`.toLowerCase()\n\n  if (proposedUsername.length < 3) {\n    proposedUsername =\n      proposedUsername + '0'.repeat(3 - proposedUsername.length)\n  }\n\n  if (existingUserName && existingUserName === proposedUsername) {\n    return proposedUsername\n  }\n\n  try {\n    let usernameTaken = await checkUsername(proposedUsername)\n    let i = 1\n    const copyProposedName = proposedUsername\n    while (usernameTaken) {\n      if (existingUserName && existingUserName === proposedUsername) {\n        return proposedUsername\n      }\n      proposedUsername = copyProposedName + i\n      i += 1\n      usernameTaken = await checkUsername(proposedUsername)\n    }\n  } catch (err) {\n    logger.error(`Failed username generation: ${err}`)\n    throw new Error('Failed username generation')\n  }\n\n  return proposedUsername\n}",
      "startLine": 222,
      "endLine": 264,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/createUser/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@266-269",
      "type": "function_declaration",
      "name": "checkUsername",
      "text": "async function checkUsername(username: string) {\n  const user = await User.findOne({ username })\n  return !!user\n}",
      "startLine": 266,
      "endLine": 269,
      "parentType": "ERROR",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/createUser/service.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@41-43",
      "type": "method_definition",
      "name": "if",
      "text": "if (query.getQuery().username === 'je.doe') {\n        return mockUser\n      }",
      "startLine": 41,
      "endLine": 43,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/createUser/service.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@31-138",
      "type": "function_declaration",
      "name": "createUser",
      "text": "async function createUser(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const user = request.payload as IUser & { password?: string }\n  const token = request.headers.authorization\n\n  // construct Practitioner resource and save them\n  let practitionerId = null\n  let roleId = null\n  let password = null\n\n  try {\n    const signatureAttachment = user.signature && {\n      contentType: user.signature.type,\n      url: await uploadSignatureToMinio(token, user.signature),\n      creation: new Date().getTime().toString()\n    }\n\n    const practitioner = createFhirPractitioner(\n      user,\n      false,\n      signatureAttachment\n    )\n    practitionerId = await postFhir(token, practitioner)\n    if (!practitionerId) {\n      throw new Error(\n        'Practitioner resource not saved correctly, practitioner ID not returned'\n      )\n    }\n\n    const role = await createFhirPractitionerRole(user, practitionerId, false)\n    roleId = await postFhir(token, role)\n    if (!roleId) {\n      throw new Error(\n        'PractitionerRole resource not saved correctly, practitionerRole ID not returned'\n      )\n    }\n\n    user.status = user.status ?? statuses.PENDING\n\n    password = user.password ?? generateRandomPassword(hasDemoScope(request))\n\n    const { hash, salt } = generateSaltedHash(password)\n    user.salt = salt\n    user.passwordHash = hash\n\n    user.practitionerId = practitionerId\n    user.username = user.username ?? (await generateUsername(user.name))\n  } catch (err) {\n    await rollbackCreateUser(token, practitionerId, roleId)\n    logger.error(err)\n    // cause an internal server error\n    throw err\n  }\n\n  // save user in user-mgnt data store\n  let userModelObject\n  try {\n    userModelObject = await User.create(user)\n  } catch (err) {\n    logger.error(err)\n    await rollbackCreateUser(token, practitionerId, roleId)\n    if (err.code === 11000) {\n      // check if phone or email has thrown unique constraint errors\n      const errorThrowingProperty =\n        err.keyPattern && Object.keys(err.keyPattern)[0]\n      return h.response({ errorThrowingProperty }).code(403)\n    }\n    // return 400 if there is a validation error when saving to mongo\n    return h.response().code(400)\n  }\n\n  sendCredentialsNotification(\n    user.name,\n    user.username,\n    password,\n    {\n      Authorization: request.headers.authorization\n    },\n    user.mobile,\n    user.emailForNotification\n  )\n\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  try {\n    const systemAdminUser: IUserModel | null = await User.findById(\n      getUserId({ Authorization: request.headers.authorization })\n    )\n    await postUserActionToMetrics(\n      'CREATE_USER',\n      request.headers.authorization,\n      remoteAddress,\n      userAgent,\n      systemAdminUser?.practitionerId,\n      practitionerId\n    )\n  } catch (err) {\n    logger.error(err.message)\n  }\n\n  const resUser = _.omit(userModelObject.toObject(), ['passwordHash', 'salt'])\n  return h.response(resUser).code(201)\n}",
      "startLine": 31,
      "endLine": 138,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/createUser/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-64",
      "type": "function_declaration",
      "name": "resendInvite",
      "text": "async function resendInvite(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  let randomPassword = null\n  const { userId } = request.payload as IResendInvitePayload\n\n  const user = await User.findById(userId)\n\n  if (!user) {\n    throw unauthorized()\n  }\n\n  randomPassword = generateRandomPassword(hasDemoScope(request))\n  const { hash, salt } = generateSaltedHash(randomPassword)\n\n  user.passwordHash = hash\n  user.salt = salt\n  user.status = statuses.PENDING\n\n  try {\n    await User.update({ _id: user._id }, user)\n  } catch (err) {\n    return h.response().code(400)\n  }\n\n  sendCredentialsNotification(\n    user.name,\n    user.username,\n    randomPassword,\n    {\n      Authorization: request.headers.authorization\n    },\n    user.mobile,\n    user.emailForNotification\n  )\n\n  return h.response().code(200)\n}",
      "startLine": 26,
      "endLine": 64,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/resendInvite/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-90",
      "type": "function_declaration",
      "name": "verifyUserHandler",
      "text": "async function verifyUserHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { mobile, email } = request.payload as IVerifyPayload\n\n  let user: IUserModel | null\n\n  if (!email && !mobile) {\n    return badRequest()\n  }\n\n  if (mobile) {\n    user = await User.findOne({ mobile })\n  } else {\n    user = await User.findOne({ emailForNotification: email })\n  }\n\n  if (!user) {\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  if (\n    !user.securityQuestionAnswers ||\n    !isNonEmptyArray(user.securityQuestionAnswers)\n  ) {\n    throw conflict(\"User doesn't have security questions\")\n  }\n\n  const roles = await fetchJSON<Roles>(\n    joinURL(env.COUNTRY_CONFIG_URL, '/roles')\n  )\n\n  const response: IVerifyResponse = {\n    name: user.name,\n    mobile: user.mobile,\n    status: user.status,\n    securityQuestionKey: getRandomQuestionKey(user.securityQuestionAnswers),\n    id: user.id,\n    scope: roles.find((role) => role.id === user.role)?.scopes || [],\n    username: user.username,\n    email: user.emailForNotification,\n    practitionerId: user.practitionerId\n  }\n\n  return response\n}",
      "startLine": 43,
      "endLine": 90,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/verifyUser/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-17",
      "type": "function_declaration",
      "name": "getAllSystemsHandler",
      "text": "async function getAllSystemsHandler() {\n  const systems = await System.find()\n  return systems.map((system) => pickSystem(system))\n}",
      "startLine": 14,
      "endLine": 17,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/getAllSystems/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-53",
      "type": "function_declaration",
      "name": "verifyPassByIdHandler",
      "text": "async function verifyPassByIdHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { id, password } = request.payload as IVerifyPayload\n\n  const user: IUserModel | null = await User.findOne({ _id: id })\n\n  if (!user) {\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  if (generateHash(password, user.salt) !== user.passwordHash) {\n    throw unauthorized()\n  }\n\n  const response: IVerifyResponse = {\n    mobile: user.mobile,\n    status: user.status,\n    username: user.username,\n    id: user.id\n  }\n  return response\n}",
      "startLine": 29,
      "endLine": 53,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/verifyPasswordById/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-73",
      "type": "function_declaration",
      "name": "searchUsers",
      "text": "async function searchUsers(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const {\n    username,\n    mobile,\n    status,\n    primaryOfficeId,\n    locationId,\n    count,\n    skip,\n    sortOrder\n  } = request.payload as IVerifyPayload\n  let criteria: FilterQuery<IUserModel> = {}\n  if (username) {\n    criteria = { ...criteria, username }\n  }\n  if (mobile) {\n    criteria = { ...criteria, mobile }\n  }\n  if (primaryOfficeId) {\n    criteria = { ...criteria, primaryOfficeId }\n  }\n  if (locationId) {\n    const locationChildren = await resolveLocationChildren(locationId)\n    criteria = { ...criteria, primaryOfficeId: { $in: locationChildren } }\n  }\n  if (status) {\n    criteria = { ...criteria, status }\n  }\n  const userList: IUserModel[] = await User.find(criteria)\n    .populate('role')\n    .skip(skip)\n    .limit(count)\n    .sort({\n      creationDate: sortOrder\n    })\n\n  return {\n    totalItems: await User.find(criteria).count(),\n    results: userList\n  }\n}",
      "startLine": 30,
      "endLine": 73,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/searchUsers/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-40",
      "type": "function_declaration",
      "name": "getUserMobile",
      "text": "async function getUserMobile(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { userId } = request.payload as IVerifyPayload\n  const user: IUserModel | null = await User.findById(userId)\n\n  if (!user) {\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  const response: IVerifyResponse = { mobile: user.mobile }\n\n  return response\n}",
      "startLine": 25,
      "endLine": 40,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/getUserMobile/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-31",
      "type": "function_declaration",
      "name": "getEventConfigurations",
      "text": "async function getEventConfigurations(authorization: string) {\n  const url = joinURL(env.COUNTRY_CONFIG_URL, '/events')\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: authorization\n    }\n  })\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch event configurations: ${res.statusText}`)\n  }\n\n  const json = await res.json()\n  return json as EventConfig[]\n}",
      "startLine": 15,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/countryconfig.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-89",
      "type": "function_declaration",
      "name": "resetPasswordInviteHandler",
      "text": "async function resetPasswordInviteHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  let randomPassword = null\n  const { userId } = request.payload as IResendPasswordInvitePayload\n\n  const user = await User.findById(userId)\n\n  if (!user) {\n    throw unauthorized()\n  }\n\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  const subjectPractitionerId = user.practitionerId\n\n  try {\n    const systemAdminUser: IUserModel | null = await User.findById(\n      getUserId({ Authorization: request.headers.authorization })\n    )\n    await postUserActionToMetrics(\n      'PASSWORD_RESET_BY_ADMIN',\n      request.headers.authorization,\n      remoteAddress,\n      userAgent,\n      systemAdminUser?.practitionerId,\n      subjectPractitionerId\n    )\n  } catch (err) {\n    logger.error(err)\n  }\n\n  randomPassword = generateRandomPassword(hasDemoScope(request))\n  const { hash, salt } = generateSaltedHash(randomPassword)\n\n  user.passwordHash = hash\n  user.salt = salt\n  user.status = statuses.PENDING\n\n  try {\n    await User.update({ _id: user._id }, user)\n  } catch (err) {\n    return h.response().code(400)\n  }\n\n  sendPasswordNotification(\n    randomPassword,\n    {\n      Authorization: request.headers.authorization\n    },\n    user.name,\n    user.mobile,\n    user.emailForNotification\n  )\n\n  return h.response().code(200)\n}",
      "startLine": 29,
      "endLine": 89,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/resetPassword/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-53",
      "type": "function_declaration",
      "name": "getSystemIntegrationRoleScopes",
      "text": "function getSystemIntegrationRoleScopes(\n  type: SystemIntegrationRole,\n  eventIds: string[]\n): string[] {\n  const literalScopes = DEFAULT_SYSTEM_INTEGRATION_ROLE_SCOPES[type]\n\n  const configurableScopes =\n    DEFAULT_SYSTEM_INTEGRATION_ROLE_CONFIGURABLE_SCOPES[type].map((scope) =>\n      stringifyScope({\n        type: scope,\n        options: { event: eventIds }\n      })\n    )\n\n  return [...literalScopes, ...configurableScopes]\n}",
      "startLine": 38,
      "endLine": 53,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/scopes.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@52-183",
      "type": "function_declaration",
      "name": "registerSystem",
      "text": "async function registerSystem(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IRegisterSystemPayload\n  const { name, type, integratingSystemType } = payload\n  let { settings } = payload\n\n  try {\n    if (type === types.WEBHOOK && !settings) {\n      logger.error('Webhook payloads are required !')\n      return h.response('Webhook payloads are required !').code(400)\n    }\n\n    if (type === types.RECORD_SEARCH && !settings) {\n      settings = {\n        dailyQuota: RECORD_SEARCH_QUOTA,\n        webhook: []\n      }\n    }\n\n    const authorization = request.headers.authorization as string\n    const token = getTokenPayload(authorization.split(' ')[1])\n    const userId = token.sub\n    const systemAdminUser = await User.findById(userId)\n    const existingSystem = await System.findOne({ type: type })\n\n    if (!systemAdminUser || systemAdminUser.status !== statuses.ACTIVE) {\n      logger.error('active system admin user details cannot be found')\n      throw unauthorized()\n    }\n\n    if (existingSystem && existingSystem.type === types.NATIONAL_ID) {\n      throw new Error('System with NATIONAL_ID already exists !')\n    }\n\n    const eventConfigurations = await getEventConfigurations(authorization)\n    const eventIds = eventConfigurations.map((eventConfig) => eventConfig.id)\n    const systemScopes = getSystemIntegrationRoleScopes(type, eventIds)\n\n    if (!systemScopes) {\n      logger.error('scope doesnt exist')\n      return h.response().code(400)\n    }\n\n    if (\n      (process.env.NODE_ENV === 'development' || QA_ENV) &&\n      !systemScopes.includes('demo')\n    ) {\n      systemScopes.push('demo')\n    }\n\n    const client_id = uuid()\n    const clientSecret = uuid()\n    const sha_secret = uuid()\n    const { hash, salt } = generateSaltedHash(clientSecret)\n\n    const practitioner = createFhirPractitioner(systemAdminUser, true)\n    const practitionerId = await postFhir(authorization, practitioner)\n    if (!practitionerId) {\n      throw new Error(\n        'Practitioner resource not saved correctly, practitioner ID not returned'\n      )\n    }\n\n    const role = await createFhirPractitionerRole(\n      systemAdminUser,\n      practitionerId,\n      true\n    )\n    const roleId = await postFhir(authorization, role)\n    if (!roleId) {\n      throw new Error(\n        'PractitionerRole resource not saved correctly, practitionerRole ID not returned'\n      )\n    }\n\n    if (type === types.WEBHOOK || type === types.RECORD_SEARCH) {\n      const systemDetails = {\n        client_id,\n        name: name || systemAdminUser.username,\n        createdBy: userId,\n        username: systemAdminUser.username,\n        status: statuses.ACTIVE,\n        scope: systemScopes,\n        practitionerId,\n        secretHash: hash,\n        salt,\n        sha_secret,\n        settings,\n        type\n      }\n      const newSystem = await System.create(systemDetails)\n\n      return h\n        .response({\n          // NOTE! Client secret is visible for only this response and then forever gone\n          clientSecret,\n          system: pickSystem(newSystem)\n        })\n        .code(201)\n    }\n\n    const systemDetails = {\n      client_id,\n      name: name || systemAdminUser.username,\n      createdBy: userId,\n      username: systemAdminUser.username,\n      status: statuses.ACTIVE,\n      scope: systemScopes,\n      practitionerId,\n      secretHash: hash,\n      salt,\n      sha_secret,\n      type,\n      integratingSystemType\n    }\n    const newSystem = await System.create(systemDetails)\n\n    return h\n      .response({\n        // NOTE! Client secret is visible for only this response and then forever gone\n        clientSecret,\n        system: pickSystem(newSystem)\n      })\n      .code(201)\n  } catch (err) {\n    logger.error(err)\n    // return 400 if there is a validation error when saving to mongo\n    return h.response().code(400)\n  }\n}",
      "startLine": 52,
      "endLine": 183,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@189-228",
      "type": "function_declaration",
      "name": "deactivateSystem",
      "text": "async function deactivateSystem(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const token: ITokenPayload = getTokenPayload(\n      request.headers.authorization.split(' ')[1]\n    )\n    const userId = token.sub\n    const systemAdminUser = await User.findById(userId)\n    if (!systemAdminUser || systemAdminUser.status !== statuses.ACTIVE) {\n      logger.error('Active system admin user details cannot be found')\n      throw unauthorized()\n    }\n\n    const { clientId } = request.payload as SystemClientIdPayload\n\n    const system = await System.findOne({ client_id: clientId })\n    if (!system) {\n      logger.error(\n        `No system details found for requested client_id: ${clientId}`\n      )\n      throw unauthorized()\n    }\n    system.status = statuses.DEACTIVATED\n\n    const newSystem = await System.findOneAndUpdate(\n      { _id: system._id },\n      system,\n      {\n        returnDocument: 'after'\n      }\n    )\n\n    return h.response(pickSystem(newSystem!)).code(200)\n  } catch (err) {\n    logger.error(err)\n    return h.response().code(400)\n  }\n}",
      "startLine": 189,
      "endLine": 228,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@230-267",
      "type": "function_declaration",
      "name": "reactivateSystem",
      "text": "async function reactivateSystem(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const token = getTokenPayload(request.headers.authorization.split(' ')[1])\n    const userId = token.sub\n    const systemAdminUser = await User.findById(userId)\n    if (!systemAdminUser || systemAdminUser.status !== statuses.ACTIVE) {\n      logger.error('active system admin user details cannot be found')\n      throw unauthorized()\n    }\n\n    const { clientId } = request.payload as SystemClientIdPayload\n\n    const system = await System.findOne({ client_id: clientId })\n    if (!system) {\n      logger.error(\n        `No system details found for requested client_id: ${clientId}`\n      )\n      throw unauthorized()\n    }\n    system.status = statuses.ACTIVE\n\n    const newSystem = await System.findOneAndUpdate(\n      { _id: system._id },\n      system,\n      {\n        returnDocument: 'after'\n      }\n    )\n\n    return h.response(pickSystem(newSystem!)).code(200)\n  } catch (err) {\n    logger.error(err)\n    return h.response().code(400)\n  }\n}",
      "startLine": 230,
      "endLine": 267,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@280-301",
      "type": "function_declaration",
      "name": "verifySystemHandler",
      "text": "async function verifySystemHandler(\n  request: Hapi.Request,\n  _: Hapi.ResponseToolkit\n): Promise<IVerifyResponse> {\n  const { client_id, client_secret } = request.payload as IVerifyPayload\n  const system = await System.findOne({ client_id })\n\n  if (!system) {\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  if (generateHash(client_secret, system.salt) !== system.secretHash) {\n    throw unauthorized()\n  }\n\n  return {\n    scope: system.scope,\n    status: system.status,\n    id: system.id\n  }\n}",
      "startLine": 280,
      "endLine": 301,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@319-351",
      "type": "function_declaration",
      "name": "getSystemHandler",
      "text": "async function getSystemHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { systemId, clientId } = request.payload as IGetSystemPayload\n  let criteria = {}\n  if (systemId) {\n    criteria = { ...criteria, _id: systemId }\n  }\n  if (clientId) {\n    criteria = { ...criteria, client_id: clientId }\n  }\n\n  const system = await System.findOne(criteria)\n\n  if (!system) {\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n  const systemName = system.name\n  return {\n    name: systemName || system.createdBy,\n    createdBy: system.createdBy,\n    client_id: system.client_id,\n    username: system.username,\n    status: system.status,\n    scope: system.scope,\n    sha_secret: system.sha_secret,\n    practitionerId: system.practitionerId,\n    type: system.type,\n    settings: system.settings\n  }\n}",
      "startLine": 319,
      "endLine": 351,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@411-438",
      "type": "function_declaration",
      "name": "updatePermissions",
      "text": "async function updatePermissions(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const { clientId, webhook } = request.payload as IUpdateSystemPayload\n\n    const existingSystem = await System.findOne({ client_id: clientId })\n\n    if (!existingSystem) {\n      logger.error('No system client is found !')\n      return h.response('No system client is found').code(404)\n    }\n    existingSystem.settings.webhook = webhook\n    const newSystem = await System.findOneAndUpdate(\n      { client_id: clientId },\n      existingSystem,\n      {\n        new: true\n      }\n    )\n\n    return h.response(pickSystem(newSystem!)).code(200)\n  } catch (err) {\n    logger.error(err)\n    return h.response(err.message).code(400)\n  }\n}",
      "startLine": 411,
      "endLine": 438,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@455-491",
      "type": "function_declaration",
      "name": "refreshSystemSecretHandler",
      "text": "async function refreshSystemSecretHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const { clientId } = request.payload as SystemClientIdPayload\n\n    const systemUser = await System.findOne({ client_id: clientId })\n\n    if (!systemUser) {\n      logger.error(`No user details found by given clientId: ${clientId}`)\n      throw unauthorized()\n    }\n\n    const client_secret = uuid()\n    const { hash, salt } = generateSaltedHash(client_secret)\n\n    systemUser.salt = salt\n    systemUser.secretHash = hash\n\n    const newSystem = await System.findOneAndUpdate(\n      { client_id: clientId },\n      systemUser,\n      {\n        new: true\n      }\n    )\n    return h\n      .response({\n        clientSecret: client_secret,\n        system: pickSystem(newSystem!)\n      })\n      .code(200)\n  } catch (e) {\n    return h.response(e.message).code(400)\n  }\n}",
      "startLine": 455,
      "endLine": 491,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@497-516",
      "type": "function_declaration",
      "name": "deleteSystem",
      "text": "async function deleteSystem(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const { clientId } = request.payload as SystemClientIdPayload\n\n    const system = await System.findOneAndDelete({ client_id: clientId })\n\n    if (system) {\n      logger.info(`System has been deleted by clientId ${clientId}`)\n      return h.response(pickSystem(system)).code(200)\n    }\n\n    return h.response(`No system found by clientId: ${clientId}`).code(404)\n  } catch (e) {\n    logger.info(e.message)\n    return h.response(e.message).code(400)\n  }\n}",
      "startLine": 497,
      "endLine": 516,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/system/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-73",
      "type": "function_declaration",
      "name": "activateUser",
      "text": "async function activateUser(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userUpdateData = request.payload as IActivateUserPayload\n\n  const user: IUserModel | null = await User.findById(userUpdateData.userId)\n  if (!user) {\n    logger.error(\n      `No user details found by given userid: ${userUpdateData.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n  if (user.status !== statuses.PENDING) {\n    logger.error(\n      `User is not in pending state for given userid: ${userUpdateData.userId}`\n    )\n    // Don't return a 404 as this gives away that this user account exists\n    throw unauthorized()\n  }\n\n  const { hash, salt } = generateSaltedHash(userUpdateData.password)\n  user.salt = salt\n  user.passwordHash = hash\n  user.status = statuses.ACTIVE\n  user.securityQuestionAnswers = userUpdateData.securityQNAs.map(\n    (securityQNA) => {\n      return {\n        questionKey: securityQNA.questionKey,\n        answerHash: generateHash(securityQNA.answer.toLowerCase(), salt)\n      }\n    }\n  )\n\n  try {\n    await User.update({ _id: user._id }, user)\n  } catch (err) {\n    logger.error(err.message)\n    // return 400 if there is a validation error when updating to mongo\n    return h.response().code(400)\n  }\n  return h.response({ userId: user._id }).code(201)\n}",
      "startLine": 30,
      "endLine": 73,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/activateUser/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-93",
      "type": "function_declaration",
      "name": "changePasswordHandler",
      "text": "async function changePasswordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userUpdateData = request.payload as IChangePasswordPayload\n  const user: IUserModel | null = await User.findById(userUpdateData.userId)\n\n  if (!user) {\n    logger.error(\n      `No user details found by given userid: ${userUpdateData.userId}`\n    )\n    throw unauthorized()\n  }\n  if (userUpdateData.existingPassword) {\n    if (user.status !== statuses.ACTIVE) {\n      logger.error(\n        `User is not in active state for given userid: ${userUpdateData.userId}`\n      )\n      // Don't return a 404 as this gives away that this user account exists\n      throw unauthorized()\n    }\n    if (\n      generateHash(userUpdateData.existingPassword, user.salt) !==\n      user.passwordHash\n    ) {\n      logger.error(\n        `Password didn't match for given userid: ${userUpdateData.userId}`\n      )\n      // Don't return a 404 as this gives away that this user account exists\n      throw unauthorized()\n    }\n  }\n\n  user.passwordHash = generateHash(userUpdateData.password, user.salt)\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  try {\n    await User.updateOne({ _id: user._id }, user)\n  } catch (err) {\n    logger.error(err.message)\n    // return 400 if there is a validation error when updating to mongo\n    return h.response().code(400)\n  }\n  try {\n    if (!request.headers.authorization) {\n      await postUserActionToMetrics(\n        'PASSWORD_RESET',\n        request.headers.authorization,\n        remoteAddress,\n        userAgent,\n        user.practitionerId\n      )\n    } else {\n      await postUserActionToMetrics(\n        'PASSWORD_CHANGED',\n        request.headers.authorization,\n        remoteAddress,\n        userAgent\n      )\n    }\n  } catch (err) {\n    logger.error(err)\n  }\n  return h.response().code(200)\n}",
      "startLine": 26,
      "endLine": 93,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/changePassword/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-194",
      "type": "function_declaration",
      "name": "updateUser",
      "text": "async function updateUser(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const user = request.payload as IUser & { id: string }\n  const token = request.headers.authorization\n  const existingUser: IUserModel | null = await User.findOne({ _id: user.id })\n\n  if (!existingUser) {\n    throw new Error(`No user found by given id: ${user.id}`)\n  }\n  const existingPractitioner = (await getFromFhir(\n    token,\n    `/Practitioner/${existingUser.practitionerId}`\n  )) satisfies Practitioner\n  const existingPractitionerRoleBundle: fhir.Bundle = await getFromFhir(\n    token,\n    `/PractitionerRole?practitioner=${existingUser.practitionerId}`\n  )\n  let existingPractitionerRole: fhir.PractitionerRole\n  if (\n    !existingPractitionerRoleBundle ||\n    !existingPractitionerRoleBundle.entry ||\n    !existingPractitionerRoleBundle.entry[0] ||\n    !existingPractitionerRoleBundle.entry[0].resource\n  ) {\n    throw new Error(\n      `No PractitionerRole by given id in bundle: ${existingUser.practitionerId}`\n    )\n  } else {\n    existingPractitionerRole = existingPractitionerRoleBundle.entry[0]\n      .resource as fhir.PractitionerRole\n  }\n  // Update existing user's fields\n  existingUser.name = user.name\n  existingUser.email = user.email\n  existingUser.mobile = user.mobile\n  existingUser.emailForNotification = user.emailForNotification\n  existingUser.signature = user.signature\n  existingUser.localRegistrar = user.localRegistrar\n  existingUser.device = user.device\n  existingUser.role = user.role\n\n  if (existingUser.primaryOfficeId !== user.primaryOfficeId) {\n    if (request.auth.credentials?.scope?.includes(SCOPES.CONFIG_UPDATE_ALL)) {\n      existingUser.primaryOfficeId = user.primaryOfficeId\n    } else {\n      throw new Error('Location can not be changed by this user')\n    }\n  }\n\n  const existingSignatureAttachment = findExtension(\n    `${OPENCRVS_SPECIFICATION_URL}extension/employee-signature`,\n    existingPractitioner.extension || []\n  )?.valueAttachment\n\n  const signatureAttachment =\n    (user.signature &&\n      isBase64FileString(user.signature.data) && {\n        contentType: user.signature.type,\n        url: await uploadSignatureToMinio(token, user.signature),\n        creation: new Date().getTime().toString()\n      }) ||\n    existingSignatureAttachment\n\n  const practitioner = createFhirPractitioner(\n    existingUser,\n    false,\n    signatureAttachment\n  )\n  practitioner.id = existingPractitioner.id\n\n  const practitionerId = await postFhir(token, practitioner)\n  if (!practitionerId) {\n    throw new Error(\n      'Practitioner resource not updated correctly, practitioner ID not returned'\n    )\n  }\n  const practitionerRole = await createFhirPractitionerRole(\n    existingUser,\n    existingUser.practitionerId,\n    false\n  )\n\n  practitionerRole.id = existingPractitionerRole.id\n  const practitionerRoleId = await postFhir(token, practitionerRole)\n  if (!practitionerRoleId) {\n    throw new Error(\n      'PractitionerRole resource not updated correctly, practitionerRole ID not returned'\n    )\n  }\n  // Updating user in user-mgnt db\n  let userNameChanged = false\n  try {\n    const newUserName = await generateUsername(\n      existingUser.name,\n      existingUser.username\n    )\n    if (newUserName !== existingUser.username) {\n      existingUser.username = newUserName\n      userNameChanged = true\n    }\n    if (practitionerId !== existingUser.practitionerId) {\n      existingUser.practitionerId = practitionerId\n    }\n\n    // update user in user-mgnt data store\n    await User.update({ _id: existingUser._id }, existingUser)\n  } catch (err) {\n    logger.error(err)\n    await rollbackUpdateUser(\n      token,\n      existingPractitioner,\n      existingPractitionerRole\n    )\n    if (err.code === 11000) {\n      // check if phone or email has thrown unique constraint errors\n      const errorThrowingProperty =\n        err.keyPattern && Object.keys(err.keyPattern)[0]\n      return h.response({ errorThrowingProperty }).code(403)\n    }\n    // return 400 if there is a validation error when saving to mongo\n    return h.response().code(400)\n  }\n\n  if (userNameChanged) {\n    sendUpdateUsernameNotification(\n      user.name,\n      existingUser.username,\n      {\n        Authorization: request.headers.authorization\n      },\n      user.mobile,\n      user.emailForNotification\n    )\n  }\n  const resUser = _.omit(existingUser, ['passwordHash', 'salt'])\n\n  const remoteAddress =\n    request.headers['x-real-ip'] || request.info.remoteAddress\n  const userAgent =\n    request.headers['x-real-user-agent'] || request.headers['user-agent']\n\n  try {\n    const systemAdminUser: IUserModel | null = await User.findById(\n      getUserId({ Authorization: request.headers.authorization })\n    )\n    await postUserActionToMetrics(\n      'EDIT_USER',\n      request.headers.authorization,\n      remoteAddress,\n      userAgent,\n      systemAdminUser?.practitionerId,\n      practitionerId\n    )\n  } catch (err) {\n    logger.error(err.message)\n  }\n\n  return h.response(resUser).code(201)\n}",
      "startLine": 34,
      "endLine": 194,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/updateUser/handler.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@174-176",
      "type": "method_definition",
      "name": "if",
      "text": "if (query.getQuery()._id === '12345') {\n        return mockUser\n      }",
      "startLine": 174,
      "endLine": 176,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/updateUser/handler.test.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@217-219",
      "type": "method_definition",
      "name": "if",
      "text": "if (query.getQuery()._id === '12345') {\n        return mockUser\n      }",
      "startLine": 217,
      "endLine": 219,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/updateUser/handler.test.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@324-326",
      "type": "method_definition",
      "name": "if",
      "text": "if (query.getQuery()._id === '12345') {\n        return mockUser\n      }",
      "startLine": 324,
      "endLine": 326,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/updateUser/handler.test.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@420-422",
      "type": "method_definition",
      "name": "if",
      "text": "if (query.getQuery()._id === '12345') {\n        return mockUser\n      }",
      "startLine": 420,
      "endLine": 422,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 13,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/user-mgnt/src/features/updateUser/handler.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-30",
      "type": "function_declaration",
      "name": "getEventConfigurations",
      "text": "async function getEventConfigurations(token: string) {\n  const res = await fetch(new URL('/events', env.COUNTRY_CONFIG_URL), {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  })\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch events config')\n  }\n\n  return array(EventConfig).parse(await res.json())\n}",
      "startLine": 17,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/config/config.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-41",
      "type": "function_declaration",
      "name": "findEventConfigurationById",
      "text": "async function findEventConfigurationById({\n  token,\n  eventType\n}: {\n  token: string\n  eventType: string\n}) {\n  const configurations = await getEventConfigurations(token)\n  return configurations.find((config) => config.id === eventType)\n}",
      "startLine": 32,
      "endLine": 41,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/config/config.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-57",
      "type": "function_declaration",
      "name": "getEventConfigurationById",
      "text": "async function getEventConfigurationById({\n  token,\n  eventType\n}: {\n  token: string\n  eventType: string\n}) {\n  return getOrThrow(\n    await findEventConfigurationById({\n      token,\n      eventType\n    }),\n    `No configuration found for event type: ${eventType}`\n  )\n}",
      "startLine": 43,
      "endLine": 57,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/config/config.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-19",
      "type": "function_declaration",
      "name": "getAnonymousToken",
      "text": "async function getAnonymousToken() {\n  const res = await fetch(new URL('/anonymous-token', env.AUTH_URL).toString())\n  const { token } = await res.json()\n  return token as string\n}",
      "startLine": 15,
      "endLine": 19,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/auth/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-62",
      "type": "function_declaration",
      "name": "setLocations",
      "text": "async function setLocations(incomingLocations: Array<Location>) {\n  const db = await events.getClient()\n  const currentLocations = await db\n    .collection<Location>('locations')\n    .find()\n    .toArray()\n\n  const [locationsToKeep, locationsToRemove] = _.partition(\n    currentLocations,\n    (location) =>\n      incomingLocations.some(\n        (incomingLocation) => incomingLocation.id === location.id\n      )\n  )\n\n  const [, newLocations] = _.partition(incomingLocations, (location) =>\n    locationsToKeep.some((l) => l.id === location.id)\n  )\n\n  if (locationsToRemove.length > 0) {\n    await db\n      .collection('locations')\n      .deleteMany({ id: { $in: locationsToRemove.map((l) => l.id) } })\n  }\n\n  if (newLocations.length > 0) {\n    await db.collection('locations').insertMany(newLocations)\n  }\n}",
      "startLine": 34,
      "endLine": 62,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/locations/locations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-62",
      "type": "function_declaration",
      "name": "createDraft",
      "text": "async function createDraft(\n  input: DraftInput,\n  {\n    eventId,\n    createdBy,\n    createdByRole,\n    createdAtLocation,\n    transactionId\n  }: {\n    eventId: string\n    createdBy: string\n    createdByRole: string\n    createdAtLocation: string\n    token: string\n    transactionId: string\n  }\n) {\n  const db = await events.getClient()\n  const now = new Date().toISOString()\n\n  const draft: Draft = {\n    id: getUUID(),\n    eventId: eventId,\n    createdAt: now,\n    transactionId,\n    action: {\n      ...input,\n      type: input.type,\n      createdBy,\n      createdByRole,\n      createdAt: now,\n      createdAtLocation\n    }\n  }\n\n  await db.collection<Draft>('drafts').updateOne(\n    // Match by transactionId\n    { transactionId },\n    // Update document\n    { $set: draft },\n    // Insert if not found\n    { upsert: true }\n  )\n\n  return draft\n}",
      "startLine": 17,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/drafts.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-73",
      "type": "function_declaration",
      "name": "getDraftsByUserId",
      "text": "async function getDraftsByUserId(createdBy: string) {\n  const db = await events.getClient()\n  const collection = db.collection<Draft>('drafts')\n\n  const drafts = await collection\n    .find({ 'action.createdBy': createdBy })\n    .toArray()\n\n  return drafts\n}",
      "startLine": 64,
      "endLine": 73,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/drafts.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@75-88",
      "type": "function_declaration",
      "name": "getDraftsForAction",
      "text": "async function getDraftsForAction(\n  eventId: string,\n  createdBy: string,\n  actionType: string\n) {\n  const db = await events.getClient()\n  const collection = db.collection<Draft>('drafts')\n\n  const drafts = await collection\n    .find({ eventId, 'action.createdBy': createdBy, 'action.type': actionType })\n    .toArray()\n\n  return drafts\n}",
      "startLine": 75,
      "endLine": 88,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/drafts.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@90-94",
      "type": "function_declaration",
      "name": "deleteDraftsByEventId",
      "text": "async function deleteDraftsByEventId(eventId: string) {\n  const db = await events.getClient()\n  const collection = db.collection<Draft>('drafts')\n  await collection.deleteMany({ eventId: eventId })\n}",
      "startLine": 90,
      "endLine": 94,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/drafts.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-56",
      "type": "function_declaration",
      "name": "rejectCorrection",
      "text": "async function rejectCorrection(\n  input: RejectCorrectionActionInput,\n  {\n    eventId,\n    createdBy,\n    createdByRole,\n    token,\n    createdAtLocation,\n    transactionId\n  }: {\n    eventId: string\n    createdBy: string\n    createdByRole: string\n    createdAtLocation: string\n    token: string\n    transactionId: string\n  }\n) {\n  const storedEvent = await getEventById(eventId)\n\n  const requestAction = storedEvent.actions.find(\n    (a) => a.id === input.requestId\n  )\n\n  if (!requestAction) {\n    throw new RequestNotFoundError(input.requestId)\n  }\n\n  return addAction(input, {\n    eventId,\n    createdBy,\n    createdByRole,\n    token,\n    createdAtLocation,\n    transactionId,\n    status: ActionStatus.Accepted\n  })\n}",
      "startLine": 19,
      "endLine": 56,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/actions/reject-correction.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-56",
      "type": "function_declaration",
      "name": "assignRecord",
      "text": "async function assignRecord({\n  createdBy,\n  createdByRole,\n  token,\n  createdAtLocation,\n  input\n}: {\n  createdBy: string\n  createdByRole: string\n  createdAtLocation: string\n  token: string\n  input: AssignActionInput\n}) {\n  const storedEvent = await getEventById(input.eventId)\n\n  const lastAssignmentAction = findLastAssignmentAction(storedEvent.actions)\n\n  if (lastAssignmentAction?.type === ActionType.ASSIGN) {\n    if (lastAssignmentAction.assignedTo === input.assignedTo) {\n      return storedEvent\n    }\n    throw new TRPCError({\n      code: 'CONFLICT'\n    })\n  }\n\n  return addAction(input, {\n    eventId: input.eventId,\n    createdBy,\n    createdByRole,\n    token,\n    createdAtLocation,\n    transactionId: input.transactionId,\n    status: ActionStatus.Accepted\n  })\n}",
      "startLine": 21,
      "endLine": 56,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/actions/assign.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-146",
      "type": "function_declaration",
      "name": "generateElasticsearchQuery",
      "text": "function generateElasticsearchQuery(\n  eventIndex: EncodedEventIndex,\n  configuration: ClauseOutput\n): elasticsearch.estypes.QueryDslQueryContainer | null {\n  // @TODO: When implementing deduplication revisit this. For now, we just want to use the right types for es.\n  const isPrimitiveQueryValue = (\n    value: FieldValue\n  ): value is string | number => {\n    return (\n      typeof value === 'string' ||\n      typeof value === 'number' ||\n      typeof value === 'boolean'\n    )\n  }\n\n  const matcherFieldWithoutData =\n    configuration.type !== 'and' &&\n    configuration.type !== 'or' &&\n    !eventIndex.declaration[encodeFieldId(configuration.fieldId)]\n\n  if (matcherFieldWithoutData) {\n    return null\n  }\n\n  switch (configuration.type) {\n    case 'and':\n      const clauses = configuration.clauses\n        .map((clause) => {\n          return generateElasticsearchQuery(eventIndex, clause)\n        })\n        .filter(\n          (x): x is elasticsearch.estypes.QueryDslQueryContainer => x !== null\n        )\n\n      return {\n        bool: {\n          must: clauses\n        } as elasticsearch.estypes.QueryDslBoolQuery\n      }\n    case 'or':\n      return {\n        bool: {\n          should: configuration.clauses\n            .map((clause) => generateElasticsearchQuery(eventIndex, clause))\n            .filter(\n              (x): x is elasticsearch.estypes.QueryDslQueryContainer =>\n                x !== null\n            )\n        }\n      }\n    case 'fuzzy': {\n      const encodedFieldId = encodeFieldId(configuration.fieldId)\n\n      const fieldValue = eventIndex.declaration[encodedFieldId]\n      if (!isPrimitiveQueryValue(fieldValue)) {\n        return null\n      }\n\n      return {\n        match: {\n          [declarationReference(encodedFieldId)]: {\n            query: fieldValue,\n            fuzziness: configuration.options.fuzziness,\n            boost: configuration.options.boost\n          }\n        }\n      }\n    }\n    case 'strict': {\n      const encodedFieldId = encodeFieldId(configuration.fieldId)\n      const fieldValue = eventIndex.declaration[encodedFieldId]\n      if (!isPrimitiveQueryValue(fieldValue)) {\n        return null\n      }\n\n      return {\n        match_phrase: {\n          [declarationReference(encodedFieldId)]: fieldValue.toString()\n        }\n      }\n    }\n    case 'dateRange': {\n      const encodedFieldId = encodeFieldId(configuration.fieldId)\n      const origin = encodeFieldId(configuration.options.origin)\n      return {\n        range: {\n          [declarationReference(encodedFieldId)]: {\n            // @TODO: Improve types for origin field to be sure it returns a string when accessing data\n            gte: subDays(\n              new Date(eventIndex.declaration[origin] as string),\n              configuration.options.days\n            ).toISOString(),\n            lte: addDays(\n              new Date(eventIndex.declaration[origin] as string),\n              configuration.options.days\n            ).toISOString()\n          }\n        }\n      }\n    }\n    case 'dateDistance': {\n      const encodedFieldId = encodeFieldId(configuration.fieldId)\n      const origin = encodeFieldId(configuration.options.origin)\n      return {\n        distance_feature: {\n          field: declarationReference(encodedFieldId),\n          pivot: `${configuration.options.days}d`,\n          origin: eventIndex.declaration[origin]\n        }\n      }\n    }\n  }\n}",
      "startLine": 34,
      "endLine": 146,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/deduplication/deduplication.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@148-151",
      "type": "function_declaration",
      "name": "searchForDuplicates",
      "text": "async function searchForDuplicates(\n  eventIndex: EventIndex,\n  configuration: DeduplicationConfig\n): Promise<{ score: number; event: EventIndex | undefined }",
      "startLine": 148,
      "endLine": 151,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/deduplication/deduplication.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-67",
      "type": "function_declaration",
      "name": "unassignRecord",
      "text": "async function unassignRecord(\n  input: UnassignActionInput,\n  {\n    eventId,\n    createdBy,\n    createdByRole,\n    token,\n    createdAtLocation,\n    transactionId\n  }: {\n    eventId: string\n    createdBy: string\n    createdByRole: string\n    createdAtLocation: string\n    token: string\n    transactionId: string\n  }\n) {\n  const storedEvent = await getEventById(eventId)\n  const lastAssignmentAction = findLastAssignmentAction(storedEvent.actions)\n\n  if (lastAssignmentAction?.type === ActionType.ASSIGN) {\n    if (\n      lastAssignmentAction.assignedTo !== createdBy &&\n      !inScope({ Authorization: setBearerForToken(token) }, [\n        SCOPES.RECORD_UNASSIGN_OTHERS\n      ])\n    ) {\n      throw new TRPCError({\n        code: 'FORBIDDEN'\n      })\n    }\n    return addAction(input, {\n      eventId,\n      createdBy,\n      createdByRole,\n      token,\n      createdAtLocation,\n      transactionId,\n      status: ActionStatus.Accepted\n    })\n  }\n\n  return storedEvent\n}",
      "startLine": 23,
      "endLine": 67,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/actions/unassign.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@14-21",
      "type": "class_declaration",
      "name": "RequestNotFoundError",
      "text": "class RequestNotFoundError extends TRPCError {\n  constructor(id: string) {\n    super({\n      code: 'NOT_FOUND',\n      message: `Correction request not found with ID: ${id}`\n    })\n  }\n}",
      "startLine": 14,
      "endLine": 21,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/actions/correction.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@15-20",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(id: string) {\n    super({\n      code: 'NOT_FOUND',\n      message: `Correction request not found with ID: ${id}`\n    })\n  }",
      "startLine": 15,
      "endLine": 20,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/actions/correction.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-56",
      "type": "function_declaration",
      "name": "approveCorrection",
      "text": "async function approveCorrection(\n  input: ApproveCorrectionActionInput,\n  {\n    eventId,\n    createdBy,\n    createdByRole,\n    token,\n    createdAtLocation,\n    transactionId\n  }: {\n    eventId: string\n    createdBy: string\n    createdByRole: string\n    createdAtLocation: string\n    token: string\n    transactionId: string\n  }\n) {\n  const storedEvent = await getEventById(eventId)\n\n  const requestAction = storedEvent.actions.find(\n    (a) => a.id === input.requestId\n  )\n\n  if (!requestAction) {\n    throw new RequestNotFoundError(input.requestId)\n  }\n\n  return addAction(input, {\n    eventId,\n    createdBy,\n    createdByRole,\n    token,\n    createdAtLocation,\n    transactionId,\n    status: ActionStatus.Accepted\n  })\n}",
      "startLine": 19,
      "endLine": 56,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/actions/approve-correction.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@138-192",
      "type": "function_declaration",
      "name": "findDuplicates",
      "text": "async function findDuplicates(\n  registrationComparison: Record<string, string[]>\n) {\n  const esClient = getOrCreateClient()\n  const existingComposition = Object.fromEntries(\n    Object.entries(registrationComparison).map(([key, values]) => [\n      key,\n      values[0]\n    ])\n  )\n  const newComposition = Object.fromEntries(\n    Object.entries(registrationComparison).map(([key, values]) => [\n      key,\n      values[1]\n    ])\n  )\n\n  await esClient.update({\n    index: getEventIndexName(),\n    id: getUUID(),\n    body: {\n      doc: encodeEventIndex({\n        id: getUUID(),\n        transactionId: getUUID(),\n        declaration: existingComposition\n      } as unknown as EventIndex),\n      doc_as_upsert: true\n    },\n    refresh: 'wait_for'\n  })\n\n  const results = await searchForDuplicates(\n    {\n      declaration: newComposition,\n      // Random field values that should not affect the search\n      id: getUUID(),\n      type: 'birth',\n      status: 'CREATED',\n      createdAt: '2025-01-01',\n      createdBy: 'test',\n      createdAtLocation: 'test',\n      updatedAtLocation: 'test',\n      legalStatuses: {},\n      assignedTo: 'test',\n      updatedAt: '2025-01-01',\n      updatedBy: 'test',\n      trackingId: 'TEST12',\n      updatedByUserRole: 'test',\n      flags: []\n    },\n    DeduplicationConfig.parse(LEGACY_BIRTH_DEDUPLICATION_RULES)\n  )\n\n  return results\n}",
      "startLine": 138,
      "endLine": 192,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/deduplication/deduplication.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-18",
      "type": "function_declaration",
      "name": "encodeFieldId",
      "text": "function encodeFieldId(fieldId: string) {\n  return fieldId.replaceAll('.', FIELD_ID_SEPARATOR)\n}",
      "startLine": 16,
      "endLine": 18,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-22",
      "type": "function_declaration",
      "name": "decodeFieldId",
      "text": "function decodeFieldId(fieldId: string) {\n  return fieldId.replaceAll(FIELD_ID_SEPARATOR, '.')\n}",
      "startLine": 20,
      "endLine": 22,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-37",
      "type": "function_declaration",
      "name": "encodeEventIndex",
      "text": "function encodeEventIndex(event: EventIndex): EncodedEventIndex {\n  return {\n    ...event,\n    declaration: Object.entries(event.declaration).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [encodeFieldId(key)]: value\n      }),\n      {}\n    )\n  }\n}",
      "startLine": 26,
      "endLine": 37,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@39-50",
      "type": "function_declaration",
      "name": "decodeEventIndex",
      "text": "function decodeEventIndex(event: EncodedEventIndex): EventIndex {\n  return {\n    ...event,\n    declaration: Object.entries(event.declaration).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [decodeFieldId(key)]: value\n      }),\n      {}\n    )\n  }\n}",
      "startLine": 39,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@52-54",
      "type": "function_declaration",
      "name": "declarationReference",
      "text": "function declarationReference(fieldName: string) {\n  return `declaration.${fieldName}`\n}",
      "startLine": 52,
      "endLine": 54,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@41-48",
      "type": "function_declaration",
      "name": "getEventByTransactionId",
      "text": "async function getEventByTransactionId(transactionId: string) {\n  const db = await events.getClient()\n  const collection = db.collection<EventDocument>('events')\n\n  const document = await collection.findOne({ transactionId })\n\n  return document\n}",
      "startLine": 41,
      "endLine": 48,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/events.ts",
      "language": "ts"
    },
    {
      "id": "class_declaration@49-56",
      "type": "class_declaration",
      "name": "EventNotFoundError",
      "text": "class EventNotFoundError extends TRPCError {\n  constructor(id: string) {\n    super({\n      code: 'NOT_FOUND',\n      message: `Event not found with ID: ${id}`\n    })\n  }\n}",
      "startLine": 49,
      "endLine": 56,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "class_heritage",
        "class_body"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/events.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@50-55",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(id: string) {\n    super({\n      code: 'NOT_FOUND',\n      message: `Event not found with ID: ${id}`\n    })\n  }",
      "startLine": 50,
      "endLine": 55,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 3,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/events.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@310-312",
      "type": "method_definition",
      "name": "if",
      "text": "if (!(await fileExists(file.file.filename, token))) {\n      throw new Error(`File not found: ${file.file.filename}`)\n    }",
      "startLine": 310,
      "endLine": 312,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 18,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/events.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@412-436",
      "type": "function_declaration",
      "name": "addAsyncRejectAction",
      "text": "async function addAsyncRejectAction(input: AsyncRejectActionInput) {\n  const db = await events.getClient()\n  const now = new Date().toISOString()\n  const { transactionId, eventId } = input\n\n  const action = {\n    ...input,\n    createdAt: now,\n    id: getUUID(),\n    status: ActionStatus.Rejected\n  } satisfies AsyncRejectActionDocument\n\n  await db\n    .collection<EventDocument>('events')\n    .updateOne(\n      { id: eventId, 'actions.transactionId': { $ne: transactionId } },\n      { $push: { actions: action }, $set: { updatedAt: now } }\n    )\n\n  const updatedEvent = await getEventById(eventId)\n  await indexEvent(updatedEvent)\n  await deleteDraftsByEventId(eventId)\n\n  return updatedEvent\n}",
      "startLine": 412,
      "endLine": 436,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/events/events.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-22",
      "type": "function_declaration",
      "name": "deleteFile",
      "text": "async function deleteFile(filename: string, token: string) {\n  const res = await fetch(new URL(`/files/${filename}`, env.DOCUMENTS_URL), {\n    method: 'DELETE',\n    headers: {\n      Authorization: token\n    }\n  })\n  return res.ok\n}",
      "startLine": 14,
      "endLine": 22,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/files/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@23-32",
      "type": "function_declaration",
      "name": "fileExists",
      "text": "async function fileExists(filename: string, token: string) {\n  const res = await fetch(new URL(`/files/${filename}`, env.DOCUMENTS_URL), {\n    method: 'HEAD',\n    headers: {\n      Authorization: token\n    }\n  })\n\n  return res.ok\n}",
      "startLine": 23,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/files/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@45-47",
      "type": "function_declaration",
      "name": "eventToEventIndex",
      "text": "function eventToEventIndex(event: EventDocument): EventIndex {\n  return encodeEventIndex(getCurrentEventState(event))\n}",
      "startLine": 45,
      "endLine": 47,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-66",
      "type": "function_declaration",
      "name": "ensureAlias",
      "text": "async function ensureAlias(indexName: string) {\n  const client = getOrCreateClient()\n  logger.info(`Ensuring alias for index ${indexName}`)\n  const res = await client.indices.putAlias({\n    index: indexName,\n    name: getEventAliasName()\n  })\n\n  logger.info(`Alias ${getEventAliasName()} created for index ${indexName}`)\n  logger.info(JSON.stringify(res))\n\n  return res\n}",
      "startLine": 54,
      "endLine": 66,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@68-145",
      "type": "function_declaration",
      "name": "mapFieldTypeToElasticsearch",
      "text": "function mapFieldTypeToElasticsearch(field: FieldConfig) {\n  switch (field.type) {\n    case FieldType.NUMBER:\n      return { type: 'double' }\n    case FieldType.DATE:\n      return { type: 'date' }\n    case FieldType.DATE_RANGE:\n    case FieldType.TEXT:\n    case FieldType.TEXTAREA:\n    case FieldType.SIGNATURE:\n    case FieldType.PARAGRAPH:\n    case FieldType.BULLET_LIST:\n    case FieldType.PAGE_HEADER:\n    case FieldType.EMAIL:\n      return { type: 'text' }\n    case FieldType.DIVIDER:\n    case FieldType.RADIO_GROUP:\n    case FieldType.SELECT:\n    case FieldType.COUNTRY:\n    case FieldType.CHECKBOX:\n    case FieldType.LOCATION:\n    case FieldType.ADMINISTRATIVE_AREA:\n    case FieldType.FACILITY:\n    case FieldType.OFFICE:\n    case FieldType.DATA:\n      return { type: 'keyword' }\n    case FieldType.ADDRESS:\n      const addressProperties = {\n        country: { type: 'keyword' },\n        addressType: { type: 'keyword' },\n        province: { type: 'keyword' },\n        district: { type: 'keyword' },\n        urbanOrRural: { type: 'keyword' },\n        town: { type: 'keyword' },\n        residentialArea: { type: 'keyword' },\n        street: { type: 'keyword' },\n        number: { type: 'keyword' },\n        zipCode: { type: 'keyword' },\n        village: { type: 'keyword' },\n        state: { type: 'keyword' },\n        district2: { type: 'keyword' },\n        cityOrTown: { type: 'keyword' },\n        addressLine1: { type: 'keyword' },\n        addressLine2: { type: 'keyword' },\n        addressLine3: { type: 'keyword' },\n        postcodeOrZip: { type: 'keyword' }\n      } satisfies {\n        [K in keyof Required<AllFieldsUnion>]: estypes.MappingProperty\n      }\n      return {\n        type: 'object',\n        properties: addressProperties\n      }\n    case FieldType.FILE:\n      return {\n        type: 'object',\n        properties: {\n          filename: { type: 'keyword' },\n          originalFilename: { type: 'keyword' },\n          type: { type: 'keyword' }\n        }\n      }\n    case FieldType.FILE_WITH_OPTIONS:\n      return {\n        type: 'nested',\n        properties: {\n          filename: { type: 'keyword' },\n          originalFilename: { type: 'keyword' },\n          type: { type: 'keyword' },\n          option: { type: 'keyword' }\n        }\n      }\n    default:\n      const _exhaustiveCheck: never = field\n      throw new Error(\n        `Unhandled field type: ${JSON.stringify(_exhaustiveCheck)}`\n      )\n  }",
      "startLine": 68,
      "endLine": 145,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@148-155",
      "type": "function_declaration",
      "name": "formFieldsToDataMapping",
      "text": "function formFieldsToDataMapping(fields: FieldConfig[]) {\n  return fields.reduce((acc, field) => {\n    return {\n      ...acc,\n      [encodeFieldId(field.id)]: mapFieldTypeToElasticsearch(field)\n    }\n  }, {})\n}",
      "startLine": 148,
      "endLine": 155,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@157-223",
      "type": "function_declaration",
      "name": "createIndex",
      "text": "async function createIndex(\n  indexName: string,\n  formFields: FieldConfig[]\n) {\n  const client = getOrCreateClient()\n\n  await client.indices.create({\n    index: indexName,\n    body: {\n      mappings: {\n        properties: {\n          id: { type: 'keyword' },\n          type: { type: 'keyword' },\n          status: { type: 'keyword' },\n          createdAt: { type: 'date' },\n          createdBy: { type: 'keyword' },\n          createdAtLocation: { type: 'keyword' },\n          updatedAtLocation: { type: 'keyword' },\n          updatedAt: { type: 'date' },\n          assignedTo: { type: 'keyword' },\n          updatedBy: { type: 'keyword' },\n          updatedByUserRole: { type: 'keyword' },\n          declaration: {\n            type: 'object',\n            properties: formFieldsToDataMapping(formFields)\n          },\n          trackingId: { type: 'keyword' },\n          legalStatuses: {\n            type: 'object',\n            properties: {\n              [EventStatus.DECLARED]: {\n                type: 'object',\n                properties: {\n                  createdAt: { type: 'date' },\n                  createdBy: { type: 'keyword' },\n                  createdAtLocation: { type: 'keyword' },\n                  createdByRole: { type: 'keyword' },\n                  acceptedAt: { type: 'date' }\n                } satisfies Record<\n                  keyof ActionCreationMetadata,\n                  estypes.MappingProperty\n                >\n              },\n              [EventStatus.REGISTERED]: {\n                type: 'object',\n                properties: {\n                  createdAt: { type: 'date' },\n                  createdBy: { type: 'keyword' },\n                  createdAtLocation: { type: 'keyword' },\n                  createdByRole: { type: 'keyword' },\n                  acceptedAt: { type: 'date' },\n                  registrationNumber: { type: 'keyword' }\n                } satisfies Record<\n                  keyof RegistrationCreationMetadata,\n                  estypes.MappingProperty\n                >\n              }\n            }\n          },\n          flags: { type: 'keyword' }\n        } satisfies EventIndexMapping\n      }\n    }\n  })\n\n  return ensureAlias(indexName)\n}",
      "startLine": 157,
      "endLine": 223,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@225-239",
      "type": "function_declaration",
      "name": "ensureIndexExists",
      "text": "async function ensureIndexExists(eventConfiguration: EventConfig) {\n  const esClient = getOrCreateClient()\n  const indexName = getEventIndexName(eventConfiguration.id)\n  const hasEventsIndex = await esClient.indices.exists({\n    index: indexName\n  })\n\n  if (!hasEventsIndex) {\n    logger.info(`Creating index ${indexName}`)\n    await createIndex(indexName, getDeclarationFields(eventConfiguration))\n  } else {\n    logger.info(`Index ${indexName} already exists.\\n`)\n  }\n  return ensureAlias(indexName)\n}",
      "startLine": 225,
      "endLine": 239,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@249-283",
      "type": "function_declaration",
      "name": "indexAllEvents",
      "text": "async function indexAllEvents(eventConfiguration: EventConfig) {\n  const mongoClient = await eventsDb.getClient()\n  const esClient = getOrCreateClient()\n  const indexName = getEventIndexName(eventConfiguration.id)\n  const hasEventsIndex = await esClient.indices.exists({\n    index: indexName\n  })\n\n  if (!hasEventsIndex) {\n    await createIndex(indexName, getDeclarationFields(eventConfiguration))\n  }\n\n  const stream = mongoClient.collection(indexName).find().stream()\n\n  const transformedStreamData = new Transform({\n    readableObjectMode: true,\n    writableObjectMode: true,\n    transform: (record: EventDocument, _encoding, callback) => {\n      callback(null, eventToEventIndex(record))\n    }\n  })\n\n  await esClient.helpers.bulk({\n    retries: 3,\n    wait: 3000,\n    datasource: stream.pipe(transformedStreamData),\n    onDocument: (doc: EventIndex) => ({\n      index: {\n        _index: indexName,\n        _id: doc.id\n      }\n    }),\n    refresh: 'wait_for'\n  })\n}",
      "startLine": 249,
      "endLine": 283,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@285-296",
      "type": "function_declaration",
      "name": "indexEvent",
      "text": "async function indexEvent(event: EventDocument) {\n  const esClient = getOrCreateClient()\n  const indexName = getEventIndexName(event.type)\n\n  return esClient.index<EventIndex>({\n    index: indexName,\n    id: event.id,\n    /** We derive the full state (without nulls) from eventToEventIndex, replace instead of update. */\n    document: eventToEventIndex(event),\n    refresh: 'wait_for'\n  })\n}",
      "startLine": 285,
      "endLine": 296,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@298-308",
      "type": "function_declaration",
      "name": "deleteEventIndex",
      "text": "async function deleteEventIndex(event: EventDocument) {\n  const esClient = getOrCreateClient()\n\n  const response = await esClient.delete({\n    index: getEventIndexName(event.type),\n    id: event.id,\n    refresh: 'wait_for'\n  })\n\n  return response\n}",
      "startLine": 298,
      "endLine": 308,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@310-358",
      "type": "function_declaration",
      "name": "getIndexedEvents",
      "text": "async function getIndexedEvents(userId: string) {\n  const esClient = getOrCreateClient()\n\n  const hasEventsIndex = await esClient.indices.existsAlias({\n    name: getEventAliasName()\n  })\n\n  if (!hasEventsIndex) {\n    logger.error(\n      `Event alias ${getEventAliasName()} not created. Sending empty array. Ensure indexing is running.`\n    )\n    return []\n  }\n\n  const query = {\n    // We basically want to fetch all events,\n    // UNLESS they are in status 'CREATED' (i.e. undeclared drafts) and not created by current user.\n    bool: {\n      should: [\n        {\n          bool: {\n            must_not: [{ term: { status: EventStatus.CREATED } }]\n          }\n        },\n        {\n          bool: {\n            must: [\n              { term: { status: EventStatus.CREATED } },\n              { term: { createdBy: userId } }\n            ]\n          }\n        }\n      ],\n      minimum_should_match: 1\n    }\n  } as estypes.QueryDslQueryContainer\n\n  const response = await esClient.search<EncodedEventIndex>({\n    index: getEventAliasName(),\n    query,\n    size: 10000,\n    request_cache: false\n  })\n\n  return response.hits.hits\n    .map((hit) => hit._source)\n    .filter((event): event is EncodedEventIndex => event !== undefined)\n    .map(decodeEventIndex)\n}",
      "startLine": 310,
      "endLine": 358,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@360-393",
      "type": "function_declaration",
      "name": "getIndex",
      "text": "async function getIndex(eventParams: QueryType) {\n  const esClient = getOrCreateClient()\n\n  if (eventParams.type === 'or') {\n    const { clauses } = eventParams\n    // @todo: implement or query for quick search\n    // eslint-disable-next-line no-console\n    console.log({ clauses })\n    return []\n  }\n\n  if (Object.values(eventParams).length === 0) {\n    throw new Error('No search params provided')\n  }\n\n  const query = buildElasticQueryFromSearchPayload(eventParams)\n  const response = await esClient.search<EncodedEventIndex>({\n    index: getEventAliasName(),\n    size: DEFAULT_SIZE,\n    request_cache: false,\n    query\n  })\n\n  const events = z.array(EventIndex).parse(\n    response.hits.hits\n      .map((hit) => hit._source)\n      .filter((event): event is EncodedEventIndex => event !== undefined)\n      .map((event) => decodeEventIndex(event))\n  )\n\n  return events\n\n  return []\n}",
      "startLine": 360,
      "endLine": 393,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/service/indexing/indexing.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-24",
      "type": "function_declaration",
      "name": "getOrCreateClient",
      "text": "function getOrCreateClient() {\n  return new elasticsearch.Client({\n    node: `http://${inject('ELASTICSEARCH_URI')}`\n  })\n}",
      "startLine": 20,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/__mocks__/elasticsearch.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@18-24",
      "type": "function_declaration",
      "name": "getClient",
      "text": "async function getClient() {\n  await client.connect()\n\n  // Providing the database name is not necessary, it will read it from the connection string.\n  // e2e-environment uses different name from deployment to deployment, so we can't hardcode it.\n  return client.db()\n}",
      "startLine": 18,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/mongodb/user-mgnt.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-19",
      "type": "function_declaration",
      "name": "resetServer",
      "text": "function resetServer() {\n  databaseName = 'user-mgnt_' + Date.now()\n}",
      "startLine": 17,
      "endLine": 19,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/mongodb/__mocks__/user-mgnt.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-29",
      "type": "function_declaration",
      "name": "getClient",
      "text": "async function getClient() {\n  if (!client) {\n    client = new MongoClient(inject('USER_MGNT_MONGO_URI'))\n  }\n\n  await client.connect()\n\n  return client.db(databaseName)\n}",
      "startLine": 21,
      "endLine": 29,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/mongodb/__mocks__/user-mgnt.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-19",
      "type": "function_declaration",
      "name": "resetServer",
      "text": "function resetServer() {\n  databaseName = 'events_' + Date.now()\n}",
      "startLine": 17,
      "endLine": 19,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/mongodb/__mocks__/events.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-29",
      "type": "function_declaration",
      "name": "getClient",
      "text": "async function getClient() {\n  if (!client) {\n    client = new MongoClient(inject('EVENTS_MONGO_URI'))\n  }\n\n  await client.connect()\n\n  return client.db(databaseName)\n}",
      "startLine": 21,
      "endLine": 29,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/mongodb/__mocks__/events.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@18-24",
      "type": "function_declaration",
      "name": "getClient",
      "text": "async function getClient() {\n  await client.connect()\n\n  // Providing the database name is not necessary, it will read it from the connection string.\n  // e2e-environment uses different name from deployment to deployment, so we can't hardcode it.\n  return client.db()\n}",
      "startLine": 18,
      "endLine": 24,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/mongodb/events.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-32",
      "type": "function_declaration",
      "name": "getEventAliasName",
      "text": "function getEventAliasName() {\n  return env.ES_INDEX_PREFIX\n}",
      "startLine": 30,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/elasticsearch.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@34-38",
      "type": "function_declaration",
      "name": "getEventIndexName",
      "text": "function getEventIndexName(eventType: string) {\n  return `${env.ES_INDEX_PREFIX}_${eventType}`\n    .toLowerCase()\n    .replaceAll('.', FIELD_ID_SEPARATOR)\n}",
      "startLine": 34,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/storage/elasticsearch.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-53",
      "type": "function_declaration",
      "name": "createTestToken",
      "text": "function createTestToken(\n  userId: string,\n  scopes: Scope[]\n): TokenWithBearer {\n  const token = jwt.sign(\n    { scope: scopes, sub: userId },\n    readFileSync(join(__dirname, './cert.key')),\n    {\n      algorithm: 'RS256',\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:events-user'\n    }\n  )\n\n  return `Bearer ${token}`\n}",
      "startLine": 38,
      "endLine": 53,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/tests/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@55-71",
      "type": "function_declaration",
      "name": "createTestClient",
      "text": "function createTestClient(\n  user: CreatedUser,\n  scopes: string[] = TEST_USER_DEFAULT_SCOPES\n) {\n  const createCaller = createCallerFactory(appRouter)\n  const token = createTestToken(user.id, scopes)\n\n  const caller = createCaller({\n    user: {\n      id: user.id,\n      primaryOfficeId: user.primaryOfficeId,\n      role: user.role\n    },\n    token\n  })\n  return caller\n}",
      "startLine": 55,
      "endLine": 71,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/tests/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-34",
      "type": "function_declaration",
      "name": "resetESServer",
      "text": "async function resetESServer() {\n  const { getEventIndexName, getEventAliasName } = await import(\n    // @ts-expect-error - \"Cannot find module '@events/storage/elasticsearch' or its corresponding type declarations.\"\n    '@events/storage/elasticsearch'\n  )\n  const index = 'events_tennis_club_membership' + Date.now() + Math.random()\n  getEventIndexName.mockReturnValue(index)\n  getEventAliasName.mockReturnValue('events_' + +Date.now() + Math.random())\n  await createIndex(index, getDeclarationFields(tennisClubMembershipEvent))\n}",
      "startLine": 25,
      "endLine": 34,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/tests/setup.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@38-65",
      "type": "function_declaration",
      "name": "payloadGenerator",
      "text": "function payloadGenerator() {\n  const user = {\n    create: (input: CreateUser) => ({\n      role: input.role ?? 'REGISTRATION_AGENT',\n      name: input.name ?? [{ use: 'en', family: 'Doe', given: ['John'] }],\n      primaryOfficeId: input.primaryOfficeId\n    })\n  }\n\n  const locations = {\n    /** Create test data by providing count or desired locations */\n    set: (input: Array<Partial<Location>> | number) => {\n      if (typeof input === 'number') {\n        return Array.from({ length: input }).map((_, i) => ({\n          id: getUUID(),\n          name: `Location name ${i}`,\n          externalId: getUUID(),\n          partOf: null\n        }))\n      }\n\n      return input.map((location, i) => ({\n        id: location.id ?? getUUID(),\n        name: location.name ?? `Location name ${i}`,\n        externalId: location.externalId ?? getUUID(),\n        partOf: null\n      }))\n    }",
      "startLine": 38,
      "endLine": 65,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/tests/generators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@75-93",
      "type": "function_declaration",
      "name": "seeder",
      "text": "function seeder() {\n  const seedUser = async (db: Db, user: Omit<CreatedUser, 'id'>) => {\n    const createdUser = await db.collection('users').insertOne(user)\n\n    return {\n      primaryOfficeId: user.primaryOfficeId,\n      name: user.name,\n      role: user.role,\n      id: createdUser.insertedId.toString()\n    }\n  }\n  const seedLocations = async (db: Db, locations: Location[]) =>\n    db.collection('locations').insertMany(locations)\n\n  return {\n    user: seedUser,\n    locations: seedLocations\n  }\n}",
      "startLine": 75,
      "endLine": 93,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/tests/generators.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-50",
      "type": "function_declaration",
      "name": "setup",
      "text": "async function setup({ provide }: { provide: ProvideFunction }) {\n  const eventsMongoD = await MongoMemoryServer.create()\n  const userMgntMongoD = await MongoMemoryServer.create()\n  const es = await setupServer()\n\n  const eventsURI = eventsMongoD.getUri()\n  const userMgntURI = userMgntMongoD.getUri()\n\n  provide('ELASTICSEARCH_URI', `${es.getHost()}:${es.getMappedPort(9200)}`)\n  provide('EVENTS_MONGO_URI', eventsURI)\n  provide('USER_MGNT_MONGO_URI', userMgntURI)\n\n  return async () => {\n    await es.stop()\n    await eventsMongoD.stop()\n    await userMgntMongoD.stop()\n  }\n}",
      "startLine": 33,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/tests/global-setup.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-38",
      "type": "function_declaration",
      "name": "getVerificationPageErrors",
      "text": "function getVerificationPageErrors(\n  verificationPageIds: string[],\n  data: ActionUpdate\n) {\n  return verificationPageIds\n    .map((pageId) => {\n      const value = data[pageId]\n      return typeof value !== 'boolean'\n        ? {\n            message: 'Verification page result is required',\n            id: pageId,\n            value\n          }\n        : null\n    })\n    .filter((error) => error !== null)\n}",
      "startLine": 22,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/validate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-47",
      "type": "function_declaration",
      "name": "throwWhenNotEmpty",
      "text": "function throwWhenNotEmpty(errors: unknown[]) {\n  if (errors.length > 0) {\n    throw new TRPCError({\n      code: 'BAD_REQUEST',\n      message: JSON.stringify(errors)\n    })\n  }\n}",
      "startLine": 40,
      "endLine": 47,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/validate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@49-51",
      "type": "function_declaration",
      "name": "isObject",
      "text": "function isObject(value: unknown): value is Record<string, unknown> {\n  return _.isPlainObject(value)\n}",
      "startLine": 49,
      "endLine": 51,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/validate/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@36-40",
      "type": "function_declaration",
      "name": "setBearerForToken",
      "text": "function setBearerForToken(token: string) {\n  const bearer = 'Bearer'\n\n  return token.startsWith(bearer) ? token : `${bearer} ${token}`\n}",
      "startLine": 36,
      "endLine": 40,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/authorization/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@49-63",
      "type": "function_declaration",
      "name": "getAuthorizedEntitiesFromScopes",
      "text": "function getAuthorizedEntitiesFromScopes(scopes: ConfigurableScopes[]) {\n  const authorizedEvents = scopes\n    .flatMap(({ options }) => {\n      if ('event' in options) {\n        return options.event\n      }\n\n      return undefined\n    })\n    .filter((event) => event !== undefined)\n\n  return {\n    ...(authorizedEvents.length > 0 && { events: authorizedEvents })\n  }\n}",
      "startLine": 49,
      "endLine": 63,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/authorization/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@73-87",
      "type": "function_declaration",
      "name": "inConfigurableScopes",
      "text": "function inConfigurableScopes(\n  authHeader: IAuthHeader,\n  configurableScopes: ConfigurableScopeType[]\n) {\n  const userScopes = getScopes(authHeader)\n  const foundScopes = configurableScopes\n    .map((scope) => findScope(userScopes, scope))\n    .filter((scope) => scope !== undefined)\n\n  if (!foundScopes.length) {\n    throw new TRPCError({ code: 'FORBIDDEN' })\n  }\n\n  return getAuthorizedEntitiesFromScopes(foundScopes)\n}",
      "startLine": 73,
      "endLine": 87,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/authorization/index.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@109-137",
      "type": "method_definition",
      "name": "unknown",
      "text": "unknown\n  > = async (opts) => {\n    const token = setBearerForToken(opts.ctx.token)\n    const authHeader = { Authorization: token }\n\n    // If the user has any of the allowd plain scopes, allow access\n    if (inScope(authHeader, scopes)) {\n      return opts.next()\n    }\n\n    // If the user has any of the allowed configurable scopes, allow the user to continue\n    // and add the authorized entities to the context which are checked in later middleware\n    if (configurableScopes) {\n      const authorizedEntities = inConfigurableScopes(\n        authHeader,\n        configurableScopes\n      )\n\n      return opts.next({\n        ...opts,\n        ctx: {\n          ...opts.ctx,\n          authorizedEntities\n        }\n      })\n    }\n\n    throw new TRPCError({ code: 'FORBIDDEN' })\n  }",
      "startLine": 109,
      "endLine": 137,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "ERROR",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/authorization/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@47-95",
      "type": "function_declaration",
      "name": "getFieldErrors",
      "text": "function getFieldErrors(\n  fields: Inferred[],\n  data: ActionUpdate,\n  declaration: EventState = {}\n) {\n  const visibleFields = fields.filter((field) =>\n    isFieldVisible(field, { ...data, ...declaration })\n  )\n\n  const visibleFieldIds = visibleFields.map((field) => field.id)\n\n  const hiddenFieldIds = fields\n    .filter(\n      (field) =>\n        // If field is not visible and not in the visible fields list, it is a hidden field\n        // We need to check against the visible fields list because there might be fields with same ids, one of which is visible and others are hidden\n        !isFieldVisible(field, data) && !visibleFieldIds.includes(field.id)\n    )\n    .map((field) => field.id)\n\n  // Add errors if there are any hidden fields sent in the payloa\n  const hiddenFieldErrors = hiddenFieldIds.flatMap((fieldId) => {\n    if (data[fieldId as keyof typeof data]) {\n      return {\n        message: errorMessages.hiddenField.defaultMessage,\n        id: fieldId,\n        value: data[fieldId as keyof typeof data]\n      }\n    }\n\n    return []\n  })\n\n  // For visible fields, run the field validations as configured\n  const visibleFieldErrors = visibleFields.flatMap((field) => {\n    const fieldErrors = runFieldValidations({\n      field,\n      values: data\n    })\n\n    return fieldErrors.errors.map((error) => ({\n      message: error.message.defaultMessage,\n      id: field.id,\n      value: data[field.id as keyof typeof data]\n    }))\n  })\n\n  return [...hiddenFieldErrors, ...visibleFieldErrors]\n}",
      "startLine": 47,
      "endLine": 95,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/validate/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@97-164",
      "type": "function_declaration",
      "name": "validateDeclarationUpdateAction",
      "text": "function validateDeclarationUpdateAction({\n  eventConfig,\n  event,\n  actionType,\n  declarationUpdate,\n  annotation\n}: {\n  eventConfig: EventConfig\n  event: EventDocument\n  actionType: DeclarationUpdateActionType\n  declarationUpdate: ActionUpdate\n  // @TODO: annotation is always specific to action. Is there ever a need for null?\n  annotation?: ActionUpdate\n}) {\n  /*\n   * Declaration allows partial updates. Updates are validated against primitive types (zod) and field based custom validators (JSON schema).\n   * We need to validate the update against the cleaned declaration, which is a merged version of the previous declaration and the update.\n   */\n\n  // 1. Merge declaration update with previous declaration to validate based on the right conditional rules\n  const previousDeclaration = getCurrentEventState(event).declaration\n  // at this stage, there could be a situation where the toggle (.e.g. dob unknown) is applied but payload would still have both age and dob.\n  const completeDeclaration = deepMerge(previousDeclaration, declarationUpdate)\n\n  const declarationConfig = getDeclaration(eventConfig)\n\n  // 2. Strip declaration of hidden fields. Without additional checks, client could send an update with hidden fields that are malformed (e.g. when dob is unknown anduser has send the age previously. Now they only send dob, without setting dob unknown to false).\n  const cleanedDeclaration = omitHiddenPaginatedFields(\n    declarationConfig,\n    completeDeclaration\n  )\n\n  // 3. When declaration update has fields that are not in the cleaned declaration, payload is invalid. Even though it could work when cleaned and merged, it would make it harder to use the `getCurrentEventState` function.\n  const invalidKeys = getInvalidUpdateKeys({\n    update: declarationUpdate,\n    cleaned: cleanedDeclaration\n  })\n\n  if (invalidKeys.length > 0) {\n    return invalidKeys\n  }\n\n  // 4. Validate declaration update against conditional rules, taking into account conditional pages.\n  const allVisiblePageFields = declarationConfig.pages\n    .filter((page) => isPageVisible(page, cleanedDeclaration))\n    .flatMap((page) => page.fields)\n\n  const declarationErrors = getFieldErrors(\n    allVisiblePageFields,\n    cleanedDeclaration\n  )\n\n  const declarationActionParse = DeclarationActions.safeParse(actionType)\n\n  // 5. Validate against action review fields, if applicable\n  const reviewFields = declarationActionParse.success\n    ? getActionReviewFields(eventConfig, declarationActionParse.data)\n    : []\n\n  const visibleAnnotationFields = omitHiddenFields(\n    reviewFields,\n    deepDropNulls(annotation ?? {})\n  )\n\n  const annotationErrors = getFieldErrors(reviewFields, visibleAnnotationFields)\n\n  return [...declarationErrors, ...annotationErrors]\n}",
      "startLine": 97,
      "endLine": 164,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/validate/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@166-194",
      "type": "function_declaration",
      "name": "validateActionAnnotation",
      "text": "function validateActionAnnotation({\n  eventConfig,\n  actionType,\n  annotation = {},\n  declaration = {}\n}: {\n  eventConfig: EventConfig\n  actionType: AnnotationActionType\n  annotation?: ActionUpdate\n  declaration: EventState\n}) {\n  const pages = findRecordActionPages(eventConfig, actionType)\n\n  const visibleVerificationPageIds = getVisibleVerificationPageIds(\n    pages,\n    annotation\n  )\n\n  const formFields = pages.flatMap(({ fields }) =>\n    fields.flatMap((field) => field)\n  )\n\n  const errors = [\n    ...getFieldErrors(formFields, annotation, declaration),\n    ...getVerificationPageErrors(visibleVerificationPageIds, annotation)\n  ]\n\n  return errors\n}",
      "startLine": 166,
      "endLine": 194,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/validate/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@196-236",
      "type": "function_declaration",
      "name": "validateAction",
      "text": "function validateAction(actionType: ActionType) {\n  return async ({ input, ctx, next }: ActionMiddlewareOptions) => {\n    const event = await getEventById(input.eventId)\n    const declaration = getCurrentEventState(event).declaration\n\n    const eventConfig = await getEventConfigurationById({\n      token: ctx.token,\n      eventType: event.type\n    })\n\n    const declarationUpdateAction =\n      DeclarationUpdateActions.safeParse(actionType)\n\n    if (declarationUpdateAction.success) {\n      const errors = validateDeclarationUpdateAction({\n        eventConfig,\n        event,\n        declarationUpdate: input.declaration,\n        annotation: input.annotation,\n        actionType: declarationUpdateAction.data\n      })\n\n      throwWhenNotEmpty(errors)\n    }\n\n    const annotationActionParse = annotationActions.safeParse(actionType)\n\n    if (annotationActionParse.success) {\n      const errors = validateActionAnnotation({\n        eventConfig,\n        annotation: input.annotation,\n        actionType: annotationActionParse.data,\n        declaration\n      })\n\n      throwWhenNotEmpty(errors)\n    }\n\n    return next()\n  }\n}",
      "startLine": 196,
      "endLine": 236,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/middleware/validate/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@94-112",
      "type": "function_declaration",
      "name": "mockListener",
      "text": "function mockListener({\n    request\n  }: {\n    response: Response\n    request: Request\n    requestId: string\n  }) {\n    if (!request.url.startsWith(`${env.DOCUMENTS_URL}/files`)) {\n      return\n    }\n\n    if (request.method === 'DELETE') {\n      deleteUnreferencedDraftAttachmentsMock(request.url, request.body)\n    }\n\n    if (request.method === 'HEAD') {\n      fileExistMock(request.url, request.body)\n    }\n  }",
      "startLine": 94,
      "endLine": 112,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/event/event.delete.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@187-204",
      "type": "function_declaration",
      "name": "mockNotifyApi",
      "text": "function mockNotifyApi(status: number) {\n    return mswServer.use(\n      http.post<never, { actionId: string }>(\n        `${env.COUNTRY_CONFIG_URL}/events/TENNIS_CLUB_MEMBERSHIP/actions/REGISTER`,\n        async ({ request }) => {\n          const body = await request.json()\n          actionId = body.actionId\n\n          const responseBody =\n            status === 200\n              ? { registrationNumber: MOCK_REGISTRATION_NUMBER }\n              : {}\n          // @ts-expect-error - \"For some reason the msw types here complain about the status, even though this is correct\"\n          return HttpResponse.json(responseBody, { status })\n        }\n      )\n    )\n  }",
      "startLine": 187,
      "endLine": 204,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 6,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/event/event.actions.register.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-69",
      "type": "function_declaration",
      "name": "validateEventType",
      "text": "function validateEventType({\n  eventTypes,\n  eventInputType\n}: {\n  eventTypes: string[]\n  eventInputType: string\n}) {\n  if (!eventTypes.includes(eventInputType)) {\n    throw new TRPCError({\n      code: 'BAD_REQUEST',\n      message: `Invalid event type ${eventInputType}. Valid event types are: ${eventTypes.join(\n        ', '\n      )}`\n    })\n  }\n}",
      "startLine": 54,
      "endLine": 69,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/event/index.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@27-78",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  const server = new Hapi.Server({\n    host: HOST,\n    port: PORT,\n    routes: {\n      cors: { origin: ['*'] },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n\n  await server.register(getPlugins())\n\n  server.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:notification-user'\n    },\n    validate: () => ({\n      isValid: true\n    })\n  })\n\n  server.auth.default('jwt')\n\n  const routes = getRoutes()\n  server.route(routes)\n\n  server.ext({\n    type: 'onRequest',\n    method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }\n  })\n\n  async function stop() {\n    await server.stop()\n    await database.stop()\n    server.log('info', 'Notification server stopped')\n  }\n\n  async function start() {\n    await server.start()\n    await database.start()\n    loopNotificationQueue(server)\n    server.log('info', `Notification server started on ${HOST}:${PORT}`)\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 27,
      "endLine": 78,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@58-61",
      "type": "method_definition",
      "name": "method",
      "text": "method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }",
      "startLine": 58,
      "endLine": 61,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-68",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    await database.stop()\n    server.log('info', 'Notification server stopped')\n  }",
      "startLine": 64,
      "endLine": 68,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@70-75",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    await server.start()\n    await database.start()\n    loopNotificationQueue(server)\n    server.log('info', `Notification server started on ${HOST}:${PORT}`)\n  }",
      "startLine": 70,
      "endLine": 75,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-30",
      "type": "function_declaration",
      "name": "writeJSONToCSV",
      "text": "async function writeJSONToCSV(\n  filename: string,\n  data: Array<Record<string, any>>\n) {\n  const csv = await csvStringify(data, {\n    header: true\n  })\n  return fs.promises.writeFile(filename, csv, 'utf8')\n}",
      "startLine": 22,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/extract-translations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@32-48",
      "type": "function_declaration",
      "name": "readCSVToJSON",
      "text": "async function readCSVToJSON<T>(filename: string) {\n  return new Promise<T>((resolve, reject) => {\n    const chunks: string[] = []\n    fs.createReadStream(filename)\n      .on('error', reject)\n      .pipe(\n        csv2json({\n          separator: ','\n        })\n      )\n      .on('data', (chunk: string) => chunks.push(chunk))\n      .on('error', reject)\n      .on('end', () => {\n        resolve(JSON.parse(chunks.join('')))\n      })\n  })\n}",
      "startLine": 32,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/extract-translations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@54-58",
      "type": "function_declaration",
      "name": "readTranslations",
      "text": "function readTranslations() {\n  return readCSVToJSON<CSVRow[]>(\n    `${COUNTRY_CONFIG_PATH}/src/translations/notification.csv`\n  )\n}",
      "startLine": 54,
      "endLine": 58,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/extract-translations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-96",
      "type": "function_declaration",
      "name": "extractMessages",
      "text": "async function extractMessages() {\n  const translations = await readTranslations()\n\n  try {\n    console.log(\n      `${chalk.yellow('Checking translations in notification service ...')}`\n    )\n    Object.keys(messageKeys).forEach((messageKey) => {\n      let missingKeys = false\n\n      if (!translations.find(({ id }) => id === messageKey)) {\n        missingKeys = true\n        console.log(\n          `${chalk.red(\n            `No translation key exists for ${messageKey}.  Remember to translate and add for all locales!!!: ${chalk.white(\n              messageKey\n            )} in ${chalk.white(\n              `${COUNTRY_CONFIG_PATH}/src/translations/notification.csv`\n            )}`\n          )}`\n        )\n      }\n\n      if (missingKeys) {\n        console.log(\n          `${chalk.red('WARNING: ')}${chalk.yellow(\n            'Fix missing keys in locale files first.'\n          )}`\n        )\n        process.exit(1)\n      }\n    })\n  } catch (err) {\n    console.log(err)\n    process.exit(1)\n  }\n}",
      "startLine": 60,
      "endLine": 96,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/extract-translations.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-26",
      "type": "function_declaration",
      "name": "generateFlag",
      "text": "function generateFlag(type: ActionType, status: ActionStatus): Flag {\n  return `${type.toLowerCase()}:${status.toLowerCase()}`\n}",
      "startLine": 24,
      "endLine": 26,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/events/src/router/event/event.index.flag.test.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-45",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n  mongoose.disconnect()\n}",
      "startLine": 43,
      "endLine": 45,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@47-49",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n  return connect()\n}",
      "startLine": 47,
      "endLine": 49,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/database.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@35-44",
      "type": "function_declaration",
      "name": "getContactPhoneNo",
      "text": "function getContactPhoneNo(\n  record: ReadyForReviewRecord | RegisteredRecord\n) {\n  const task = getTaskFromSavedBundle(record)\n  const phoneNumberExtension = findExtension(\n    'http://opencrvs.org/specs/extension/contact-person-phone-number',\n    task.extension\n  )\n  return phoneNumberExtension?.valueString\n}",
      "startLine": 35,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@46-55",
      "type": "function_declaration",
      "name": "getContactEmail",
      "text": "function getContactEmail(\n  record: ReadyForReviewRecord | RegisteredRecord\n) {\n  const task = getTaskFromSavedBundle(record)\n  const emailExtension = findExtension(\n    'http://opencrvs.org/specs/extension/contact-person-email',\n    task.extension\n  )\n  return emailExtension?.valueString\n}",
      "startLine": 46,
      "endLine": 55,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@57-64",
      "type": "function_declaration",
      "name": "error",
      "text": "function error(\n  record: ReadyForReviewRecord | RegisteredRecord | RejectedRecord,\n  message: string\n): never {\n  const task = getTaskFromSavedBundle(record)\n  const taskStatus = getStatusFromTask(task)\n  throw boomBadRequest(`${message} in ${taskStatus} record`)\n}",
      "startLine": 57,
      "endLine": 64,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "ERROR",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@66-75",
      "type": "function_declaration",
      "name": "getOfficeName",
      "text": "function getOfficeName(\n  record:\n    | ReadyForReviewRecord\n    | RegisteredRecord\n    | InProgressRecord\n    | RejectedRecord\n) {\n  const office = findLastOfficeFromSavedBundle(record)\n  return office.name\n}",
      "startLine": 66,
      "endLine": 75,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@77-101",
      "type": "function_declaration",
      "name": "getInformantName",
      "text": "function getInformantName(\n  record: ReadyForReviewRecord | RegisteredRecord\n) {\n  const composition = getComposition(record)\n  const informantSection = findCompositionSection(\n    'informant-details',\n    composition\n  )\n  if (!informantSection) {\n    error(record, 'informant section not found')\n  }\n  const informantRelation = getResourceFromBundleById<RelatedPerson>(\n    record,\n    resourceIdentifierToUUID(informantSection.entry[0].reference)\n  )\n  const informant = getResourceFromBundleById<Patient>(\n    record,\n    resourceIdentifierToUUID(informantRelation.patient.reference)\n  )\n  const name = informant.name.find(({ use }: { use: string }) => use === 'en')\n  if (!name) {\n    error(record, 'name not found in informant patient resource')\n  }\n  return [name.given?.join(' '), name.family].join(' ').trim()\n}",
      "startLine": 77,
      "endLine": 101,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@103-126",
      "type": "function_declaration",
      "name": "getPersonName",
      "text": "function getPersonName(\n  record: ReadyForReviewRecord | RegisteredRecord | RejectedRecord,\n  personType: 'deceased' | 'child'\n) {\n  const compositionCode: Extract<\n    CompositionSectionCode,\n    'deceased-details' | 'child-details'\n  > = `${personType}-details`\n  const composition = getComposition(record)\n  const patientSection = findCompositionSection(compositionCode, composition)\n  if (!patientSection) {\n    error(record, `patient section not found for ${compositionCode}`)\n  }\n  const person = getResourceFromBundleById<Patient>(\n    record,\n    resourceIdentifierToUUID(patientSection.entry[0].reference)\n  )\n  const name = person.name.find(({ use }: { use: string }) => use === 'en')\n  if (!name) {\n    error(record, `name not found in patient resource for ${compositionCode}`)\n  }\n  // the trim used in given name handles the case when a country does not have middlename\n  return [name.given?.join(' ').trim(), name.family].join(' ').trim()\n}",
      "startLine": 103,
      "endLine": 126,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@128-138",
      "type": "function_declaration",
      "name": "getRegistrationLocation",
      "text": "function getRegistrationLocation(\n  record:\n    | ReadyForReviewRecord\n    | RegisteredRecord\n    | InProgressRecord\n    | RejectedRecord\n) {\n  const location = findLastOfficeLocationFromSavedBundle(record)\n\n  return location.name || ''\n}",
      "startLine": 128,
      "endLine": 138,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@25-48",
      "type": "function_declaration",
      "name": "birthInProgressNotification",
      "text": "async function birthInProgressNotification(\n  req: Request,\n  h: ResponseToolkit\n) {\n  const inProgressRecord = req.payload as InProgressRecord\n  await sendNotification(\n    {\n      sms: messageKeys.birthInProgressNotification,\n      email: messageKeys.birthInProgressNotification\n    },\n    {\n      sms: getContactPhoneNo(inProgressRecord),\n      email: getContactEmail(inProgressRecord)\n    },\n    'informant',\n    {\n      trackingId: getTrackingId(inProgressRecord),\n      crvsOffice: getOfficeName(inProgressRecord),\n      registrationLocation: getRegistrationLocation(inProgressRecord),\n      informantName: getInformantName(inProgressRecord)\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 25,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/inProgress/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@50-73",
      "type": "function_declaration",
      "name": "deathInProgressNotification",
      "text": "async function deathInProgressNotification(\n  req: Request,\n  h: ResponseToolkit\n) {\n  const inProgressRecord = req.payload as InProgressRecord\n  await sendNotification(\n    {\n      sms: messageKeys.deathInProgressNotification,\n      email: messageKeys.deathInProgressNotification\n    },\n    {\n      sms: getContactPhoneNo(inProgressRecord),\n      email: getContactEmail(inProgressRecord)\n    },\n    'informant',\n    {\n      trackingId: getTrackingId(inProgressRecord),\n      crvsOffice: getOfficeName(inProgressRecord),\n      registrationLocation: getRegistrationLocation(inProgressRecord),\n      informantName: getInformantName(inProgressRecord)\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 50,
      "endLine": 73,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/inProgress/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@24-48",
      "type": "function_declaration",
      "name": "birthReadyForReviewNotification",
      "text": "async function birthReadyForReviewNotification(\n  req: Request,\n  h: ResponseToolkit\n) {\n  const readyForReviewRecord = req.payload as ReadyForReviewRecord\n  await sendNotification(\n    {\n      sms: messageKeys.birthDeclarationNotification,\n      email: messageKeys.birthDeclarationNotification\n    },\n    {\n      sms: getContactPhoneNo(readyForReviewRecord),\n      email: getContactEmail(readyForReviewRecord)\n    },\n    'informant',\n    {\n      trackingId: getTrackingId(readyForReviewRecord),\n      crvsOffice: getOfficeName(readyForReviewRecord),\n      registrationLocation: getRegistrationLocation(readyForReviewRecord),\n      name: getPersonName(readyForReviewRecord, 'child'),\n      informantName: getInformantName(readyForReviewRecord)\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 24,
      "endLine": 48,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/readyForReview/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@50-74",
      "type": "function_declaration",
      "name": "deathReadyForReviewNotification",
      "text": "async function deathReadyForReviewNotification(\n  req: Request,\n  h: ResponseToolkit\n) {\n  const readyForReviewRecord = req.payload as ReadyForReviewRecord\n  await sendNotification(\n    {\n      sms: messageKeys.deathDeclarationNotification,\n      email: messageKeys.deathDeclarationNotification\n    },\n    {\n      sms: getContactPhoneNo(readyForReviewRecord),\n      email: getContactEmail(readyForReviewRecord)\n    },\n    'informant',\n    {\n      trackingId: getTrackingId(readyForReviewRecord),\n      crvsOffice: getOfficeName(readyForReviewRecord),\n      registrationLocation: getRegistrationLocation(readyForReviewRecord),\n      name: getPersonName(readyForReviewRecord, 'deceased'),\n      informantName: getInformantName(readyForReviewRecord)\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 50,
      "endLine": 74,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/readyForReview/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-22",
      "type": "function_declaration",
      "name": "allUsersEmailHandler",
      "text": "async function allUsersEmailHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  logger.info(`Notifying from allUsersEmailHandler`)\n  return sendAllUserEmails(request)\n}",
      "startLine": 16,
      "endLine": 22,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/all-user-handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@31-46",
      "type": "function_declaration",
      "name": "sendAllUserEmails",
      "text": "async function sendAllUserEmails(request: Hapi.Request) {\n  const userDetails = await getUserDetails(request)\n  const recipientEmail = userDetails?.emailForNotification\n  const payload = request.payload as AllUsersEmailPayloadSchema\n  await preProcessRequest(request)\n  await NotificationQueue.create({\n    ...payload,\n    ...(recipientEmail && { recipientEmail })\n  })\n  if (!isLoopInprogress) {\n    loopNotificationQueue(request.server)\n  }\n  return {\n    success: true\n  }\n}",
      "startLine": 31,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@48-65",
      "type": "function_declaration",
      "name": "countQueueRecordsOfCurrentDay",
      "text": "async function countQueueRecordsOfCurrentDay(requestId: string) {\n  const startOfTheDay = new Date()\n  startOfTheDay.setHours(0, 0, 0, 0)\n  const endOfTheDay = new Date()\n  endOfTheDay.setHours(23, 59, 59, 999)\n  return NotificationQueue.count({\n    $and: [\n      { createdAt: { $gte: startOfTheDay, $lt: endOfTheDay } },\n      { requestId: { $ne: requestId } },\n      {\n        $or: [\n          { error: { $exists: false } },\n          { 'error.statusCode': { $gte: 500 } }\n        ]\n      }\n    ]\n  })\n}",
      "startLine": 48,
      "endLine": 65,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@67-71",
      "type": "function_declaration",
      "name": "deleteAllStaleRecords",
      "text": "async function deleteAllStaleRecords() {\n  const referenceDate = new Date()\n  referenceDate.setHours(0, 0, 0, 0)\n  return NotificationQueue.deleteMany({ createdAt: { $lt: referenceDate } })\n}",
      "startLine": 67,
      "endLine": 71,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@73-83",
      "type": "function_declaration",
      "name": "preProcessRequest",
      "text": "async function preProcessRequest(request: Hapi.Request) {\n  const payload = request.payload as AllUsersEmailPayloadSchema\n  await deleteAllStaleRecords()\n  const currentDayRecords = await countQueueRecordsOfCurrentDay(\n    payload.requestId\n  )\n\n  if (currentDayRecords > 0) {\n    throw tooManyRequests('Already sent mails for today')\n  }\n}",
      "startLine": 73,
      "endLine": 83,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@85-97",
      "type": "function_declaration",
      "name": "findOldestNotificationQueueRecord",
      "text": "async function findOldestNotificationQueueRecord() {\n  return NotificationQueue.findOne({\n    $and: [\n      { status: { $ne: 'success' } },\n      {\n        $or: [\n          { error: { $exists: false } },\n          { 'error.statusCode': { $gte: 500 } }\n        ]\n      }\n    ]\n  }).sort({ createdAt: 1 })\n}",
      "startLine": 85,
      "endLine": 97,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@99-123",
      "type": "function_declaration",
      "name": "dispatch",
      "text": "async function dispatch(\n  recipientEmail: string | null,\n  record: NotificationQueueRecord\n) {\n  const filteredRecord = recipientEmail\n    ? record.bcc.filter((item) => item !== recipientEmail)\n    : undefined\n\n  return notifyCountryConfig(\n    {\n      email: 'allUserNotification',\n      sms: 'allUserNotification'\n    },\n    {\n      email: recipientEmail ? recipientEmail : record.bcc[0],\n      bcc: recipientEmail ? filteredRecord : record.bcc.slice(1)\n    },\n    'user',\n    {\n      subject: record.subject,\n      body: record.body\n    },\n    record.locale\n  )\n}",
      "startLine": 99,
      "endLine": 123,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@125-140",
      "type": "function_declaration",
      "name": "markQueueRecordFailedWithErrorDetails",
      "text": "async function markQueueRecordFailedWithErrorDetails(\n  record: NotificationQueueRecord,\n  e: Error & { statusCode: number; error: string }\n) {\n  return NotificationQueue.updateOne(\n    { _id: record._id },\n    {\n      status: 'failed',\n      error: {\n        statusCode: e.statusCode,\n        message: e.message,\n        error: e.error\n      }\n    }\n  )\n}",
      "startLine": 125,
      "endLine": 140,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@142-152",
      "type": "function_declaration",
      "name": "markQueueRecordSuccess",
      "text": "async function markQueueRecordSuccess(record: NotificationQueueRecord) {\n  return NotificationQueue.updateOne(\n    { _id: record._id },\n    {\n      status: 'success',\n      $unset: {\n        error: ''\n      }\n    }\n  )\n}",
      "startLine": 142,
      "endLine": 152,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@154-176",
      "type": "function_declaration",
      "name": "loopNotificationQueue",
      "text": "async function loopNotificationQueue(server: Hapi.Server) {\n  isLoopInprogress = true\n\n  let record = await findOldestNotificationQueueRecord()\n\n  while (record) {\n    logger.info(\n      `Notification service: Initiating dispatch of notification emails for ${record.bcc.length} users`\n    )\n\n    const res = await dispatch(record.recipientEmail || '', record)\n\n    if (!res.ok) {\n      const error = await res.json()\n      await markQueueRecordFailedWithErrorDetails(record, error)\n      server.log(['error', error.error, internal(error.message)])\n    } else {\n      await markQueueRecordSuccess(record)\n    }\n    record = await findOldestNotificationQueueRecord()\n  }\n  isLoopInprogress = false\n}",
      "startLine": 154,
      "endLine": 176,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/email/service..ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-50",
      "type": "function_declaration",
      "name": "birthSentForUpdatesNotification",
      "text": "async function birthSentForUpdatesNotification(\n  req: Request,\n  h: ResponseToolkit\n) {\n  const rejectedRecord = req.payload as RejectedRecord\n  await sendNotification(\n    {\n      sms: messageKeys.birthRejectionNotification,\n      email: messageKeys.birthRejectionNotification\n    },\n    {\n      sms: getContactPhoneNo(rejectedRecord),\n      email: getContactEmail(rejectedRecord)\n    },\n    'informant',\n    {\n      trackingId: getTrackingId(rejectedRecord),\n      crvsOffice: getOfficeName(rejectedRecord),\n      registrationLocation: getRegistrationLocation(rejectedRecord),\n      informantName: getInformantName(rejectedRecord),\n      name: getPersonName(rejectedRecord, 'child')\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 26,
      "endLine": 50,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sentForUpdates/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@52-76",
      "type": "function_declaration",
      "name": "deathSentForUpdatesNotification",
      "text": "async function deathSentForUpdatesNotification(\n  req: Request,\n  h: ResponseToolkit\n) {\n  const rejectedRecord = req.payload as RejectedRecord\n  await sendNotification(\n    {\n      sms: messageKeys.deathRejectionNotification,\n      email: messageKeys.deathRejectionNotification\n    },\n    {\n      sms: getContactPhoneNo(rejectedRecord),\n      email: getContactEmail(rejectedRecord)\n    },\n    'informant',\n    {\n      trackingId: getTrackingId(rejectedRecord),\n      crvsOffice: getOfficeName(rejectedRecord),\n      registrationLocation: getRegistrationLocation(rejectedRecord),\n      informantName: getInformantName(rejectedRecord),\n      name: getPersonName(rejectedRecord, 'deceased')\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 52,
      "endLine": 76,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sentForUpdates/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-60",
      "type": "function_declaration",
      "name": "notifyCountryConfig",
      "text": "async function notifyCountryConfig(\n  templateName: {\n    email?: string\n    sms?: string\n  },\n  recipient: {\n    email?: string | null\n    sms?: string | null\n    bcc?: string[]\n  },\n  type: 'user' | 'informant',\n  variables: Record<string, unknown>,\n  locale: string,\n  convertUnicode?: boolean\n) {\n  const url = `${COUNTRY_CONFIG_URL}/notification`\n  try {\n    logger.info(\n      `Sending notification to countryconfig.\n\nTemplate: ${JSON.stringify(templateName, null, 4)}\n${recipient.email ? `Email: ${maskEmail(recipient.email)}` : ''}\n${recipient.sms ? `SMS: ${maskSms(recipient.sms)}` : ''}\n${recipient.bcc ? `Amount of recipients: ${recipient.bcc.length}` : ''}`\n    )\n\n    return await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        templateName,\n        recipient,\n        type,\n        locale,\n        variables,\n        convertUnicode\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n  } catch (error) {\n    logger.error(error)\n    throw error\n  }\n}",
      "startLine": 16,
      "endLine": 60,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sms/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@37-62",
      "type": "function_declaration",
      "name": "sendUserCredentials",
      "text": "async function sendUserCredentials(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as ICredentialsPayload\n  logger.info('Notifying from sendUserCredentials')\n\n  const nameObject = payload.userFullName.find((obj) => obj.use === 'en')\n  // Extract the firstNames\n  const firstNames = nameObject?.given[0] as string\n\n  await sendNotification(\n    {\n      sms: templateNames.ONBOARDING_INVITE['sms'],\n      email: templateNames.ONBOARDING_INVITE['email']\n    },\n    { email: payload.email, sms: payload.msisdn },\n    'user',\n    {\n      firstNames,\n      username: payload.username,\n      password: payload.password\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 37,
      "endLine": 62,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sms/user-handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@64-87",
      "type": "function_declaration",
      "name": "sendResetPasswordInvite",
      "text": "async function sendResetPasswordInvite(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IResetPasswordPayload\n  logger.info('Notifying from sendResetPasswordInvite')\n  const nameObject = payload.userFullName.find((obj) => obj.use === 'en')\n  // Extract the firstNames\n  const firstNames = nameObject?.given[0] as string\n\n  await sendNotification(\n    {\n      sms: templateNames.PASSWORD_RESET_BY_SYSTEM_ADMIN['sms'],\n      email: templateNames.PASSWORD_RESET_BY_SYSTEM_ADMIN['email']\n    },\n    { email: payload.email, sms: payload.msisdn },\n    'user',\n    {\n      firstNames,\n      password: payload.password\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 64,
      "endLine": 87,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sms/user-handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@89-113",
      "type": "function_declaration",
      "name": "retrieveUserName",
      "text": "async function retrieveUserName(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IRetrieveUserNamePayload\n  logger.info('Notifying from retrieveUserName')\n\n  const nameObject = payload.userFullName.find((obj) => obj.use === 'en')\n  // Extract the firstNames\n  const firstNames = nameObject?.given[0] as string\n\n  await sendNotification(\n    {\n      sms: templateNames.USERNAME_REMINDER['sms'],\n      email: templateNames.USERNAME_REMINDER['email']\n    },\n    { email: payload.email, sms: payload.msisdn },\n    'user',\n    {\n      firstNames,\n      username: payload.username\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 89,
      "endLine": 113,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sms/user-handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@115-139",
      "type": "function_declaration",
      "name": "sendUserAuthenticationCode",
      "text": "async function sendUserAuthenticationCode(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IUserAuthCodePayload\n  logger.info('Notifying from sendUserAuthenticationCode')\n\n  const nameObject = payload.userFullName.find((obj) => obj.use === 'en')\n\n  // Extract the firstNames\n  const firstNames = nameObject?.given[0] as string\n  await sendNotification(\n    {\n      sms: templateNames[payload.notificationEvent]['sms'],\n      email: templateNames[payload.notificationEvent]['email']\n    },\n    { email: payload.email, sms: payload.msisdn },\n    'user',\n    {\n      firstNames,\n      authCode: payload.code\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 115,
      "endLine": 139,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sms/user-handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@141-165",
      "type": "function_declaration",
      "name": "updateUserName",
      "text": "async function updateUserName(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as IRetrieveUserNamePayload\n  logger.info(`Notifying from updateUserName`)\n\n  const nameObject = payload.userFullName.find((obj) => obj.use === 'en')\n  // Extract the firstNames\n  const firstNames = nameObject?.given[0] as string\n\n  await sendNotification(\n    {\n      sms: templateNames.USERNAME_UPDATED['sms'],\n      email: templateNames.USERNAME_UPDATED['email']\n    },\n    { email: payload.email, sms: payload.msisdn },\n    'user',\n    {\n      firstNames,\n      username: payload.username\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 141,
      "endLine": 165,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sms/user-handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@58-84",
      "type": "function_declaration",
      "name": "sendCorrectionRejectedNotification",
      "text": "async function sendCorrectionRejectedNotification(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as CorrectionRejectedInput\n\n  const nameObject = payload.userFullName.find((obj) => obj.use === 'en')\n\n  const firstNames = nameObject?.given[0] || ''\n\n  await sendNotification(\n    {\n      sms: templateNames.CORRECTION_REJECTED['sms'],\n      email: templateNames.CORRECTION_REJECTED['email']\n    },\n    { email: payload.email, sms: payload.msisdn },\n    'user',\n    {\n      firstNames,\n      lastName: nameObject?.family || '',\n      event: payload.event.toLowerCase(),\n      trackingId: payload.trackingId,\n      reason: payload.reason\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 58,
      "endLine": 84,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sms/correction.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@86-111",
      "type": "function_declaration",
      "name": "sendCorrectionApprovedNotification",
      "text": "async function sendCorrectionApprovedNotification(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = request.payload as CorrectionApprovedInput\n\n  const nameObject = payload.userFullName.find((obj) => obj.use === 'en')\n\n  const firstNames = nameObject?.given[0] || ''\n\n  await sendNotification(\n    {\n      sms: templateNames.CORRECTION_APPROVED['sms'],\n      email: templateNames.CORRECTION_APPROVED['email']\n    },\n    { email: payload.email, sms: payload.msisdn },\n    'user',\n    {\n      firstNames,\n      lastName: nameObject?.family || '',\n      event: payload.event.toLowerCase(),\n      trackingId: payload.trackingId\n    }\n  )\n  return h.response().code(200)\n}",
      "startLine": 86,
      "endLine": 111,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/sms/correction.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-55",
      "type": "function_declaration",
      "name": "birthRegisterNotification",
      "text": "async function birthRegisterNotification(\n  req: Request,\n  h: ResponseToolkit\n) {\n  const registeredRecord = req.payload as RegisteredRecord\n  await sendNotification(\n    {\n      sms: messageKeys.birthRegistrationNotification,\n      email: messageKeys.birthRegistrationNotification\n    },\n    {\n      sms: getContactPhoneNo(registeredRecord),\n      email: getContactEmail(registeredRecord)\n    },\n    'informant',\n    {\n      trackingId: getTrackingId(registeredRecord),\n      crvsOffice: getOfficeName(registeredRecord),\n      registrationLocation: getRegistrationLocation(registeredRecord),\n      name: getPersonName(registeredRecord, 'child'),\n      informantName: getInformantName(registeredRecord),\n      registrationNumber: getRegistrationNumber(registeredRecord)\n    }\n  )\n\n  return h.response().code(200)\n}",
      "startLine": 29,
      "endLine": 55,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/register/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@56-82",
      "type": "function_declaration",
      "name": "deathRegisterNotification",
      "text": "async function deathRegisterNotification(\n  req: Request,\n  h: ResponseToolkit\n) {\n  const registeredRecord = req.payload as RegisteredRecord\n  await sendNotification(\n    {\n      sms: messageKeys.deathRegistrationNotification,\n      email: messageKeys.deathRegistrationNotification\n    },\n    {\n      sms: getContactPhoneNo(registeredRecord),\n      email: getContactEmail(registeredRecord)\n    },\n    'informant',\n    {\n      trackingId: getTrackingId(registeredRecord),\n      crvsOffice: getOfficeName(registeredRecord),\n      registrationLocation: getRegistrationLocation(registeredRecord),\n      name: getPersonName(registeredRecord, 'deceased'),\n      informantName: getInformantName(registeredRecord),\n      registrationNumber: getRegistrationNumber(registeredRecord)\n    }\n  )\n\n  return h.response().code(200)\n}",
      "startLine": 56,
      "endLine": 82,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/features/register/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@11-14",
      "type": "function_declaration",
      "name": "getAvailableLanguages",
      "text": "function getAvailableLanguages() {\n  const LANGUAGES = (process.env.LANGUAGES && process.env.LANGUAGES) || 'bn,en'\n  return LANGUAGES.split(',')\n}",
      "startLine": 11,
      "endLine": 14,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@16-18",
      "type": "function_declaration",
      "name": "getDefaultLanguage",
      "text": "function getDefaultLanguage() {\n  return getAvailableLanguages()[0]\n}",
      "startLine": 16,
      "endLine": 18,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/i18n/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@12-17",
      "type": "function_declaration",
      "name": "createServerWithEnvironment",
      "text": "function createServerWithEnvironment() {\n  jest.resetModules()\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  /* eslint-disable @typescript-eslint/no-var-requires */\n  return require('../server').createServer()\n}",
      "startLine": 12,
      "endLine": 17,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/notification/src/tests/util.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-28",
      "type": "function_declaration",
      "name": "wait",
      "text": "async function wait(delay: number) {\n  await new Promise((resolve) => setTimeout(resolve, delay))\n}",
      "startLine": 26,
      "endLine": 28,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/config/hearthClient.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@26-76",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  const server = new Hapi.Server({\n    host: HOST,\n    port: PORT,\n    routes: {\n      cors: { origin: ['*'] },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n\n  await server.register(getPlugins())\n\n  server.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:search-user'\n    },\n    validate: (payload: any) => ({\n      isValid: true\n    })\n  })\n\n  server.auth.default('jwt')\n\n  const routes = getRoutes()\n  server.route(routes)\n\n  server.ext({\n    type: 'onRequest',\n    method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }\n  })\n\n  async function start() {\n    await server.start()\n    await mongoDirect.start()\n    server.log('info', `Search server started on ${HOST}:${PORT}`)\n  }\n\n  async function stop() {\n    await server.stop()\n    await mongoDirect.stop()\n    server.log('info', 'Search server stopped')\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 26,
      "endLine": 76,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@57-60",
      "type": "method_definition",
      "name": "method",
      "text": "method(request: Hapi.Request & { sentryScope?: any }, h) {\n      request.sentryScope?.setExtra('payload', request.payload)\n      return h.continue\n    }",
      "startLine": 57,
      "endLine": 60,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@63-67",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    await server.start()\n    await mongoDirect.start()\n    server.log('info', `Search server started on ${HOST}:${PORT}`)\n  }",
      "startLine": 63,
      "endLine": 67,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@69-73",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    await mongoDirect.stop()\n    server.log('info', 'Search server stopped')\n  }",
      "startLine": 69,
      "endLine": 73,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@18-25",
      "type": "function_declaration",
      "name": "getEventType",
      "text": "function getEventType(bundle: SavedBundle) {\n  const task = getTaskFromSavedBundle(bundle)\n  if (!task) {\n    throw new Error('No task found')\n  }\n  const type = task.code!.coding![0].code as EVENT_TYPE\n  return type\n}",
      "startLine": 18,
      "endLine": 25,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/utils/event.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@35-42",
      "type": "function_declaration",
      "name": "SavedTask",
      "text": "function findTaskExtension<\n  T extends keyof KnownExtensionType,\n  Task extends TaskHistory | SavedTask\n>(task: Task, extensionUrl: T) {\n  return task.extension.find(\n    (ext): ext is KnownExtensionType[T] => ext.url === extensionUrl\n  )\n}",
      "startLine": 35,
      "endLine": 42,
      "parentType": "export_statement",
      "childrenTypes": [
        "ERROR",
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@44-54",
      "type": "function_declaration",
      "name": "KnownExtensionType",
      "text": "function findExtension<T extends keyof KnownExtensionType>(\n  url: T,\n  extensions: Extension[] | undefined\n) {\n  const extension =\n    extensions &&\n    extensions.find((obj): obj is KnownExtensionType[T] => {\n      return obj.url === url\n    })\n  return extension\n}",
      "startLine": 44,
      "endLine": 54,
      "parentType": "export_statement",
      "childrenTypes": [
        "ERROR",
        "identifier",
        "ERROR",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/fhir/fhir-utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@22-46",
      "type": "function_declaration",
      "name": "compareForBirthDuplication",
      "text": "async function compareForBirthDuplication(\n  registrationComparison: ComparisonObject<\n    Omit<BirthDocument, 'compositionId'>\n  >,\n  client: elasticsearch.Client\n) {\n  const existingComposition = Object.fromEntries(\n    Object.entries<Values<BirthDocument>[]>(registrationComparison).map(\n      ([key, values]) => [key, values[0]]\n    )\n  )\n  const newComposition = Object.fromEntries(\n    Object.entries<Values<BirthDocument>[]>(registrationComparison).map(\n      ([key, values]) => [key, values[1]]\n    )\n  )\n\n  await indexComposition(\n    '123-123-123-123',\n    { compositionId: '123-123-123-123', ...existingComposition },\n    client\n  )\n  const results = await searchForBirthDuplicates(newComposition, client)\n  return results\n}",
      "startLine": 22,
      "endLine": 46,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/deduplicate/test-util.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@48-72",
      "type": "function_declaration",
      "name": "compareForDeathDuplication",
      "text": "async function compareForDeathDuplication(\n  registrationComparison: ComparisonObject<\n    Omit<DeathDocument, 'compositionId'>\n  >,\n  client: elasticsearch.Client\n) {\n  const existingComposition = Object.fromEntries(\n    Object.entries<Values<DeathDocument>[]>(registrationComparison).map(\n      ([key, values]) => [key, values[0]]\n    )\n  )\n  const newComposition = Object.fromEntries(\n    Object.entries<Values<DeathDocument>[]>(registrationComparison).map(\n      ([key, values]) => [key, values[1]]\n    )\n  )\n\n  await indexComposition(\n    '123-123-123-123',\n    { compositionId: '123-123-123-123', ...existingComposition },\n    client\n  )\n  const results = await searchForDeathDuplicates(newComposition, client)\n  return results\n}",
      "startLine": 48,
      "endLine": 72,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/deduplicate/test-util.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-37",
      "type": "function_declaration",
      "name": "deduplicateHandler",
      "text": "async function deduplicateHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const client = getOrCreateClient()\n  try {\n    const payload = request.payload as fhir.Bundle\n    const composition = payload.entry?.find(\n      (e) => e.resource?.resourceType === 'Composition'\n    )\n\n    await removeDuplicate(\n      composition?.resource as fhir.Composition & { id: string },\n      client\n    )\n  } catch (error) {\n    logger.error(`Search/searchDeclarationHandler: error: ${error}`)\n    return internal(error)\n  }\n  return h.response().code(200)\n}",
      "startLine": 17,
      "endLine": 37,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/deduplicate/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-40",
      "type": "function_declaration",
      "name": "recordHandler",
      "text": "async function recordHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const record = request.payload as ValidRecord\n\n  switch (getEventType(record)) {\n    case 'BIRTH':\n      await upsertBirthEvent(record)\n      break\n    case 'DEATH':\n      await upsertDeathEvent(record)\n      break\n    case 'MARRIAGE':\n      await upsertMarriageEvent(record)\n      break\n    default:\n      throw new Error('Unsupported event type')\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 19,
      "endLine": 40,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/record/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-32",
      "type": "function_declaration",
      "name": "deathEventHandler",
      "text": "async function deathEventHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const record = request.payload as ValidRecord\n  try {\n    await indexRecord(record)\n  } catch (error) {\n    logger.error(`Search/deathEventHandler: error: ${error}`)\n    return internal(error)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 19,
      "endLine": 32,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/death/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@158-178",
      "type": "function_declaration",
      "name": "createMotherIndex",
      "text": "function createMotherIndex(\n  body: DeathDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const mother = findEntry<Patient>(MOTHER_CODE, composition, bundle)\n\n  if (!mother) {\n    return\n  }\n\n  const motherName = findName(NAME_EN, mother.name)\n  const motherNameLocal = findNameLocale(mother.name)\n\n  body.motherFirstNames = motherName?.given?.at(0)\n  body.motherMiddleName = motherName?.given?.at(1)\n  body.motherFamilyName = motherName?.family\n  body.motherFirstNamesLocal = motherNameLocal?.given?.at(0)\n  body.motherMiddleNameLocal = motherNameLocal?.given?.at(1)\n  body.motherFamilyNameLocal = motherNameLocal?.family\n}",
      "startLine": 158,
      "endLine": 178,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/death/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@180-200",
      "type": "function_declaration",
      "name": "createFatherIndex",
      "text": "function createFatherIndex(\n  body: DeathDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const father = findEntry<Patient>(FATHER_CODE, composition, bundle)\n\n  if (!father) {\n    return\n  }\n\n  const fatherName = findName(NAME_EN, father.name)\n  const fatherNameLocal = findNameLocale(father.name)\n\n  body.fatherFirstNames = fatherName?.given?.at(0)\n  body.fatherMiddleName = fatherName?.given?.at(1)\n  body.fatherFamilyName = fatherName?.family\n  body.fatherFirstNamesLocal = fatherNameLocal?.given?.at(0)\n  body.fatherMiddleNameLocal = fatherNameLocal?.given?.at(1)\n  body.fatherFamilyNameLocal = fatherNameLocal?.family\n}",
      "startLine": 180,
      "endLine": 200,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/death/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@202-223",
      "type": "function_declaration",
      "name": "createSpouseIndex",
      "text": "function createSpouseIndex(\n  body: DeathDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const spouse = findEntry<Patient>(SPOUSE_CODE, composition, bundle)\n\n  if (!spouse) {\n    return\n  }\n\n  const spouseName = findName(NAME_EN, spouse.name)\n  const spouseNameLocal = findNameLocale(spouse.name)\n\n  body.spouseFirstNames = spouseName?.given?.at(0)\n  body.spouseMiddleName = spouseName?.given?.at(1)\n  body.spouseFamilyName = spouseName?.family\n  body.spouseFirstNamesLocal = spouseNameLocal?.given?.at(0)\n  body.spouseMiddleNameLocal = spouseNameLocal?.given?.at(1)\n  body.spouseFamilyNameLocal = spouseNameLocal?.family\n  body.spouseIdentifier = findPatientPrimaryIdentifier(spouse)?.value\n}",
      "startLine": 202,
      "endLine": 223,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/death/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@225-260",
      "type": "function_declaration",
      "name": "createInformantIndex",
      "text": "function createInformantIndex(\n  body: DeathDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const informantRef = findEntry<SavedRelatedPerson>(\n    INFORMANT_CODE,\n    composition,\n    bundle\n  )\n\n  if (!informantRef || !informantRef.patient) {\n    return\n  }\n\n  const informant = getFromBundleById<Patient>(\n    bundle,\n    resourceIdentifierToUUID(informantRef.patient.reference)\n  )?.resource\n\n  if (!informant) {\n    return\n  }\n\n  const informantName = findName(NAME_EN, informant.name)\n  const informantNameLocal = findNameLocale(informant.name)\n\n  body.informantFirstNames = informantName?.given?.at(0)\n  body.informantMiddleName = informantName?.given?.at(1)\n  body.informantFamilyName = informantName?.family\n  body.informantFirstNamesLocal = informantNameLocal?.given?.at(0)\n  body.informantMiddleNameLocal = informantNameLocal?.given?.at(1)\n  body.informantFamilyNameLocal = informantNameLocal?.family\n  body.informantDoB = informant.birthDate\n  body.informantIdentifier = findPatientPrimaryIdentifier(informant)?.value\n}",
      "startLine": 225,
      "endLine": 260,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/death/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@262-362",
      "type": "function_declaration",
      "name": "createDeclarationIndex",
      "text": "function createDeclarationIndex(\n  body: DeathDocument,\n  composition: fhir.Composition,\n  bundle: SavedBundle\n) {\n  const task = getTaskFromSavedBundle(bundle)\n  const contactPersonExtention = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person'\n  )\n  const contactPersonRelationshipExtention = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-relationship'\n  )\n  const contactNumberExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person-phone-number'\n  )\n  const emailExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person-email'\n  )\n  const placeOfDeclarationExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/regLastOffice'\n  )\n\n  const trackingIdIdentifier = findTaskIdentifier(\n    task,\n    'http://opencrvs.org/specs/id/death-tracking-id'\n  )\n  const registrationNumberIdentifier = findTaskIdentifier(\n    task,\n    'http://opencrvs.org/specs/id/death-registration-number'\n  )\n\n  const regLastUserIdentifier = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/regLastUser'\n  )\n\n  const regLastUser =\n    regLastUserIdentifier &&\n    regLastUserIdentifier.valueReference &&\n    regLastUserIdentifier.valueReference.reference &&\n    regLastUserIdentifier.valueReference.reference.split('/')[1]\n\n  const compositionTypeCode =\n    composition.type.coding &&\n    composition.type.coding.find(\n      (code) => code.system === 'http://opencrvs.org/doc-types'\n    )\n\n  const otherInformantType =\n    (contactPersonRelationshipExtention &&\n      contactPersonRelationshipExtention.valueString) ||\n    (contactPersonExtention && contactPersonExtention.valueString)\n\n  const informantType = getInformantType(bundle as ValidRecord)\n\n  body.informantType = informantType || otherInformantType\n  body.contactNumber =\n    contactNumberExtension && contactNumberExtension.valueString\n  body.contactEmail = emailExtension && emailExtension.valueString\n  body.type =\n    task &&\n    task.businessStatus &&\n    task.businessStatus.coding &&\n    task.businessStatus.coding[0].code\n  body.dateOfDeclaration = task && task.lastModified\n  body.trackingId = trackingIdIdentifier && trackingIdIdentifier.value\n  body.registrationNumber =\n    registrationNumberIdentifier && registrationNumberIdentifier.value\n  body.declarationLocationId =\n    placeOfDeclarationExtension &&\n    placeOfDeclarationExtension.valueReference &&\n    placeOfDeclarationExtension.valueReference.reference &&\n    placeOfDeclarationExtension.valueReference.reference.split('/')[1]\n  body.declarationJurisdictionIds = body.declarationLocationId\n    ? [body.declarationLocationId]\n    : []\n\n  body.compositionType =\n    (compositionTypeCode && compositionTypeCode.code) || 'death-declaration'\n\n  const firstTaskHistory = findFirstTaskHistory(bundle)\n  body.lastStatusChangedAt = getLastStatusChangedAt(bundle, task)\n\n  const firstRegLastUserExtension =\n    firstTaskHistory &&\n    findTaskExtension(\n      firstTaskHistory,\n      'http://opencrvs.org/specs/extension/regLastUser'\n    )\n  const firstRegLastUser =\n    firstRegLastUserExtension &&\n    resourceIdentifierToUUID(firstRegLastUserExtension.valueReference.reference)\n\n  body.createdBy = firstRegLastUser || regLastUser\n  body.updatedBy = regLastUser\n}",
      "startLine": 262,
      "endLine": 362,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/death/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@59-66",
      "type": "function_declaration",
      "name": "indexRecord",
      "text": "async function indexRecord(record: SavedBundle) {\n  const client = getOrCreateClient()\n\n  const { id: compositionId } = getComposition(record)\n  const existingDocument = await searchByCompositionId(compositionId, client)\n  const document = composeDocument(record, existingDocument)\n  await indexComposition(compositionId, document, client)\n}",
      "startLine": 59,
      "endLine": 66,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/birth/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@133-164",
      "type": "function_declaration",
      "name": "createChildIndex",
      "text": "function createChildIndex(\n  body: BirthDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const child = findEntry<Patient>(CHILD_CODE, composition, bundle)\n\n  if (!child) {\n    return\n  }\n\n  const childName = findName(NAME_EN, child.name)\n  const childNameLocal = findNameLocale(child.name)\n\n  body.childIdentifier = findPatientPrimaryIdentifier(child)?.value\n  body.childFirstNames = childName?.given?.at(0)\n  body.childMiddleName = childName?.given?.at(1)\n  body.childFamilyName = childName?.family\n  body.childFirstNamesLocal = childNameLocal?.given?.at(0)\n  body.childMiddleNameLocal = childNameLocal?.given?.at(1)\n  // what happens if country demands name like : familyName firstName\n  body.name =\n    (body.childFirstNames || '') +\n    ' ' +\n    (body.childMiddleName || '') +\n    ' ' +\n    (body.childFamilyName || '')\n\n  body.childFamilyNameLocal = childNameLocal?.family\n  body.childDoB = child.birthDate\n  body.gender = child.gender\n}",
      "startLine": 133,
      "endLine": 164,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/birth/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@166-188",
      "type": "function_declaration",
      "name": "createMotherIndex",
      "text": "function createMotherIndex(\n  body: BirthDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const mother = findEntry<Patient>(MOTHER_CODE, composition, bundle)\n\n  if (!mother) {\n    return\n  }\n\n  const motherName = findName(NAME_EN, mother.name)\n  const motherNameLocal = findNameLocale(mother.name)\n\n  body.motherFirstNames = motherName?.given?.at(0)\n  body.motherMiddleName = motherName?.given?.at(1)\n  body.motherFamilyName = motherName?.family\n  body.motherFirstNamesLocal = motherNameLocal?.given?.at(0)\n  body.motherMiddleNameLocal = motherNameLocal?.given?.at(1)\n  body.motherFamilyNameLocal = motherNameLocal?.family\n  body.motherDoB = mother.birthDate\n  body.motherIdentifier = findPatientPrimaryIdentifier(mother)?.value\n}",
      "startLine": 166,
      "endLine": 188,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/birth/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@190-212",
      "type": "function_declaration",
      "name": "createFatherIndex",
      "text": "function createFatherIndex(\n  body: BirthDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const father = findEntry<Patient>(FATHER_CODE, composition, bundle)\n\n  if (!father) {\n    return\n  }\n\n  const fatherName = findName(NAME_EN, father.name)\n  const fatherNameLocal = findNameLocale(father.name)\n\n  body.fatherFirstNames = fatherName?.given?.at(0)\n  body.fatherMiddleName = fatherName?.given?.at(1)\n  body.fatherFamilyName = fatherName?.family\n  body.fatherFirstNamesLocal = fatherNameLocal?.given?.at(0)\n  body.fatherMiddleNameLocal = fatherNameLocal?.given?.at(1)\n  body.fatherFamilyNameLocal = fatherNameLocal?.family\n  body.fatherDoB = father.birthDate\n  body.fatherIdentifier = findPatientPrimaryIdentifier(father)?.value\n}",
      "startLine": 190,
      "endLine": 212,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/birth/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@214-249",
      "type": "function_declaration",
      "name": "createInformantIndex",
      "text": "function createInformantIndex(\n  body: BirthDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const informantRef = findEntry<SavedRelatedPerson>(\n    INFORMANT_CODE,\n    composition,\n    bundle\n  )\n\n  if (!informantRef || !informantRef.patient) {\n    return\n  }\n\n  const informant = getFromBundleById<Patient>(\n    bundle,\n    resourceIdentifierToUUID(informantRef.patient.reference)\n  )?.resource\n\n  if (!informant) {\n    return\n  }\n\n  const informantName = findName(NAME_EN, informant.name)\n  const informantNameLocal = findNameLocale(informant.name)\n\n  body.informantFirstNames = informantName?.given?.at(0)\n  body.informantMiddleName = informantName?.given?.at(1)\n  body.informantFamilyName = informantName?.family\n  body.informantFirstNamesLocal = informantNameLocal?.given?.at(0)\n  body.informantMiddleNameLocal = informantNameLocal?.given?.at(1)\n  body.informantFamilyNameLocal = informantNameLocal?.family\n  body.informantDoB = informant.birthDate\n  body.informantIdentifier = findPatientPrimaryIdentifier(informant)?.value\n}",
      "startLine": 214,
      "endLine": 249,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/birth/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@251-346",
      "type": "function_declaration",
      "name": "createDeclarationIndex",
      "text": "function createDeclarationIndex(\n  body: BirthDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const task = getTaskFromSavedBundle(bundle)\n  const contactPersonExtention = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person'\n  )\n  const contactPersonRelationshipExtention = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-relationship'\n  )\n  const contactNumberExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person-phone-number'\n  )\n  const emailExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person-email'\n  )\n  const placeOfDeclarationExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/regLastOffice'\n  )\n\n  const trackingIdIdentifier = findTaskIdentifier(\n    task,\n    'http://opencrvs.org/specs/id/birth-tracking-id'\n  )\n\n  const registrationNumberIdentifier = findTaskIdentifier(\n    task,\n    'http://opencrvs.org/specs/id/birth-registration-number'\n  )\n\n  const regLastUserIdentifier = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/regLastUser'\n  )\n\n  const regLastUser =\n    regLastUserIdentifier &&\n    resourceIdentifierToUUID(regLastUserIdentifier.valueReference.reference)\n\n  const compositionTypeCode =\n    composition.type.coding &&\n    composition.type.coding.find(\n      (code) => code.system === 'http://opencrvs.org/doc-types'\n    )\n\n  const otherInformantType =\n    (contactPersonRelationshipExtention &&\n      contactPersonRelationshipExtention.valueString) ||\n    (contactPersonExtention && contactPersonExtention.valueString)\n\n  const informantType = getInformantType(bundle as ValidRecord)\n\n  body.informantType = informantType || otherInformantType\n  body.contactNumber =\n    contactNumberExtension && contactNumberExtension.valueString\n  body.contactEmail = emailExtension && emailExtension.valueString\n  body.type = task && getBusinessStatus(task)\n  body.dateOfDeclaration = task && task.lastModified\n  body.trackingId = trackingIdIdentifier && trackingIdIdentifier.value\n  body.registrationNumber =\n    registrationNumberIdentifier && registrationNumberIdentifier.value\n  body.declarationLocationId =\n    placeOfDeclarationExtension &&\n    placeOfDeclarationExtension.valueReference &&\n    placeOfDeclarationExtension.valueReference.reference &&\n    placeOfDeclarationExtension.valueReference.reference.split('/')[1]\n  body.declarationJurisdictionIds = body.declarationLocationId\n    ? [body.declarationLocationId]\n    : []\n  body.compositionType =\n    (compositionTypeCode && compositionTypeCode.code) || 'birth-declaration'\n\n  const firstTaskHistory = findFirstTaskHistory(bundle)\n\n  body.lastStatusChangedAt = getLastStatusChangedAt(bundle, task)\n\n  const firstRegLastUserExtension =\n    firstTaskHistory &&\n    findTaskExtension(\n      firstTaskHistory,\n      'http://opencrvs.org/specs/extension/regLastUser'\n    )\n  const firstRegLastUser =\n    firstRegLastUserExtension &&\n    resourceIdentifierToUUID(firstRegLastUserExtension.valueReference.reference)\n\n  body.createdBy = firstRegLastUser || regLastUser\n  body.updatedBy = regLastUser\n}",
      "startLine": 251,
      "endLine": 346,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/birth/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-30",
      "type": "function_declaration",
      "name": "birthEventHandler",
      "text": "async function birthEventHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const record = request.payload as ValidRecord\n  try {\n    await indexRecord(record)\n  } catch (error) {\n    logger.error(`Search/birthEventHandler: error: ${error}`)\n    return internal(error)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 17,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/birth/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@31-79",
      "type": "function_declaration",
      "name": "updateEventToAddAssignment",
      "text": "async function updateEventToAddAssignment(requestBundle: Hapi.Request) {\n  const client = getOrCreateClient()\n  const bundle = requestBundle.payload as SavedBundle\n  const authHeader = requestBundle.headers.authorization\n\n  const task = getTaskFromSavedBundle(bundle)\n\n  const compositionId = task.focus.reference.split('/')[1]\n\n  if (!compositionId) {\n    throw new Error('No Composition ID found')\n  }\n\n  const regLastUserIdentifier = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/regLastUser'\n  )\n  const regLastOffice = findLastOfficeFromSavedBundle(bundle)\n  const regLastUserExtension = findExtension(\n    LAST_USER_EXTENSION_URL,\n    task.extension\n  )\n  const practitionerId = resourceIdentifierToUUID(\n    regLastUserExtension!.valueReference.reference\n  )\n\n  const body: SearchDocument = {\n    compositionId\n  }\n  body.modifiedAt = Date.now().toString()\n  body.assignment = {} as IAssignment\n  body.assignment.officeName = regLastOffice?.name ?? ''\n  body.assignment.practitionerId = practitionerId\n  body.updatedBy =\n    regLastUserIdentifier &&\n    regLastUserIdentifier.valueReference &&\n    regLastUserIdentifier.valueReference.reference &&\n    regLastUserIdentifier.valueReference.reference.split('/')[1]\n\n  const user: IUserModelData = await getUser(body.updatedBy || '', authHeader)\n  const userName = user && findName(NAME_EN, user.name)\n  const userFirstNames = userName?.given?.join(' ') || ''\n  const userFamilyName = userName?.family || ''\n\n  body.assignment.firstName = userFirstNames\n  body.assignment.lastName = userFamilyName\n\n  await updateComposition(compositionId, body, client)\n}",
      "startLine": 31,
      "endLine": 79,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/assignment/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@81-112",
      "type": "function_declaration",
      "name": "updateEventToRemoveAssignment",
      "text": "async function updateEventToRemoveAssignment(\n  requestBundle: Hapi.Request\n) {\n  const client = getOrCreateClient()\n  const bundle = requestBundle.payload as SavedBundle\n\n  const task = getTaskFromSavedBundle(bundle)\n\n  const compositionId =\n    task &&\n    task.focus &&\n    task.focus.reference &&\n    task.focus.reference.split('/')[1]\n\n  if (!compositionId) {\n    throw new Error('No Composition ID found')\n  }\n\n  const regLastUserIdentifier = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/regLastUser'\n  )\n  const body: SearchDocument = { compositionId }\n  body.modifiedAt = Date.now().toString()\n  body.assignment = null\n  body.updatedBy =\n    regLastUserIdentifier &&\n    regLastUserIdentifier.valueReference &&\n    regLastUserIdentifier.valueReference.reference &&\n    regLastUserIdentifier.valueReference.reference.split('/')[1]\n  await updateComposition(compositionId, body, client)\n}",
      "startLine": 81,
      "endLine": 112,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/assignment/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-38",
      "type": "function_declaration",
      "name": "assignEventHandler",
      "text": "async function assignEventHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    const tokenPayload = getTokenPayload(request.headers.authorization)\n    if (tokenPayload.scope.includes(SCOPES.RECORDSEARCH)) {\n      return h.response().code(200)\n    }\n\n    await updateEventToAddAssignment(request)\n  } catch (error) {\n    logger.error(`Search/assignEventHandler: error: ${error}`)\n    return internal(error)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 21,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/assignment/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-52",
      "type": "function_declaration",
      "name": "unassignEventHandler",
      "text": "async function unassignEventHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  try {\n    await updateEventToRemoveAssignment(request)\n  } catch (error) {\n    logger.error(`Search/unassignEventHandler: error: ${error}`)\n    return internal(error)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 40,
      "endLine": 52,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/assignment/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@133-160",
      "type": "function_declaration",
      "name": "createBrideIndex",
      "text": "function createBrideIndex(\n  body: MarriageDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const bride = findEntry<Patient>(BRIDE_CODE, composition, bundle)\n\n  const marriageExtension = findExtension(\n    `${OPENCRVS_SPECIFICATION_URL}extension/date-of-marriage`,\n    bride?.extension\n  )\n\n  const brideName = bride && findName(NAME_EN, bride.name)\n  const brideNameLocal = bride && findNameLocale(bride.name)\n\n  body.brideFirstNames = brideName?.given?.at(0)\n  body.brideMiddleName = brideName?.given?.at(1)\n  body.brideFamilyName = brideName?.family\n  body.brideFirstNamesLocal = brideNameLocal?.given?.at(0)\n  body.brideMiddleNameLocal = brideNameLocal?.given?.at(1)\n  body.brideFamilyNameLocal = brideNameLocal?.family\n  if (marriageExtension) {\n    body.marriageDate = marriageExtension.valueDateTime\n  }\n\n  body.brideIdentifier = bride && findPatientPrimaryIdentifier(bride)?.value\n  body.brideDoB = bride && bride.birthDate\n}",
      "startLine": 133,
      "endLine": 160,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/marriage/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@162-190",
      "type": "function_declaration",
      "name": "createGroomIndex",
      "text": "function createGroomIndex(\n  body: MarriageDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const groom = findEntry<Patient>(GROOM_CODE, composition, bundle)\n\n  const marriageExtension = findExtension(\n    `${OPENCRVS_SPECIFICATION_URL}extension/date-of-marriage`,\n    groom?.extension\n  )\n\n  const groomName = groom && findName(NAME_EN, groom.name)\n  const groomNameLocal = groom && findNameLocale(groom.name)\n\n  body.groomFirstNames = groomName?.given?.at(0)\n  body.groomMiddleName = groomName?.given?.at(1)\n  body.groomFamilyName = groomName?.family\n  body.groomFirstNamesLocal = groomNameLocal?.given?.at(0)\n  body.groomMiddleNameLocal = groomNameLocal?.given?.at(1)\n  body.groomFamilyNameLocal = groomNameLocal?.family\n\n  if (marriageExtension) {\n    body.marriageDate = marriageExtension.valueDateTime\n  }\n\n  body.groomIdentifier = groom && findPatientPrimaryIdentifier(groom)?.value\n  body.groomDoB = groom && groom.birthDate\n}",
      "startLine": 162,
      "endLine": 190,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/marriage/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@192-225",
      "type": "function_declaration",
      "name": "createWitnessOneIndex",
      "text": "function createWitnessOneIndex(\n  body: MarriageDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const witnessRef = findEntry<SavedRelatedPerson>(\n    WITNESS_ONE_CODE,\n    composition,\n    bundle\n  )\n\n  if (!witnessRef || !witnessRef.patient) {\n    return\n  }\n\n  const witness = getFromBundleById<Patient>(\n    bundle,\n    resourceIdentifierToUUID(witnessRef.patient.reference)\n  ).resource\n\n  if (!witness) {\n    return\n  }\n\n  const witnessName = findName(NAME_EN, witness.name)\n  const witnessNameLocal = findNameLocale(witness.name)\n\n  body.witnessOneFirstNames = witnessName?.given?.at(0)\n  body.witnessOneMiddleName = witnessName?.given?.at(1)\n  body.witnessOneFamilyName = witnessName?.family\n  body.witnessOneFirstNamesLocal = witnessNameLocal?.given?.at(0)\n  body.witnessOneMiddleNameLocal = witnessNameLocal?.given?.at(1)\n  body.witnessOneFamilyNameLocal = witnessNameLocal?.family\n}",
      "startLine": 192,
      "endLine": 225,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/marriage/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@227-259",
      "type": "function_declaration",
      "name": "createWitnessTwoIndex",
      "text": "function createWitnessTwoIndex(\n  body: MarriageDocument,\n  composition: SavedComposition,\n  bundle: SavedBundle\n) {\n  const witnessRef = findEntry<SavedRelatedPerson>(\n    WITNESS_TWO_CODE,\n    composition,\n    bundle\n  )\n\n  if (!witnessRef || !witnessRef.patient) {\n    return\n  }\n\n  const witness = getFromBundleById<Patient>(\n    bundle,\n    resourceIdentifierToUUID(witnessRef.patient.reference)\n  ).resource\n\n  if (!witness) {\n    return\n  }\n\n  const witnessName = findName(NAME_EN, witness.name)\n  const witnessNameLocal = findNameLocale(witness.name)\n  body.witnessTwoFirstNames = witnessName?.given?.at(0)\n  body.witnessTwoMiddleName = witnessName?.given?.at(1)\n  body.witnessTwoFamilyName = witnessName?.family\n  body.witnessTwoFirstNamesLocal = witnessNameLocal?.given?.at(0)\n  body.witnessTwoMiddleNameLocal = witnessNameLocal?.given?.at(1)\n  body.witnessTwoFamilyNameLocal = witnessNameLocal?.family\n}",
      "startLine": 227,
      "endLine": 259,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/marriage/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@261-361",
      "type": "function_declaration",
      "name": "createDeclarationIndex",
      "text": "function createDeclarationIndex(\n  body: MarriageDocument,\n  composition: fhir.Composition,\n  bundle: SavedBundle\n) {\n  const task = getTaskFromSavedBundle(bundle)\n  const contactPersonExtention = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person'\n  )\n  const contactPersonRelationshipExtention = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-relationship'\n  )\n  const contactNumberExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person-phone-number'\n  )\n  const emailExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/contact-person-email'\n  )\n  const placeOfDeclarationExtension = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/regLastOffice'\n  )\n\n  const trackingIdIdentifier = findTaskIdentifier(\n    task,\n    'http://opencrvs.org/specs/id/marriage-tracking-id'\n  )\n  const registrationNumberIdentifier = findTaskIdentifier(\n    task,\n    'http://opencrvs.org/specs/id/marriage-registration-number'\n  )\n\n  const regLastUserIdentifier = findTaskExtension(\n    task,\n    'http://opencrvs.org/specs/extension/regLastUser'\n  )\n\n  const regLastUser =\n    regLastUserIdentifier &&\n    regLastUserIdentifier.valueReference &&\n    regLastUserIdentifier.valueReference.reference &&\n    regLastUserIdentifier.valueReference.reference.split('/')[1]\n\n  const compositionTypeCode =\n    composition.type.coding &&\n    composition.type.coding.find(\n      (code) => code.system === 'http://opencrvs.org/doc-types'\n    )\n\n  const otherInformantType =\n    (contactPersonRelationshipExtention &&\n      contactPersonRelationshipExtention.valueString) ||\n    (contactPersonExtention && contactPersonExtention.valueString)\n\n  const informantType = getInformantType(bundle as ValidRecord)\n\n  body.informantType = informantType || otherInformantType\n  body.contactNumber =\n    contactNumberExtension && contactNumberExtension.valueString\n  body.contactEmail = emailExtension && emailExtension.valueString\n  body.type =\n    task &&\n    task.businessStatus &&\n    task.businessStatus.coding &&\n    task.businessStatus.coding[0].code\n  body.dateOfDeclaration = task && task.lastModified\n  body.trackingId = trackingIdIdentifier && trackingIdIdentifier.value\n  body.registrationNumber =\n    registrationNumberIdentifier && registrationNumberIdentifier.value\n  body.declarationLocationId =\n    placeOfDeclarationExtension &&\n    placeOfDeclarationExtension.valueReference &&\n    placeOfDeclarationExtension.valueReference.reference &&\n    placeOfDeclarationExtension.valueReference.reference.split('/')[1]\n  body.declarationJurisdictionIds = body.declarationLocationId\n    ? [body.declarationLocationId]\n    : []\n\n  body.compositionType =\n    (compositionTypeCode && compositionTypeCode.code) || 'marriage-declaration'\n\n  const firstTaskHistory = findFirstTaskHistory(bundle)\n  const firstRegLastUserExtension =\n    firstTaskHistory &&\n    findTaskExtension(\n      firstTaskHistory,\n      'http://opencrvs.org/specs/extension/regLastUser'\n    )\n  const firstRegLastUser =\n    firstRegLastUserExtension &&\n    resourceIdentifierToUUID(firstRegLastUserExtension.valueReference.reference)\n\n  body.createdBy = firstRegLastUser || regLastUser\n  body.updatedBy = regLastUser\n\n  body.lastStatusChangedAt = getLastStatusChangedAt(bundle, task)\n}",
      "startLine": 261,
      "endLine": 361,
      "parentType": "program",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 1,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/marriage/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@15-37",
      "type": "function_declaration",
      "name": "getRecordByIdHandler",
      "text": "async function getRecordByIdHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const recordId = request.params.recordId\n  const allowedStates = request.query.states?.split(',') || []\n  const includeHistoryResources =\n    request.query.includeHistoryResources !== undefined\n  try {\n    const bundle = await getRecordById(\n      recordId,\n      allowedStates,\n      includeHistoryResources\n    )\n\n    return bundle\n  } catch (error) {\n    if (error instanceof RecordNotFoundError) {\n      return h.response({ error: error.message }).code(404)\n    }\n    throw boomify(error)\n  }\n}",
      "startLine": 15,
      "endLine": 37,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/records/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-33",
      "type": "function_declaration",
      "name": "marriageEventHandler",
      "text": "async function marriageEventHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const record = request.payload as ValidRecord\n\n  try {\n    await indexRecord(record)\n  } catch (error) {\n    logger.error(`Search/marriageEventHandler: error: ${error}`)\n    return internal(error)\n  }\n\n  return h.response().code(200)\n}",
      "startLine": 19,
      "endLine": 33,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/registration/marriage/handler.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@78-80",
      "type": "method_definition",
      "name": "onDrop",
      "text": "onDrop(doc) {\n        droppedCompositionIds.push(doc.document.compositionId)\n      }",
      "startLine": 78,
      "endLine": 80,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 11,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/reindex/reindex.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@105-134",
      "type": "function_declaration",
      "name": "updateAliases",
      "text": "async function updateAliases() {\n  const client = getOrCreateClient()\n\n  const indices =\n    (await client.cat.indices({\n      format: 'json',\n      index: `${OPENCRVS_INDEX_NAME}-*`\n    })) ?? []\n\n  const sortedIndices = orderBy(indices, (index) => index.index, 'desc')\n\n  const latestIndexName = sortedIndices[0]?.index\n\n  if (!latestIndexName) {\n    logger.error('No indices found. Skipping alias update')\n    return\n  }\n\n  await client.indices.updateAliases({\n    actions: [\n      {\n        remove: {\n          alias: OPENCRVS_INDEX_NAME,\n          index: `${OPENCRVS_INDEX_NAME}-*`\n        }\n      },\n      { add: { alias: OPENCRVS_INDEX_NAME, index: latestIndexName } }\n    ]\n  })\n}",
      "startLine": 105,
      "endLine": 134,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/reindex/reindex.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@142-184",
      "type": "function_declaration",
      "name": "backupLegacyIndex",
      "text": "async function backupLegacyIndex() {\n  logger.info(`Checking if ${OPENCRVS_INDEX_NAME} index exists...`)\n  const client = getOrCreateClient()\n\n  const ocrvsIndexExists = await client.indices.exists({\n    index: OPENCRVS_INDEX_NAME\n  })\n\n  const ocrvsIndexAliasExists = await client.indices.existsAlias({\n    name: OPENCRVS_INDEX_NAME\n  })\n\n  // indices.exists() returns true if the index exists or if the alias exists\n  const hasLegacyIndex = ocrvsIndexExists && !ocrvsIndexAliasExists\n\n  if (hasLegacyIndex) {\n    // Since the approach is not atomic, we create backup index with a timestamped name.\n    // If the actual reindexing from mongodb goes through, this will be removed\n    const timestampedBackupIndexName = `${formatIndexName()}-legacy-backup`\n\n    logger.info(\n      `${OPENCRVS_INDEX_NAME} index exists, creating a copy as ${timestampedBackupIndexName}`\n    )\n\n    await client.indices.putSettings({\n      index: OPENCRVS_INDEX_NAME,\n      settings: {\n        'index.blocks.write': true\n      }\n    })\n\n    await client.indices.clone({\n      index: OPENCRVS_INDEX_NAME,\n      target: timestampedBackupIndexName\n    })\n\n    logger.info(`Deleting ${OPENCRVS_INDEX_NAME} index`)\n\n    await client.indices.delete({ index: OPENCRVS_INDEX_NAME })\n  } else {\n    logger.info(`${OPENCRVS_INDEX_NAME} index does not exist`)\n  }\n}",
      "startLine": 142,
      "endLine": 184,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/reindex/reindex.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@20-58",
      "type": "function_declaration",
      "name": "formatSearchParams",
      "text": "async function formatSearchParams(\n  searchPayload: ISearchCriteria,\n  isExternalSearch: boolean\n) {\n  const {\n    createdBy = '',\n    from = 0,\n    size = DEFAULT_SIZE,\n    sortColumn,\n    sortBy,\n    parameters\n  } = searchPayload\n\n  const sort = []\n\n  if (sortBy) {\n    sort.push(...sortBy)\n  } else if (sortColumn) {\n    sort.push({\n      [sortColumn === 'name' ? 'name.keyword' : sortColumn]: {\n        order: searchPayload.sort ?? SortOrder.ASC,\n        unmapped_type: 'keyword'\n      }\n    })\n  }\n  const query = await advancedQueryBuilder(\n    parameters,\n    createdBy,\n    isExternalSearch\n  )\n\n  return {\n    index: OPENCRVS_INDEX_NAME,\n    from,\n    size,\n    query,\n    sort\n  } satisfies SearchRequest\n}",
      "startLine": 20,
      "endLine": 58,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/search/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-58",
      "type": "function_declaration",
      "name": "reindexHandler",
      "text": "async function reindexHandler(\n  _request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const jobId = uuid()\n\n  process.nextTick(async () => {\n    try {\n      indexingStatuses[jobId] = IndexingStatus.started\n\n      await backupLegacyIndex()\n      await reindex()\n      await updateAliases()\n      await prune()\n      indexingStatuses[jobId] = IndexingStatus.completed\n    } catch (error) {\n      logger.error(error)\n      indexingStatuses[jobId] = IndexingStatus.error\n    }\n  })\n\n  return h\n    .response({\n      message: `ElasticSearch reindexing started for job ${jobId}`,\n      status: indexingStatuses[jobId] ?? IndexingStatus.accepted,\n      jobId\n    })\n    .code(202)\n}",
      "startLine": 30,
      "endLine": 58,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/reindex/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@60-101",
      "type": "function_declaration",
      "name": "reindexStatusHandler",
      "text": "async function reindexStatusHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { jobId } = request.params as { jobId: string }\n\n  const status = indexingStatuses[jobId]\n\n  if (!status) {\n    return h\n      .response({\n        message: 'ElasticSearch reindexing timestamp not found'\n      })\n      .code(404)\n  }\n\n  if (status === 'error') {\n    return h\n      .response({\n        message:\n          'Error when reindexing. Refer to search-service logs for details.',\n        status\n      })\n      .code(500)\n  }\n\n  if (status === 'completed') {\n    return h\n      .response({\n        message: `Reindexing for job ${jobId} completed`,\n        status\n      })\n      .code(200)\n  }\n\n  return h\n    .response({\n      message: `ElasticSearch reindexing started for job ${jobId}`,\n      status: indexingStatuses[jobId]\n    })\n    .code(200)\n}",
      "startLine": 60,
      "endLine": 101,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/reindex/handler.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@36-39",
      "type": "method_definition",
      "name": "constructor",
      "text": "constructor(message: string) {\n    super(message)\n    this.name = 'RecordNotFoundError'\n  }",
      "startLine": 36,
      "endLine": 39,
      "parentType": "class_body",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 17,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/records/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@56-98",
      "type": "function_declaration",
      "name": "check",
      "text": "function check(\n    object: Record<string, any>,\n    path: string,\n    rootResource: Record<string, any>\n  ) {\n    for (const key of Object.keys(object)) {\n      if (EXCLUDED_PATHS.includes(path + '.' + key)) {\n        continue\n      }\n      const value = object[key]\n      if (typeof value === 'string') {\n        const collectionReference = /^[A-Z][a-z]+\\/.*/\n        if (collectionReference.test(value)) {\n          if (EXCLUDED_REFERENCES.includes(value)) {\n            continue\n          }\n          const id = value.split('/')[1]\n          try {\n            getFromBundleById(bundle, id)\n          } catch (error) {\n            const dumpFile = join(os.tmpdir(), Date.now() + '.json')\n            writeFileSync(dumpFile, JSON.stringify(bundle))\n            developmentTimeError(\n              'Unresolved reference found: ' + value,\n              'Make sure to add a join to getFHIRBundleWithRecordID query so that all resources of the records are returned',\n              `Resource path: ${path}`,\n              'Bundle',\n              dumpFile\n            )\n            throw error\n          }\n        }\n      } else if (Array.isArray(value)) {\n        for (const item of value) {\n          if (typeof item === 'object') {\n            check(item, path + '.' + key, rootResource)\n          }\n        }\n      } else if (typeof value === 'object') {\n        check(value, path + '.' + key, rootResource)\n      }\n    }\n  }",
      "startLine": 56,
      "endLine": 98,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 16,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/records/service.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@19-30",
      "type": "function_declaration",
      "name": "resolveLocationChildren",
      "text": "async function resolveLocationChildren(locationId: UUID) {\n  const response = await fetch(FETCH_ALL_LOCATION_CHILDREN(locationId))\n  if (!response.ok) {\n    throw new Error(\n      \"Couldn't fetch the children of the location from config: \" +\n        (await response.text())\n    )\n  }\n\n  const locations = (await response.json()) as Array<SavedLocation>\n  return locations.map((location) => location.id)\n}",
      "startLine": 19,
      "endLine": 30,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/search/location.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@43-63",
      "type": "function_declaration",
      "name": "searchAssignment",
      "text": "async function searchAssignment(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const client = getOrCreateClient()\n\n  const payload = request.payload as IAssignmentPayload\n  try {\n    const results = await searchByCompositionId(payload.compositionId, client)\n\n    const result = results?.body?.hits?.hits[0]?._source as\n      | SearchDocument\n      | undefined\n    return h\n      .response({ practitionerId: result?.assignment?.practitionerId })\n      .code(200)\n  } catch (error) {\n    logger.error(`Search/searchAssginment: ${error}`)\n    return internal(error)\n  }\n}",
      "startLine": 43,
      "endLine": 63,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/search/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@65-114",
      "type": "function_declaration",
      "name": "getAllDocumentsHandler",
      "text": "async function getAllDocumentsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const client = getOrCreateClient()\n\n  try {\n    // Before retrieving all documents, we need to check the total count to make sure that the query will no tbe too large\n    // By performing the search, requesting only the first 10 in DEFAULT_SIZE we can get the total count\n    const allDocumentsCountCheck = await client.search(\n      {\n        index: OPENCRVS_INDEX_NAME,\n        body: {\n          query: { match_all: {} },\n          sort: [{ dateOfDeclaration: 'asc' }],\n          size: DEFAULT_SIZE\n        }\n      },\n      {\n        meta: true,\n        ignore: [404]\n      }\n    )\n\n    const count = getSearchTotalCount(allDocumentsCountCheck?.body?.hits?.total)\n    if (count > 5000) {\n      return internal(\n        'Elastic contains over 5000 results.  It is risky to return all without pagination.'\n      )\n    }\n    // If total count is less than 5000, then proceed.\n    const allDocuments = await client.search(\n      {\n        index: OPENCRVS_INDEX_NAME,\n        body: {\n          query: { match_all: {} },\n          sort: [{ dateOfDeclaration: 'asc' }],\n          size: count\n        }\n      },\n      {\n        ignore: [404],\n        meta: true\n      }\n    )\n    return h.response(allDocuments).code(200)\n  } catch (err) {\n    return internal(err)\n  }\n}",
      "startLine": 65,
      "endLine": 114,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/search/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@28-834",
      "type": "function_declaration",
      "name": "advancedQueryBuilder",
      "text": "async function advancedQueryBuilder(\n  params: IAdvancedSearchParam,\n  createdBy: string,\n  isExternalSearch: boolean\n) {\n  params = transformDeprecatedParamsToSupported(params)\n\n  const must: QueryDslQueryContainer[] = []\n  // filter is used for \"pure\" filtering, without caring about scores\n  const filter: QueryDslQueryContainer[] = []\n\n  if (params.name) {\n    must.push({\n      bool: {\n        should: [\n          {\n            bool: {\n              filter: { term: { event: 'birth' } },\n              must: {\n                multi_match: {\n                  query: params.name,\n                  fields: [\n                    'name^3',\n                    'childFirstNames^2',\n                    'childFamilyName',\n                    'informantFirstNames',\n                    'informantFamilyName',\n                    'motherFirstNames',\n                    'motherFamilyName',\n                    'fatherFirstNames',\n                    'fatherFamilyName'\n                  ],\n                  fuzziness: 'AUTO'\n                }\n              }\n            }\n          },\n          {\n            bool: {\n              filter: { term: { event: 'death' } },\n              must: {\n                multi_match: {\n                  query: params.name,\n                  fields: [\n                    'name^3',\n                    'deceasedFirstNames^2',\n                    'deceasedFamilyName',\n                    'informantFirstNames',\n                    'informantFamilyName',\n                    'spouseFirstNames',\n                    'spouseFamilyName'\n                  ],\n                  fuzziness: 'AUTO'\n                }\n              }\n            }\n          },\n          {\n            bool: {\n              filter: { term: { event: 'marriage' } },\n              must: {\n                multi_match: {\n                  query: params.name,\n                  fields: [\n                    'brideFirstNames^6',\n                    'brideFamilyName^6',\n                    'groomFirstNames^6',\n                    'groomFamilyName^6',\n                    'witnessOneFirstNames',\n                    'witnessOneFamilyName',\n                    'witnessTwoFirstNames',\n                    'witnessTwoFamilyName'\n                  ],\n                  fuzziness: 'AUTO'\n                }\n              }\n            }\n          }\n        ],\n        minimum_should_match: 1\n      }\n    })\n  }\n\n  if (params.event && params.event.length > 0) {\n    const shouldMatch: QueryDslQueryContainer[] = []\n    for (const { eventName, jurisdictionId } of params.event) {\n      if (jurisdictionId) {\n        const leafLevelJurisdictionIds = await resolveLocationChildren(\n          jurisdictionId as UUID\n        )\n        shouldMatch.push({\n          bool: {\n            must: [\n              {\n                term: {\n                  'event.keyword': eventName\n                }\n              },\n              {\n                terms: {\n                  'declarationJurisdictionIds.keyword': leafLevelJurisdictionIds\n                }\n              }\n            ]\n          }\n        })\n      } else {\n        shouldMatch.push({\n          term: {\n            'event.keyword': eventName\n          }\n        })\n      }\n    }\n\n    filter.push({\n      bool: {\n        should: shouldMatch\n      }\n    })\n  }\n\n  if (\n    (params.registrationStatuses && params.registrationStatuses.length > 0) ||\n    isExternalSearch\n  ) {\n    must.push({\n      query_string: {\n        default_field: 'type',\n        query: isExternalSearch\n          ? `(${REGISTERED_STATUS}) OR (${CERTIFIED_STATUS}) OR (${ISSUED_STATUS})`\n          : `(${params.registrationStatuses!.join(') OR (')})`\n      }\n    })\n  }\n\n  if (\n    !params.dateOfEventStart &&\n    !params.dateOfEventEnd &&\n    params.dateOfEvent\n  ) {\n    must.push({\n      match: {\n        deathDate: params.dateOfEvent\n      }\n    })\n  }\n\n  if (params.dateOfEventStart || params.dateOfEventEnd) {\n    if (!params.dateOfEventStart) {\n      throw new Error(\n        'dateOfEventStart must be provided along with dateOfEventEnd'\n      )\n    }\n    if (!params.dateOfEventEnd) {\n      throw new Error(\n        'dateOfEventEnd must be provided along with dateOfEventStart'\n      )\n    }\n\n    must.push({\n      range: {\n        deathDate: {\n          gte: params.dateOfEventStart,\n          lte: params.dateOfEventEnd\n        }\n      }\n    })\n  }\n\n  if (\n    !params.dateOfRegistrationStart &&\n    !params.dateOfRegistrationEnd &&\n    params.dateOfRegistration\n  ) {\n    must.push({\n      match: {\n        dateOfDeclaration: params.dateOfRegistration\n      }\n    })\n  }\n\n  if (params.dateOfRegistrationStart || params.dateOfRegistrationEnd) {\n    if (!params.dateOfRegistrationStart) {\n      throw new Error(\n        'dateOfRegistrationStart  must be provided along with dateOfRegistrationEnd'\n      )\n    }\n\n    if (!params.dateOfRegistrationEnd) {\n      throw new Error(\n        'dateOfRegistrationEnd  must be provided along with dateOfRegistrationStart'\n      )\n    }\n\n    must.push({\n      range: {\n        dateOfDeclaration: {\n          gte: params.dateOfRegistrationStart,\n          lte: params.dateOfRegistrationEnd\n        }\n      }\n    })\n  }\n\n  if (params.timePeriodFrom) {\n    must.push({\n      range: {\n        lastStatusChangedAt: {\n          gte: new Date(params.timePeriodFrom).getTime(),\n          lte: Date.now()\n        }\n      }\n    })\n  }\n\n  if (params.declarationLocationId) {\n    must.push({\n      match: {\n        declarationLocationId: {\n          query: params.declarationLocationId,\n          boost: 2.0\n        }\n      }\n    })\n  }\n\n  if (params.declarationJurisdictionId) {\n    const leafLevelJurisdictionIds = await resolveLocationChildren(\n      params.declarationJurisdictionId\n    )\n    must.push({\n      terms: {\n        'declarationJurisdictionIds.keyword': leafLevelJurisdictionIds\n      }\n    })\n  }\n\n  if (params.eventLocationId) {\n    must.push({\n      match: {\n        eventLocationId: params.eventLocationId\n      }\n    })\n  }\n\n  if (params.eventCountry) {\n    must.push({\n      match: {\n        eventCountry: params.eventCountry\n      }\n    })\n  }\n\n  if (params.eventJurisdictionId) {\n    const leafLevelJurisdictionIds = await resolveLocationChildren(\n      params.eventJurisdictionId\n    )\n    must.push({\n      terms: {\n        'eventJurisdictionIds.keyword': leafLevelJurisdictionIds\n      }\n    })\n  }\n\n  if (params.childFirstNames) {\n    must.push({\n      multi_match: {\n        query: params.childFirstNames,\n        fields: ['childFirstNames'],\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.childLastName) {\n    must.push({\n      multi_match: {\n        query: params.childLastName,\n        fields: 'childFamilyName',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.groomFirstNames) {\n    must.push({\n      multi_match: {\n        query: params.groomFirstNames,\n        fields: 'groomFirstNames',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.groomFamilyName) {\n    must.push({\n      multi_match: {\n        query: params.groomFamilyName,\n        fields: 'groomFamilyName',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.brideFirstNames) {\n    must.push({\n      multi_match: {\n        query: params.brideFirstNames,\n        fields: 'brideFirstNames',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.brideFamilyName) {\n    must.push({\n      multi_match: {\n        query: params.brideFamilyName,\n        fields: 'brideFamilyName',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.brideIdentifier) {\n    must.push({\n      match: {\n        brideIdentifier: params.brideIdentifier\n      }\n    })\n  }\n\n  if (params.groomIdentifier) {\n    must.push({\n      match: {\n        groomIdentifier: params.groomIdentifier\n      }\n    })\n  }\n\n  if (params.dateOfMarriage) {\n    must.push({\n      multi_match: {\n        query: params.dateOfMarriage,\n        fields: 'marriageDate'\n      }\n    })\n  }\n\n  if (!params.brideDoBStart && !params.brideDoBEnd && params.brideDoB) {\n    must.push({\n      match: {\n        brideDoB: params.brideDoB\n      }\n    })\n  }\n\n  if (params.brideDoBStart || params.brideDoBEnd) {\n    if (!params.brideDoBStart) {\n      throw new Error('brideDoBStart must be provided along with brideDoBEnd')\n    }\n    if (!params.brideDoBEnd) {\n      throw new Error('brideDoBEnd must be provided along with brideDoBStart')\n    }\n\n    must.push({\n      range: {\n        brideDoB: {\n          gte: params.brideDoBStart,\n          lte: params.brideDoBEnd\n        }\n      }\n    })\n  }\n\n  if (!params.groomDoBStart && !params.groomDoBEnd && params.groomDoB) {\n    must.push({\n      match: {\n        groomDoB: params.groomDoB\n      }\n    })\n  }\n\n  if (params.groomDoBStart || params.groomDoBEnd) {\n    if (!params.groomDoBStart) {\n      throw new Error('groomDoBStart must be provided along with groomDoBEnd')\n    }\n    if (!params.groomDoBEnd) {\n      throw new Error('groomDoBEnd must be provided along with groomDoBStart')\n    }\n\n    must.push({\n      range: {\n        groomDoB: {\n          gte: params.groomDoBStart,\n          lte: params.groomDoBEnd\n        }\n      }\n    })\n  }\n\n  if (!params.childDoBStart && !params.childDoBEnd && params.childDoB) {\n    must.push({\n      match: {\n        childDoB: params.childDoB\n      }\n    })\n  }\n\n  if (params.childDoBStart || params.childDoBEnd) {\n    if (!params.childDoBStart) {\n      throw new Error('childDoBStart must be provided along with childDoBEnd')\n    }\n    if (!params.childDoBEnd) {\n      throw new Error('childDoBEnd must be provided along with childDoBStart')\n    }\n\n    must.push({\n      range: {\n        childDoB: {\n          gte: params.childDoBStart,\n          lte: params.childDoBEnd\n        }\n      }\n    })\n  }\n\n  if (params.childGender) {\n    must.push({\n      match: {\n        gender: params.childGender\n      }\n    })\n  }\n\n  if (params.deceasedFirstNames) {\n    must.push({\n      multi_match: {\n        query: params.deceasedFirstNames,\n        fields: 'deceasedFirstNames',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.deceasedFamilyName) {\n    must.push({\n      multi_match: {\n        query: params.deceasedFamilyName,\n        fields: 'deceasedFamilyName',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.deceasedGender) {\n    must.push({\n      match: {\n        gender: params.deceasedGender\n      }\n    })\n  }\n\n  if (\n    !params.deceasedDoBStart &&\n    !params.deceasedDoBEnd &&\n    params.deceasedDoB\n  ) {\n    must.push({\n      match: {\n        deceasedDoB: params.deceasedDoB\n      }\n    })\n  }\n\n  if (params.deceasedDoBStart || params.deceasedDoBEnd) {\n    if (!params.deceasedDoBStart) {\n      throw new Error(\n        'deceasedDoBStart must be provided along with deceasedDoBEnd'\n      )\n    }\n    if (!params.deceasedDoBEnd) {\n      throw new Error(\n        'deceasedDoBEnd must be provided along with deceasedDoBStart'\n      )\n    }\n\n    must.push({\n      range: {\n        deceasedDoB: {\n          gte: params.deceasedDoBStart,\n          lte: params.deceasedDoBEnd\n        }\n      }\n    })\n  }\n\n  if (params.deceasedIdentifier) {\n    must.push({\n      match: {\n        deceasedIdentifier: params.deceasedIdentifier\n      }\n    })\n  }\n\n  if (params.spouseIdentifier) {\n    must.push({\n      match: {\n        spouseIdentifier: params.spouseIdentifier\n      }\n    })\n  }\n\n  if (params.motherFirstNames) {\n    must.push({\n      multi_match: {\n        query: params.motherFirstNames,\n        fields: 'motherFirstNames',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.motherFamilyName) {\n    must.push({\n      multi_match: {\n        query: params.motherFamilyName,\n        fields: 'motherFamilyName',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (!params.motherDoBStart && !params.motherDoBEnd && params.motherDoB) {\n    must.push({\n      match: {\n        motherDoB: params.motherDoB\n      }\n    })\n  }\n\n  if (params.motherDoBStart || params.motherDoBEnd) {\n    if (!params.motherDoBStart) {\n      throw new Error('motherDoBStart must be provided along with motherDoBEnd')\n    }\n    if (!params.motherDoBEnd) {\n      throw new Error('motherDoBEnd must be provided along with motherDoBStart')\n    }\n\n    must.push({\n      range: {\n        motherDoB: {\n          gte: params.motherDoBStart,\n          lte: params.motherDoBEnd\n        }\n      }\n    })\n  }\n\n  if (params.childIdentifier) {\n    must.push({\n      match: {\n        childIdentifier: params.childIdentifier\n      }\n    })\n  }\n\n  if (params.motherIdentifier) {\n    must.push({\n      match: {\n        motherIdentifier: params.motherIdentifier\n      }\n    })\n  }\n\n  if (params.fatherFirstNames) {\n    must.push({\n      multi_match: {\n        query: params.fatherFirstNames,\n        fields: 'fatherFirstNames',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.fatherFamilyName) {\n    must.push({\n      multi_match: {\n        query: params.fatherFamilyName,\n        fields: 'fatherFamilyName',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (!params.fatherDoBStart && !params.fatherDoBEnd && params.fatherDoB) {\n    must.push({\n      match: {\n        fatherDoB: params.fatherDoB\n      }\n    })\n  }\n\n  if (params.fatherDoBStart || params.fatherDoBEnd) {\n    if (!params.fatherDoBStart) {\n      throw new Error('fatherDoBStart must be provided along with fatherDoBEnd')\n    }\n    if (!params.fatherDoBEnd) {\n      throw new Error('fatherDoBEnd must be provided along with fatherDoBStart')\n    }\n\n    must.push({\n      range: {\n        fatherDoB: {\n          gte: params.fatherDoBStart,\n          lte: params.fatherDoBEnd\n        }\n      }\n    })\n  }\n\n  if (params.fatherIdentifier) {\n    must.push({\n      match: {\n        fatherIdentifier: params.fatherIdentifier\n      }\n    })\n  }\n\n  if (params.informantFirstNames) {\n    must.push({\n      multi_match: {\n        query: params.informantFirstNames,\n        fields: 'informantFirstNames',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (params.informantFamilyName) {\n    must.push({\n      multi_match: {\n        query: params.informantFamilyName,\n        fields: 'informantFamilyName',\n        fuzziness: 'AUTO'\n      }\n    })\n  }\n\n  if (\n    !params.informantDoBStart &&\n    !params.informantDoBEnd &&\n    params.informantDoB\n  ) {\n    must.push({\n      match: {\n        informantDoB: params.informantDoB\n      }\n    })\n  }\n\n  if (params.informantDoBStart || params.informantDoBEnd) {\n    if (!params.informantDoBStart) {\n      throw new Error(\n        'informantDoBStart must be provided along with informantDoBEnd'\n      )\n    }\n    if (!params.informantDoBEnd) {\n      throw new Error(\n        'informantDoBEnd must be provided along with informantDoBStart'\n      )\n    }\n\n    must.push({\n      range: {\n        informantDoB: {\n          gte: params.informantDoBStart,\n          lte: params.informantDoBEnd\n        }\n      }\n    })\n  }\n\n  if (params.informantIdentifier) {\n    must.push({\n      match: {\n        informantIdentifier: params.informantIdentifier\n      }\n    })\n  }\n\n  if (params.contactNumber) {\n    must.push({\n      match: {\n        contactNumber: params.contactNumber\n      }\n    })\n  }\n\n  if (params.contactEmail) {\n    must.push({\n      terms: {\n        'contactEmail.keyword': [params.contactEmail]\n      }\n    })\n  }\n\n  if (params.registrationNumber) {\n    must.push({\n      match: {\n        registrationNumber: params.registrationNumber\n      }\n    })\n  }\n\n  if (params.trackingId) {\n    must.push({\n      match: {\n        trackingId: params.trackingId\n      }\n    })\n  }\n\n  if (params.recordId) {\n    must.push({\n      match: {\n        _id: params.recordId\n      }\n    })\n  }\n\n  if (params.nationalId) {\n    must.push({\n      bool: {\n        should: [\n          {\n            match: {\n              childIdentifier: params.nationalId\n            }\n          },\n          {\n            match: {\n              motherIdentifier: params.nationalId\n            }\n          },\n          {\n            match: {\n              fatherIdentifier: params.nationalId\n            }\n          },\n          {\n            match: {\n              informantIdentifier: params.nationalId\n            }\n          },\n          {\n            match: {\n              deceasedIdentifier: params.nationalId\n            }\n          },\n          {\n            match: {\n              brideIdentifier: params.nationalId\n            }\n          },\n          {\n            match: {\n              groomIdentifier: params.nationalId\n            }\n          },\n          {\n            match: {\n              spouseIdentifier: params.nationalId\n            }\n          }\n        ]\n      }\n    })\n  }\n\n  if (createdBy) {\n    must.push({\n      term: {\n        'createdBy.keyword': {\n          value: createdBy\n        }\n      }\n    })\n  }\n\n  if (params.compositionType) {\n    must.push({\n      terms: {\n        'compositionType.keyword': params.compositionType\n      }\n    })\n  }\n\n  return {\n    bool: {\n      must,\n      filter\n    }\n  } satisfies SearchRequest['query']\n}",
      "startLine": 28,
      "endLine": 834,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/search/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@14-37",
      "type": "function_declaration",
      "name": "transformDeprecatedParamsToSupported",
      "text": "function transformDeprecatedParamsToSupported({\n  eventLocationLevel1,\n  eventLocationLevel2,\n  eventLocationLevel3,\n  eventLocationLevel4,\n  eventLocationLevel5,\n  eventLocationLevel6,\n  eventJurisdictionId,\n  ...params\n}: IAdvancedSearchParam) {\n  let leafLevel = eventLocationLevel1\n\n  if (eventLocationLevel2) leafLevel = eventLocationLevel2\n  if (eventLocationLevel3) leafLevel = eventLocationLevel3\n  if (eventLocationLevel4) leafLevel = eventLocationLevel4\n  if (eventLocationLevel5) leafLevel = eventLocationLevel5\n  if (eventLocationLevel6) leafLevel = eventLocationLevel6\n  if (!eventJurisdictionId) eventJurisdictionId = leafLevel\n\n  return {\n    ...params,\n    eventJurisdictionId\n  }\n}",
      "startLine": 14,
      "endLine": 37,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/features/search/deprecation-support.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@233-235",
      "type": "method_definition",
      "name": "if",
      "text": "if (!isValidOperationHistory(body)) {\n    return\n  }",
      "startLine": 233,
      "endLine": 235,
      "parentType": "ERROR",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 17,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/elasticsearch/utils.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@275-278",
      "type": "method_definition",
      "name": "if",
      "text": "if (body.operationHistories && body.operationHistories.length > 0) {\n    return body.operationHistories[body.operationHistories.length - 1]\n      .operationType\n  }",
      "startLine": 275,
      "endLine": 278,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 5,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/search/src/elasticsearch/utils.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@30-90",
      "type": "function_declaration",
      "name": "createServer",
      "text": "async function createServer() {\n  const server = new Hapi.Server({\n    host: HOST,\n    port: PORT,\n    routes: {\n      cors: { origin: ['*'] },\n      payload: { maxBytes: 52428800, timeout: DEFAULT_TIMEOUT }\n    }\n  })\n\n  await server.register(getPlugins())\n\n  server.auth.strategy('jwt', 'jwt', {\n    key: publicCert,\n    verifyOptions: {\n      algorithms: ['RS256'],\n      issuer: 'opencrvs:auth-service',\n      audience: 'opencrvs:documents-user'\n    },\n    validate: () => ({\n      isValid: true\n    })\n  })\n\n  server.auth.default('jwt')\n\n  const routes = getRoutes()\n  server.route(routes)\n\n  server.ext({\n    type: 'onRequest',\n    method(request: Hapi.Request & { sentryScope?: any }, h) {\n      if (request.payload) {\n        request.sentryScope?.setExtra('payload', request.payload)\n      }\n      return h.continue\n    }\n  })\n\n  async function start() {\n    try {\n      const bucketExists = await defaultMinioBucketExists()\n      if (!bucketExists) {\n        await createDefaultMinioBucket()\n      }\n      server.log('info', `Minio started on ${MINIO_HOST}:${MINIO_PORT}`)\n      await server.start()\n      server.log('info', `Documents server started on ${HOST}:${PORT}`)\n    } catch (error) {\n      server.log('info', `Error creating Minio Bucket! ${error.stack}`)\n      throw error\n    }\n  }\n\n  async function stop() {\n    await server.stop()\n    server.log('info', 'Documents server stopped')\n  }\n\n  return { server, start, stop }\n}",
      "startLine": 30,
      "endLine": 90,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/server.ts",
      "language": "ts"
    },
    {
      "id": "method_definition@61-66",
      "type": "method_definition",
      "name": "method",
      "text": "method(request: Hapi.Request & { sentryScope?: any }, h) {\n      if (request.payload) {\n        request.sentryScope?.setExtra('payload', request.payload)\n      }\n      return h.continue\n    }",
      "startLine": 61,
      "endLine": 66,
      "parentType": "object",
      "childrenTypes": [
        "property_identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 8,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@69-82",
      "type": "function_declaration",
      "name": "start",
      "text": "async function start() {\n    try {\n      const bucketExists = await defaultMinioBucketExists()\n      if (!bucketExists) {\n        await createDefaultMinioBucket()\n      }\n      server.log('info', `Minio started on ${MINIO_HOST}:${MINIO_PORT}`)\n      await server.start()\n      server.log('info', `Documents server started on ${HOST}:${PORT}`)\n    } catch (error) {\n      server.log('info', `Error creating Minio Bucket! ${error.stack}`)\n      throw error\n    }\n  }",
      "startLine": 69,
      "endLine": 82,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@84-87",
      "type": "function_declaration",
      "name": "stop",
      "text": "async function stop() {\n    await server.stop()\n    server.log('info', 'Documents server stopped')\n  }",
      "startLine": 84,
      "endLine": 87,
      "parentType": "statement_block",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 4,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/server.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@21-38",
      "type": "function_declaration",
      "name": "signFileUrl",
      "text": "function signFileUrl(uri: string) {\n  return presignSignatureV4(\n    {\n      headers: {\n        host: MINIO_URL\n      },\n      protocol: MINIO_PROTOCOL,\n      method: 'GET',\n      path: uri\n    },\n    MINIO_ACCESS_KEY,\n    MINIO_SECRET_KEY,\n    undefined,\n    MINIO_BUCKET_REGION,\n    new Date(),\n    MINIO_PRESIGNED_URL_EXPIRY_IN_SECOND\n  )\n}",
      "startLine": 21,
      "endLine": 38,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/minio/sign.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@29-31",
      "type": "function_declaration",
      "name": "defaultMinioBucketExists",
      "text": "async function defaultMinioBucketExists() {\n  return minioClient.bucketExists(MINIO_BUCKET)\n}",
      "startLine": 29,
      "endLine": 31,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/minio/client.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@33-59",
      "type": "function_declaration",
      "name": "createDefaultMinioBucket",
      "text": "async function createDefaultMinioBucket() {\n  const policy = `\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": [\n                \"*\"\n                ]\n            },\n            \"Resource\": [\n                \"arn:aws:s3:::${MINIO_BUCKET}/*\"\n            ],\n            \"Sid\": \"\"\n            }\n        ]\n    }\n    `\n\n  await minioClient.makeBucket(MINIO_BUCKET, MINIO_BUCKET_REGION)\n  return minioClient.setBucketPolicy(MINIO_BUCKET, policy)\n}",
      "startLine": 33,
      "endLine": 59,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/minio/client.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-34",
      "type": "function_declaration",
      "name": "createPreSignedUrl",
      "text": "function createPreSignedUrl(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const fileUri = request.params.fileUri\n  const payload = (\n    fileUri ? { fileUri: `/${MINIO_BUCKET}/${fileUri}` } : request.payload\n  ) as {\n    fileUri: string\n  }\n\n  try {\n    const presignedURL = signFileUrl(payload.fileUri)\n    return h.response({ presignedURL }).code(200)\n  } catch (error) {\n    return h.response(error).code(400)\n  }\n}",
      "startLine": 17,
      "endLine": 34,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/features/getDocument/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@40-55",
      "type": "function_declaration",
      "name": "createPresignedUrlsInBulk",
      "text": "function createPresignedUrlsInBulk(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const payload = BulkPayload.safeParse(request.payload)\n\n  if (!payload.success) {\n    return h.response(payload.error).code(400)\n  }\n\n  const response = payload.data.filenames.map((filename) =>\n    signFileUrl(`/${MINIO_BUCKET}/${filename}`)\n  )\n\n  return h.response(response).code(200)\n}",
      "startLine": 40,
      "endLine": 55,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/features/getDocument/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@17-44",
      "type": "function_declaration",
      "name": "deleteDocument",
      "text": "async function deleteDocument(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const filename = request.params.filename\n\n  const userId = getUserId(request.headers.authorization)\n\n  if (!userId)\n    return Promise.reject(\n      new Error(\n        `request failed: Authorization token is missing or does not contain a valid user ID.`\n      )\n    )\n\n  const stat = await minioClient.statObject(MINIO_BUCKET, filename)\n  const createdBy = stat.metaData['created-by']\n\n  if (createdBy !== userId)\n    return h\n      .response(\n        `request failed: user with id ${userId} does not have permission to delete this document`\n      )\n      .code(403)\n  await minioClient.removeObject(MINIO_BUCKET, filename)\n\n  return h.response().code(204)\n}",
      "startLine": 17,
      "endLine": 44,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/features/deleteDocument/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@51-71",
      "type": "function_declaration",
      "name": "fileUploadHandler",
      "text": "async function fileUploadHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userId = getUserId(request.headers.authorization)\n  const payload = await Payload.parseAsync(request.payload).catch((error) => {\n    logger.error(error)\n    throw badRequest('Invalid payload')\n  })\n\n  const { file, transactionId } = payload\n\n  const extension = file.hapi.filename.split('.').pop()\n  const filename = `${transactionId}.${extension}`\n\n  await minioClient.putObject(MINIO_BUCKET, filename, file, {\n    'created-by': userId\n  })\n\n  return filename\n}",
      "startLine": 51,
      "endLine": 71,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/features/uploadDocument/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@73-83",
      "type": "function_declaration",
      "name": "fileExistsHandler",
      "text": "async function fileExistsHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const { filename } = request.params\n  const exists = await minioClient.statObject(MINIO_BUCKET, filename)\n  if (!exists) {\n    return notFound('File not found')\n  }\n  return h.response().code(200)\n}",
      "startLine": 73,
      "endLine": 83,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/features/uploadDocument/handler.ts",
      "language": "ts"
    },
    {
      "id": "function_declaration@85-116",
      "type": "function_declaration",
      "name": "documentUploadHandler",
      "text": "async function documentUploadHandler(\n  request: Hapi.Request,\n  h: Hapi.ResponseToolkit\n) {\n  const userId = getUserId(request.headers.authorization)\n  if (!userId)\n    return Promise.reject(\n      new Error(\n        `request failed: Authorization token is missing or does not contain a valid user ID.`\n      )\n    )\n  const payload = request.payload as IDocumentPayload\n  const ref = uuid()\n  try {\n    const base64String = payload.fileData.split(',')[1]\n    const base64Decoded = Buffer.from(base64String, 'base64')\n    const fileType = (await fromBuffer(base64Decoded)) as IFileInfo\n    const generateFileName = `${ref}.${fileType.ext}`\n\n    await minioClient.putObject(MINIO_BUCKET, generateFileName, base64Decoded, {\n      ...payload.metaData,\n      'content-type': fileType.mime,\n      'created-by': userId\n    })\n\n    return h\n      .response({ refUrl: `/${MINIO_BUCKET}/${generateFileName}` })\n      .code(200)\n  } catch (error) {\n    return Promise.reject(new Error(`request failed: ${error.message}`))\n  }\n}",
      "startLine": 85,
      "endLine": 116,
      "parentType": "export_statement",
      "childrenTypes": [
        "identifier",
        "formal_parameters",
        "statement_block"
      ],
      "depth": 2,
      "filePath": "codebases/opencrvs/opencrvs-core/packages/documents/src/features/uploadDocument/handler.ts",
      "language": "ts"
    }
  ]